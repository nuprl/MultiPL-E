language: cpp
name: HumanEval_120_maximum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n     \
    \   for (long j = i - 1; j >= 0; j--) {\n            if (arr[j] > max_val) {\n\
    \                max_val = arr[j];\n                max_idx = j;\n           \
    \ }\n        }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8r5pwiyh: /tmp/tmp8r5pwiyh.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_index = 0;\n  \
    \  long max_value = arr[0];\n    long max_count = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long temp = 0;\n    long count = 0;\n    long sum = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcsfw6n2j: /tmp/tmpcsfw6n2j.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> max(n);\n    long max_idx = 0;\n\
    \    long max_val = arr[0];\n    long max_idx2 = 0;\n    long max_val2 = 0;\n\
    \    long max_idx3 = 0;\n    long max_val3 = 0;\n    long max_idx4 = 0;\n    long\
    \ max_val4 = 0;\n    long max_idx5 = 0;\n    long max_val5 = 0;\n    long max_idx6\
    \ = 0;\n    long max_val6 = 0;\n    long max_idx7 = 0;\n    long max_val7 = 0;\n\
    \    long max_idx8 = 0;\n    long max_val8 = 0;\n    long max_idx9 = 0;\n    long\
    \ max_val9 = 0;\n    long max_idx10 = 0;\n    long max_val10 = 0;\n    long max_idx11\
    \ = 0;\n    long max_val11 = 0;\n    long max_idx12 = 0;\n    long max_val12 =\
    \ 0;\n    long max_idx13 = 0;\n    long max_val13 = 0;\n    long max_idx14 = 0;\n\
    \    long max_val14 = 0;\n    long max_idx15 = 0;\n    long max_val15 = 0;\n \
    \   long max_idx16 = 0;\n    long max_val16 = 0;\n    long max_idx17 = 0;\n  \
    \  long max_val17 = 0;\n    long max_idx18 = 0;\n    long max_val18 = 0;\n   \
    \ long max_idx19 = 0;\n    long max_val19 = 0;\n    long max_idx20 = 0;\n    long\
    \ max_val20 = 0;\n    long max_idx21 = 0;\n    long max_val21 = 0;\n    long max_idx22\
    \ = 0;\n    long max_val22 = 0;\n    long max_idx23 = 0;\n    long max_val23 =\
    \ 0;\n    long max_idx24 = 0;\n    long max_val24 = 0;\n    long max_idx25 = 0;\n\
    \    long max_val25 = 0;\n    long max_idx26 = 0;\n    long max_val26 = 0;\n \
    \   long max_idx27 = 0;\n    long max_val27 = 0;\n    long max_idx28 = 0;\n  \
    \  long max_val28 = 0;\n    long max_idx29 = 0;\n    long max_val29 = 0;\n   \
    \ long max_idx30 = 0;\n    long max_val30 = 0;\n    long max_idx31 = 0;\n    long\
    \ max_val31 = 0;\n    long max_idx32 = 0;\n    long max_val32 = 0;\n    long max_idx33\
    \ = 0;\n    long max_val33 = 0;\n    long max_idx34 = 0;\n    long max_val34 =\
    \ 0;\n    long max_idx35 = 0;\n    long max_val35 = 0;\n    long max_idx36 = 0;\n\
    \    long max_val36 = 0;\n    long \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpleawgw13.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpleawgw13.cpp:88:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpleawgw13.cpp:88:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max = 0;\n    long index = 0;\n    for\
    \ (auto i : arr) {\n        if (index == k) {\n            break;\n        }\n\
    \        if (i > max) {\n            max = i;\n            index = k + 1;\n  \
    \      }\n    }\n    for (auto i : arr) {\n        if (index == k) {\n       \
    \     break;\n        }\n        if (i > max) {\n            max = i;\n      \
    \      index = k + 1;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (index == k) {\n            break;\n        }\n        if (i > max) {\n    \
    \        max = i;\n            index = k + 1;\n        }\n    }\n    for (auto\
    \ i : arr) {\n        if (index == k) {\n            break;\n        }\n     \
    \   if (i > max) {\n            max = i;\n            index = k + 1;\n       \
    \ }\n    }\n    for (auto i : arr) {\n        if (index == k) {\n            break;\n\
    \        }\n        if (i > max) {\n            max = i;\n            index =\
    \ k + 1;\n        }\n    }\n    for (auto i : arr) {\n        if (index == k)\
    \ {\n            break;\n        }\n        if (i > max) {\n            max =\
    \ i;\n            index = k + 1;\n        }\n    }\n    for (auto i : arr) {\n\
    \        if (index == k) {\n            break;\n        }\n        if (i > max)\
    \ {\n            max = i;\n            index = k + 1;\n        }\n    }\n    for\
    \ (auto i : arr) {\n        if (index == k) {\n            break;\n        }\n\
    \        if (i > max) {\n            max = i;\n            index = k + 1;\n  \
    \      }\n    }\n    for (auto i : arr) {\n        if (index == k) {\n       \
    \     break;\n        }\n        if (i > max) {\n            max = i;\n      \
    \      index = k + 1;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (index == k) {\n            break;\n        }\n        if (i > max) {\n    \
    \        max = i;\n            index = k + 1;\n        }\n    }\n    for (auto\
    \ i : arr) {\n        if (index == k) {\n            break;\n        }\n     \
    \   if (i > max) {\n            max = i;\n            index = k + 1;\n       \
    \ }\n    }\n    for (auto i : arr) {\n        if (index == k) {\n            break;\n\
    \        }\n        if (i > max) {\n            max = i;\n            index =\
    \ k + 1;\n        }\n    }\n    for (auto i : arr) {\n        if (index == k)\
    \ {\n            break;\n        }\n        if (i > max) {\n            max =\
    \ i;\n            index = k + 1;\n        }\n    }\n    for (auto i : arr) {\n\
    \        if (index == k) {\n            break;\n        }\n        if (i > max)\
    \ {\n            max = i;\n            index = k + 1;\n        }\n    }\n    for\
    \ (auto i : arr) {\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbg06vkem.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbg06vkem.cpp:144:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  144 | int main() {\n     \
    \ |            ^\n/tmp/tmpbg06vkem.cpp:157:1: error: expected \u2018}\u2019 at\
    \ end of input\n  157 | }\n      | ^\n/tmp/tmpbg06vkem.cpp:12:58: note: to match\
    \ this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpbg06vkem.cpp:157:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  157 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoaj1ria9: /tmp/tmpoaj1ria9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_val = arr[0];\n\
    \    std::vector<long> ans;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    long count\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == max_val) {\n \
    \           count++;\n        }\n    }\n    while(count < k) {\n        ans.push_back(max_val);\n\
    \        max_val++;\n        count = 0;\n        for(long i = 0; i < n; i++) {\n\
    \            if(arr[i] == max_val) {\n                count++;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long maxVal = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > maxVal) {\n \
    \           maxVal = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n     \
    \   }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpty6mm813: /tmp/tmpty6mm813.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long max_val = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_val) {\n            max.push_back(arr[i]);\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp595jkej1: /tmp/tmp595jkej1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        result.push_back(max_val);\n    \
    \    max_idx = max_idx + 1;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5cispb3: /tmp/tmpo5cispb3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while (i < n) {\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < k) {\n        if (max < arr[j]) {\n            ans.push_back(max);\n\
    \            max = arr[j];\n        }\n        j++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_hr89q5x: /tmp/tmp_hr89q5x.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = m; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgf0qhlnq: /tmp/tmpgf0qhlnq.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_val = arr[0];\n\
    \    long max_index = 0;\n    std::vector<long> max_list(n);\n    long i = 0;\n\
    \    long j = 0;\n    while (i < n) {\n        if (arr[i] > max_val) {\n     \
    \       max_val = arr[i];\n            max_index = i;\n        }\n        i++;\n\
    \    }\n    while (j < n) {\n        if (arr[j] > max_val) {\n            max_val\
    \ = arr[j];\n            max_index = j;\n        }\n        j++;\n    }\n    max_list[0]\
    \ = max_val;\n    max_list[1] = max_index;\n    long max_index2 = 0;\n    long\
    \ max_val2 = 0;\n    while (j < n) {\n        if (arr[j] > max_val) {\n      \
    \      max_val = arr[j];\n            max_index2 = j;\n        }\n        j++;\n\
    \    }\n    max_list[2] = max_val;\n    max_list[3] = max_index2;\n    long max_index3\
    \ = 0;\n    long max_val3 = 0;\n    while (i < n) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_index3 = i;\n        }\n \
    \       i++;\n    }\n    max_list[4] = max_val;\n    max_list[5] = max_index3;\n\
    \    long max_index4 = 0;\n    long max_val4 = 0;\n    while (i < n) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_index4\
    \ = i;\n        }\n        i++;\n    }\n    max_list[6] = max_val;\n    max_list[7]\
    \ = max_index4;\n    long max_index5 = 0;\n    long max_val5 = 0;\n    while (i\
    \ < n) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_index5 = i;\n        }\n        i++;\n    }\n    max_list[8] = max_val;\n\
    \    max_list[9] = max_index5;\n    long max_index6 = 0;\n    long max_val6 =\
    \ 0;\n    while (i < n) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_index6 = i;\n        }\n        i++;\n    }\n   \
    \ max_list[10] = max_val;\n    max_list[11] = max_index6;\n    long max_index7\
    \ = 0;\n    long max_val7 = 0;\n    while (i < n) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_index7 = i;\n        }\n \
    \       i++;\n    }\n    max_list[12] = max_val;\n    max_list[13] = max_index7;\n\
    \    long max_index8 = 0;\n    long max_val8 = 0;\n    while (i < n) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_index8\
    \ = i;\n        }\n        i++;\n    }\n    max_list[14] = max_val;\n    max_list[15]\
    \ = max_index8;\n    long max_index\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7y0zy4lq.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp7y0zy4lq.cpp:114:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp7y0zy4lq.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp06q3469p: /tmp/tmp06q3469p.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = m; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgf0qhlnq: /tmp/tmpgf0qhlnq.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ cur = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n            cur = i;\n        }\n    }\n\
    \    ans.push_back(max);\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > max) {\n            max = arr[i];\n            cur = i;\n    \
    \    }\n        if (cur != i) {\n            ans.push_back(max);\n           \
    \ max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkm9cf705: /tmp/tmpkm9cf705.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long cur = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = cur + 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            ans.push_back(i);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2l2licif: /tmp/tmp2l2licif.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            mid = i;\n   \
    \     }\n        if (arr[i] < min) {\n            min = arr[i];\n            mid\
    \ = i;\n        }\n    }\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n\
    \    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n\
    \    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n\
    \    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n\
    \    long mid12 = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid\
    \ * 13;\n    long mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17\
    \ = mid * 16;\n    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long\
    \ mid20 = mid * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n\
    \    long mid23 = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid\
    \ * 24;\n    long mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28\
    \ = mid * 27;\n    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long\
    \ mid31 = mid * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n\
    \    long mid34 = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid\
    \ * 35;\n    long mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39\
    \ = mid * 38;\n    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long\
    \ mid42 = mid * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n\
    \    long mid45 = mid * 44;\n    long mid46 = \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc60hnrt_.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpc60hnrt_.cpp:74:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpc60hnrt_.cpp:74:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max = 0;\n    long index = 0;\n    for\
    \ (auto i : arr) {\n        if (index == k) {\n            break;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n        index++;\n \
    \   }\n    for (auto i : arr) {\n        if (index == k) {\n            break;\n\
    \        }\n        if (i < max) {\n            result.push_back(i);\n       \
    \ }\n        index++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppa8llj4b: /tmp/tmppa8llj4b.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> res;\n    long max = 0;\n    long curr = 0;\n    long i\
    \ = 0;\n    while (i < k) {\n        max = std::max(max, arr[i]);\n        i++;\n\
    \    }\n    while (i < arr.size()) {\n        max = std::max(max, arr[i]);\n \
    \       i++;\n    }\n    while (i < arr.size()) {\n        curr = std::max(max,\
    \ arr[i]);\n        res.push_back(curr);\n        i++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmps_axp9x5: /tmp/tmps_axp9x5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_num = arr[0];\n\
    \    long min_num = arr[0];\n    long mid = 0;\n    long cnt = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        if (arr[i] > max_num) {\n            max_num =\
    \ arr[i];\n            mid = i;\n        }\n        if (arr[i] < min_num) {\n\
    \            min_num = arr[i];\n            mid = i;\n        }\n    }\n    long\
    \ mid1 = mid - k;\n    long mid2 = mid + k;\n    for (long i = mid1; i <= mid2;\
    \ i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpeucz6vla: /tmp/tmpeucz6vla.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    long cnt = 0;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n         \
    \   cnt += 1;\n        }\n    }\n    ans.push_back(arr[arr.size() - 1]);\n   \
    \ ans.push_back(cnt);\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyz9q4_d4: /tmp/tmpyz9q4_d4.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long ans = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long min = 0;\n    long long\
    \ mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long min = 0;\n    long long\
    \ mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long min = 0;\n    long long\
    \ mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long min = 0;\n    long long\
    \ mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long min = 0;\n    long long\
    \ mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long min = 0;\n    long long mid = 0;\n    \n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mbtsmcz.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1mbtsmcz.cpp:21:15: error: declaration of \u2018\
    long long int k\u2019 shadows a parameter\n   21 |     long long k = 0;\n    \
    \  |               ^\n/tmp/tmp1mbtsmcz.cpp:22:15: error: redeclaration of \u2018\
    long long int count\u2019\n   22 |     long long count = 0;\n      |         \
    \      ^~~~~\n/tmp/tmp1mbtsmcz.cpp:18:15: note: \u2018long long int count\u2019\
    \ previously declared here\n   18 |     long long count = 0;\n      |        \
    \       ^~~~~\n/tmp/tmp1mbtsmcz.cpp:23:15: error: redeclaration of \u2018long\
    \ long int max\u2019\n   23 |     long long max = 0;\n      |               ^~~\n\
    /tmp/tmp1mbtsmcz.cpp:15:15: note: \u2018long long int max\u2019 previously declared\
    \ here\n   15 |     long long max = 0;\n      |               ^~~\n/tmp/tmp1mbtsmcz.cpp:24:15:\
    \ error: redeclaration of \u2018long long int min\u2019\n   24 |     long long\
    \ min = 0;\n      |               ^~~\n/tmp/tmp1mbtsmcz.cpp:16:15: note: \u2018\
    long long int min\u2019 previously declared here\n   16 |     long long min =\
    \ 0;\n      |               ^~~\n/tmp/tmp1mbtsmcz.cpp:25:15: error: redeclaration\
    \ of \u2018long long int mid\u2019\n   25 |     long long mid = 0;\n      |  \
    \             ^~~\n/tmp/tmp1mbtsmcz.cpp:17:15: note: \u2018long long int mid\u2019\
    \ previously declared here\n   17 |     long long mid = 0;\n      |          \
    \     ^~~\n/tmp/tmp1mbtsmcz.cpp:26:15: error: redeclaration of \u2018long long\
    \ int count\u2019\n   26 |     long long count = 0;\n      |               ^~~~~\n\
    /tmp/tmp1mbtsmcz.cpp:18:15: note: \u2018long long int count\u2019 previously declared\
    \ here\n   18 |     long long count = 0;\n      |               ^~~~~\n/tmp/tmp1mbtsmcz.cpp:27:15:\
    \ error: redeclaration of \u2018long long int max\u2019\n   27 |     long long\
    \ max = 0;\n      |               ^~~\n/tmp/tmp1mbtsmcz.cpp:15:15: note: \u2018\
    long long int max\u2019 previously declared here\n   15 |     long long max =\
    \ 0;\n      |               ^~~\n/tmp/tmp1mbtsmcz.cpp:28:15: error: redeclaration\
    \ of \u2018long long int min\u2019\n   28 |     long long min = 0;\n      |  \
    \             ^~~\n/tmp"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long cur = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max && arr[i]\
    \ != max) {\n            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(arr[cur]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg58475bn: /tmp/tmpg58475bn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1cxqfb: /tmp/tmp4s1cxqfb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ index = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n   \
    \         index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n    for(long\
    \ i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n            index = i;\n        }\n    }\n\
    \    ans.push_back(arr[index]);\n    for(long i = index + 1; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n  \
    \  for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n  \
    \      if(sum > max) {\n            max = sum;\n            index = i;\n     \
    \   }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i <\
    \ arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n      \
    \      max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbot4q27d.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbot4q27d.cpp:109:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  109 | int main() {\n     \
    \ |            ^\n/tmp/tmpbot4q27d.cpp:122:1: error: expected \u2018}\u2019 at\
    \ end of input\n  122 | }\n      | ^\n/tmp/tmpbot4q27d.cpp:12:58: note: to match\
    \ this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpbot4q27d.cpp:122:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  122 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx]) {\n            ans.push_back(arr[i]);\n\
    \            idx = i;\n        }\n    }\n    ans.push_back(arr[idx]);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg76jqhvc: /tmp/tmpg76jqhvc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> result;\n    long max = 0;\n    long\
    \ index = 0;\n    long size = arr.size();\n    for(long i = 0; i < size; i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    result.push_back(max);\n    for(long i = index;\
    \ i < size; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n  \
    \          result.push_back(i);\n        }\n    }\n    for(long i = index; i <\
    \ k; i++) {\n        result.push_back(arr[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjv39xkcg: /tmp/tmpjv39xkcg.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n        \
    \    max = arr[mid];\n            j = mid;\n        } else {\n            i =\
    \ mid + 1;\n        }\n    }\n    while(j < size) {\n        mid = (i + j)/2;\n\
    \        if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(i < size)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid;\n        } else {\n            j = mid + 1;\n\
    \        }\n    }\n    while(j < size) {\n        mid = (i + j)/2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(i < size) {\n     \
    \   mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            i = mid;\n        } else {\n            j = mid + 1;\n        }\n\
    \    }\n    while(j < size) {\n        mid = (i + j)/2;\n        if(arr[mid] >\
    \ max) {\n            max = arr[mid];\n            j = mid;\n        } else {\n\
    \            i = mid + 1;\n        }\n    }\n    while(i < size) {\n        mid\
    \ = (i + j)/2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n  \
    \          i = mid;\n        } else {\n            j = mid + 1;\n        }\n \
    \   }\n    while(j < size) {\n        mid = (i + j)/2;\n        if(arr[mid] >\
    \ max) {\n            max = arr[mid];\n            j = mid;\n        } else {\n\
    \            i = mid + 1;\n        }\n    }\n    while(i < size) {\n        mid\
    \ = (i + j)/2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n  \
    \          i = mid;\n        } else {\n            j = mid + 1;\n        }\n \
    \   }\n    while(j < size) {\n        mid = (i + j)/2;\n        if(arr[mid] >\
    \ max) {\n            max = arr[mid];\n            j = mid;\n        } else {\n\
    \            i = mid + 1;\n        }\n    }\n    while(i < size) {\n        mid\
    \ = (i + j)/2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n  \
    \          i = mid;\n        } else {\n            j = mid + 1;\n        }\n \
    \   }\n    while(\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6feyukaq.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6feyukaq.cpp:120:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  120 | }\n      | ^\n/tmp/tmp6feyukaq.cpp:119:11:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  119 |     while(\n\
    \      |          ~^\n      |           )\n  120 | }\n      | ~          \n/tmp/tmp6feyukaq.cpp:120:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  120 | }\n \
    \     | ^\n/tmp/tmp6feyukaq.cpp:120:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > arr[idx]) {\n            ans.push_back(arr[i]);\n  \
    \          idx = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzkbwhb6p: /tmp/tmpzkbwhb6p.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ min = 0;\n    long mid = 0;\n    long sum = 0;\n    long count = 0;\n    long\
    \ sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long\
    \ sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long\
    \ sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n\
    \    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17\
    \ = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long\
    \ sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n\
    \    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28\
    \ = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long\
    \ sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n\
    \    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39\
    \ = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long\
    \ sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n\
    \    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50\
    \ = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long\
    \ sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n\
    \    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61\
    \ = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long\
    \ sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n\
    \    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72\
    \ = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long\
    \ sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\
    \    long sum80 = 0;\n    long sum81 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5864sl8n: /tmp/tmp5864sl8n.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx; i < k; i++)\
    \ {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkg4h87vr: /tmp/tmpkg4h87vr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    long max_cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n            max_cnt = 0;\n        }\n        if (arr[i] ==\
    \ max_val) {\n            max_cnt++;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    ans.push_back(max_idx);\n    ans.push_back(max_cnt);\n    for (long i = n;\
    \ i > 0; i--) {\n        if (ans[2] > ans[3]) {\n            ans.push_back(ans[1]);\n\
    \            ans.push_back(ans[0]);\n            ans.push_back(ans[2]);\n    \
    \    }\n        if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n \
    \           ans.push_back(ans[0]);\n            ans.push_back(ans[2]);\n     \
    \   }\n        if (ans[2] > ans[3]) {\n            ans.push_back(ans[1]);\n  \
    \          ans.push_back(ans[3]);\n            ans.push_back(ans[0]);\n      \
    \  }\n        if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n   \
    \         ans.push_back(ans[1]);\n            ans.push_back(ans[0]);\n       \
    \ }\n        if (ans[2] > ans[3]) {\n            ans.push_back(ans[1]);\n    \
    \        ans.push_back(ans[3]);\n            ans.push_back(ans[2]);\n        }\n\
    \        if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n        \
    \    ans.push_back(ans[1]);\n            ans.push_back(ans[2]);\n        }\n \
    \       if (ans[2] > ans[3]) {\n            ans.push_back(ans[1]);\n         \
    \   ans.push_back(ans[3]);\n            ans.push_back(ans[2]);\n        }\n  \
    \      if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n          \
    \  ans.push_back(ans[1]);\n            ans.push_back(ans[2]);\n        }\n   \
    \     if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n           \
    \ ans.push_back(ans[1]);\n            ans.push_back(ans[2]);\n        }\n    \
    \    if (ans[2] > ans[3]) {\n            ans.push_back(ans[3]);\n            ans.push_back(ans[1]);\n\
    \            ans.push_back(ans[2]);\n        }\n        if (ans[2] > ans[3]) {\n\
    \            ans.push_back(ans[3]);\n            ans.push_back(ans[1]);\n    \
    \        ans.push_back(ans[2]);\n        }\n        if (ans[2] > ans[3]) {\n \
    \           ans.push_back(ans[3]);\n            an\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuenx1gax.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpuenx1gax.cpp:89:13: error: \u2018an\u2019 was\
    \ not declared in this scope; did you mean \u2018ans\u2019?\n   89 |         \
    \    an\n      |             ^~\n      |             ans\n/tmp/tmpuenx1gax.cpp:91:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   91 | int main() {\n      |            ^\n/tmp/tmpuenx1gax.cpp:104:1: error:\
    \ expected \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpuenx1gax.cpp:31:34:\
    \ note: to match this \u2018{\u2019\n   31 |     for (long i = n; i > 0; i--)\
    \ {\n      |                                  ^\n/tmp/tmpuenx1gax.cpp:104:1: error:\
    \ expected \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpuenx1gax.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpuenx1gax.cpp:104:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  104 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++){\n        long curr = arr[i];\n        for(long j = i; j\
    \ < arr.size(); j++){\n            if(arr[j] > curr){\n                curr =\
    \ arr[j];\n            }\n        }\n        ans.push_back(curr);\n        if(curr\
    \ > max){\n            max = curr;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzdtxb_lx: /tmp/tmpzdtxb_lx.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long mid = 0;\n    while(i < arr.size() && j <\
    \ k) {\n        if(arr[i] > arr[j]) {\n            max = arr[i];\n           \
    \ mid = i;\n            i = i + 1;\n        } else {\n            max = arr[j];\n\
    \            mid = j;\n            j = j + 1;\n        }\n    }\n    while(i <\
    \ arr.size()) {\n        max = arr[i];\n        mid = i;\n        i = i + 1;\n\
    \    }\n    while(j < k) {\n        max = arr[j];\n        mid = j;\n        j\
    \ = j + 1;\n    }\n    ans.push_back(max);\n    while(mid+1 < arr.size()) {\n\
    \        ans.push_back(arr[mid+1]);\n        mid = mid+1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvb1sce58: /tmp/tmpvb1sce58.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long max = 0;\n    long index = 0;\n    long count\
    \ = 0;\n    long sum = 0;\n    long temp = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n       \
    \ if(arr[i] == max) {\n            count++;\n            sum += arr[i];\n    \
    \    }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] ==\
    \ max) {\n            temp = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(max);\n    ans.push_back(sum);\n    ans.push_back(count);\n\
    \    ans.push_back(temp);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpevlfv5j8: /tmp/tmpevlfv5j8.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long max_val = arr[0];\n    std::vector<long> max_val_vec;\n\
    \    std::vector<long> max_val_vec_temp;\n    std::vector<long> max_val_vec_temp2;\n\
    \    std::vector<long> max_val_vec_temp3;\n    std::vector<long> max_val_vec_temp4;\n\
    \    std::vector<long> max_val_vec_temp5;\n    std::vector<long> max_val_vec_temp6;\n\
    \    std::vector<long> max_val_vec_temp7;\n    std::vector<long> max_val_vec_temp8;\n\
    \    std::vector<long> max_val_vec_temp9;\n    std::vector<long> max_val_vec_temp10;\n\
    \    std::vector<long> max_val_vec_temp11;\n    std::vector<long> max_val_vec_temp12;\n\
    \    std::vector<long> max_val_vec_temp13;\n    std::vector<long> max_val_vec_temp14;\n\
    \    std::vector<long> max_val_vec_temp15;\n    std::vector<long> max_val_vec_temp16;\n\
    \    std::vector<long> max_val_vec_temp17;\n    std::vector<long> max_val_vec_temp18;\n\
    \    std::vector<long> max_val_vec_temp19;\n    std::vector<long> max_val_vec_temp20;\n\
    \    std::vector<long> max_val_vec_temp21;\n    std::vector<long> max_val_vec_temp22;\n\
    \    std::vector<long> max_val_vec_temp23;\n    std::vector<long> max_val_vec_temp24;\n\
    \    std::vector<long> max_val_vec_temp25;\n    std::vector<long> max_val_vec_temp26;\n\
    \    std::vector<long> max_val_vec_temp27;\n    std::vector<long> max_val_vec_temp28;\n\
    \    std::vector<long> max_val_vec_temp29;\n    std::vector<long> max_val_vec_temp30;\n\
    \    std::vector<long> max_val_vec_temp31;\n    std::vector<long> max_val_vec_temp32;\n\
    \    std::vector<long> max_val_vec_temp33;\n    std::vector<long> max_val_vec_temp34;\n\
    \    std::vector<long> max_val_vec_temp35;\n    std::vector<long> max_val_vec_temp36;\n\
    \    std::vector<long> max_val_vec_temp37;\n    std::vector<long> max_val_vec_temp38;\n\
    \    std::vector<long> max_val_vec_temp39;\n    std::vector<long> max_val_vec_temp40;\n\
    \    std::vector<long> max_val_vec_temp41;\n    std::vector<long> max_val_vec_temp42;\n\
    \    std::vector<long> max_val_vec_temp43;\n    std::vector<long> max_val_vec_temp44;\n\
    \    std::vector<long> max_val_vec_temp45;\n    std::vector<long> max_val_vec_temp46;\n\
    \    std::vector<\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcbeai1fg.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcbeai1fg.cpp:62:16: error: template argument\
    \ 1 is invalid\n   62 |     std::vector<\n      |                ^\n/tmp/tmpcbeai1fg.cpp:62:16:\
    \ error: template argument 2 is invalid\n/tmp/tmpcbeai1fg.cpp:63:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpcbeai1fg.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    long max = 0;\n    long temp = 0;\n    std::vector<long>\
    \ arr2;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            temp = arr[i];\n           \
    \ arr2.push_back(temp);\n        }\n    }\n    for(long i = 0; i < k; i++) {\n\
    \        arr2.push_back(arr2[0]);\n    }\n    return arr2;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long index = 0;\n    long long count = 0;\n    long long sum = 0;\n\
    \    long long sumOfSquares = 0;\n    long long sumOfSquareOfSum = 0;\n    long\
    \ long sumOfSquareOfSumOfSquares = 0;\n    long long sumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMax = 0;\n    long long maxIndexOfMaxOfSum = 0;\n\
    \    long long maxIndexOfMaxOfSumOfSquares = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquares = 0;\n    long\
    \ long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSum = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n    long long maxIndexOfMaxOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpq82jyad0: /tmp/tmpq82jyad0.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrrnxt8y: /tmp/tmpzrrnxt8y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_val_k = max_val / k;\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] / k > max_val_k)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoikr13aw: /tmp/tmpoikr13aw.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long mid = 0;\n    long n = arr.size();\n    long count = 0;\n    while\
    \ (i < n) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n     \
    \       max = arr[mid];\n            j = mid;\n        } else {\n            i\
    \ = mid + 1;\n        }\n    }\n    mid = (i + j) / 2;\n    while (j < n) {\n\
    \        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    mid = (i + j) / 2;\n    while (j < n) {\n        mid\
    \ = (i + j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    ans.push_back(max);\n    while (j < n) {\n        mid = (i +\
    \ j) / 2;\n        ans.push_back(arr[mid]);\n        j = mid + 1;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > result[result.size()\
    \ - 1]) {\n            result.push_back(arr[i]);\n        }\n    }\n    result.push_back(arr[arr.size()\
    \ - 1]);\n    for(long i = result.size() - 2; i >= 0; i--) {\n        if(result[i]\
    \ > result[i + 1]) {\n            std::swap(result[i], result[i + 1]);\n     \
    \   }\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwqhi_m2r: /tmp/tmpwqhi_m2r.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > arr[max_idx]) {\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(arr[max_idx]);\n\
    \    long max_idx = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n \
    \       if (arr[i] > arr[max_idx]) {\n            max_idx = i;\n        }\n  \
    \  }\n    ans.push_back(arr[max_idx]);\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpabg_171o.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpabg_171o.cpp:24:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   24 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpabg_171o.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpabg_171o.cpp:31:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   31 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmpabg_171o.cpp:16:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   16 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx / 2;\n    }\n    while(ans.size()\
    \ > k) {\n        ans.pop_back();\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long max_val = arr[0];\n    std::vector<long> max_arr;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        max_arr.push_back(max_val);\n    }\n    return max_arr;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpowab6g0r: /tmp/tmpowab6g0r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long curr_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx]) {\n       \
    \     ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpl26y8zxn: /tmp/tmpl26y8zxn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long curr_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx]) {\n       \
    \     ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpl26y8zxn: /tmp/tmpl26y8zxn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long curr = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long n = arr.size();\n    long m = n;\n    while(i\
    \ < n) {\n        while(j < m && arr[j] < arr[j+1]) {\n            j++;\n    \
    \    }\n        if(j == m) {\n            ans.push_back(arr[i]);\n           \
    \ curr++;\n            i++;\n            j = 0;\n        }\n        else {\n \
    \           max = max(max, arr[i]);\n            curr++;\n        }\n    }\n \
    \   while(j < m) {\n        ans.push_back(arr[j]);\n        j++;\n    }\n    while(i\
    \ < n) {\n        ans.push_back(arr[i]);\n        i++;\n    }\n    while(j < m)\
    \ {\n        ans.push_back(arr[j]);\n        j++;\n    }\n    while(i < n) {\n\
    \        ans.push_back(arr[i]);\n        i++;\n    }\n    while(j < m) {\n   \
    \     ans.push_back(arr[j]);\n        j++;\n    }\n    while(i < n) {\n      \
    \  ans.push_back(arr[i]);\n        i++;\n    }\n    while(j < m) {\n        ans.push_back(arr[j]);\n\
    \        j++;\n    }\n    while(i < n) {\n        ans.push_back(arr[i]);\n   \
    \     i++;\n    }\n    while(j < m) {\n        ans.push_back(arr[j]);\n      \
    \  j++;\n    }\n    while(i < n) {\n        ans.push_back(arr[i]);\n        i++;\n\
    \    }\n    while(j < m) {\n        ans.push_back(arr[j]);\n        j++;\n   \
    \ }\n    while(i < n) {\n        ans.push_back(arr[i]);\n        i++;\n    }\n\
    \    while(j < m) {\n        ans.push_back(arr[j]);\n        j++;\n    }\n   \
    \ while(i < n) {\n        ans.push_back(arr[i]);\n        i++;\n    }\n    while(j\
    \ < m) {\n        ans.push_back(arr[j]);\n        j++;\n    }\n    while(i < n)\
    \ {\n        ans.push_back(arr[i]);\n        i++;\n    }\n    while(j < m) {\n\
    \        ans.push_back(arr[j]);\n        j++;\n    }\n    while(i < n) {\n   \
    \     ans.push_back(arr[i]);\n        i++;\n    }\n    while(j < m) {\n      \
    \  ans.push_back(arr[j]);\n        j++;\n    }\n    while(i < n) {\n        ans.push_back(arr[i]);\n\
    \        i++;\n    }\n    while(j < m) {\n        ans.push_back(arr[j]);\n   \
    \     j++;\n    }\n    while(i < n) {\n        ans.push_back(arr[i]);\n      \
    \  i++;\n    }\n    while(j < m) {\n        ans.push_back(arr[j]);\n\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ed9an7w.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp7ed9an7w.cpp:31:34: error: \u2018max\u2019 cannot\
    \ be used as a function\n   31 |             max = max(max, arr[i]);\n      |\
    \                                  ^\n/tmp/tmp7ed9an7w.cpp:127:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  127 | int main() {\n     \
    \ |            ^\n/tmp/tmp7ed9an7w.cpp:140:1: error: expected \u2018}\u2019 at\
    \ end of input\n  140 | }\n      | ^\n/tmp/tmp7ed9an7w.cpp:12:58: note: to match\
    \ this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmp7ed9an7w.cpp:140:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  140 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    long min_val = arr[0];\n    long min_idx = -1;\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n            max_idx = i;\n        }\n        if(arr[i]\
    \ < min_val) {\n            min_val = arr[i];\n            min_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for(long i = max_idx + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n\
    \            ans.push_back(max_val);\n            ans.push_back(arr[i]);\n   \
    \         max_val = arr[i];\n            max_idx = i;\n        }\n        if(arr[i]\
    \ < min_val) {\n            ans.push_back(min_val);\n            ans.push_back(arr[i]);\n\
    \            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5c8bfg7p: /tmp/tmp5c8bfg7p.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n    long mid\
    \ = 0;\n    long cnt = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n\
    \    long sum81 = 0;\n    long sum82\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppqaksadv.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmppqaksadv.cpp:100:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmppqaksadv.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = m; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgf0qhlnq: /tmp/tmpgf0qhlnq.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx]) {\n            ans.push_back(arr[i]);\n\
    \            idx = i;\n        }\n    }\n    ans.push_back(arr[idx]);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg76jqhvc: /tmp/tmpg76jqhvc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    for(long i = 0; i < k;\
    \ i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbb970k11: /tmp/tmpbb970k11.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for(long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprd_m3w0q: /tmp/tmprd_m3w0q.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    for (long i =\
    \ 1; i < k; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppizluprx: /tmp/tmppizluprx.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n     \
    \   for (long j = i; j < n; j++) {\n            if (arr[j] > max_val) {\n    \
    \            max_val = arr[j];\n                max_idx = j;\n            }\n\
    \        }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcgmpbnnu: /tmp/tmpcgmpbnnu.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> result;\n    long max = 0;\n   \
    \ long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            index = i;\n        }\n   \
    \ }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n\
    \            result.push_back(arr[index]);\n        }\n    }\n    for (long i\
    \ = 0; i < result.size(); i++) {\n        if (result.size() > k) {\n         \
    \   result.pop_back();\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv4_afw4_: /tmp/tmpv4_afw4_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> max;\n    max.reserve(k);\n    long maxVal\
    \ = arr[0];\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        if (arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp19tsvuq6: /tmp/tmp19tsvuq6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_pos = 0;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_pos = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_pos + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_91qv8pl: /tmp/tmp_91qv8pl.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    std::vector<long> maxList;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n            maxList.push_back(i);\n        }\n    }\n\
    \    long long count = 0;\n    for (long i = 0; i < maxList.size(); i++) {\n \
    \       if (maxList[count] == k) {\n            count++;\n        }\n    }\n \
    \   return maxList;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyzjjhx32: /tmp/tmpyzjjhx32.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp06q3469p: /tmp/tmp06q3469p.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    long long temp = 0;\n    long\
    \ long count = 0;\n    long long i = 0;\n    long long j = 0;\n    long long n\
    \ = arr.size();\n    std::vector<long> ans;\n    while(i < n && j < k) {\n   \
    \     if(arr[i] > arr[j]) {\n            temp = arr[i];\n            arr[i] =\
    \ arr[j];\n            arr[j] = temp;\n            count++;\n        }\n     \
    \   i++;\n        j++;\n    }\n    while(i < n) {\n        temp = arr[i];\n  \
    \      arr[i] = max;\n        ans.push_back(temp);\n        count++;\n       \
    \ i++;\n    }\n    while(j < k) {\n        temp = arr[j];\n        arr[j] = max;\n\
    \        ans.push_back(temp);\n        count++;\n        j++;\n    }\n    while(i\
    \ < n) {\n        temp = arr[i];\n        arr[i] = max;\n        ans.push_back(temp);\n\
    \        count++;\n        i++;\n    }\n    while(j < k) {\n        temp = arr[j];\n\
    \        arr[j] = max;\n        ans.push_back(temp);\n        count++;\n     \
    \   j++;\n    }\n    while(i < n) {\n        temp = arr[i];\n        arr[i] =\
    \ max;\n        ans.push_back(temp);\n        count++;\n        i++;\n    }\n\
    \    while(j < k) {\n        temp = arr[j];\n        arr[j] = max;\n        ans.push_back(temp);\n\
    \        count++;\n        j++;\n    }\n    while(i < n) {\n        temp = arr[i];\n\
    \        arr[i] = max;\n        ans.push_back(temp);\n        count++;\n     \
    \   i++;\n    }\n    while(j < k) {\n        temp = arr[j];\n        arr[j] =\
    \ max;\n        ans.push_back(temp);\n        count++;\n        j++;\n    }\n\
    \    while(i < n) {\n        temp = arr[i];\n        arr[i] = max;\n        ans.push_back(temp);\n\
    \        count++;\n        i++;\n    }\n    while(j < k) {\n        temp = arr[j];\n\
    \        arr[j] = max;\n        ans.push_back(temp);\n        count++;\n     \
    \   j++;\n    }\n    while(i < n) {\n        temp = arr[i];\n        arr[i] =\
    \ max;\n        ans.push_back(temp);\n        count++;\n        i++;\n    }\n\
    \    while(j < k) {\n        temp = arr[j];\n        arr[j] = max;\n        ans.push_back(temp);\n\
    \        count++;\n        j++;\n    }\n    while(i < n) {\n        temp = arr[i];\n\
    \        arr[i] = max;\n        ans.push_back(temp);\n        count\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jz82vt8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5jz82vt8.cpp:119:14: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  119 |         count\n      |           \
    \   ^\n      |              ;\n  120 | }\n      | ~             \n/tmp/tmp5jz82vt8.cpp:121:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  121 | int main() {\n      |            ^\n/tmp/tmp5jz82vt8.cpp:134:1: error:\
    \ expected \u2018}\u2019 at end of input\n  134 | }\n      | ^\n/tmp/tmp5jz82vt8.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp5jz82vt8.cpp:134:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  134 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    long curr = 0;\n\
    \    long i = 0;\n    while (i < m) {\n        if (arr[i] > max_val) {\n     \
    \       max_val = arr[i];\n            max_idx = i;\n        }\n        i++;\n\
    \    }\n    long j = 0;\n    while (j < n) {\n        if (arr[j] > max_val) {\n\
    \            max_val = arr[j];\n            max_idx = j;\n        }\n        j++;\n\
    \    }\n    long k = 0;\n    while (max_idx != k) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx++;\n        k++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8e8qu44.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpa8e8qu44.cpp:35:10: error: declaration of \u2018\
    long int k\u2019 shadows a parameter\n   35 |     long k = 0;\n      |       \
    \   ^\n"
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n    long\
    \ maxVal = arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        if (arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp99dwlwag: /tmp/tmp99dwlwag.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long max_val = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max.push_back(max_val);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoilxu02j: /tmp/tmpoilxu02j.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    max_arr[max_idx] = max_val;\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpk7378dpe: /tmp/tmpk7378dpe.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ 1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > result[result.size()\
    \ - 1]) {\n            result.push_back(arr[i]);\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpn23z0aun: /tmp/tmpn23z0aun.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n  \
    \  long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpu_ectbre: /tmp/tmpu_ectbre.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    std::vector<long> ans;\n    long max_index = 0;\n    long max_count = 0;\n\
    \    long index = 0;\n    long count = 0;\n    long max_count = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkykj0po5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpkykj0po5.cpp:21:10: error: redeclaration of\
    \ \u2018long int max_count\u2019\n   21 |     long max_count = 0;\n      |   \
    \       ^~~~~~~~~\n/tmp/tmpkykj0po5.cpp:18:10: note: \u2018long int max_count\u2019\
    \ previously declared here\n   18 |     long max_count = 0;\n      |         \
    \ ^~~~~~~~~\n/tmp/tmpkykj0po5.cpp:100:1: error: expected initializer before \u2018\
    }\u2019 token\n  100 | }\n      | ^\n/tmp/tmpkykj0po5.cpp:100:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_val_2 = arr[0];\n    long max_idx_2\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_2)\
    \ {\n            max_val_2 = arr[i];\n            max_idx_2 = i;\n        }\n\
    \    }\n    ans.push_back(max_val_2);\n    long max_val_3 = arr[0];\n    long\
    \ max_idx_3 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_3) {\n            max_val_3 = arr[i];\n            max_idx_3 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_3);\n    long max_val_4 = arr[0];\n\
    \    long max_idx_4 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val_4) {\n            max_val_4 = arr[i];\n            max_idx_4\
    \ = i;\n        }\n    }\n    ans.push_back(max_val_4);\n    long max_val_5 =\
    \ arr[0];\n    long max_idx_5 = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val_5) {\n            max_val_5 = arr[i];\n    \
    \        max_idx_5 = i;\n        }\n    }\n    ans.push_back(max_val_5);\n   \
    \ long max_val_6 = arr[0];\n    long max_idx_6 = -1;\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val_6) {\n            max_val_6\
    \ = arr[i];\n            max_idx_6 = i;\n        }\n    }\n    ans.push_back(max_val_6);\n\
    \    long max_val_7 = arr[0];\n    long max_idx_7 = -1;\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val_7) {\n            max_val_7\
    \ = arr[i];\n            max_idx_7 = i;\n        }\n    }\n    ans.push_back(max_val_7);\n\
    \    long max_val_8 = arr[0];\n    long max_idx_8 = -1;\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val_8) {\n            max_val_8\
    \ = arr[i];\n            max_idx_8 = i;\n        }\n    }\n    ans.push_back(max_val_8);\n\
    \    long max_val_9 = arr[0];\n    long max_idx_9 = -1;\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val_9) {\n            max_val_9\
    \ = arr[i];\n            max_idx_9 = i;\n        }\n    }\n    ans.push_back(max_val_9);\n\
    \    long max_val_10 = arr[0];\n    long \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p6znrg8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_p6znrg8.cpp:97:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmp_p6znrg8.cpp:97:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long max_val = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max.push_back(max_val);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoilxu02j: /tmp/tmpoilxu02j.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp85kiblet.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp85kiblet.cpp:23:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   23 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmp85kiblet.cpp:31:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   31 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   15 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:39:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   39 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmp85kiblet.cpp:47:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   47 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   15 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:55:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   55 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmp85kiblet.cpp:63:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   63 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   15 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:71:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   71 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmp85kiblet.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmp85kiblet.cpp:79:10"
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long curr = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        max = std::max(max, arr[i]);\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            ans.push_back(max);\n\
    \            max = arr[i];\n        } else {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp120r5e74: /tmp/tmp120r5e74.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    while(max_idx != -1) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx = max_idx % arr.size();\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    std::vector<long> ans;\n    for(long i = 0; i < n; i++) {\n        if(max_num\
    \ < arr[i]) {\n            max_num = arr[i];\n        }\n    }\n    ans.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(max_num < arr[i]) {\n         \
    \   ans.push_back(max_num);\n            max_num = arr[i];\n        }\n    }\n\
    \    ans.push_back(max_num);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoyzzbeqy: /tmp/tmpoyzzbeqy.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long curr_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx]) {\n       \
    \     ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpl26y8zxn: /tmp/tmpl26y8zxn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> max_arr(n);\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n    \
    \    if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    max_arr[max_idx] = max_val;\n    for (long i = max_idx\
    \ + 1; i < k; i++) {\n        max_arr[i] = max_arr[i - 1];\n    }\n    return\
    \ max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp53lkv95z: /tmp/tmp53lkv95z.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    max.push_back(max_val);\n    for(long i = max_idx; i < k; i++)\
    \ {\n        max.push_back(arr[i]);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_l95nd7a: /tmp/tmp_l95nd7a.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp64n0x8qj: /tmp/tmp64n0x8qj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ min = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long sum\
    \ = 0;\n    long temp = 0;\n    long ans1 = 0;\n    long ans2 = 0;\n    long ans3\
    \ = 0;\n    long ans4 = 0;\n    long ans5 = 0;\n    long ans6 = 0;\n    long ans7\
    \ = 0;\n    long ans8 = 0;\n    long ans9 = 0;\n    long ans10 = 0;\n    long\
    \ ans11 = 0;\n    long ans12 = 0;\n    long ans13 = 0;\n    long ans14 = 0;\n\
    \    long ans15 = 0;\n    long ans16 = 0;\n    long ans17 = 0;\n    long ans18\
    \ = 0;\n    long ans19 = 0;\n    long ans20 = 0;\n    long ans21 = 0;\n    long\
    \ ans22 = 0;\n    long ans23 = 0;\n    long ans24 = 0;\n    long ans25 = 0;\n\
    \    long ans26 = 0;\n    long ans27 = 0;\n    long ans28 = 0;\n    long ans29\
    \ = 0;\n    long ans30 = 0;\n    long ans31 = 0;\n    long ans32 = 0;\n    long\
    \ ans33 = 0;\n    long ans34 = 0;\n    long ans35 = 0;\n    long ans36 = 0;\n\
    \    long ans37 = 0;\n    long ans38 = 0;\n    long ans39 = 0;\n    long ans40\
    \ = 0;\n    long ans41 = 1;\n    long ans42 = 1;\n    long ans43 = 1;\n    long\
    \ ans44 = 1;\n    long ans45 = 1;\n    long ans46 = 1;\n    long ans47 = 1;\n\
    \    long ans48 = 1;\n    long ans49 = 1;\n    long ans50 = 1;\n    long ans51\
    \ = 1;\n    long ans52 = 1;\n    long ans53 = 1;\n    long ans54 = 1;\n    long\
    \ ans55 = 1;\n    long ans56 = 1;\n    long ans57 = 1;\n    long ans58 = 1;\n\
    \    long ans59 = 1;\n    long ans60 = 1;\n    long ans61 = 1;\n    long ans62\
    \ = 1;\n    long ans63 = 1;\n    long ans64 = 1;\n    long ans65 = 1;\n    long\
    \ ans66 = 1;\n    long ans67 = 1;\n    long ans68 = 1;\n    long ans69 = 1;\n\
    \    long ans70 = 1;\n    long ans = 1;\n    long ans1 = 1;\n    long ans2 = 1;\n\
    \    long ans3 = 1;\n    long ans4 = 1;\n    long ans5 = 1;\n    long ans6 = 1;\n\
    \    long ans7\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xhn650n.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp9xhn650n.cpp:92:10: error: conflicting declaration\
    \ \u2018long int ans\u2019\n   92 |     long ans = 1;\n      |          ^~~\n\
    /tmp/tmp9xhn650n.cpp:14:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   14 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp9xhn650n.cpp:93:10: error: redeclaration of \u2018long int\
    \ ans1\u2019\n   93 |     long ans1 = 1;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:22:10:\
    \ note: \u2018long int ans1\u2019 previously declared here\n   22 |     long ans1\
    \ = 0;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:94:10: error: redeclaration\
    \ of \u2018long int ans2\u2019\n   94 |     long ans2 = 1;\n      |          ^~~~\n\
    /tmp/tmp9xhn650n.cpp:23:10: note: \u2018long int ans2\u2019 previously declared\
    \ here\n   23 |     long ans2 = 0;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:95:10:\
    \ error: redeclaration of \u2018long int ans3\u2019\n   95 |     long ans3 = 1;\n\
    \      |          ^~~~\n/tmp/tmp9xhn650n.cpp:24:10: note: \u2018long int ans3\u2019\
    \ previously declared here\n   24 |     long ans3 = 0;\n      |          ^~~~\n\
    /tmp/tmp9xhn650n.cpp:96:10: error: redeclaration of \u2018long int ans4\u2019\n\
    \   96 |     long ans4 = 1;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:25:10:\
    \ note: \u2018long int ans4\u2019 previously declared here\n   25 |     long ans4\
    \ = 0;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:97:10: error: redeclaration\
    \ of \u2018long int ans5\u2019\n   97 |     long ans5 = 1;\n      |          ^~~~\n\
    /tmp/tmp9xhn650n.cpp:26:10: note: \u2018long int ans5\u2019 previously declared\
    \ here\n   26 |     long ans5 = 0;\n      |          ^~~~\n/tmp/tmp9xhn650n.cpp:98:10:\
    \ error: redeclaration of \u2018long int ans6\u2019\n   98 |     long ans6 = 1;\n\
    \      |          ^~~~\n/tmp/tmp9xhn650n.cpp:27:10: note: \u2018long int ans6\u2019\
    \ previously declared here\n   27 |     long ans6 = 0;\n      |          ^~~~\n\
    /tmp/tmp9xhn650n.cpp:100:1: error: expected initializer before \u2018}\u2019 token\n\
    \  100 | }\n      | ^\n/tmp/tmp9xhn650n.cpp:100:1: warning: no return statement\
    \ in function "
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzbnlr2as: /tmp/tmpzbnlr2as.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long index = 0;\n    long long sum = 0;\n    long long sumIndex = 0;\n\
    \    long long sumOfSquares = 0;\n    long long sumOfSquaresIndex = 0;\n    long\
    \ long count = 0;\n    long long countIndex = 0;\n    long long sumOfSquareOfSquares\
    \ = 0;\n    long long sumOfSquareOfSquaresIndex = 0;\n    long long maxCount =\
    \ 0;\n    long long maxCountIndex = 0;\n    long long maxSum = 0;\n    long long\
    \ maxSumIndex = 0;\n    long long maxSumOfSquares = 0;\n    long long maxSumOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquares = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex = 0;\n    long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n    long long maxSumOfSquareOfSquaresIndex\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp49ssah1y.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp49ssah1y.cpp:33:15: error: redeclaration of\
    \ \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\n   33 |     long long\
    \ maxSumOfSquareOfSquaresIndex = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp49ssah1y.cpp:32:15: note: \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\
    \ previously declared here\n   32 |     long long maxSumOfSquareOfSquaresIndex\
    \ = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49ssah1y.cpp:34:15:\
    \ error: redeclaration of \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\
    \n   34 |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49ssah1y.cpp:32:15: note: \u2018long\
    \ long int maxSumOfSquareOfSquaresIndex\u2019 previously declared here\n   32\
    \ |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp49ssah1y.cpp:35:15: error: redeclaration of \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\
    \n   35 |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49ssah1y.cpp:32:15: note: \u2018long\
    \ long int maxSumOfSquareOfSquaresIndex\u2019 previously declared here\n   32\
    \ |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp49ssah1y.cpp:36:15: error: redeclaration of \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\
    \n   36 |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49ssah1y.cpp:32:15: note: \u2018long\
    \ long int maxSumOfSquareOfSquaresIndex\u2019 previously declared here\n   32\
    \ |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp49ssah1y.cpp:37:15: error: redeclaration of \u2018long long int maxSumOfSquareOfSquaresIndex\u2019\
    \n   37 |     long long maxSumOfSquareOfSquaresIndex = 0;\n      |           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp49ssah1y.cpp:32:15: note: \u2018long\
    \ lo"
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp06q3469p: /tmp/tmp06q3469p.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> result;\n    long max = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n     \
    \       max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp17st4781: /tmp/tmp17st4781.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    long max_idx = -1;\n    long min_idx = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n        if (arr[i] < min_val) {\n         \
    \   min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    long mid\
    \ = max_idx + min_idx;\n    long mid2 = max_idx + k;\n    long mid3 = max_idx\
    \ + k + 1;\n    long mid4 = max_idx + k + 2;\n    long mid5 = max_idx + k + 3;\n\
    \    long mid6 = max_idx + k + 4;\n    long mid7 = max_idx + k + 5;\n    long\
    \ mid8 = max_idx + k + 6;\n    long mid9 = max_idx + k + 7;\n    long mid10 =\
    \ max_idx + k + 8;\n    long mid11 = max_idx + k + 9;\n    long mid12 = max_idx\
    \ + k + 10;\n    long mid13 = max_idx + k + 11;\n    long mid14 = max_idx + k\
    \ + 12;\n    long mid15 = max_idx + k + 13;\n    long mid16 = max_idx + k + 14;\n\
    \    long mid17 = max_idx + k + 15;\n    long mid18 = max_idx + k + 16;\n    long\
    \ mid19 = max_idx + k + 17;\n    long mid20 = max_idx + k + 18;\n    long mid21\
    \ = max_idx + k + 19;\n    long mid22 = max_idx + k + 20;\n    long mid23 = max_idx\
    \ + k + 21;\n    long mid24 = max_idx + k + 22;\n    long mid25 = max_idx + k\
    \ + 23;\n    long mid26 = max_idx + k + 24;\n    long mid27 = max_idx + k + 25;\n\
    \    long mid28 = max_idx + k + 26;\n    long mid29 = max_idx + k + 27;\n    long\
    \ mid30 = max_idx + k + 28;\n    long mid31 = max_idx + k + 29;\n    long mid32\
    \ = max_idx + k + 30;\n    long mid33 = max_idx + k + 31;\n    long mid34 = max_idx\
    \ + k + 32;\n    long mid35 = max_idx + k + 33;\n    long mid36 = max_idx + k\
    \ + 34;\n    long mid37 = max_idx + k + 35;\n    long mid38 = max_idx + k + 36;\n\
    \    long mid39 = max_idx + k + 37;\n    \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpa18d9uwq: /tmp/tmpa18d9uwq.cpp:71: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long ans = 0;\n    long long max = 0;\n    long\
    \ long i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long temp\
    \ = 0;\n    long long count = 0;\n    long long maxCount = 0;\n    long long maxCount2\
    \ = 0;\n    long long maxCount3 = 0;\n    long long maxCount4 = 0;\n    long long\
    \ maxCount5 = 0;\n    long long maxCount6 = 0;\n    long long maxCount7 = 0;\n\
    \    long long maxCount8 = 0;\n    long long maxCount9 = 0;\n    long long maxCount10\
    \ = 0;\n    long long maxCount11 = 0;\n    long long maxCount12 = 0;\n    long\
    \ long maxCount13 = 0;\n    long long maxCount14 = 0;\n    long long maxCount15\
    \ = 0;\n    long long maxCount16 = 0;\n    long long maxCount17 = 0;\n    long\
    \ long maxCount18 = 0;\n    long long maxCount19 = 0;\n    long long maxCount20\
    \ = 0;\n    long long maxCount21 = 0;\n    long long maxCount22 = 0;\n    long\
    \ long maxCount23 = 0;\n    long long maxCount24 = 0;\n    long long maxCount25\
    \ = 0;\n    long long maxCount26 = 0;\n    long long maxCount27 = 0;\n    long\
    \ long maxCount28 = 0;\n    long long maxCount29 = 0;\n    long long maxCount30\
    \ = 0;\n    long long maxCount31 = 0;\n    long long maxCount32 = 0;\n    long\
    \ long maxCount33 = 0;\n    long long maxCount34 = 0;\n    long long maxCount35\
    \ = 0;\n    long long maxCount36 = 0;\n    long long maxCount37 = 0;\n    long\
    \ long maxCount38 = 0;\n    long long maxCount39 = 0;\n    long long maxCount40\
    \ = 0;\n    long long maxCount41 = 0;\n    long long maxCount42 = 0;\n    long\
    \ long maxCount43 = 0;\n    long long maxCount44 = 0;\n    long long maxCount45\
    \ = 0;\n    long long maxCount46 = 0;\n    long long maxCount47 = 0;\n    long\
    \ long maxCount48 = 0;\n    long long maxCount49 = 0;\n    long long maxCount50\
    \ = 0;\n    long long maxCount51 = 0;\n    long long maxCount52 = 0;\n    long\
    \ long maxCount53 = 0;\n    long long maxCount54 = 0;\n    long long maxCount55\
    \ = 0;\n    long long maxCount56 = 0;\n    long long maxCount57 = 0;\n    long\
    \ long maxCount58 = 0;\n    long long maxCount59 = 0;\n\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcjmuplz.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxcjmuplz.cpp:18:15: error: declaration of \u2018\
    long long int k\u2019 shadows a parameter\n   18 |     long long k = 0;\n    \
    \  |               ^\n/tmp/tmpxcjmuplz.cpp:81:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   81 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n \
    \           ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplkv6v8ij: /tmp/tmplkv6v8ij.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_val = max_val;\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > cur_val)\
    \ {\n            ans.push_back(cur_val);\n            cur_val = arr[i];\n    \
    \        cur_idx = i;\n        }\n    }\n    ans.push_back(cur_val);\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpnrjqkqd2: /tmp/tmpnrjqkqd2.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long index = 0;\n    long long sum = 0;\n    long long count = 0;\n\
    \    long long sumOfSquares = 0;\n    long long maxSum = 0;\n    long long maxIndexOfMaxSum\
    \ = 0;\n    long long maxSumOfSquares = 0;\n    long long maxIndexOfMaxSumOfSquares\
    \ = 0;\n    long long minSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minSum = 0;\n    long long minIndexOfMinSum = 0;\n    long\
    \ long minSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n  \
    \  long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n    long long minIndexOfMinSumOfSquares\
    \ = 0;\n    long long minIndexOfMinSumOfSquares = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4arhq0om.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp4arhq0om.cpp:28:15: error: redeclaration of\
    \ \u2018long long int minSumOfSquares\u2019\n   28 |     long long minSumOfSquares\
    \ = 0;\n      |               ^~~~~~~~~~~~~~~\n/tmp/tmp4arhq0om.cpp:24:15: note:\
    \ \u2018long long int minSumOfSquares\u2019 previously declared here\n   24 |\
    \     long long minSumOfSquares = 0;\n      |               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4arhq0om.cpp:29:15: error: redeclaration of \u2018long long int minIndexOfMinSumOfSquares\u2019\
    \n   29 |     long long minIndexOfMinSumOfSquares = 0;\n      |              \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4arhq0om.cpp:25:15: note: \u2018long long\
    \ int minIndexOfMinSumOfSquares\u2019 previously declared here\n   25 |     long\
    \ long minIndexOfMinSumOfSquares = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4arhq0om.cpp:30:15: error: redeclaration of \u2018long long int minIndexOfMinSumOfSquares\u2019\
    \n   30 |     long long minIndexOfMinSumOfSquares = 0;\n      |              \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4arhq0om.cpp:25:15: note: \u2018long long\
    \ int minIndexOfMinSumOfSquares\u2019 previously declared here\n   25 |     long\
    \ long minIndexOfMinSumOfSquares = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4arhq0om.cpp:31:15: error: redeclaration of \u2018long long int minIndexOfMinSumOfSquares\u2019\
    \n   31 |     long long minIndexOfMinSumOfSquares = 0;\n      |              \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4arhq0om.cpp:25:15: note: \u2018long long\
    \ int minIndexOfMinSumOfSquares\u2019 previously declared here\n   25 |     long\
    \ long minIndexOfMinSumOfSquares = 0;\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4arhq0om.cpp:32:15: error: redeclaration of \u2018long long int minIndexOfMinSumOfSquares\u2019\
    \n   32 |     long long minIndexOfMinSumOfSquares = 0;\n      |              \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4arhq0om.cpp:25:15: note: \u2018long long\
    \ int minIndexOfMinSumOfSquares\u2019 previously declared here\n   25 |     long\
    \ long minIndexOfMinSumOfSquares = 0;\n      |               ^~~~~"
  stdout: ''
  timestamp: 1660095896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n  \
    \  long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpu_ectbre: /tmp/tmpu_ectbre.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> result;\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > max_num) {\n            max_num = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < k; i++) {\n        result.push_back(max_num);\n\
    \        max_num -= arr[max_index];\n        max_index++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ee_gr0g: /tmp/tmp3ee_gr0g.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> max_arr(n);\n    long max_val\
    \ = arr[0];\n    long max_index = 0;\n    for(long i = 1; i < n; i++) {\n    \
    \    if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_arr.at(max_index) = max_val;\n    long max_index2\
    \ = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_index2 = i;\n        }\n    }\n\
    \    max_arr.at(max_index2) = max_val;\n    long max_index3 = 0;\n    for(long\
    \ i = n - 2; i >= 0; i--) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_index3 = i;\n        }\n    }\n    max_arr.at(max_index3)\
    \ = max_val;\n    long max_index4 = 0;\n    for(long i = n - 3; i >= 0; i--) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_index4\
    \ = i;\n        }\n    }\n    max_arr.at(max_index4) = max_val;\n    long max_index5\
    \ = 0;\n    for(long i = n - 4; i >= 0; i--) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_index5 = i;\n        }\n    }\n\
    \    max_arr.at(max_index5) = max_val;\n    long max_index6 = 0;\n    for(long\
    \ i = n - 5; i >= 0; i--) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_index6 = i;\n        }\n    }\n    max_arr.at(max_index6)\
    \ = max_val;\n    long max_index7 = 0;\n    for(long i = n - 6; i >= 0; i--) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_index7\
    \ = i;\n        }\n    }\n    max_arr.at(max_index7) = max_val;\n    long max_index8\
    \ = 0;\n    for(long i = n - 7; i >= 0; i--) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_index8 = i;\n        }\n    }\n\
    \    max_arr.at(max_index8) = max_val;\n    long max_index9 = 0;\n    for(long\
    \ i = n - 8; i >= 0; i--) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_index9 = i;\n        }\n    }\n    max_arr.at(max_index9)\
    \ = max_val;\n    long max_index10 = 0;\n    for(long i = n - 9; i >= 0; i--)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n         \
    \   max_index10 = i;\n        }\n    }\n    max_arr.at(max_index10) = max_val;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpob9qq2yg: /tmp/tmpob9qq2yg.cpp:99: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long ans = 0;\n    long long max = 0;\n    long\
    \ long i = 0;\n    long long j = 0;\n    long long count = 0;\n    long long maxCount\
    \ = 0;\n    long long temp = 0;\n    long long temp2 = 0;\n    long long temp3\
    \ = 0;\n    long long temp4 = 0;\n    long long temp5 = 0;\n    long long temp6\
    \ = 0;\n    long long temp7 = 0;\n    long long temp8 = 0;\n    long long temp9\
    \ = 0;\n    long long temp10 = 0;\n    long long temp11 = 0;\n    long long temp12\
    \ = 0;\n    long long temp13 = 0;\n    long long temp14 = 0;\n    long long temp15\
    \ = 0;\n    long long temp16 = 0;\n    long long temp17 = 0;\n    long long temp18\
    \ = 0;\n    long long temp19 = 0;\n    long long temp20 = 0;\n    long long temp21\
    \ = 0;\n    long long temp22 = 0;\n    long long temp23 = 0;\n    long long temp24\
    \ = 0;\n    long long temp25 = 0;\n    long long temp26 = 0;\n    long long temp27\
    \ = 0;\n    long long temp28 = 0;\n    long long temp29 = 0;\n    long long temp30\
    \ = 0;\n    long long temp31 = 0;\n    long long temp32 = 0;\n    long long temp33\
    \ = 0;\n    long long temp34 = 0;\n    long long temp35 = 0;\n    long long temp36\
    \ = 0;\n    long long temp37 = 0;\n    long long temp38 = 0;\n    long long temp39\
    \ = 0;\n    long long temp40 = 0;\n    long long temp41 = 0;\n    long long temp42\
    \ = 0;\n    long long temp43 = 0;\n    long long temp44 = 0;\n    long long temp45\
    \ = 0;\n    long long temp46 = 0;\n    long long temp47 = 0;\n    long long temp48\
    \ = 0;\n    long long temp49 = 0;\n    long long temp50 = 0;\n    long long temp51\
    \ = 0;\n    long long temp52 = 0;\n    long long temp53 = 0;\n    long long temp54\
    \ = 0;\n    long long temp55 = 0;\n    long long temp56 = 0;\n    long long temp57\
    \ = 0;\n    long long temp58 = 0;\n    long long temp59 = 0;\n    long long temp60\
    \ = 0;\n    long long temp61 = 0;\n    long long temp62 = 0;\n    long long temp63\
    \ = 0;\n    long long temp64 = 0;\n    long long temp65 = 0;\n    long long temp66\
    \ = 0;\n    long long temp67 = 0;\n    long long temp68 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7bmmeu6w: /tmp/tmp7bmmeu6w.cpp:92: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    for (long i = max_idx; i < k; i++) {\n        result.push_back(max_val);\n\
    \        max_val -= arr[max_idx];\n        max_idx++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3tzgww_i: /tmp/tmp3tzgww_i.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  result.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpsoti_j8w: /tmp/tmpsoti_j8w.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    long long ans = 0;\n    long long max = 0;\n\
    \    long long min = 0;\n    long long mid = 0;\n    long long i = 0;\n    long\
    \ long j = 0;\n    long long count = 0;\n    long long temp = 0;\n    long long\
    \ maxCount = 0;\n    long long minCount = 0;\n    long long maxCount2 = 0;\n \
    \   long long minCount2 = 0;\n    long long maxCount3 = 0;\n    long long minCount3\
    \ = 0;\n    long long maxCount4 = 0;\n    long long minCount4 = 0;\n    long long\
    \ maxCount5 = 0;\n    long long minCount5 = 0;\n    long long maxCount6 = 0;\n\
    \    long long minCount6 = 0;\n    long long maxCount7 = 0;\n    long long minCount7\
    \ = 0;\n    long long maxCount8 = 0;\n    long long minCount8 = 0;\n    long long\
    \ maxCount9 = 0;\n    long long minCount9 = 0;\n    long long maxCount10 = 0;\n\
    \    long long minCount10 = 0;\n    long long maxCount11 = 0;\n    long long minCount11\
    \ = 0;\n    long long maxCount12 = 0;\n    long long minCount12 = 0;\n    long\
    \ long maxCount13 = 0;\n    long long minCount13 = 0;\n    long long maxCount14\
    \ = 0;\n    long long minCount14 = 0;\n    long long maxCount15 = 0;\n    long\
    \ long minCount15 = 0;\n    long long maxCount16 = 0;\n    long long minCount16\
    \ = 0;\n    long long maxCount17 = 0;\n    long long minCount17 = 0;\n    long\
    \ long maxCount18 = 0;\n    long long minCount18 = 0;\n    long long maxCount19\
    \ = 0;\n    long long minCount19 = 0;\n    long long maxCount20 = 0;\n    long\
    \ long minCount20 = 0;\n    long long maxCount21 = 0;\n    long long minCount21\
    \ = 0;\n    long long maxCount22 = 0;\n    long long minCount22 = 0;\n    long\
    \ long maxCount23 = 0;\n    long long minCount23 = 0;\n    long long maxCount24\
    \ = 0;\n    long long minCount24 = 0;\n    long long maxCount25 = 0;\n    long\
    \ long minCount25 = 0;\n    long long maxCount26 = 0;\n    long long minCount26\
    \ = 0;\n    long long maxCount27 = 0;\n    long long minCount27 = 0;\n    long\
    \ long maxCount28 = 0;\n    long long minCount28 = 0;\n    long long maxCount29\
    \ = 0;\n    long long minCount29 = 0;\n    long long maxCount30 = 0;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0_7m5ivb: /tmp/tmp0_7m5ivb.cpp:84: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = m; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgf0qhlnq: /tmp/tmpgf0qhlnq.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long i\
    \ = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n   \
    \         res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp97u9hgu6: /tmp/tmp97u9hgu6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpypamwepn: /tmp/tmpypamwepn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long curr = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > max && arr[i] > curr) {\n            ans.push_back(max);\n\
    \            max = arr[i];\n        } else if (arr[i] > max && arr[i] < curr)\
    \ {\n            ans.push_back(arr[i]);\n            max = arr[i];\n        }\
    \ else if (arr[i] < max && arr[i] > curr) {\n            ans.push_back(max);\n\
    \            max = arr[i];\n        } else if (arr[i] < max && arr[i] < curr)\
    \ {\n            ans.push_back(arr[i]);\n            max = arr[i];\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbec8nayp: /tmp/tmpbec8nayp.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    long long max = 0;\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < k; i++){\n        max = std::max(max, arr[i]);\n        res.push_back(max);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7x3qfh6.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpi7x3qfh6.cpp:17:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   17 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpi7x3qfh6.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpi7x3qfh6.cpp:17:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   17 |         max = std::max(max,\
    \ arr[i]);\n      |                                   ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpi7x3qfh6.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpi7x3qfh6.cpp:17:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   17 |         max\
    \ = std"
  stdout: ''
  timestamp: 1660095898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        result.push_back(max_val);\n    \
    \    max_idx++;\n        max_val = arr[max_idx];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpy8c6_sxw: /tmp/tmpy8c6_sxw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ curr = 0;\n    long i = 0;\n    long j = 0;\n    long n = arr.size();\n    long\
    \ m = n;\n    long temp = 0;\n    while(i < n) {\n        while(j < m) {\n   \
    \         if(arr[j] > max) {\n                max = arr[j];\n                curr\
    \ = j;\n            }\n            j++;\n        }\n        ans.push_back(max);\n\
    \        max = arr[i];\n        curr = 0;\n        i++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2p4kp85s: /tmp/tmp2p4kp85s.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxf3n0ekj: /tmp/tmpxf3n0ekj.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long min_val = arr[0];\n    long max_idx = -1;\n    long min_idx = -1;\n\
    \    for(long i = 0; i < n; i++) {\n        if(max_val < arr[i]) {\n         \
    \   max_val = arr[i];\n            max_idx = i;\n        }\n        if(min_val\
    \ > arr[i]) {\n            min_val = arr[i];\n            min_idx = i;\n     \
    \   }\n    }\n    long mid = max_idx + (k - 1);\n    long mid1 = max_idx - (k\
    \ - 1);\n    long mid2 = min_idx + (k - 1);\n    long mid3 = min_idx - (k - 1);\n\
    \    long mid4 = max_idx + (k - 1);\n    long mid5 = max_idx - (k - 1);\n    long\
    \ mid6 = min_idx + (k - 1);\n    long mid7 = min_idx - (k - 1);\n    ans.push_back(max_val);\n\
    \    ans.push_back(arr[max_idx]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid1]);\n\
    \    ans.push_back(arr[mid2]);\n    ans.push_back(arr[mid3]);\n    ans.push_back(arr[mid4]);\n\
    \    ans.push_back(arr[mid5]);\n    ans.push_back(arr[mid6]);\n    ans.push_back(arr[mid7]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp971vt0ox: /tmp/tmp971vt0ox.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long max = 0;\n    std::vector<long> ans;\n    for(long i = 0; i < k;\
    \ i++) {\n        max = std::max(max, arr[i]);\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph0pra22h.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmph0pra22h.cpp:16:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   16 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph0pra22h.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmph0pra22h.cpp:16:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max = std::max(max,\
    \ arr[i]);\n      |                                   ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph0pra22h.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmph0pra22h.cpp:16:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max\
    \ = std"
  stdout: ''
  timestamp: 1660095898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long n = arr.size();\n    while(i < n) {\n        max = std::max(max,\
    \ arr[i]);\n        i++;\n    }\n    while(j < k) {\n        ans.push_back(max);\n\
    \        max = 0;\n        j++;\n    }\n    while(i < n) {\n        max = std::max(max,\
    \ arr[i]);\n        i++;\n        while(j < k) {\n            if(arr[i] > max)\
    \ {\n                max = arr[i];\n            }\n            j++;\n        }\n\
    \        ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgqc9ed4t: /tmp/tmpgqc9ed4t.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    long max_idx = -1;\n    long min_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n        if(arr[i] < min_val) {\n           \
    \ min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    long mid\
    \ = max_idx;\n    while(max_idx > min_idx) {\n        if(arr[max_idx] > arr[mid])\
    \ {\n            ans.push_back(arr[max_idx]);\n            max_idx--;\n      \
    \  } else {\n            ans.push_back(arr[mid]);\n            mid++;\n      \
    \  }\n    }\n    while(max_idx < min_idx) {\n        if(arr[min_idx] < arr[mid])\
    \ {\n            ans.push_back(arr[min_idx]);\n            min_idx++;\n      \
    \  } else {\n            ans.push_back(arr[mid]);\n            mid++;\n      \
    \  }\n    }\n    ans.push_back(arr[max_idx]);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0zy5rmab: /tmp/tmp0zy5rmab.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long len = 0;\n    while (i < arr.size() && j < k) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            len = 1;\n            ans.push_back(max);\n\
    \            i++;\n        } else {\n            len++;\n            ans.push_back(arr[i]);\n\
    \        }\n        j++;\n    }\n    while (i < arr.size()) {\n        ans.push_back(arr[i]);\n\
    \        i++;\n    }\n    while (j < k) {\n        ans.push_back(max);\n     \
    \   j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpikcjtntz: /tmp/tmpikcjtntz.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpypamwepn: /tmp/tmpypamwepn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > max_val){\n            max_val = arr[i];\n            max_idx = i;\n     \
    \   }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx; i < k; i++){\n\
    \        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmyjav_1a: /tmp/tmpmyjav_1a.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long ans = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long temp = 0;\n    long long count =\
    \ 0;\n    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long min = 0;\n  \
    \  long long mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count\
    \ = 0;\n    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long min = 0;\n  \
    \  long long mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count\
    \ = 0;\n    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long min = 0;\n  \
    \  long long mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count\
    \ = 0;\n    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long min = 0;\n  \
    \  long long mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long mid = 0;\n    long long count\
    \ = 0;\n    long long max = 0;\n    long long min = 0;\n    long long mid = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long min = 0;\n  \
    \  long long mid = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long min = 0;\n    long long mid = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long mid = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcgkn9uf2.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcgkn9uf2.cpp:22:15: error: redeclaration of\
    \ \u2018long long int count\u2019\n   22 |     long long count = 0;\n      | \
    \              ^~~~~\n/tmp/tmpcgkn9uf2.cpp:18:15: note: \u2018long long int count\u2019\
    \ previously declared here\n   18 |     long long count = 0;\n      |        \
    \       ^~~~~\n/tmp/tmpcgkn9uf2.cpp:23:15: error: redeclaration of \u2018long\
    \ long int max\u2019\n   23 |     long long max = 0;\n      |               ^~~\n\
    /tmp/tmpcgkn9uf2.cpp:15:15: note: \u2018long long int max\u2019 previously declared\
    \ here\n   15 |     long long max = 0;\n      |               ^~~\n/tmp/tmpcgkn9uf2.cpp:24:15:\
    \ error: redeclaration of \u2018long long int min\u2019\n   24 |     long long\
    \ min = 0;\n      |               ^~~\n/tmp/tmpcgkn9uf2.cpp:16:15: note: \u2018\
    long long int min\u2019 previously declared here\n   16 |     long long min =\
    \ 0;\n      |               ^~~\n/tmp/tmpcgkn9uf2.cpp:25:15: error: redeclaration\
    \ of \u2018long long int mid\u2019\n   25 |     long long mid = 0;\n      |  \
    \             ^~~\n/tmp/tmpcgkn9uf2.cpp:17:15: note: \u2018long long int mid\u2019\
    \ previously declared here\n   17 |     long long mid = 0;\n      |          \
    \     ^~~\n/tmp/tmpcgkn9uf2.cpp:26:15: error: redeclaration of \u2018long long\
    \ int count\u2019\n   26 |     long long count = 0;\n      |               ^~~~~\n\
    /tmp/tmpcgkn9uf2.cpp:18:15: note: \u2018long long int count\u2019 previously declared\
    \ here\n   18 |     long long count = 0;\n      |               ^~~~~\n/tmp/tmpcgkn9uf2.cpp:27:15:\
    \ error: redeclaration of \u2018long long int max\u2019\n   27 |     long long\
    \ max = 0;\n      |               ^~~\n/tmp/tmpcgkn9uf2.cpp:15:15: note: \u2018\
    long long int max\u2019 previously declared here\n   15 |     long long max =\
    \ 0;\n      |               ^~~\n/tmp/tmpcgkn9uf2.cpp:28:15: error: redeclaration\
    \ of \u2018long long int min\u2019\n   28 |     long long min = 0;\n      |  \
    \             ^~~\n/tmp/tmpcgkn9uf2.cpp:16:15: note: \u2018long long int min\u2019\
    \ previously declared here\n   16 |     long long min = 0;\n      |          \
    \     ^~~\n/tmp/tmpc"
  stdout: ''
  timestamp: 1660095899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_size = n;\n   \
    \ std::vector<long> max_nums(max_size);\n    long max_num = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long temp = 0;\n    long temp2 = 0;\n \
    \   long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6\
    \ = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long\
    \ temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n\
    \    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphf3q8l44.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphf3q8l44.cpp:20:10: error: declaration of \u2018\
    long int k\u2019 shadows a parameter\n   20 |     long k = 0;\n      |       \
    \   ^\n/tmp/tmphf3q8l44.cpp:100:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  100 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n    \
    \        max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_idx = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n \
    \       if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ long max_idx = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n    \
    \    if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ long max_idx = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n    \
    \    if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwab_8o2t.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpwab_8o2t.cpp:24:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   24 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpwab_8o2t.cpp:32:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   32 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   16 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:40:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   40 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpwab_8o2t.cpp:48:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   48 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   16 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:56:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   56 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpwab_8o2t.cpp:64:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   64 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   16 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:72:10: error:\
    \ redeclaration of \u2018long int max_idx\u2019\n   72 |     long max_idx = max_idx;\n\
    \      |          ^~~~~~~\n/tmp/tmpwab_8o2t.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpwab_8o2t.cpp:80:10"
  stdout: ''
  timestamp: 1660095899
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ min = 0;\n    long sum = 0;\n    long count = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \       if(arr[i] < min) {\n            min = arr[i];\n        }\n        sum\
    \ += arr[i];\n        count++;\n    }\n    long mid = sum / count;\n    long sum2\
    \ = 0;\n    long count2 = 0;\n    for(long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > mid) {\n            sum2 += arr[i];\n            count2++;\n\
    \        }\n    }\n    long mid2 = sum2 / count2;\n    long sum3 = 0;\n    long\
    \ count3 = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] >\
    \ mid2) {\n            sum3 += arr[i];\n            count3++;\n        }\n   \
    \ }\n    long mid3 = sum3 / count3;\n    long sum4 = 0;\n    long count4 = 0;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid3) {\n   \
    \         sum4 += arr[i];\n            count4++;\n        }\n    }\n    long mid4\
    \ = sum4 / count4;\n    long sum5 = 0;\n    long count5 = 0;\n    for(long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] > mid4) {\n            sum5 +=\
    \ arr[i];\n            count5++;\n        }\n    }\n    long mid5 = sum5 / count5;\n\
    \    long sum6 = 0;\n    long count6 = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > mid5) {\n            sum6 += arr[i];\n         \
    \   count6++;\n        }\n    }\n    long mid6 = sum6 / count6;\n    long sum7\
    \ = 0;\n    long count7 = 0;\n    for(long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > mid6) {\n            sum7 += arr[i];\n            count7++;\n\
    \        }\n    }\n    long mid7 = sum7 / count7;\n    long sum8 = 0;\n    long\
    \ count8 = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] >\
    \ mid7) {\n            sum8 += arr[i];\n            count8++;\n        }\n   \
    \ }\n    long mid8 = sum8 / count8;\n    long sum9 = 0;\n    long count9 = 0;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid8) {\n   \
    \         sum9 += arr[i];\n            count9++;\n        }\n    }\n    long mid9\
    \ = sum9 / count9;\n    long sum10 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long mid = 0;\n    long len = 0;\n    while(i < arr.size() && j < k)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] >\
    \ max) {\n            max = arr[j];\n            mid = j;\n        }\n       \
    \ j++;\n    }\n    len = arr.size();\n    while(i < len) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            mid = i;\n        }\n     \
    \   i++;\n    }\n    while(j < len) {\n        if(arr[j] > max) {\n          \
    \  max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n\
    \    while(i < len) {\n        ans.push_back(arr[mid]);\n        mid++;\n    \
    \    i++;\n    }\n    while(j < len) {\n        ans.push_back(arr[mid]);\n   \
    \     mid++;\n        j++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcdann1_0: /tmp/tmpcdann1_0.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ 1;\n    long min_val = arr[0];\n    long min_idx = 1;\n    for (long i = 1;\
    \ i < k; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n        if (arr[i] < min_val) {\n      \
    \      min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] > max_val) {\n            result.push_back(max_val);\n\
    \            result.push_back(arr[max_idx]);\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n        if (arr[i] < min_val) {\n      \
    \      result.push_back(min_val);\n            result.push_back(arr[min_idx]);\n\
    \            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzo8cas5y: /tmp/tmpzo8cas5y.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long max_k = n - k;\n    std::vector<long> ans;\n\
    \    long max_val = arr[0];\n    long min_val = arr[0];\n    long max_pos = 0;\n\
    \    long min_pos = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_pos = i;\n    \
    \    }\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n     \
    \       min_pos = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_pos]);\n\
    \    for (long i = max_pos + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos = i;\n        }\n        if\
    \ (arr[i] < min_val) {\n            min_val = arr[i];\n            min_pos = i;\n\
    \        }\n    }\n    ans.push_back(min_val);\n    ans.push_back(arr[min_pos]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp4tx9qpra: /tmp/tmp4tx9qpra.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > arr[i-max_idx]) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pcusejd.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1pcusejd.cpp:24:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   24 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmp1pcusejd.cpp:16:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   16 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    long max_val = arr[0];\n    std::vector<long> max_vec;\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n        }\n    }\n    max_vec.push_back(max_val);\n   \
    \ for(long i = 1; i < k; i++) {\n        if(arr[i] > max_val) {\n            max_vec.push_back(arr[i]);\n\
    \        }\n    }\n    return max_vec;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpehj1pp1u: /tmp/tmpehj1pp1u.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp91jqpt8c: /tmp/tmp91jqpt8c.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = m; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5q5vgt7y: /tmp/tmp5q5vgt7y.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp06q3469p: /tmp/tmp06q3469p.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = 1;\n    long max_idx2 = 1;\n    long max_idx3 = 1;\n    long\
    \ max_idx4 = 1;\n    long max_idx5 = 1;\n    long max_idx6 = 1;\n    long max_idx7\
    \ = 1;\n    long max_idx8 = 1;\n    long max_idx9 = 1;\n    long max_idx10 = 1;\n\
    \    long max_idx11 = 1;\n    long max_idx12 = 1;\n    long max_idx13 = 1;\n \
    \   long max_idx14 = 1;\n    long max_idx15 = 1;\n    long max_idx16 = 1;\n  \
    \  long max_idx17 = 1;\n    long max_idx18 = 1;\n    long max_idx19 = 1;\n   \
    \ long max_idx20 = 1;\n    long max_idx21 = 1;\n    long max_idx22 = 1;\n    long\
    \ max_idx23 = 1;\n    long max_idx24 = 1;\n    long max_idx25 = 1;\n    long max_idx26\
    \ = 1;\n    long max_idx27 = 1;\n    long max_idx28 = 1;\n    long max_idx29 =\
    \ 1;\n    long max_idx30 = 1;\n    long max_idx31 = 1;\n    long max_idx32 = 1;\n\
    \    long max_idx33 = 1;\n    long max_idx34 = 1;\n    long max_idx35 = 1;\n \
    \   long max_idx36 = 1;\n    long max_idx37 = 1;\n    long max_idx38 = 1;\n  \
    \  long max_idx39 = 1;\n    long max_idx40 = 1;\n    long max_idx41 = 1;\n   \
    \ long max_idx42 = 1;\n    long max_idx43 = 1;\n    long max_idx44 = 1;\n    long\
    \ max_idx45 = 1;\n    long max_idx46 = 1;\n    long max_idx47 = 1;\n    long max_idx48\
    \ = 1;\n    long max_idx49 = 1;\n    long max_idx50 = 1;\n    long max_idx51 =\
    \ 1;\n    long max_idx52 = 1;\n    long max_idx53 = 1;\n    long max_idx54 = 1;\n\
    \    long max_idx55 = 1;\n    long max_idx56 = 1;\n    long max_idx57 = 1;\n \
    \   long max_idx58 = 1;\n    long max_idx59 = 1;\n    long max_idx60 = 1;\n  \
    \  long max_idx61 = 1;\n    long max_idx62 = 1;\n    long max_idx63 = 1;\n   \
    \ long max_idx64 = 1;\n    long max_idx65 = 1;\n    long max_idx66 = 1;\n    long\
    \ max_idx67 = 1;\n    long max_idx68 = 1;\n    long max_idx69 = 1;\n    long max_idx70\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppe2rzv93.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmppe2rzv93.cpp:86:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   86 | }\n      | ^\n/tmp/tmppe2rzv93.cpp:86:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> ans;\n    long max = 0;\n\
    \    long cur = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n            cur = i;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] == max){\n     \
    \       ans.push_back(arr[cur]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpagadrb69: /tmp/tmpagadrb69.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long max_num = arr[0];\n    std::vector<long> ans;\n\
    \    ans.push_back(0);\n    for(long i = 1; i < n; i++) {\n        if(arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n        }\n    }\n    long mid =\
    \ max_num;\n    long start = 0;\n    long end = n - 1;\n    long mid_index = 0;\n\
    \    while(start <= end) {\n        mid_index = (start + end) / 2;\n        if(arr[mid_index]\
    \ > mid) {\n            end = mid_index - 1;\n        } else {\n            start\
    \ = mid_index + 1;\n        }\n    }\n    while(start <= end) {\n        mid_index\
    \ = (start + end) / 2;\n        if(arr[mid_index] > mid) {\n            end =\
    \ mid_index - 1;\n        } else {\n            start = mid_index + 1;\n     \
    \   }\n    }\n    while(start <= end) {\n        mid_index = (start + end) / 2;\n\
    \        if(arr[mid_index] > mid) {\n            end = mid_index - 1;\n      \
    \  } else {\n            start = mid_index + 1;\n        }\n    }\n    while(start\
    \ <= end) {\n        mid_index = (start + end) / 2;\n        if(arr[mid_index]\
    \ > mid) {\n            end = mid_index - 1;\n        } else {\n            start\
    \ = mid_index + 1;\n        }\n    }\n    while(start <= end) {\n        mid_index\
    \ = (start + end) / 2;\n        if(arr[mid_index] > mid) {\n            end =\
    \ mid_index - 1;\n        } else {\n            start = mid_index + 1;\n     \
    \   }\n    }\n    while(start <= end) {\n        mid_index = (start + end) / 2;\n\
    \        if(arr[mid_index] > mid) {\n            end = mid_index - 1;\n      \
    \  } else {\n            start = mid_index + 1;\n        }\n    }\n    while(start\
    \ <= end) {\n        mid_index = (start + end) / 2;\n        if(arr[mid_index]\
    \ > mid) {\n            end = mid_index - 1;\n        } else {\n            start\
    \ = mid_index + 1;\n        }\n    }\n    while(start <= end) {\n        mid_index\
    \ = (start + end) / 2;\n        if(arr[mid_index] > mid) {\n            end =\
    \ mid_index - 1;\n        } else {\n            start = mid_index + 1;\n     \
    \   }\n    }\n    while(start <= end) {\n        mid_index = (start + end) / 2;\n\
    \        if(arr[mid_index] > mid) {\n            end = mid_index - 1;\n      \
    \  } else {\n            start = mid_index + 1;\n        }\n    }\n    while(start\
    \ <= end) {\n        mid_index = (start + end) / 2;\n        if(arr[mid_index]\
    \ > mid) {\n            end = mid_index - 1;\n        } else {\n            start\
    \ = mid_index + 1;\n        }\n    }\n    while(start <= \n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i5molbi.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8i5molbi.cpp:107:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp8i5molbi.cpp:106:19:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  106 |     while(start\
    \ <=\n      |          ~        ^\n      |                   )\n  107 | }\n  \
    \    | ~                  \n/tmp/tmp8i5molbi.cpp:107:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp8i5molbi.cpp:107:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp64n0x8qj: /tmp/tmp64n0x8qj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = 0;\n    long long max = 0;\n    long long i = 0;\n    long\
    \ long j = 0;\n    long long cnt = 0;\n    long long temp = 0;\n    long long\
    \ cnt2 = 0;\n    long long cnt3 = 0;\n    long long cnt4 = 0;\n    long long cnt5\
    \ = 0;\n    long long cnt6 = 0;\n    long long cnt7 = 0;\n    long long cnt8 =\
    \ 0;\n    long long cnt9 = 0;\n    long long cnt10 = 0;\n    long long cnt11 =\
    \ 0;\n    long long cnt12 = 0;\n    long long cnt13 = 0;\n    long long cnt14\
    \ = 0;\n    long long cnt15 = 0;\n    long long cnt16 = 0;\n    long long cnt17\
    \ = 0;\n    long long cnt18 = 0;\n    long long cnt19 = 0;\n    long long cnt20\
    \ = 0;\n    long long cnt21 = 0;\n    long long cnt22 = 0;\n    long long cnt23\
    \ = 0;\n    long long cnt24 = 0;\n    long long cnt25 = 0;\n    long long cnt26\
    \ = 0;\n    long long cnt27 = 0;\n    long long cnt28 = 0;\n    long long cnt29\
    \ = 0;\n    long long cnt30 = 0;\n    long long cnt31 = 0;\n    long long cnt32\
    \ = 0;\n    long long cnt33 = 0;\n    long long cnt34 = 0;\n    long long cnt35\
    \ = 0;\n    long long cnt36 = 0;\n    long long cnt37 = 0;\n    long long cnt38\
    \ = 0;\n    long long cnt39 = 0;\n    long long cnt40 = 0;\n    long long cnt41\
    \ = 0;\n    long long cnt42 = 0;\n    long long cnt43 = 0;\n    long long cnt44\
    \ = 0;\n    long long cnt45 = 0;\n    long long cnt46 = 0;\n    long long cnt47\
    \ = 0;\n    long long cnt48 = 0;\n    long long cnt49 = 0;\n    long long cnt50\
    \ = 0;\n    long long cnt51 = 0;\n    long long cnt52 = 0;\n    long long cnt53\
    \ = 0;\n    long long cnt54 = 0;\n    long long cnt55 = 0;\n    long long cnt56\
    \ = 0;\n    long long cnt57 = 0;\n    long long cnt58 = 0;\n    long long cnt59\
    \ = 0;\n    long long cnt60 = 0;\n    long long cnt61 = 0;\n    long long cnt62\
    \ = 0;\n    long long cnt63 = 0;\n    long long cnt64 = 0;\n    long long cnt65\
    \ = 0;\n    long long cnt66 = 0;\n    long long cnt67 = 0;\n    long long cnt68\
    \ = 0;\n    long long cnt69 = 0;\n    long long cnt70\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2i6o73rg.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp2i6o73rg.cpp:88:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmp2i6o73rg.cpp:88:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp64n0x8qj: /tmp/tmp64n0x8qj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx])\
    \ {\n            ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[cur_idx]);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmptddfkcya: /tmp/tmptddfkcya.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long i\
    \ = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n   \
    \         res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp97u9hgu6: /tmp/tmp97u9hgu6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n    long mid\
    \ = 0;\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4\
    \ = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    long temp\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8kvf5ply.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8kvf5ply.cpp:20:10: error: declaration of \u2018\
    long int k\u2019 shadows a parameter\n   20 |     long k = 0;\n      |       \
    \   ^\n/tmp/tmp8kvf5ply.cpp:101:1: error: expected initializer before \u2018}\u2019\
    \ token\n  101 | }\n      | ^\n/tmp/tmp8kvf5ply.cpp:101:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_num = arr[0];\n\
    \    long min_num = arr[0];\n    long max_idx = -1;\n    long min_idx = -1;\n\
    \    long mid = n / 2;\n    long mid_idx = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (max_num < arr[i]) {\n            max_num = arr[i];\n        \
    \    max_idx = i;\n        }\n        if (min_num > arr[i]) {\n            min_num\
    \ = arr[i];\n            min_idx = i;\n        }\n    }\n    if (max_num == min_num)\
    \ {\n        ans.push_back(max_num);\n        return ans;\n    }\n    ans.push_back(max_num);\n\
    \    mid_idx = max_idx;\n    mid = max_idx;\n    while (mid_idx < n) {\n     \
    \   if (arr[mid_idx] > arr[mid]) {\n            mid = mid_idx;\n            mid_idx++;\n\
    \        } else {\n            mid_idx++;\n        }\n    }\n    ans.push_back(arr[mid]);\n\
    \    mid_idx = mid;\n    mid = max_idx;\n    while (mid_idx < n) {\n        if\
    \ (arr[mid_idx] < arr[mid]) {\n            mid = mid_idx;\n            mid_idx++;\n\
    \        } else {\n            mid_idx++;\n        }\n    }\n    ans.push_back(arr[mid]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyhlu64l_: /tmp/tmpyhlu64l_.cpp:62: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long maxNum = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++){\n        if(arr[i] > maxNum){\n   \
    \         maxNum = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++){\n\
    \        if(maxNum < arr[i]){\n            max.push_back(maxNum);\n          \
    \  maxNum = arr[i];\n        }\n    }\n    max.push_back(maxNum);\n    return\
    \ max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmxckyzxb: /tmp/tmpmxckyzxb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_idx = max_idx + 1;\n    for (long i = max_idx; i < k; i++) {\n \
    \       if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph5aq587w.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmph5aq587w.cpp:23:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   23 |     long max_idx = max_idx + 1;\n    \
    \  |          ^~~~~~~\n/tmp/tmph5aq587w.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = arr[0];\n    long long max = 0;\n    for(long long i = 1;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if(arr[i] > ans && arr[i] > k) {\n            ans = arr[i];\n\
    \        }\n    }\n    std::vector<long> ans_list;\n    for(long long i = 0; i\
    \ < k; i++) {\n        ans_list.push_back(ans);\n    }\n    return ans_list;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpirm55e9k: /tmp/tmpirm55e9k.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    for (long i = max_idx; i < k; i++) {\n        result.push_back(max_val);\n\
    \        max_val = arr[i];\n        max_idx = i;\n    }\n    for (long i = max_idx;\
    \ i < arr.size(); i++) {\n        result.push_back(arr[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpnerf0sce: /tmp/tmpnerf0sce.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> arr2(arr.size());\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long sum = 0;\n    long count\
    \ = 0;\n    long maxCount = 0;\n    long maxSum = 0;\n    long maxSumCount = 0;\n\
    \    long maxSumCount2 = 0;\n    long maxSumCount3 = 0;\n    long maxSumCount4\
    \ = 0;\n    long maxSumCount5 = 0;\n    long maxSumCount6 = 0;\n    long maxSumCount7\
    \ = 0;\n    long maxSumCount8 = 0;\n    long maxSumCount9 = 0;\n    long maxSumCount10\
    \ = 0;\n    long maxSumCount11 = 0;\n    long maxSumCount12 = 0;\n    long maxSumCount13\
    \ = 0;\n    long maxSumCount14 = 0;\n    long maxSumCount15 = 0;\n    long maxSumCount16\
    \ = 0;\n    long maxSumCount17 = 0;\n    long maxSumCount18 = 0;\n    long maxSumCount19\
    \ = 0;\n    long maxSumCount20 = 0;\n    long maxSumCount21 = 0;\n    long maxSumCount22\
    \ = 0;\n    long maxSumCount23 = 0;\n    long maxSumCount24 = 0;\n    long maxSumCount25\
    \ = 0;\n    long maxSumCount26 = 0;\n    long maxSumCount27 = 0;\n    long maxSumCount28\
    \ = 0;\n    long maxSumCount29 = 0;\n    long maxSumCount30 = 0;\n    long maxSumCount31\
    \ = 0;\n    long maxSumCount32 = 0;\n    long maxSumCount33 = 0;\n    long maxSumCount34\
    \ = 0;\n    long maxSumCount35 = 0;\n    long maxSumCount36 = 0;\n    long maxSumCount37\
    \ = 0;\n    long maxSumCount38 = 0;\n    long maxSumCount39 = 0;\n    long maxSumCount40\
    \ = 0;\n    long maxSumCount41 = 0;\n    long maxSumCount42 = 0;\n    long maxSumCount43\
    \ = 0;\n    long maxSumCount44 = 0;\n    long maxSumCount45 = 0;\n    long maxSumCount46\
    \ = 0;\n    long maxSumCount47 = 0;\n    long maxSumCount48 = 0;\n    long maxSumCount49\
    \ = 0;\n    long maxSumCount50 = 0;\n    long maxSumCount51 = 0;\n    long maxSumCount52\
    \ = 0;\n    long maxSumCount53 = 0;\n    long maxSumCount54 = 0;\n    long maxSumCount55\
    \ = 0;\n    long maxSumCount56 = 0;\n    long maxSumCount57 = 0;\n    long maxSumCount58\
    \ = 0;\n    long max\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps75b2404.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmps75b2404.cpp:81:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmps75b2404.cpp:81:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > maxNum)\
    \ {\n            maxNum = arr[i];\n        }\n    }\n    for(long i = 0; i < k;\
    \ i++) {\n        if(arr[i] > maxNum) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpguzjze5p: /tmp/tmpguzjze5p.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoaj1ria9: /tmp/tmpoaj1ria9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp64n0x8qj: /tmp/tmp64n0x8qj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ cur = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n            cur = i;\n        }\n    }\n\
    \    ans.push_back(max);\n    for (long i = cur + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n  \
    \  ans.push_back(max);\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvs1x4chz: /tmp/tmpvs1x4chz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = arr[0];\n    long long max_val = arr[0];\n    long long max_idx\
    \ = 1;\n    for (long long i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n            max_idx = i;\n      \
    \  }\n    }\n    for (long long i = max_idx; i < k; i++) {\n        ans = max(ans,\
    \ arr[i]);\n    }\n    return std::vector<long>(ans, ans + k);\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5hr4kb7.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpx5hr4kb7.cpp:23:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \     ans = max(ans, arr[i]);\n      |               ^~~\n      |            \
    \   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpx5hr4kb7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp64n0x8qj: /tmp/tmp64n0x8qj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    long max_idx = -1;\n    long min_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n        if(arr[i] < min_val) {\n           \
    \ min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    ans.push_back(arr[max_idx]);\n    for(long i = max_idx + 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for(long i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] < min_val)\
    \ {\n            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    ans.push_back(min_val);\n    ans.push_back(arr[min_idx]);\n    for(long i\
    \ = min_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > min_val) {\n    \
    \        min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    ans.push_back(min_val);\n\
    \    ans.push_back(arr[min_idx]);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp62nzbkft: /tmp/tmp62nzbkft.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpu_qeit9k: /tmp/tmpu_qeit9k.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long ans = 0;\n    long long max = 0;\n    long\
    \ long i = 0;\n    long long j = 0;\n    long long cnt = 0;\n    long long sum\
    \ = 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 =\
    \ 0;\n    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n\
    \    long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n\
    \    long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmptolt3wg1: /tmp/tmptolt3wg1.cpp:92: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  result.push_back(max_val);\n    for (long i = k; i < arr.size(); i++) {\n \
    \       if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpay8_r8fe: /tmp/tmpay8_r8fe.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = 0;\n    long long max = 0;\n    long long i = 0;\n    long\
    \ long j = 0;\n    long long n = arr.size();\n    long long m = n;\n    long long\
    \ sum = 0;\n    std::vector<long> ans;\n    while(i < n) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            ans.clear();\n \
    \           ans.push_back(i);\n        }\n        i++;\n    }\n    while(j < k)\
    \ {\n        sum += arr[j];\n        if(sum > max) {\n            max = sum;\n\
    \            ans.clear();\n            ans.push_back(j);\n        }\n        j++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptr_qpo_4.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmptr_qpo_4.cpp:20:23: error: conflicting declaration\
    \ \u2018std::vector<long int> ans\u2019\n   20 |     std::vector<long> ans;\n\
    \      |                       ^~~\n/tmp/tmptr_qpo_4.cpp:13:15: note: previous\
    \ declaration as \u2018long long int ans\u2019\n   13 |     long long ans = 0;\n\
    \      |               ^~~\n/tmp/tmptr_qpo_4.cpp:25:17: error: request for member\
    \ \u2018clear\u2019 in \u2018ans\u2019, which is of non-class type \u2018long\
    \ long int\u2019\n   25 |             ans.clear();\n      |                 ^~~~~\n\
    /tmp/tmptr_qpo_4.cpp:26:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018ans\u2019, which is of non-class type \u2018long long int\u2019\n   26\
    \ |             ans.push_back(i);\n      |                 ^~~~~~~~~\n/tmp/tmptr_qpo_4.cpp:34:17:\
    \ error: request for member \u2018clear\u2019 in \u2018ans\u2019, which is of\
    \ non-class type \u2018long long int\u2019\n   34 |             ans.clear();\n\
    \      |                 ^~~~~\n/tmp/tmptr_qpo_4.cpp:35:17: error: request for\
    \ member \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type\
    \ \u2018long long int\u2019\n   35 |             ans.push_back(j);\n      |  \
    \               ^~~~~~~~~\n/tmp/tmptr_qpo_4.cpp:39:12: error: could not convert\
    \ \u2018ans\u2019 from \u2018long long int\u2019 to \u2018std::vector<long int>\u2019\
    \n   39 |     return ans;\n      |            ^~~\n      |            |\n    \
    \  |            long long int\n"
  stdout: ''
  timestamp: 1660095900
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = arr[0];\n    long long max_val = arr[0];\n    long long max_idx\
    \ = 1;\n    for (long long i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n            max_idx = i;\n      \
    \  }\n    }\n    std::vector<long> ans_list;\n    for (long long i = max_idx;\
    \ i <= k; i++) {\n        ans_list.push_back(arr[i]);\n    }\n    return ans_list;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpql6w3tfw: /tmp/tmpql6w3tfw.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_so_far = arr[0];\n    long max_ending_here\
    \ = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_ending_here)\
    \ {\n            max_ending_here = arr[i];\n        }\n        if(arr[i] > max_so_far)\
    \ {\n            max_so_far = arr[i];\n        }\n    }\n    result.push_back(k);\n\
    \    result.push_back(max_so_far);\n    result.push_back(max_ending_here);\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp824d7as1: /tmp/tmp824d7as1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[i-max_idx]) {\n      \
    \      ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7jscy9i.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpk7jscy9i.cpp:23:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   23 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpk7jscy9i.cpp:15:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   15 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095900
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    long n = arr.size();\n    long max_val = arr[0];\n    long\
    \ max_idx = 1;\n    long min_val = arr[0];\n    long min_idx = 1;\n    long mid\
    \ = 0;\n    long cnt = 0;\n    long max_cnt = 0;\n    long min_cnt = 0;\n    long\
    \ mid_idx = 0;\n    long mid_cnt = 1;\n    long mid_idx2 = 0;\n    long mid_cnt2\
    \ = 0;\n    long mid_idx3 = 0;\n    long mid_cnt3 = 0;\n    long mid_idx4 = 0;\n\
    \    long mid_cnt4 = 0;\n    long mid_idx5 = 0;\n    long mid_cnt5 = 0;\n    long\
    \ mid_idx6 = 0;\n    long mid_cnt6 = 0;\n    long mid_idx7 = 0;\n    long mid_cnt7\
    \ = 0;\n    long mid_idx8 = 0;\n    long mid_cnt8 = 0;\n    long mid_idx9 = 0;\n\
    \    long mid_cnt9 = 0;\n    long mid_idx10 = 0;\n    long mid_cnt10 = 0;\n  \
    \  long mid_idx11 = 0;\n    long mid_cnt11 = 0;\n    long mid_idx12 = 0;\n   \
    \ long mid_cnt12 = 0;\n    long mid_idx13 = 0;\n    long mid_cnt13 = 0;\n    long\
    \ mid_idx14 = 0;\n    long mid_cnt14 = 0;\n    long mid_idx15 = 0;\n    long mid_cnt15\
    \ = 0;\n    long mid_idx16 = 0;\n    long mid_cnt16 = 0;\n    long mid_idx17 =\
    \ 0;\n    long mid_cnt17 = 0;\n    long mid_idx18 = 0;\n    long mid_cnt18 = 0;\n\
    \    long mid_idx19 = 0;\n    long mid_cnt19 = 0;\n    long mid_idx20 = 0;\n \
    \   long mid_cnt20 = 0;\n    long mid_idx21 = 0;\n    long mid_cnt21 = 0;\n  \
    \  long mid_idx22 = 0;\n    long mid_cnt22 = 0;\n    long mid_idx23 = 0;\n   \
    \ long mid_cnt23 = 0;\n    long mid_idx24 = 0;\n    long mid_cnt24 = 0;\n    long\
    \ mid_idx25 = 0;\n    long mid_cnt25 = 0;\n    long mid_idx26 = 0;\n    long mid_cnt26\
    \ = 0;\n    long mid_idx27 = 0;\n    long mid_cnt27 = 0;\n    long mid_idx28 =\
    \ 0;\n    long mid_cnt28 = 0;\n    long mid_idx29 = 0;\n    long mid_cnt29 = 0;\n\
    \    long mid_idx30 = 0;\n    long mid_cnt30 = 0;\n    long mid_idx31 = 0;\n \
    \   long mid_cnt31\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpscufbhjl.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpscufbhjl.cpp:85:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   85 | }\n      | ^\n/tmp/tmpscufbhjl.cpp:85:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        long val = arr[i];\n        long idx = i;\n        while (idx > 0\
    \ && arr[idx-1] > val) {\n            ans.push_back(val);\n            idx--;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppt7d48dl: /tmp/tmppt7d48dl.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    std::vector<long> ans;\n \
    \   for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    ans.push_back(max);\n    for (long i = 0; i\
    \ < k; i++) {\n        if (arr[i] > max) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp410fo4s0: /tmp/tmp410fo4s0.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long curr = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < arr.size()) {\n        max = arr[i];\n\
    \        i++;\n        while (j < arr.size() && arr[j] > max) {\n            max\
    \ = arr[j];\n            j++;\n        }\n        if (max > curr) {\n        \
    \    ans.push_back(max);\n        }\n        curr = max;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrdwhvw0: /tmp/tmpzrdwhvw0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long min_val = arr[0];\n    long max_idx = -1;\n    long min_idx = -1;\n\
    \    long mid = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    \
    \    if (arr[i] < min_val) {\n            min_val = arr[i];\n            min_idx\
    \ = i;\n        }\n    }\n    mid = max_idx;\n    ans.push_back(max_val);\n  \
    \  long i = max_idx;\n    for (; i <= min_idx; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    \
    \    if (arr[i] < min_val) {\n            min_val = arr[i];\n            min_idx\
    \ = i;\n        }\n    }\n    mid = max_idx;\n    ans.push_back(max_val);\n  \
    \  while (k != 0) {\n        if (k > mid) {\n            ans.push_back(arr[mid]);\n\
    \            k -= mid - 1;\n            mid = max_idx;\n        } else {\n   \
    \         ans.push_back(arr[mid]);\n            k -= mid;\n            mid = min_idx;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvinr68n6: /tmp/tmpvinr68n6.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> max;\n    max.reserve(k);\n    long maxVal\
    \ = arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        if (arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo03mi75o: /tmp/tmpo03mi75o.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    long long ans = 0;\n    long long max = 0;\n    long long\
    \ min = 0;\n    long long count = 0;\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \       if(arr[i] < min) {\n            min = arr[i];\n        }\n        if(arr[i]\
    \ == max) {\n            count++;\n        }\n    }\n    ans = k;\n    while(count\
    \ > 0) {\n        ans = ans * 10 + count;\n        count--;\n    }\n    ans =\
    \ ans * 10 + max - min;\n    ans = ans * 10 + min;\n    return std::vector<long>(ans,\
    \ 0);\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwmst0ynd: /tmp/tmpwmst0ynd.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> max(n);\n    long max_index =\
    \ 0;\n    long max_val = arr[0];\n    long max_count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_index = i;\n            max_count = 1;\n        }\n        else\
    \ if(arr[i] == max_val) {\n            max_count++;\n        }\n        if(max_count\
    \ > k) {\n            break;\n        }\n    }\n    for(long i = max_index; i\
    \ < n; i++) {\n        if(arr[i] > max_val) {\n            max_\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdldj0hlo.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpdldj0hlo.cpp:124:13: error: \u2018max_\u2019\
    \ was not declared in this scope; did you mean \u2018max\u2019?\n  124 |     \
    \        max_\n      |             ^~~~\n      |             max\n/tmp/tmpdldj0hlo.cpp:126:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  126 | int main() {\n      |            ^\n/tmp/tmpdldj0hlo.cpp:139:1: error:\
    \ expected \u2018}\u2019 at end of input\n  139 | }\n      | ^\n/tmp/tmpdldj0hlo.cpp:122:41:\
    \ note: to match this \u2018{\u2019\n  122 |     for(long i = max_index; i < n;\
    \ i++) {\n      |                                         ^\n/tmp/tmpdldj0hlo.cpp:139:1:\
    \ error: expected \u2018}\u2019 at end of input\n  139 | }\n      | ^\n/tmp/tmpdldj0hlo.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpdldj0hlo.cpp:139:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  139 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = 0;\n    long long max = 0;\n    long long i = 0;\n    long\
    \ long j = 0;\n    long long n = arr.size();\n    long long m = n;\n    long long\
    \ count = 0;\n    while (i < n) {\n        ans = max(ans, arr[i]);\n        max\
    \ = max(max, arr[i]);\n        i++;\n    }\n    while (j < k) {\n        ans =\
    \ max(ans, max);\n        max = max(max, max);\n        j++;\n    }\n    while\
    \ (j < n) {\n        ans = max(ans, arr[j]);\n        max = max(max, arr[j]);\n\
    \        j++;\n    }\n    return std::vector<long>(ans, max);\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8nuade1.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpw8nuade1.cpp:21:30: error: \u2018max\u2019 cannot\
    \ be used as a function\n   21 |         ans = max(ans, arr[i]);\n      |    \
    \                          ^\n/tmp/tmpw8nuade1.cpp:22:30: error: \u2018max\u2019\
    \ cannot be used as a function\n   22 |         max = max(max, arr[i]);\n    \
    \  |                              ^\n/tmp/tmpw8nuade1.cpp:26:27: error: \u2018\
    max\u2019 cannot be used as a function\n   26 |         ans = max(ans, max);\n\
    \      |                           ^\n/tmp/tmpw8nuade1.cpp:27:27: error: \u2018\
    max\u2019 cannot be used as a function\n   27 |         max = max(max, max);\n\
    \      |                           ^\n/tmp/tmpw8nuade1.cpp:31:30: error: \u2018\
    max\u2019 cannot be used as a function\n   31 |         ans = max(ans, arr[j]);\n\
    \      |                              ^\n/tmp/tmpw8nuade1.cpp:32:30: error: \u2018\
    max\u2019 cannot be used as a function\n   32 |         max = max(max, arr[j]);\n\
    \      |                              ^\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++){\n\
    \        if(arr[i] > max_val){\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0oua3b1h: /tmp/tmp0oua3b1h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n     \
    \   for(long j = i; j < n; j++) {\n            if(arr[j] > max_val) {\n      \
    \          max_val = arr[j];\n                max_idx = j;\n            }\n  \
    \      }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpm5l4rxkh: /tmp/tmpm5l4rxkh.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> res;\n    long max_val = arr[0];\n\
    \    long max_idx = 1;\n    for(long i = 1; i < n; i++) {\n        if(arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n            max_idx = i;\n      \
    \  }\n    }\n    for(long i = max_idx; i < k; i++) {\n        res.push_back(max_val);\n\
    \        max_val -= arr[max_idx];\n        max_idx++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpk0w0bj6q: /tmp/tmpk0w0bj6q.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> result;\n    long max = 0;\n    long\
    \ index = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n   \
    \         index = i;\n        }\n    }\n    result.push_back(arr[index]);\n  \
    \  for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n  \
    \      if(sum > max) {\n            max = sum;\n            index = i;\n     \
    \   }\n    }\n    result.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    result.push_back(arr[index]);\n    for(long i = index + 1;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n            index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    result.push_back(arr[index]);\n    for(long i = index + 1;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n            index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    result.push_back(arr[index]);\n    for(long i = index + 1;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n            index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    result.push_back(arr[index]);\n    for(long i = index + 1;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n            index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0g8qld9.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpd0g8qld9.cpp:112:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  112 | int main() {\n     \
    \ |            ^\n/tmp/tmpd0g8qld9.cpp:125:1: error: expected \u2018}\u2019 at\
    \ end of input\n  125 | }\n      | ^\n/tmp/tmpd0g8qld9.cpp:106:50: note: to match\
    \ this \u2018{\u2019\n  106 |     for(long i = index + 1; i < arr.size(); i++)\
    \ {\n      |                                                  ^\n/tmp/tmpd0g8qld9.cpp:125:1:\
    \ error: expected \u2018}\u2019 at end of input\n  125 | }\n      | ^\n/tmp/tmpd0g8qld9.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpd0g8qld9.cpp:125:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  125 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    ans.reserve(m);\n    for (long i = 0; i < m; i++) {\n        long\
    \ max_val = arr[i];\n        for (long j = i + 1; j < n; j++) {\n            if\
    \ (arr[j] > max_val) {\n                max_val = arr[j];\n            }\n   \
    \     }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpinud_dxa: /tmp/tmpinud_dxa.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   std::vector<long> ans;\n    for(long i = 0; i < n; i++){\n        if(arr[i]\
    \ > max_num){\n            max_num = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    for(long i = 0; i < n; i++){\n        if(arr[i] == max_num){\n\
    \            max_count++;\n        }\n    }\n    ans.push_back(max_num);\n   \
    \ for(long i = 0; i < n; i++){\n        if(arr[i] != max_num){\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n\
    \        if(arr[i] == max_num){\n            max_count--;\n        }\n    }\n\
    \    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n        if(arr[i]\
    \ != max_num){\n            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max_num);\n\
    \    for(long i = 0; i < n; i++){\n        if(arr[i] == max_num){\n          \
    \  max_count++;\n        }\n    }\n    ans.push_back(max_num);\n    for(long i\
    \ = 0; i < n; i++){\n        if(arr[i] != max_num){\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n\
    \        if(arr[i] == max_num){\n            max_count--;\n        }\n    }\n\
    \    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n        if(arr[i]\
    \ != max_num){\n            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max_num);\n\
    \    for(long i = 0; i < n; i++){\n        if(arr[i] == max_num){\n          \
    \  max_count++;\n        }\n    }\n    ans.push_back(max_num);\n    for(long i\
    \ = 0; i < n; i++){\n        if(arr[i] != max_num){\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n\
    \        if(arr[i] == max_num){\n            max_count--;\n        }\n    }\n\
    \    ans.push_back(max_num);\n    for(long i = 0; i < n; i++){\n        if(arr[i]\
    \ != max_num){\n            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max_num);\n\
    \    for(long i = 0; i < n; i++){\n        if(arr[i] == max_num){\n          \
    \  max_count++;\n        }\n    }\n    ans.push_back(max_num);\n    for(long i\
    \ = 0; i < n; i++){\n        if(arr[i] != max_num\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfe2_3rq1.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfe2_3rq1.cpp:18:10: error: redeclaration of\
    \ \u2018long int max_count\u2019\n   18 |     long max_count = 0;\n      |   \
    \       ^~~~~~~~~\n/tmp/tmpfe2_3rq1.cpp:17:10: note: \u2018long int max_count\u2019\
    \ previously declared here\n   17 |     long max_count = 0;\n      |         \
    \ ^~~~~~~~~\n/tmp/tmpfe2_3rq1.cpp:105:29: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  105 |         if(arr[i] != max_num\n      |         \
    \  ~                 ^\n      |                             )\n  106 | }\n   \
    \   | ~                            \n/tmp/tmpfe2_3rq1.cpp:106:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpfe2_3rq1.cpp:107:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  107 | int main() {\n      |            ^\n/tmp/tmpfe2_3rq1.cpp:120:1: error:\
    \ expected \u2018}\u2019 at end of input\n  120 | }\n      | ^\n/tmp/tmpfe2_3rq1.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpfe2_3rq1.cpp:120:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  120 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> result;\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    for(long i = 1; i < arr.size(); i++) {\n       \
    \ if(arr[i] > max_num) {\n            max_num = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_num);\n    for(long i = max_index;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max_num) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(max_num);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpheq2_xls: /tmp/tmpheq2_xls.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n     \
    \   for (long j = i - 1; j >= 0; j--) {\n            if (arr[j] > max_val) {\n\
    \                max_val = arr[j];\n                max_idx = j;\n           \
    \ }\n        }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8r5pwiyh: /tmp/tmp8r5pwiyh.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpoaj1ria9: /tmp/tmpoaj1ria9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    for (long i = 0; i < k; i++) {\n        if (max_val < arr[i]) {\n       \
    \     max_val = arr[i];\n        }\n        if (min_val > arr[i]) {\n        \
    \    min_val = arr[i];\n        }\n    }\n    long mid = max_val + min_val;\n\
    \    long mid1 = max_val - min_val;\n    long mid2 = max_val + min_val;\n    long\
    \ mid3 = max_val - min_val;\n    long mid4 = max_val + min_val;\n    long mid5\
    \ = max_val - min_val;\n    long mid6 = max_val + min_val;\n    long mid7 = max_val\
    \ - min_val;\n    long mid8 = max_val + min_val;\n    long mid9 = max_val - min_val;\n\
    \    long mid10 = max_val + min_val;\n    long mid11 = max_val - min_val;\n  \
    \  long mid12 = max_val + min_val;\n    long mid13 = max_val - min_val;\n    long\
    \ mid14 = max_val + min_val;\n    long mid15 = max_val - min_val;\n    long mid16\
    \ = max_val + min_val;\n    long mid17 = max_val - min_val;\n    long mid18 =\
    \ max_val + min_val;\n    long mid19 = max_val - min_val;\n    long mid20 = max_val\
    \ + min_val;\n    long mid21 = max_val - min_val;\n    long mid22 = max_val +\
    \ min_val;\n    long mid23 = max_val - min_val;\n    long mid24 = max_val + min_val;\n\
    \    long mid25 = max_val - min_val;\n    long mid26 = max_val + min_val;\n  \
    \  long mid27 = max_val - min_val;\n    long mid28 = max_val + min_val;\n    long\
    \ mid29 = max_val - min_val;\n    long mid30 = max_val + min_val;\n    long mid31\
    \ = max_val - min_val;\n    long mid32 = max_val + min_val;\n    long mid33 =\
    \ max_val - min_val;\n    long mid34 = max_val + min_val;\n    long mid35 = max_val\
    \ - min_val;\n    long mid36 = max_val + min_val;\n    long mid37 = max_val -\
    \ min_val;\n    long mid38 = max_val + min_val;\n    long mid39 = max_val - min_val;\n\
    \    long mid40 = max_val + min_val;\n    long mid41 = max_val - min_val;\n  \
    \  long mid42 = max_\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wk_yf7t.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp9wk_yf7t.cpp:66:18: error: \u2018max_\u2019\
    \ was not declared in this scope\n   66 |     long mid42 = max_\n      |     \
    \             ^~~~\n/tmp/tmp9wk_yf7t.cpp:67:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_val);\n\
    \        max_idx++;\n        max_val -= arr[max_idx];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9maql5hv: /tmp/tmp9maql5hv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max = 0;\n    for (long i = 0; i < k;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n    \
    \        result.push_back(max);\n            max = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n           \
    \ result.push_back(max);\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        if (arr[i] > max) {\n            result.push_back(max);\n       \
    \     max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n  \
    \      if (arr[i] > max) {\n            result.push_back(max);\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        if\
    \ (arr[i] > max) {\n            result.push_back(max);\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max)\
    \ {\n            result.push_back(max);\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n    \
    \        result.push_back(max);\n            max = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n           \
    \ result.push_back(max);\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        if (arr[i] > max) {\n            result.push_back(max);\n       \
    \     max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n  \
    \      if (arr[i] > max) {\n            result.push_back(max);\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        if\
    \ (arr[i] > max) {\n            result.push_back(max);\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max)\
    \ {\n            result.push_back(max);\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n    \
    \        result.push_back(max);\n            max = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n           \
    \ result.push_back(max);\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        if (arr[i] > max) {\n            result.push_back(max);\n       \
    \     max = \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q1s1efa.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1q1s1efa.cpp:126:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  126 | }\n      | ^\n/tmp/tmp1q1s1efa.cpp:127:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  127 | int main() {\n      |            ^\n/tmp/tmp1q1s1efa.cpp:140:1: error:\
    \ expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmp1q1s1efa.cpp:122:34:\
    \ note: to match this \u2018{\u2019\n  122 |     for (long i = 0; i < k; i++)\
    \ {\n      |                                  ^\n/tmp/tmp1q1s1efa.cpp:140:1: error:\
    \ expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmp1q1s1efa.cpp:12:58:\
    \ note: to match this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp1q1s1efa.cpp:140:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  140 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = 1;\n    long max_idx2 = 0;\n    long max_idx3 = 0;\n    long\
    \ max_idx4 = 0;\n    long max_idx5 = 0;\n    long max_idx6 = 0;\n    long max_idx7\
    \ = 0;\n    long max_idx8 = 0;\n    long max_idx9 = 0;\n    long max_idx10 = 0;\n\
    \    long max_idx11 = 0;\n    long max_idx12 = 0;\n    long max_idx13 = 0;\n \
    \   long max_idx14 = 0;\n    long max_idx15 = 0;\n    long max_idx16 = 0;\n  \
    \  long max_idx17 = 0;\n    long max_idx18 = 0;\n    long max_idx19 = 0;\n   \
    \ long max_idx20 = 0;\n    long max_idx21 = 0;\n    long max_idx22 = 0;\n    long\
    \ max_idx23 = 0;\n    long max_idx24 = 0;\n    long max_idx25 = 0;\n    long max_idx26\
    \ = 0;\n    long max_idx27 = 0;\n    long max_idx28 = 0;\n    long max_idx29 =\
    \ 0;\n    long max_idx30 = 0;\n    long max_idx31 = 0;\n    long max_idx32 = 0;\n\
    \    long max_idx33 = 0;\n    long max_idx34 = 0;\n    long max_idx35 = 0;\n \
    \   long max_idx36 = 0;\n    long max_idx37 = 0;\n    long max_idx38 = 0;\n  \
    \  long max_idx39 = 0;\n    long max_idx40 = 0;\n    long max_idx41 = 0;\n   \
    \ long max_idx42 = 0;\n    long max_idx43 = 0;\n    long max_idx44 = 0;\n    long\
    \ max_idx45 = 0;\n    long max_idx46 = 0;\n    long max_idx47 = 0;\n    long max_idx48\
    \ = 0;\n    long max_idx49 = 0;\n    long max_idx50 = 0;\n    long max_idx51 =\
    \ 0;\n    long max_idx52 = 0;\n    long max_idx53 = 0;\n    long max_idx54 = 0;\n\
    \    long max_idx55 = 0;\n    long max_idx56 = 0;\n    long max_idx57 = 0;\n \
    \   long max_idx58 = 0;\n    long max_idx59 = 0;\n    long max_idx60 = 0;\n  \
    \  long max_idx61 = 0;\n    long max_idx62 = 0;\n    long max_idx63 = 0;\n   \
    \ long max_idx64 = 0;\n    long max_idx65 = 0;\n    long max_idx66 = 0;\n    long\
    \ max_idx67 = 0;\n    long max_idx68 = 0;\n    long max_idx69 = 0;\n    long max_idx70\
    \ = 0;\n    long max_idx71 = 0;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp19dyotb7: /tmp/tmp19dyotb7.cpp:90: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > maxVal)\
    \ {\n            maxVal = arr[i];\n        }\n    }\n    for(long i = 0; i < k;\
    \ i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbb970k11: /tmp/tmpbb970k11.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long curr = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long len = arr.size();\n    long mid = len / 2;\n\
    \    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n\
    \    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 = mid6 /\
    \ 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10 = mid9\
    \ / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long mid13\
    \ = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n   \
    \ long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17\
    \ / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21\
    \ = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n   \
    \ long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25\
    \ / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29\
    \ = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n   \
    \ long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33\
    \ / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37\
    \ = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n   \
    \ long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41\
    \ / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45\
    \ = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;\n   \
    \ long mid48 = mid47 / 2;\n    long mid49 = mid48 / 2;\n    long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lfbs4da.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1lfbs4da.cpp:69:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmp1lfbs4da.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max_num = arr[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_num) {\n\
    \            max_num = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    result.push_back(max_num);\n    for (long i = k; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_num) {\n            result.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1m67jnbn: /tmp/tmp1m67jnbn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrrnxt8y: /tmp/tmpzrrnxt8y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long long ans = 0;\n    long long max = 0;\n    long long i = 0;\n    long\
    \ long j = 0;\n    long long mid = 0;\n    long long len = 0;\n    \n    while(i\
    \ < arr.size() && j < k) {\n        mid = (i + j) / 2;\n        len = arr[mid];\n\
    \        if(len > max) {\n            max = len;\n            ans = mid;\n   \
    \     }\n        else if(len == max) {\n            ans = mid;\n        }\n  \
    \      else if(len < max) {\n            j = mid + 1;\n        }\n        else\
    \ {\n            i = mid + 1;\n        }\n    }\n    \n    std::vector<long> ans;\n\
    \    ans.push_back(arr[ans]);\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsk0pp8se.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpsk0pp8se.cpp:38:23: error: conflicting declaration\
    \ \u2018std::vector<long int> ans\u2019\n   38 |     std::vector<long> ans;\n\
    \      |                       ^~~\n/tmp/tmpsk0pp8se.cpp:13:15: note: previous\
    \ declaration as \u2018long long int ans\u2019\n   13 |     long long ans = 0;\n\
    \      |               ^~~\n/tmp/tmpsk0pp8se.cpp:39:9: error: request for member\
    \ \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018\
    long long int\u2019\n   39 |     ans.push_back(arr[ans]);\n      |         ^~~~~~~~~\n\
    /tmp/tmpsk0pp8se.cpp:41:12: error: could not convert \u2018ans\u2019 from \u2018\
    long long int\u2019 to \u2018std::vector<long int>\u2019\n   41 |     return ans;\n\
    \      |            ^~~\n      |            |\n      |            long long int\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long maxVal = arr[0];\n\
    \    long maxIndex = 0;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > maxVal) {\n            maxVal = arr[i];\n            maxIndex =\
    \ i;\n        }\n    }\n    max.push_back(maxVal);\n    max.push_back(arr[maxIndex]);\n\
    \    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpnamoy9fc: /tmp/tmpnamoy9fc.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> res;\n    long max = 0;\n    long index = 0;\n    long\
    \ sum = 0;\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n   \
    \         index = i;\n        }\n    }\n    while(index != k) {\n        res.push_back(arr[index]);\n\
    \        index++;\n        sum -= arr[index];\n        if(sum > max) {\n     \
    \       max = sum;\n            index = index;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpd02rd8vj: /tmp/tmpd02rd8vj.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ curr = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(max < arr[i])\
    \ {\n            max = arr[i];\n            ans.clear();\n            ans.push_back(i);\n\
    \        }\n        if(arr[i] > max) {\n            ans.clear();\n           \
    \ ans.push_back(i);\n            max = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        ans.push_back(arr[ans[i]]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> result;\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long len = 0;\n    while(i < arr.size() && j <\
    \ k) {\n        if(arr[i] > max) {\n            max = arr[i];\n            len\
    \ = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     len = i;\n        }\n        i++;\n        j++;\n    }\n    while(\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyyaxg6o8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpyyaxg6o8.cpp:124:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  124 | }\n      | ^\n/tmp/tmpyyaxg6o8.cpp:123:11:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  123 |     while(\n\
    \      |          ~^\n      |           )\n  124 | }\n      | ~          \n/tmp/tmpyyaxg6o8.cpp:124:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  124 | }\n \
    \     | ^\n/tmp/tmpyyaxg6o8.cpp:124:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // code here\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long cnt = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n\
    \    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n\
    \    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13\
    \ = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long\
    \ cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n\
    \    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24\
    \ = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long\
    \ cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n\
    \    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35\
    \ = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long\
    \ cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n\
    \    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46\
    \ = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long\
    \ cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n\
    \    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57\
    \ = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long\
    \ cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n\
    \    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68\
    \ = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long\
    \ cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n\
    \    long cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    long cnt79\
    \ = 0;\n    long cnt80 = 0;\n    long \n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2xh9ai9.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpi2xh9ai9.cpp:101:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpi2xh9ai9.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1; i <\
    \ n; i++) {\n        long val = arr[i];\n        long idx = i;\n        while\
    \ (idx > 0 && arr[idx - 1] > val) {\n            ans.push_back(val);\n       \
    \     idx -= 1;\n        }\n        ans.push_back(val);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplrocg2n1: /tmp/tmplrocg2n1.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx; i < k; i++)\
    \ {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkg4h87vr: /tmp/tmpkg4h87vr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long size = arr.size();\n    while(i < size &&\
    \ j < k){\n        if(arr[i] > arr[j]){\n            max = arr[i];\n         \
    \   i = i + 1;\n        }\n        else{\n            max = arr[j];\n        \
    \    j = j + 1;\n        }\n    }\n    while(i < size){\n        max = arr[i];\n\
    \        i = i + 1;\n    }\n    while(j < k){\n        max = arr[j];\n       \
    \ j = j + 1;\n    }\n    ans.push_back(max);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2_p_c9jq: /tmp/tmp2_p_c9jq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    long long ans = 0;\n    long long max = 0;\n\
    \    long long i = 0;\n    long long j = 0;\n    long long cnt = 0;\n    long\
    \ long cnt2 = 0;\n    long long cnt3 = 0;\n    long long cnt4 = 0;\n    long long\
    \ cnt5 = 0;\n    long long cnt6 = 0;\n    long long cnt7 = 0;\n    long long cnt8\
    \ = 0;\n    long long cnt9 = 0;\n    long long cnt10 = 0;\n    long long cnt11\
    \ = 0;\n    long long cnt12 = 0;\n    long long cnt13 = 0;\n    long long cnt14\
    \ = 0;\n    long long cnt15 = 0;\n    long long cnt16 = 0;\n    long long cnt17\
    \ = 0;\n    long long cnt18 = 0;\n    long long cnt19 = 0;\n    long long cnt20\
    \ = 0;\n    long long cnt21 = 0;\n    long long cnt22 = 0;\n    long long cnt23\
    \ = 0;\n    long long cnt24 = 0;\n    long long cnt25 = 0;\n    long long cnt26\
    \ = 0;\n    long long cnt27 = 0;\n    long long cnt28 = 0;\n    long long cnt29\
    \ = 0;\n    long long cnt30 = 0;\n    long long cnt31 = 0;\n    long long cnt32\
    \ = 0;\n    long long cnt33 = 0;\n    long long cnt34 = 0;\n    long long cnt35\
    \ = 0;\n    long long cnt36 = 0;\n    long long cnt37 = 0;\n    long long cnt38\
    \ = 0;\n    long long cnt39 = 0;\n    long long cnt40 = 0;\n    long long cnt41\
    \ = 0;\n    long long cnt42 = 0;\n    long long cnt43 = 0;\n    long long cnt44\
    \ = 0;\n    long long cnt45 = 0;\n    long long cnt46 = 0;\n    long long cnt47\
    \ = 0;\n    long long cnt48 = 0;\n    long long cnt49 = 0;\n    long long cnt50\
    \ = 0;\n    long long cnt51 = 0;\n    long long cnt52 = 0;\n    long long cnt53\
    \ = 0;\n    long long cnt54 = 0;\n    long long cnt55 = 0;\n    long long cnt56\
    \ = 0;\n    long long cnt57 = 0;\n    long long cnt58 = 0;\n    long long cnt59\
    \ = 0;\n    long long cnt60 = 0;\n    long long cnt61 = 0;\n    long long cnt62\
    \ = 0;\n    long long cnt63 = 0;\n    long long cnt64 = 0;\n    long long cnt65\
    \ = 0;\n    long long cnt66 = 0;\n    long long cnt67 = 0;\n    long long cnt68\
    \ = 0;\n    long long cnt69 = 0;\n    long long cnt70 = 0;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpi2fluw6t: /tmp/tmpi2fluw6t.cpp:91: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    std::vector<long> max;\n    for(long i = 0;\
    \ i < k; i++) {\n        max.push_back(arr[i]);\n    }\n    for(long i = k; i\
    \ < arr.size(); i++) {\n        max.push_back(arr[i]);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjfnt2e22: /tmp/tmpjfnt2e22.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    long max_val = arr[0];\n    std::vector<long> ans;\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = 1; i < k; i++) {\n        long max_val = arr[0];\n        for(long j = 1;\
    \ j < n; j++) {\n            if(arr[j] > max_val) {\n                max_val =\
    \ arr[j];\n            }\n        }\n        ans.push_back(max_val);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8jtxxk75: /tmp/tmp8jtxxk75.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> result;\n    long max = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long size = arr.size();\n    long mid = size / 2;\n    while (i <\
    \ size) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    while (j < size) {\n        if (arr[j] > max) {\n  \
    \          max = arr[j];\n        }\n        j++;\n    }\n    if (k == 1) {\n\
    \        result.push_back(max);\n        return result;\n    }\n    if (k == size)\
    \ {\n        result.push_back(max);\n        return result;\n    }\n    if (k\
    \ > size) {\n        return result;\n    }\n    std::vector<long> leftResult =\
    \ maximum(arr, k / 2);\n    std::vector<long> rightResult = maximum(arr, k - k\
    \ / 2);\n    size = leftResult.size(); // size of left result\n    mid = size\
    \ / 2; // mid of left result\n    long leftMax = leftResult[mid]; // max of left\
    \ result\n    long rightMax = rightResult[mid]; // max of right result\n    if\
    \ (leftMax > rightMax) {\n        std::swap(leftMax, rightMax);\n    }\n    long\
    \ maxLeft = 0;\n    long maxRight = 0;\n    long max = 0;\n    long i = 0;\n \
    \   long j = 0;\n    while (i < size) {\n        if (leftResult[i] > maxLeft)\
    \ {\n            maxLeft = leftResult[i];\n        }\n        i++;\n    }\n  \
    \  while (j < size) {\n        if (rightResult[j] > maxRight) {\n            maxRight\
    \ = rightResult[j];\n        }\n        j++;\n    }\n    if (maxLeft > maxRight)\
    \ {\n        std::swap(maxLeft, maxRight);\n    }\n    max = maxLeft;\n    long\
    \ i = 0;\n    while (i < size) {\n        if (leftResult[i] > max) {\n       \
    \     max = leftResult[i];\n        }\n        i++;\n    }\n    result.push_back(max);\n\
    \    size = rightResult.size(); // size of right result\n    mid = size / 2; //\
    \ mid of right result\n    long leftMax = leftResult[mid]; // max of right result\n\
    \    long rightMax = rightResult[mid]; // max of right result\n    if (leftMax\
    \ > rightMax) {\n        std::swap(leftMax, rightMax);\n    }\n    max = maxRight;\n\
    \    long j = 0;\n    while (j < size) {\n        if (rightResult[j] > max) {\n\
    \            max = rightResult[j];\n        }\n        j++;\n    }\n    result.push_back(max);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5t1wsqml.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5t1wsqml.cpp:53:10: error: redeclaration of\
    \ \u2018long int max\u2019\n   53 |     long max = 0;\n      |          ^~~\n\
    /tmp/tmp5t1wsqml.cpp:14:10: note: \u2018long int max\u2019 previously declared\
    \ here\n   14 |     long max = 0;\n      |          ^~~\n/tmp/tmp5t1wsqml.cpp:54:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   54 |     long i = 0;\n  \
    \    |          ^\n/tmp/tmp5t1wsqml.cpp:15:10: note: \u2018long int i\u2019 previously\
    \ declared here\n   15 |     long i = 0;\n      |          ^\n/tmp/tmp5t1wsqml.cpp:55:10:\
    \ error: redeclaration of \u2018long int j\u2019\n   55 |     long j = 0;\n  \
    \    |          ^\n/tmp/tmp5t1wsqml.cpp:16:10: note: \u2018long int j\u2019 previously\
    \ declared here\n   16 |     long j = 0;\n      |          ^\n/tmp/tmp5t1wsqml.cpp:72:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   72 |     long i = 0;\n  \
    \    |          ^\n/tmp/tmp5t1wsqml.cpp:15:10: note: \u2018long int i\u2019 previously\
    \ declared here\n   15 |     long i = 0;\n      |          ^\n/tmp/tmp5t1wsqml.cpp:82:10:\
    \ error: redeclaration of \u2018long int leftMax\u2019\n   82 |     long leftMax\
    \ = leftResult[mid]; // max of right result\n      |          ^~~~~~~\n/tmp/tmp5t1wsqml.cpp:46:10:\
    \ note: \u2018long int leftMax\u2019 previously declared here\n   46 |     long\
    \ leftMax = leftResult[mid]; // max of left result\n      |          ^~~~~~~\n\
    /tmp/tmp5t1wsqml.cpp:83:10: error: redeclaration of \u2018long int rightMax\u2019\
    \n   83 |     long rightMax = rightResult[mid]; // max of right result\n     \
    \ |          ^~~~~~~~\n/tmp/tmp5t1wsqml.cpp:47:10: note: \u2018long int rightMax\u2019\
    \ previously declared here\n   47 |     long rightMax = rightResult[mid]; // max\
    \ of right result\n      |          ^~~~~~~~\n/tmp/tmp5t1wsqml.cpp:88:10: error:\
    \ redeclaration of \u2018long int j\u2019\n   88 |     long j = 0;\n      |  \
    \        ^\n/tmp/tmp5t1wsqml.cpp:16:10: note: \u2018long int j\u2019 previously\
    \ declared here\n   16 |     long j = 0;\n      |          ^\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long cur = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n \
    \           ans.push_back(arr[cur]);\n            ans.push_back(arr[cur + 1]);\n\
    \            cur++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp542ra42u: /tmp/tmp542ra42u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long long max = 0;\n    long long ans = 0;\n    long\
    \ long cnt = 0;\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            ans = i;\n        }\n    }\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n\
    \            cnt++;\n        }\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans\
    \ = i;\n        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] == max) {\n            cnt++;\n        }\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n            ans = i;\n        }\n    }\n    for(long long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            cnt++;\n\
    \        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            ans = i;\n        }\n    }\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n\
    \            cnt++;\n        }\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans\
    \ = i;\n        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] == max) {\n            cnt++;\n        }\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n            ans = i;\n        }\n    }\n    for(long long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            cnt++;\n\
    \        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            ans = i;\n        }\n    }\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n\
    \            cnt++;\n        }\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans\
    \ = i;\n        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] == max) {\n            cnt++;\n        }\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n            ans = i;\n        }\n    }\n    for(long long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            cnt++;\n\
    \        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0bomrsh1.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0bomrsh1.cpp:117:18: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  117 |         if(arr[i]\n      |       \
    \    ~      ^\n      |                  )\n  118 | }\n      | ~              \
    \   \n/tmp/tmp0bomrsh1.cpp:118:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  118 | }\n      | ^\n/tmp/tmp0bomrsh1.cpp:119:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  119 | int main() {\n     \
    \ |            ^\n/tmp/tmp0bomrsh1.cpp:132:1: error: expected \u2018}\u2019 at\
    \ end of input\n  132 | }\n      | ^\n/tmp/tmp0bomrsh1.cpp:12:58: note: to match\
    \ this \u2018{\u2019\n   12 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmp0bomrsh1.cpp:132:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  132 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> max;\n    long maxNum = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > maxNum) {\n \
    \           maxNum = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max.push_back(maxNum);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppppz98_s: /tmp/tmppppz98_s.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long curr_idx = max_idx;\n    while (curr_idx\
    \ < arr.size() && arr[curr_idx] == arr[curr_idx - 1]) {\n        curr_idx++;\n\
    \    }\n    for (long i = curr_idx + 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > arr[curr_idx]) {\n            ans.push_back(arr[i]);\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6r4ptb6l: /tmp/tmp6r4ptb6l.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long size = arr.size();\n    while(i < size &&\
    \ j < k){\n        if(arr[i] > arr[j]){\n            max = arr[i];\n         \
    \   i = i + 1;\n        }\n        else{\n            max = arr[j];\n        \
    \    j = j + 1;\n        }\n    }\n    while(i < size){\n        max = arr[i];\n\
    \        i = i + 1;\n    }\n    while(j < k){\n        max = arr[j];\n       \
    \ j = j + 1;\n    }\n    ans.push_back(max);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2_p_c9jq: /tmp/tmp2_p_c9jq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // Your code here\n    long max_so_far = arr[0];\n    std::vector<long> max_ending_here;\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_so_far) {\n\
    \            max_so_far = arr[i];\n        }\n    }\n    max_ending_here.push_back(max_so_far);\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_so_far) {\n\
    \            max_so_far = arr[i];\n        }\n        if(arr[i] > max_ending_here[max_ending_here.size()-1])\
    \ {\n            max_ending_here.push_back(max_so_far);\n        }\n    }\n  \
    \  return max_ending_here;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp34cicedt: /tmp/tmp34cicedt.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095903
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    // write your code here\n    long long ans = arr[0];\n    long long max =\
    \ 0;\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    long long count = 0;\n \
    \   for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n\
    \            count++;\n        }\n    }\n    std::vector<long> ans;\n    while(count\
    \ < k) {\n        ans.push_back(max);\n        max += 1;\n        count = 0;\n\
    \        for(long long i = 0; i < arr.size(); i++) {\n            if(arr[i] ==\
    \ max) {\n                count++;\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6qstori.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm6qstori.cpp:27:23: error: conflicting declaration\
    \ \u2018std::vector<long int> ans\u2019\n   27 |     std::vector<long> ans;\n\
    \      |                       ^~~\n/tmp/tmpm6qstori.cpp:14:15: note: previous\
    \ declaration as \u2018long long int ans\u2019\n   14 |     long long ans = arr[0];\n\
    \      |               ^~~\n/tmp/tmpm6qstori.cpp:29:13: error: request for member\
    \ \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018\
    long long int\u2019\n   29 |         ans.push_back(max);\n      |            \
    \ ^~~~~~~~~\n/tmp/tmpm6qstori.cpp:38:12: error: could not convert \u2018ans\u2019\
    \ from \u2018long long int\u2019 to \u2018std::vector<long int>\u2019\n   38 |\
    \     return ans;\n      |            ^~~\n      |            |\n      |     \
    \       long long int\n"
  stdout: ''
  timestamp: 1660095902
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    long n = arr.size();\n    std::vector<long> max_arr(n);\n    long max_val\
    \ = arr[0];\n    long max_pos = 0;\n    for (long i = 1; i < n; i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_pos\
    \ = i;\n        }\n    }\n    max_arr[max_pos] = max_val;\n    for (long i = max_pos\
    \ + 1; i < k; i++) {\n        max_arr[i - 1] = arr[i];\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmper8ncu7t: /tmp/tmper8ncu7t.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n\
    // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n//\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
    \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long i\
    \ = max_idx + 1; i < arr.size(); i++) {\n        long val = arr[i];\n        if\
    \ (val > max_val) {\n            max_val = val;\n            max_idx = i;\n  \
    \      }\n    }\n    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxohu0un3: /tmp/tmpxohu0un3.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095903
