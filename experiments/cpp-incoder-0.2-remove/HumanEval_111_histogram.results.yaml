language: cpp
name: HumanEval_111_histogram
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            it->second++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp09pwe3z2: /tmp/tmp09pwe3z2.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count=0;\n    for(auto &c:test) {\n        temp = c;\n     \
    \   ++count;\n        if(m.find(temp)==m.end()) {\n            m[temp] = count;\n\
    \        } else {\n            if(m[temp]>count) {\n                m[temp] =\
    \ count;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpydh84esa: /tmp/tmpydh84esa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        ++count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt640g72s: /tmp/tmpt640g72s.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for(auto &c: test) {\n        temp = c;\n    \
    \    if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else {\n\
    \            m[temp] += 1;\n        }\n        if(m[temp] > max) {\n         \
    \   max = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpetntpd40: /tmp/tmpetntpd40.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        freq += m[word];\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0edfvftz: /tmp/tmp0edfvftz.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = dict.find(word);\n        if(it == dict.end()) {\n           \
    \ dict[word] = 1;\n        } else {\n            freq = it->second;\n        \
    \    dict[word] += 1;\n        }\n    }\n    return dict;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp25i29t18: /tmp/tmp25i29t18.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        auto it = m.find(temp);\n        if(it != m.end()) {\n            it->second++;\n\
    \        } else {\n            m[temp] = 1;\n        }\n        if(it->second\
    \ > maxCount) {\n            maxCount = it->second;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpj2gp9gqd: /tmp/tmpj2gp9gqd.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     ++freq;\n        if(m.find(word) == m.end()) {\n            m[word] = freq;\n\
    \        } else {\n            m[word] = m[word] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmporv1_mjv: /tmp/tmporv1_mjv.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     ++freq;\n        dict.insert(std::pair<std::string,long>(word,freq));\n\
    \    }\n    return dict;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsr9snsj7: /tmp/tmpsr9snsj7.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] = m[temp] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjgze8heu: /tmp/tmpjgze8heu.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long maxCount = 0;\n    for(auto &c: test) {\n    \
    \    temp = c;\n        histogram[temp]++;\n        if(histogram[temp] > maxCount)\
    \ {\n            maxCount = histogram[temp];\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjp9wqap6: /tmp/tmpjp9wqap6.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 1;\n    for(auto &c: test) {\n        if(m.find(c) ==\
    \ m.end()) {\n            m[c] = count;\n            count = 1;\n        } else\
    \ {\n            count = m[c];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvx3rox7.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpxvx3rox7.cpp:12:20: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   12 |         if(m.find(c) == m.end()) {\n \
    \     |                    ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpxvx3rox7.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduct"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        freq += m[word];\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjiu5q31p: /tmp/tmpjiu5q31p.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c: test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it != m.end()) {\n            count++;\n\
    \        } else {\n            m[word] = count;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6hr2izq_: /tmp/tmp6hr2izq_.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = dict.find(word);\n        if(it == dict.end()) {\n          \
    \  dict[word] = 1;\n        } else {\n            freq = it->second;\n       \
    \     dict[word] += 1;\n        }\n    }\n    return dict;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzp0c4buz: /tmp/tmpzp0c4buz.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c : test) {\n        word = c;\n \
    \       dict[word] = dict[word] + count;\n        count = count + 1;\n    }\n\
    \    return dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3nbnh08r: /tmp/tmp3nbnh08r.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        freq += m[temp];\n    }\n    for(auto\
    \ &c: m) {\n        if(freq == c.second) {\n            std::cout << c.first <<\
    \ \" \" << c.second << std::endl;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp2vtlqdi: /tmp/tmpp2vtlqdi.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        temp = c;\n \
    \       ++freq;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ freq;\n        } else {\n            if (m[temp] > freq) {\n               \
    \ m[temp] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsnvfahm7: /tmp/tmpsnvfahm7.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it != m.end()) {\n            freq\
    \ = it->second;\n        }\n        else {\n            freq = 1;\n        }\n\
    \        m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5xxgg6e5: /tmp/tmp5xxgg6e5.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq = it->second;\n            ++it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfs3t7l8y: /tmp/tmpfs3t7l8y.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c : test) {\n        temp = c;\n  \
    \      ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] = m[temp] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi0dfnoqf: /tmp/tmpi0dfnoqf.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        else {\n            freq = 1;\n        }\n \
    \       m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0wayfpyv: /tmp/tmp0wayfpyv.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        if(m[temp] > maxCount) {\n   \
    \         maxCount = m[temp];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuqw0e6ca: /tmp/tmpuqw0e6ca.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word]++;\n    }\n    for(auto &c: histogram) {\n\
    \        if(c.second > count) {\n            count = c.second;\n        }\n  \
    \  }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2pynu55: /tmp/tmpo2pynu55.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvz441yhd: /tmp/tmpvz441yhd.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        ++count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt640g72s: /tmp/tmpt640g72s.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvz441yhd: /tmp/tmpvz441yhd.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it != m.end()) {\n            freq\
    \ = it->second;\n        }\n        else {\n            freq = 1;\n        }\n\
    \        m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwalh_e_q: /tmp/tmpwalh_e_q.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx703fkft: /tmp/tmpx703fkft.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for (auto c : test) {\n        word = c +\
    \ word;\n        auto it = m.find(word);\n        if (it == m.end()) {\n     \
    \       m[word] = 1;\n        } else {\n            m[word] += 1;\n        }\n\
    \        if (m[word] > maxCount) {\n            maxCount = m[word];\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6fj6n6v9: /tmp/tmp6fj6n6v9.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it != m.end()) {\n            freq\
    \ = it->second;\n        }\n        else {\n            freq = 1;\n        }\n\
    \        m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwalh_e_q: /tmp/tmpwalh_e_q.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it != m.end()) {\n            freq\
    \ = it->second;\n        }\n        else {\n            freq = 1;\n          \
    \  m.insert(std::pair<std::string,long>(word,freq));\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbetheqjr: /tmp/tmpbetheqjr.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            it->second++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6l348qg1: /tmp/tmp6l348qg1.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        count += 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxbapu_zl: /tmp/tmpxbapu_zl.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m.insert(std::pair<std::string,long>(c, 1));\n        } else {\n   \
    \         it->second++;\n        }\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpecytvw7r.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpecytvw7r.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpecytvw7r.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq += it->second;\n            it->second++;\n\
    \        }\n    }\n    for(auto it = m.begin(); it != m.end(); ++it) {\n     \
    \   if(it->second > freq) {\n            freq = it->second;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqgjg2122: /tmp/tmpqgjg2122.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long count = 0;\n    for(auto &i : test) {\n \
    \       temp = i;\n        while(temp.size()>0) {\n            auto it = m.find(temp);\n\
    \            if(it != m.end()) {\n                count+=it->second;\n       \
    \         m.erase(it);\n            }\n            temp = temp.substr(0,temp.size()-1);\n\
    \        }\n        if(count>max) {\n            max = count;\n        }\n   \
    \ }\n    for(auto &i : m) {\n        std::cout << i.first << \": \" << i.second\
    \ << std::endl;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5cntfn97: /tmp/tmp5cntfn97.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        temp = c;\n \
    \       freq = m.at(temp);\n        m.insert({temp,freq+1});\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for (auto &c: test) {\n        temp = c;\n   \
    \     if (m.find(temp) != m.end()) {\n            m[temp]++;\n            if (m[temp]\
    \ > max) {\n                max = m[temp];\n            }\n        } else {\n\
    \            m[temp] = 1;\n            if (m[temp] > max) {\n                max\
    \ = m[temp];\n            }\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqxiozesn: /tmp/tmpqxiozesn.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            it->second +=\
    \ 1;\n        }\n    }\n    for(auto &c: m) {\n        std::cout << c.first <<\
    \ \" \" << c.second << std::endl;\n    }\n    return m;\n}\nint main() {\n   \
    \ auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv9wxa7jf: /tmp/tmpv9wxa7jf.cpp:28: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: '  3

    a 2

    b 2

    '
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for(auto &i : test) {\n        temp = i;\n   \
    \     auto it = m.find(temp);\n        if(it != m.end()) {\n            it->second++;\n\
    \        } else {\n            m[temp] = 1;\n        }\n        if(it->second\
    \ > max) {\n            max = it->second;\n        }\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp03r782c6: /tmp/tmp03r782c6.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto &c: test) {\n        word\
    \ = c;\n        ++freq;\n        histogram[word] += freq;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3h72fubr: /tmp/tmp3h72fubr.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph53s2xac: /tmp/tmph53s2xac.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq += it->second;\n            it->second = freq;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxy11d1l7: /tmp/tmpxy11d1l7.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long maxCount = 0;\n    for(auto &c: test) {\n    \
    \    temp = c;\n        histogram[temp]++;\n        if(histogram[temp] > maxCount)\
    \ {\n            maxCount = histogram[temp];\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjp9wqap6: /tmp/tmpjp9wqap6.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for (auto c : test) {\n        word = c + word;\n\
    \        ++count;\n    }\n    m[word] = count;\n    for (auto c : test) {\n  \
    \      word = c + word;\n        auto it = m.find(word);\n        if (it != m.end())\
    \ {\n            if (it->second > count) {\n                m[word] = count;\n\
    \            }\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu1yxe8lc: /tmp/tmpu1yxe8lc.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      freq++;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            if (m[word] > freq) {\n               \
    \ m[word] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd9ezfw2n: /tmp/tmpd9ezfw2n.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long count = 0;\n    for(int i=0;i<test.size();i++)\
    \ {\n        temp = test.substr(i,1);\n        if(m.find(temp) == m.end()) {\n\
    \            m[temp] = 1;\n        } else {\n            m[temp]++;\n        }\n\
    \        if(m[temp] > max) {\n            max = m[temp];\n        }\n    }\n \
    \   for(auto it=m.begin();it!=m.end();it++) {\n        if(it->second == max) {\n\
    \            count++;\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppa2zd8si: /tmp/tmppa2zd8si.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long cnt = 0;\n    for(auto &c:test) {\n     \
    \   temp = c;\n        ++cnt;\n        auto it = m.find(temp);\n        if(it\
    \ == m.end()) {\n            m[temp] = cnt;\n        } else {\n            max\
    \ = std::max(max,it->second);\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo99fphqc: /tmp/tmpo99fphqc.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  word = c + word;\n        ++count;\n        histogram[word] += count;\n   \
    \ }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpina3ut0m: /tmp/tmpina3ut0m.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      ++freq;\n        if(m.find(word) == m.end()) {\n            m[word] = freq;\n\
    \        } else {\n            m[word] += freq;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4kfqpjka: /tmp/tmp4kfqpjka.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for(auto c : test) {\n        word = c;\n\
    \        if(dict.find(word) == dict.end()) {\n            dict[word] = 1;\n  \
    \      } else {\n            dict[word]++;\n        }\n        if(dict[word] >\
    \ maxCount) {\n            maxCount = dict[word];\n        }\n    }\n    return\
    \ dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsvgk43zx: /tmp/tmpsvgk43zx.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c : test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n  \
    \          m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n  \
    \  }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpda7hjbwx.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpda7hjbwx.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpda7hjbwx.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long max = 0;\n    for (auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if (it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            m[word] += 1;\n            if (m[word] >\
    \ max) {\n                max = m[word];\n            }\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpssqeez7y: /tmp/tmpssqeez7y.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            freq =\
    \ 1;\n            m[word] = freq;\n        } else {\n            freq = it->second+1;\n\
    \            m[word] = freq;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1d0w0ei5: /tmp/tmp1d0w0ei5.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        count += 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxbapu_zl: /tmp/tmpxbapu_zl.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for(auto &c: test) {\n        word = c;\n\
    \        if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        if(m[word] > maxCount) {\n   \
    \         maxCount = m[word];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7_8vsecw: /tmp/tmp7_8vsecw.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long count = 0;\n    for(auto &c: test) {\n  \
    \      temp = c;\n        ++count;\n        if(m.find(temp) == m.end()) {\n  \
    \          m[temp] = count;\n        } else {\n            if(m[temp] > count)\
    \ {\n                m[temp] = count;\n            }\n        }\n        if(count\
    \ > max) {\n            max = count;\n        }\n    }\n    return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpj3kbi1cz: /tmp/tmpj3kbi1cz.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      freq++;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            if (m[word] > freq) {\n               \
    \ m[word] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd9ezfw2n: /tmp/tmpd9ezfw2n.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     freq++;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            if(m[temp] > freq) {\n                m[temp] =\
    \ freq;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n   \
    \ auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnkczdfp3: /tmp/tmpnkczdfp3.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count=0;\n    for(auto &c:test) {\n        temp = c;\n     \
    \   ++count;\n        m.insert({temp,count});\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6kbguw9g: /tmp/tmp6kbguw9g.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto c : test) {\n        word = word +\
    \ c;\n        if(m.find(word) == m.end()) {\n            m[word] = count;\n  \
    \      } else {\n            m[word] = m[word] + count;\n        }\n        count\
    \ = count + 1;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp87qtxtsf: /tmp/tmp87qtxtsf.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long maxCount = 0;\n    std::string maxLetter;\n  \
    \  for (auto &c : test) {\n        temp = c;\n        histogram[temp]++;\n   \
    \     if (histogram[temp] > maxCount) {\n            maxCount = histogram[temp];\n\
    \            maxLetter = temp;\n        }\n    }\n    return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu6pc40al: /tmp/tmpu6pc40al.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c + word;\n        ++count;\n        histogram[word] = count;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1zh6zq9m: /tmp/tmp1zh6zq9m.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     ++freq;\n        auto it = m.find(word);\n        if(it == m.end()) {\n\
    \            m.insert({word,freq});\n        } else {\n            it->second\
    \ += freq;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3t1lxjhu: /tmp/tmp3t1lxjhu.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp] += 1;\n        }\n        if(m[temp] > maxCount) {\n\
    \            maxCount = m[temp];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy233ccwa: /tmp/tmpy233ccwa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        freq += m[word];\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0edfvftz: /tmp/tmp0edfvftz.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp\
    \ = c;\n        freq = std::count(test.begin(), test.end(), c);\n        histogram[temp]\
    \ = freq;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp43_yxx_x: /tmp/tmp43_yxx_x.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long count = 0;\n    for(int i = 0; i < test.size();\
    \ i++) {\n        temp = test[i];\n        if(m.find(temp) == m.end()) {\n   \
    \         m[temp] = 1;\n        } else {\n            m[temp]++;\n        }\n\
    \        if(m[temp] > max) {\n            max = m[temp];\n        }\n    }\n \
    \   for(std::map<std::string,long>::iterator it = m.begin(); it != m.end(); ++it)\
    \ {\n        if(it->second == max) {\n            count++;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp67ymcytc: /tmp/tmp67ymcytc.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptgkx15lj: /tmp/tmptgkx15lj.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     freq = m.count(word);\n        m.insert({word,freq+1});\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpylt_uqf0: /tmp/tmpylt_uqf0.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] = m[temp] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnk7s0dwo: /tmp/tmpnk7s0dwo.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph53s2xac: /tmp/tmph53s2xac.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        if(m.find(temp) == m.end())\n            m[temp] = freq;\n\
    \        else\n            m[temp] = m[temp] + freq;\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ke5ay44: /tmp/tmp8ke5ay44.cpp:23: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for (auto &c : test) {\n        temp = c;\n\
    \        if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        if (m[temp] > maxCount) {\n  \
    \          maxCount = m[temp];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqctrxxew: /tmp/tmpqctrxxew.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long maxCount = 0;\n    for(auto c : test) {\n    \
    \    word = word+c;\n        if(histogram.find(word) == histogram.end()) {\n \
    \           histogram[word] = 1;\n        } else {\n            histogram[word]++;\n\
    \        }\n        if(histogram[word] > maxCount) {\n            maxCount = histogram[word];\n\
    \        }\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmprlhp9vok: /tmp/tmprlhp9vok.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto c : test) {\n        word\
    \ = c;\n        ++freq;\n        histogram[word] = freq;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbxemdv8i: /tmp/tmpbxemdv8i.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            freq =\
    \ 1;\n            m[word] = freq;\n        } else {\n            freq = it->second+1;\n\
    \            m[word] = freq;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpae8dzmqa: /tmp/tmpae8dzmqa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c : test) {\n        word = c;\n \
    \       dict[word] = dict[word] + count;\n        count += 1;\n    }\n    return\
    \ dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd2tc2xls: /tmp/tmpd2tc2xls.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count=0;\n    for(int i=0;i<test.size();i++){\n        temp\
    \ = test.substr(i,1);\n        if(m.find(temp)==m.end()){\n            m[temp]=1;\n\
    \        }\n        else{\n            m[temp]++;\n        }\n    }\n    for(auto\
    \ it=m.begin();it!=m.end();it++){\n        if(it->second>count){\n           \
    \ count=it->second;\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2489uopv: /tmp/tmp2489uopv.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c + word;\n        ++count;\n        histogram[word] = count;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp64w9sn4h: /tmp/tmp64w9sn4h.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto c : test) {\n        word\
    \ = c;\n        ++freq;\n        histogram[word] = freq;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbxemdv8i: /tmp/tmpbxemdv8i.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            it->second +=\
    \ 1;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfucefn_i: /tmp/tmpfucefn_i.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c: test) {\n        word = c;\n  \
    \      ++m[word];\n    }\n    for(auto &c: m) {\n        if(c.second > count)\
    \ {\n            count = c.second;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbw941w0f: /tmp/tmpbw941w0f.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgvb6vm2t: /tmp/tmpgvb6vm2t.cpp:19: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto &c : test) {\n       \
    \ word = c;\n        auto it = histogram.find(word);\n        if(it == histogram.end())\
    \ {\n            histogram[word] = 1;\n        } else {\n            freq = it->second;\n\
    \            histogram[word] += 1;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn9zs0ev7: /tmp/tmpn9zs0ev7.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        else {\n            freq = 1;\n        }\n \
    \       m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpum4p8t97: /tmp/tmpum4p8t97.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            m.insert({word,it->second+1});\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyai1y93h: /tmp/tmpyai1y93h.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for (auto &c: test) {\n        temp = c;\n   \
    \     if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        if (m[temp] > max) {\n       \
    \     max = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpoe1m110w: /tmp/tmpoe1m110w.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c: test) {\n        word\
    \ = c;\n        histogram[word] += count;\n        ++count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr3qn2avu: /tmp/tmpr3qn2avu.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq++;\n            it->second++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxu3089ib: /tmp/tmpxu3089ib.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq++;\n            it->second++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd6r509ll: /tmp/tmpd6r509ll.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq = it->second;\n            freq++;\n     \
    \       m.insert(std::pair<std::string,long>(word,freq));\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6rnrlxjn: /tmp/tmp6rnrlxjn.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            freq++;\n            m[word] += 1;\n   \
    \     }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp705m285t: /tmp/tmp705m285t.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     freq = m.count(word);\n        m.insert({word,freq+1});\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpylt_uqf0: /tmp/tmpylt_uqf0.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long maxCount = 0;\n    for (auto c : test) {\n   \
    \     word = c + word;\n        histogram[word] += 1;\n        if (histogram[word]\
    \ > maxCount) {\n            maxCount = histogram[word];\n        }\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpafeq50rw: /tmp/tmpafeq50rw.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            ++it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzq10jrlp: /tmp/tmpzq10jrlp.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for(auto &c: test) {\n        temp = c;\n    \
    \    ++m[temp];\n        if(m[temp] > max) {\n            max = m[temp];\n   \
    \     }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpefutysw2: /tmp/tmpefutysw2.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c:test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = count;\n        } else {\n            count = it->second;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9fcwp8lc: /tmp/tmp9fcwp8lc.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      ++freq;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            if (m[word] > freq) {\n               \
    \ m[word] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvpbqq0bf: /tmp/tmpvpbqq0bf.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        ++count;\n    }\n   \
    \ return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1uxlsxsh: /tmp/tmp1uxlsxsh.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n        }\n    }\n    for(auto\
    \ &it : m) {\n        if(it.second > freq) {\n            freq = it.second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxmz8rsh3: /tmp/tmpxmz8rsh3.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long maxCount = 0;\n    std::string maxLetter;\n    for (auto &c\
    \ : test) {\n        word = c;\n        dict[word]++;\n        if (dict[word]\
    \ > maxCount) {\n            maxCount = dict[word];\n            maxLetter = word;\n\
    \        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7bspa4v3: /tmp/tmp7bspa4v3.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c;\n        if(histogram.find(word) == histogram.end()) {\n         \
    \   histogram[word] = count;\n        } else {\n            histogram[word] +=\
    \ count;\n        }\n        ++count;\n    }\n    return histogram;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptxjud7d3: /tmp/tmptxjud7d3.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto &c: test) {\n        word = c;\n  \
    \      freq++;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            if (m[word] > freq) {\n               \
    \ m[word] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphmiuj64f: /tmp/tmphmiuj64f.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it != m.end()) {\n            freq\
    \ = it->second;\n        }\n        else {\n            freq = 1;\n        }\n\
    \        m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5xxgg6e5: /tmp/tmp5xxgg6e5.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] = m[temp] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjgze8heu: /tmp/tmpjgze8heu.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c: test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            ++it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmprq2c5ken: /tmp/tmprq2c5ken.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long maxCount = 0;\n    for(auto &c: test) {\n    \
    \    word = c;\n        histogram[word]++;\n        if(histogram[word] > maxCount)\
    \ {\n            maxCount = histogram[word];\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnuum73dd: /tmp/tmpnuum73dd.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c : test) {\n        temp = c;\n  \
    \      ++freq;\n        auto it = m.find(temp);\n        if(it == m.end()) {\n\
    \            m[temp] = freq;\n        } else {\n            it->second += freq;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr5ktkymu: /tmp/tmpr5ktkymu.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long max = 0;\n    for(auto c: test) {\n        word = c;\n     \
    \   if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else {\n\
    \            m[word] += 1;\n        }\n        if(m[word] > max) {\n         \
    \   max = m[word];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx8vo1sta: /tmp/tmpx8vo1sta.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m.insert({c,1});\n        } else {\n            m[c]++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp83q6pvri.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp83q6pvri.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp83q6pvri.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += 1;\n    }\n    for(auto &c: histogram)\
    \ {\n        if(c.second > count) {\n            count = c.second;\n        }\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv_bvqmip: /tmp/tmpv_bvqmip.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for(auto &c: test) {\n        temp = c;\n    \
    \    if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else {\n\
    \            m[temp] += 1;\n        }\n        if(m[temp] > max) {\n         \
    \   max = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpetntpd40: /tmp/tmpetntpd40.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long max = 0;\n    long curr = 0;\n    for(auto c: test) {\n    \
    \    word = word+c;\n        if(m.find(word) == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            m[word]++;\n        }\n        if(m[word]\
    \ > max) {\n            max = m[word];\n        }\n    }\n    return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp25iv9xlm: /tmp/tmp25iv9xlm.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long maxCount = 0;\n    long currentCount = 0;\n    std::string maxLetter;\n\
    \    std::string currentLetter;\n    for(auto c : test) {\n        word = word\
    \ + c;\n        currentCount++;\n        if(dict.find(word) == dict.end()) {\n\
    \            dict[word] = currentCount;\n        } else {\n            if(dict[word]\
    \ > currentCount) {\n                dict[word] = currentCount;\n            \
    \    maxLetter = word;\n                currentCount = dict[word];\n         \
    \   }\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5j0ge6ac: /tmp/tmp5j0ge6ac.cpp:31: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq = it->second;\n            freq++;\n     \
    \       m.insert(std::pair<std::string,long>(word,freq));\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgqflinir: /tmp/tmpgqflinir.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        freq += m[word];\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmcyf5ld8: /tmp/tmpmcyf5ld8.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(int i = 0; i < test.size();\
    \ i++) {\n        temp = test[i];\n        if(histogram.find(temp) == histogram.end())\
    \ {\n            histogram[temp] = count;\n        } else {\n            histogram[temp]\
    \ += count;\n        }\n        count++;\n    }\n    return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsrtr43mp: /tmp/tmpsrtr43mp.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptgkx15lj: /tmp/tmptgkx15lj.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c + word;\n        ++count;\n    }\n    histogram[word] = count;\n  \
    \  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd60ov_r0: /tmp/tmpd60ov_r0.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        histogram[word] = count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph3qezowe: /tmp/tmph3qezowe.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        ++count;\n    }\n   \
    \ return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1uxlsxsh: /tmp/tmp1uxlsxsh.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq++;\n            it->second++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd6r509ll: /tmp/tmpd6r509ll.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            freq =\
    \ 1;\n            m[word] = freq;\n        } else {\n            freq = it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjf4j87rh: /tmp/tmpjf4j87rh.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     freq++;\n        if(m.find(word) == m.end())\n            m[word] = freq;\n\
    \        else\n            m[word] += freq;\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpta3djw56: /tmp/tmpta3djw56.cpp:23: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto c : test) {\n        word\
    \ = c + word;\n        freq++;\n        histogram[word] = freq;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbfbpp6sw: /tmp/tmpbfbpp6sw.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for(auto &c: test) {\n        word = c;\n\
    \        if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        if(m[word] > maxCount) {\n   \
    \         maxCount = m[word];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7_8vsecw: /tmp/tmp7_8vsecw.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word]++;\n    }\n    for(auto &c: histogram) {\n\
    \        if(c.second > count) {\n            count = c.second;\n        }\n  \
    \  }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2pynu55: /tmp/tmpo2pynu55.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq = it->second;\n            freq++;\n     \
    \       m.insert(std::pair<std::string,long>(word,freq));\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6rnrlxjn: /tmp/tmp6rnrlxjn.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for(auto &c: test) {\n        word = c;\n\
    \        auto it = dict.find(word);\n        if(it == dict.end()) {\n        \
    \    dict[word] = 1;\n        } else {\n            dict[word] += 1;\n       \
    \ }\n        if(dict[word] > maxCount) {\n            maxCount = dict[word];\n\
    \        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjwg4s4c3: /tmp/tmpjwg4s4c3.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            m.insert({word,it->second+1});\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3mdkvdrs: /tmp/tmp3mdkvdrs.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            freq += it->second;\n            m[word]++;\n\
    \        }\n    }\n    for(auto &c: m) {\n        if(freq > c.second) {\n    \
    \        freq = c.second;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot4od425: /tmp/tmpot4od425.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq = it->second;\n            freq++;\n     \
    \       m.insert(std::pair<std::string,long>(word,freq));\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd7ucswva: /tmp/tmpd7ucswva.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c: test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,count));\n\
    \        } else {\n            count = it->second;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmanc4pzh: /tmp/tmpmanc4pzh.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c: test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        else {\n            freq = 1;\n        }\n \
    \       m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmfc59af7: /tmp/tmpmfc59af7.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            freq =\
    \ 1;\n            m[word] = freq;\n        } else {\n            freq = it->second+1;\n\
    \            m[word] = freq;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpae8dzmqa: /tmp/tmpae8dzmqa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,1));\n\
    \        } else {\n            freq++;\n            it->second++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpe7xuih_l: /tmp/tmpe7xuih_l.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx703fkft: /tmp/tmpx703fkft.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     if(m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        freq += m[word];\n    }\n    for(auto\
    \ i : m) {\n        if(i.second > freq) {\n            freq = i.second;\n    \
    \    }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpda4mfk4s: /tmp/tmpda4mfk4s.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c + word;\n        ++count;\n        histogram[word] += count;\n   \
    \ }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp84c3e8z_: /tmp/tmp84c3e8z_.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for (auto &c : test) {\n        temp = c;\n  \
    \      if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp] += 1;\n        }\n        if (m[temp] > max) {\n    \
    \        max = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpralz19x1: /tmp/tmpralz19x1.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &i : test) {\n        temp = i;\n\
    \        long count = 0;\n        for(auto &j : test) {\n            if(j == temp)\
    \ {\n                count++;\n            }\n        }\n        m[temp] = count;\n\
    \        if(count > maxCount) {\n            maxCount = count;\n        }\n  \
    \  }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzof6geux.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpzof6geux.cpp:15:18: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018char\u2019 and\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n\
    \   15 |             if(j == temp) {\n      |                ~ ^~ ~~~~\n     \
    \ |                |    |\n      |                char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzof6geux.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzof6geux.cpp:15:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   15 |             if(j == temp) {\n      |         \
    \            ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n    \
    \             from /tmp/tmpzof6geux.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpzof6geux.cpp:15:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   15 |             if(j\
    \ == temp) {\n      |  "
  stdout: ''
  timestamp: 1660123931
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long freq = 0;\n    for(auto &c : test) {\n       \
    \ word = c;\n        ++freq;\n        histogram[word] = freq;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmps1sxnon2: /tmp/tmps1sxnon2.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        else {\n            freq = 1;\n        }\n \
    \       m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdud_1rwg: /tmp/tmpdud_1rwg.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        ++count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt640g72s: /tmp/tmpt640g72s.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    long count = 0;\n    for(auto &c: test) {\n  \
    \      temp = c;\n        if(m.find(temp) == m.end()) {\n            m[temp] =\
    \ 1;\n        } else {\n            m[temp]++;\n        }\n        if(m[temp]\
    \ > max) {\n            max = m[temp];\n        }\n    }\n    for(auto &c: m)\
    \ {\n        if(c.second > count) {\n            count = c.second;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph0t4ibs6: /tmp/tmph0t4ibs6.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c: test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            ++it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmprq2c5ken: /tmp/tmprq2c5ken.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        else {\n            freq = 1;\n        }\n \
    \       m[word] = freq;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0wayfpyv: /tmp/tmp0wayfpyv.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjpkv_9q_: /tmp/tmpjpkv_9q_.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c: test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        m[word] = freq + 1;\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppl0cfj52: /tmp/tmppl0cfj52.cpp:23: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long max = 0;\n    for (auto c : test) {\n        word = c;\n   \
    \     if (m.find(word) == m.end()) {\n            m[word] = 1;\n        } else\
    \ {\n            m[word]++;\n        }\n        if (m[word] > max) {\n       \
    \     max = m[word];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp24dnq2vj: /tmp/tmp24dnq2vj.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        ++count;\n    }\n   \
    \ return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1uxlsxsh: /tmp/tmp1uxlsxsh.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      dict.insert({word,freq});\n        freq++;\n    }\n    return dict;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjg59fufj: /tmp/tmpjg59fufj.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else {\n\
    \            m[temp]++;\n        }\n        freq += m[temp];\n    }\n    for(auto\
    \ &c:m) {\n        if(freq > c.second) {\n            freq = c.second;\n     \
    \   }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn9ypgi9: /tmp/tmpzn9ypgi9.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx703fkft: /tmp/tmpx703fkft.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long max = 0;\n    long count = 1;\n    for(auto &c: test) {\n  \
    \      word = c;\n        if(m.find(word) == m.end()) {\n            m[word] =\
    \ count;\n        } else {\n            m[word] += count;\n        }\n       \
    \ if(m[word] > max) {\n            max = m[word];\n        }\n        count++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb5ksjiu1: /tmp/tmpb5ksjiu1.cpp:28: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for (auto &i : test) {\n        temp = i;\n  \
    \      auto it = m.find(temp);\n        if (it != m.end()) {\n            it->second++;\n\
    \            if (it->second > max) {\n                max = it->second;\n    \
    \        }\n        } else {\n            m[temp] = 1;\n            if (max <\
    \ 1) {\n                max = 1;\n            }\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcr6ivflg: /tmp/tmpcr6ivflg.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c:test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n    \
    \        m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpli4_u59t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpli4_u59t.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpli4_u59t.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c: test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert(std::pair<std::string,long>(word,count));\n\
    \        } else {\n            count = it->second;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmanc4pzh: /tmp/tmpmanc4pzh.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            it->second++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4mw943bb: /tmp/tmp4mw943bb.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            freq += it->second;\n            m[word]\
    \ += 1;\n        }\n    }\n    for(auto it : m) {\n        if(it->second > freq)\
    \ {\n            freq = it->second;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2axb_oya.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp2axb_oya.cpp:22:14: error:\
    \ base operand of \u2018->\u2019 has non-pointer type \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ long int>\u2019\n   22 |         if(it->second > freq) {\n      |          \
    \    ^~\n/tmp/tmp2axb_oya.cpp:23:22: error: base operand of \u2018->\u2019 has\
    \ non-pointer type \u2018std::pair<const std::__cxx11::basic_string<char>, long\
    \ int>\u2019\n   23 |             freq = it->second;\n      |                \
    \      ^~\n"
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for (auto &c : test) {\n        temp = c;\n  \
    \      if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        if (m[temp] > max) {\n       \
    \     max = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnrswbr70: /tmp/tmpnrswbr70.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto c : test) {\n        word = c + word;\n\
    \        ++count;\n    }\n    m.insert(std::pair<std::string,long>(word,count));\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3xj8fkyg: /tmp/tmp3xj8fkyg.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123932
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it != m.end()) {\n            freq =\
    \ it->second;\n        }\n        m[word] = freq + 1;\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7gyrtzoq: /tmp/tmp7gyrtzoq.cpp:23: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      ++freq;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            if (m[word] > freq) {\n               \
    \ m[word] = freq;\n            }\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvpbqq0bf: /tmp/tmpvpbqq0bf.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptgkx15lj: /tmp/tmptgkx15lj.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123929
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c: test) {\n       \
    \ temp = c;\n        histogram[temp] += count;\n        count++;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzg89r9r8: /tmp/tmpzg89r9r8.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    for(auto\
    \ &c: test) {\n        auto it = m.find(c);\n        if(it == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sl5weqz.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9sl5weqz.cpp:10:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   10 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp9sl5weqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123925
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ temp;\n    long count = 1;\n    for(auto &c:test) {\n        temp = c;\n   \
    \     dict[temp] = dict[temp] + count;\n        count++;\n    }\n    return dict;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph1hn6sfr: /tmp/tmph1hn6sfr.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq++;\n            m[word] = freq;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmprevw180r: /tmp/tmprevw180r.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long max = 0;\n    for(auto &c: test) {\n        temp = c;\n    \
    \    if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else {\n\
    \            m[temp]++;\n        }\n        if(m[temp] > max) {\n            max\
    \ = m[temp];\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpntpb6xa3: /tmp/tmpntpb6xa3.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        ++count;\n        histogram[word] = count;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9fryvmjr: /tmp/tmp9fryvmjr.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            freq += it->second;\n            m[word]\
    \ += 1;\n        }\n    }\n    for(auto &c: m) {\n        std::cout << c.first\
    \ << \": \" << c.second << std::endl;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpumnz2pi6: /tmp/tmpumnz2pi6.cpp:28: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ' : 3

    a: 2

    b: 2

    '
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c : test) {\n        temp = c;\n  \
    \      ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            if(m[temp] > freq) {\n                m[temp] =\
    \ freq;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n   \
    \ auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw8qixwcw: /tmp/tmpw8qixwcw.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n        }\n    }\n    for(auto\
    \ &c: m) {\n        std::cout << c.first << \": \" << c.second << std::endl;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfdpgldif: /tmp/tmpfdpgldif.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ' : 1

    a: 1

    b: 1

    '
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long maxCount = 0;\n    for(auto c: test) {\n        word = c;\n\
    \        auto it = m.find(word);\n        if (it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            m[word] += 1;\n        }\n        if (m[word]\
    \ > maxCount) {\n            maxCount = m[word];\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzgfw2fy: /tmp/tmpwzgfw2fy.cpp:27: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &c:test) {\n        temp = c;\n\
    \        if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n        if(m[temp] > maxCount) {\n   \
    \         maxCount = m[temp];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxw6gxlt: /tmp/tmpnxw6gxlt.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq++;\n            it->second++;\n        }\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo3rctfae: /tmp/tmpo3rctfae.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     auto it = dict.find(word);\n        if(it == dict.end()) {\n           \
    \ dict[word] = 1;\n        } else {\n            freq += it->second;\n       \
    \     dict[word] += 1;\n        }\n    }\n    return dict;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_76ff8l1: /tmp/tmp_76ff8l1.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c:test) {\n        word = c;\n    \
    \    auto it = m.find(word);\n        if(it == m.end()) {\n            m[word]\
    \ = 1;\n        } else {\n            freq += it->second;\n            m[word]\
    \ += 1;\n        }\n    }\n    for(auto &c:m) {\n        if(freq > c.second) {\n\
    \            freq = c.second;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7sfr0o9g: /tmp/tmp7sfr0o9g.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     ++freq;\n        m[temp] = freq;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx703fkft: /tmp/tmpx703fkft.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     freq = m.at(word);\n        m.insert({word,freq+1});\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count=0;\n    for(auto &c:test) {\n        temp = c;\n     \
    \   ++count;\n        if(m.find(temp)==m.end()) {\n            m[temp] = count;\n\
    \        } else {\n            if(m[temp]>count) {\n                m[temp] =\
    \ count;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpydh84esa: /tmp/tmpydh84esa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if (it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            m.insert({word,freq});\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbee70psz: /tmp/tmpbee70psz.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c: test) {\n        word = c;\n   \
    \     ++freq;\n        dict.insert({word,freq});\n    }\n    return dict;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbie1gwdc: /tmp/tmpbie1gwdc.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph53s2xac: /tmp/tmph53s2xac.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long max = 0;\n    for(auto &c: test) {\n        temp\
    \ = c;\n        histogram[temp]++;\n        if(histogram[temp] > max) {\n    \
    \        max = histogram[temp];\n        }\n    }\n    return histogram;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp__wvqc2b: /tmp/tmp__wvqc2b.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c:test) {\n        temp = c;\n    \
    \    ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] = m[temp] + freq;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjgze8heu: /tmp/tmpjgze8heu.cpp:24: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long count = 1;\n    for(auto &c : test) {\n        word = word +\
    \ c;\n        dict[word] = dict[word] + count;\n        count = count + 1;\n \
    \   }\n    return dict;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp44y8xnkg: /tmp/tmp44y8xnkg.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  word = c + word;\n        ++count;\n        histogram[word] = count;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_mgsp29p: /tmp/tmp_mgsp29p.cpp:20: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123933
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = word + c;\n\
    \        if(dict.count(word) > 0) {\n            freq = dict[word];\n        }\n\
    \        dict[word] = freq + 1;\n    }\n    return dict;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpayqjkwl7: /tmp/tmpayqjkwl7.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq += it->second;\n            it->second++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpejl5spj4: /tmp/tmpejl5spj4.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long maxCount = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp] += 1;\n        }\n        if(m[temp] > maxCount) {\n\
    \            maxCount = m[temp];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy233ccwa: /tmp/tmpy233ccwa.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123928
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto &c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,1});\n\
    \        } else {\n            freq = it->second;\n            ++it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgn0wlhkm: /tmp/tmpgn0wlhkm.cpp:25: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123934
