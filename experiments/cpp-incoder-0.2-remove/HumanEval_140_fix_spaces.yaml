name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
  \ text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('\
    \  ') != std::string::npos) {\n        std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n    }\n    return text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 2] == ' ' && s[s.size()\
    \ - 1] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, '-');\n    }\n\
    \    return s;", "    std::string s = text;\n    size_t pos = 0;\n    while (pos\
    \ < s.size()) {\n        size_t next = s.find(' ', pos);\n        if (next ==\
    \ std::string::npos) {\n            next = s.size();\n        }\n        s.replace(\
    \ pos, next - pos, \"_\" );\n        pos = next + 1;\n    }\n    if (s.size()\
    \ > 2) {\n        size_t prev = s.find(' ', pos);\n        if (prev == std::string::npos)\
    \ {\n            prev = s.size() - 1;\n        }\n        s.replace( prev, s.size()\
    \ - prev, \"-\" );\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n        size_t found\
    \ = fixed_text.find(\" \", pos);\n        if(found == std::string::npos) {\n \
    \           fixed_text.replace(pos, 1, \" \");\n        } else {\n           \
    \ fixed_text.replace(pos, 1, \" _\");\n            pos = found + 1;\n        }\n\
    \    }\n    return fixed_text;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while (pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    size_t len = fixed_text.size();\n    while (pos < len) {\n        size_t\
    \ next_space = fixed_text.find(' ', pos);\n        if (next_space == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n            pos += 1;\n \
    \       } else {\n            fixed_text.replace(pos, 1, \" \");\n           \
    \ pos = next_space + 1;\n        }\n    }\n    return fixed_text;", "    std::string\
    \ fixed_text = \"\";\n    size_t pos = 0;\n    while(pos < text.length()) {\n\
    \        pos = text.find(\"  \", pos);\n        if(pos != std::string::npos) {\n\
    \            fixed_text += text.substr(0, pos);\n            fixed_text += \"\
    _\";\n            pos = pos + 2;\n        }\n        else {\n            fixed_text\
    \ += text.substr(pos);\n        }\n    }\n    return fixed_text;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos++;\n\
    \    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos) {\n\
    \        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" ", "   \
    \ std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('  ') !=\
    \ std::string::npos) {\n        std::replace(text.begin(), text.end(), '  ', '-');\n\
    \    }\n    return text;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while(pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;", "    std::string result = text;\n    size_t pos = 0;\n \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (result.size() > 2) {\n        pos\
    \ = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, \" \");\n            pos++;\n        }\n \
    \   }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" _ \")\n  \
    \      s.replace(s.begin(), s.begin() + 2, \" -\");\n    return s;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while(pos < result.length()) {\n  \
    \      size_t next = result.find_first_of(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = result.length();\n        }\n        result.replace(pos,\
    \ next - pos, \"_\");\n        pos = next + 1;\n    }\n    if(result.length()\
    \ > 2) {\n        size_t pos = 0;\n        while(pos < result.length()) {\n  \
    \          size_t next = result.find_first_of(' ', pos);\n            if(next\
    \ == std::string::npos) {\n                next = result.length();\n         \
    \   }\n            result.replace(pos, next - pos, \"-\");\n            pos =\
    \ next + 1;\n        }\n    }\n    return result;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n    return res;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n    }\n    if (result.size() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    return\
    \ result;", "    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;", "    std::string\
    \ fixed = text;\n    size_t pos = 0;\n    size_t prev = 0;\n    while(pos < fixed.length())\
    \ {\n        pos = fixed.find_first_of(' ', prev);\n        if(pos == fixed.length())\
    \ break;\n        fixed.replace(pos, 1, \" \");\n        prev = pos + 1;\n   \
    \ }\n    pos = fixed.find_first_of(' ');\n    while(pos != fixed.length()) {\n\
    \        fixed.replace(pos, 1, \" \");\n        pos = fixed.find_first_of(' ',\
    \ pos + 1);\n    }\n    return fixed;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while(pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while(pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while(pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while(pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    return\
    \ result;", "    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos++;\n\
    \    }\n    while((pos = result.find(\"  \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \"-\");\n        pos++;\n    }\n    return result;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size())\
    \ {\n        size_t next_pos = fixed_text.find(' ', pos);\n        if(next_pos\
    \ == std::string::npos) {\n            fixed_text.replace(pos, 1, \" \");\n  \
    \      } else {\n            fixed_text.replace(pos, 1, \" \");\n            fixed_text.replace(next_pos,\
    \ 1, \"-\");\n        }\n        pos = next_pos + 1;\n    }\n    return fixed_text;",
  "    std::string res = text;\n    size_t pos = 0;\n    while((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \" \");\n   \
    \     pos++;\n    }\n    while((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, \" \");\n        pos++;\n    }\n    return res;",
  "    std::string out = text;\n    std::replace(out.begin(), out.end(), ' ', '_');\n\
    \    if (out.size() > 2) {\n        std::replace(out.begin(), out.end(), ' ',\
    \ '-');\n    }\n    return out;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '-');\n    }\n    return result;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n        size_t\
    \ next = find_if(result.begin() + pos, result.end(), [](char ch) {\n         \
    \   return !std::isspace(ch);\n        });\n        if (next == result.end())\
    \ {\n            break;\n        }\n        size_t prev = find_if(result.begin(),\
    \ result.begin() + next, [](char ch) {\n            return !std::isspace(ch);\n\
    \        });\n        if (prev == result.begin()) {\n            pos = next;\n\
    \        } else {\n            size_t len = next - prev;\n            if (len\
    \ > 2) {\n                pos = prev;\n                while (pos < result.length()\
    \ && result[pos] == ' ') {\n                    pos++;\n                }\n  \
    \              while (pos < result.length() && result[pos] == '-') {\n       \
    \             pos++;\n                }\n                result.erase(prev, len);\n\
    \            } else {\n                pos = next;\n            }\n        }\n\
    \    }\n    return result;", "    std::string out = text;\n    for(size_t i =\
    \ 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            out[i] =\
    \ '_';\n        }\n    }\n    size_t count = 0;\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ') {\n            count++;\n        }\n     \
    \   if(count == 2) {\n            out[i] = '-';\n            count = 0;\n    \
    \    }\n    }\n    return out;", "    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;", "    std::string\
    \ out = text;\n    for(auto &c: out) {\n        if(c == ' ') {\n            c\
    \ = '_';\n        }\n    }\n    for(auto &c: out) {\n        if(c == ' ' && out.size()\
    \ > 2) {\n            c = '-';\n        }\n    }\n    return out;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.size() > 2) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n    }\n    return text;", "    std::string out = text;\n\
    \    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n    }\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ' && out[i+1] == ' ') {\n            out[i] =\
    \ '-';\n        }\n    }\n    return out;", "    std::string fixed_text = \"\"\
    ;\n    size_t pos = 0;\n    size_t prev = 0;\n    while(pos < text.size()) {\n\
    \        size_t next = text.find_first_of(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            fixed_text += text.substr(pos);\n            break;\n       \
    \ }\n        fixed_text += text.substr(prev, next - prev);\n        fixed_text\
    \ += \"_\";\n        pos = next + 1;\n        prev = next;\n    }\n    if(pos\
    \ < text.size()) {\n        fixed_text += text.substr(pos);\n    }\n    return\
    \ fixed_text;", "    std::string res = text;\n    size_t pos = 0;\n    while(pos\
    \ < res.size()) {\n        size_t found = res.find_first_of(' ', pos);\n     \
    \   if(found != std::string::npos) {\n            res.replace(found, 1, '_');\n\
    \            pos = found + 1;\n        }\n        else {\n            pos = res.size();\n\
    \        }\n    }\n    return res;", "    std::string fixed_text = text;\n   \
    \ size_t pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t next\
    \ = fixed_text.find(' ', pos);\n        if(next == std::string::npos) {\n    \
    \        fixed_text.replace(pos, 1, \" \");\n        } else {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            fixed_text.replace(next, 1, \"_\");\n        }\n   \
    \     pos = next + 1;\n    }\n    return fixed_text;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos =\
    \ result.find(\" \", pos + 1);\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n            pos = result.find(\"\
    \ \", pos + 1);\n        }\n    }\n    return result;", "    std::string fixed_text\
    \ = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n       \
    \ size_t space_pos = fixed_text.find(' ', pos);\n        if(space_pos != std::string::npos)\
    \ {\n            fixed_text.replace(space_pos, 1, \" \");\n            fixed_text.replace(space_pos\
    \ + 1, 1, \"-\");\n            pos = space_pos + 1;\n        } else {\n      \
    \      pos = fixed_text.size();\n        }\n    }\n    return fixed_text;", " \
    \   std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('  ')\
    \ != std::string::npos) {\n        std::replace(text.begin(), text.end(), '  ',\
    \ '-');\n    }\n    return text;", "    std::string res = text;\n    size_t pos\
    \ = 0;\n    while(pos < res.size()) {\n        size_t next = res.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            next = res.size();\n   \
    \     }\n        std::string sub = res.substr(pos, next - pos);\n        pos =\
    \ next;\n        if(sub.empty()) {\n            continue;\n        }\n       \
    \ size_t prev = res.rfind(' ', pos);\n        if(prev == std::string::npos) {\n\
    \            prev = res.size();\n        }\n        if(prev == pos) {\n      \
    \      res.replace(prev, 1, \"-\");\n        }\n        else {\n            res.replace(prev,\
    \ prev + 1, \"\");\n        }\n    }\n    return res;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos =\
    \ result.find(\" \", pos + 1);\n    }\n    if (result.size() > 2) {\n        result.replace(result.find(\"\
    \ \"), 2, \" \");\n        result.replace(result.find(\" \"), 1, \" \");\n   \
    \ }\n    return result;", "    std::string fixed_text = \"\";\n    size_t pos\
    \ = 0;\n    while(pos < text.size()) {\n        size_t next_pos = text.find('\
    \ ', pos);\n        if(next_pos == std::string::npos) {\n            fixed_text\
    \ += text[pos];\n            pos++;\n        } else {\n            fixed_text\
    \ += text[pos];\n            fixed_text += \"_\";\n            pos = next_pos\
    \ + 1;\n        }\n    }\n    return fixed_text;", "    std::string fixed = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed.length()) {\n        size_t next =\
    \ fixed.find(' ', pos);\n        if(next == fixed.length()) next = fixed.length();\n\
    \        fixed.replace(pos, next-pos, \"_\");\n        pos = next + 1;\n    }\n\
    \    if(fixed.length() > 2 && fixed.substr(0, 2) == \"___\") {\n        fixed\
    \ = fixed.substr(2);\n    }\n    return fixed;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2 && result.substr(0, 2) == \"___\") {\n        result.replace(result.begin(),\
    \ result.begin() + 2, \"\");\n        result.replace(result.begin() + 2, result.end(),\
    \ \"\");\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 2] == ' ' && s[s.size()\
    \ - 1] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;", "    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) {\n            break;\n        }\n     \
    \   result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if(pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \" \");\n    }\n    if(result.length()\
    \ > 2) {\n        pos = 0;\n        while(pos < result.length()) {\n         \
    \   pos = result.find_first_not_of(\"  \", pos);\n            if(pos == std::string::npos)\
    \ {\n                break;\n            }\n            result.replace(pos, 2,\
    \ \" \");\n            pos = result.find_first_not_of(\"  \", pos + 2);\n    \
    \        if(pos == std::string::npos) {\n                break;\n            }\n\
    \            result.replace(pos, 2, \" \");\n        }\n    }\n    return result;",
  "    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size()) {\n\
    \        size_t prev = pos;\n        pos = res.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) {\n            break;\n        }\n     \
    \   size_t next = res.find_first_of(\" \", pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        std::string sub = res.substr(prev,\
    \ next - prev);\n        if(sub.empty()) {\n            continue;\n        }\n\
    \        if(sub.back() == ' ' && sub.size() > 2) {\n            sub.back() = '-';\n\
    \        }\n        res = res.substr(0, prev) + sub + res.substr(next);\n    }\n\
    \    return res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    while(pos < fixed_text.size()) {\n        size_t found = fixed_text.find(\"\
    \ \", pos);\n        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.find(\" \", pos + 1);\n        }\n\
    \        else {\n            pos = fixed_text.size();\n        }\n    }\n    if(fixed_text.size()\
    \ > 2) {\n        size_t pos = 0;\n        while(pos < fixed_text.size()) {\n\
    \            size_t found = fixed_text.find(\" \", pos);\n            if(found\
    \ != std::string::npos) {\n                fixed_text.replace(pos, 1, \" \");\n\
    \                pos = fixed_text.find(\" \", pos + 1);\n            }\n     \
    \       else {\n                pos = fixed_text.size();\n            }\n    \
    \    }\n    }\n    return fixed_text;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    return\
    \ result;", "    std::string res = text;\n    size_t pos = 0;\n    while ((pos\
    \ = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1,\
    \ \" \");\n        pos = res.find(\" \", pos + 1);\n    }\n    if (res.size()\
    \ > 2) {\n        res.replace(pos, 2, \" \");\n    }\n    return res;", "    std::string\
    \ fixed = text;\n    size_t pos = 0;\n    while ((pos = fixed.find_first_of('\
    \ ', pos)) != std::string::npos) {\n        fixed.replace(pos, 1, \" \");\n  \
    \      pos = fixed.find_first_of(' ', pos + 1);\n    }\n    pos = 0;\n    while\
    \ ((pos = fixed.find_first_of('  ', pos)) != std::string::npos) {\n        fixed.replace(pos,\
    \ 1, \" \");\n        pos = fixed.find_first_of('  ', pos + 1);\n    }\n    return\
    \ fixed;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;", "    std::string fixed_text = text;\n    \n    size_t pos =\
    \ 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n\
    \        fixed_text.replace(pos, 2, \"-\");\n        pos++;\n    }\n    \n   \
    \ return fixed_text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.find_first_of(' ') != std::string::npos)\
    \ {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n\
    \    return res;", "    std::string fixed_text = text;\n    std::string space_replaced\
    \ = \"_\";\n    std::string consecutive_replaced = \"-\";\n    size_t pos = 0;\n\
    \    size_t pos_count = 0;\n    while(pos < fixed_text.size()) {\n        pos\
    \ = fixed_text.find(space_replaced, pos);\n        if(pos == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, consecutive_replaced);\n         \
    \   pos = fixed_text.find(space_replaced, pos);\n            pos_count++;\n  \
    \      } else {\n            pos_count++;\n        }\n    }\n    return fixed_text;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size() > 2\
    \ && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.begin()\
    \ + 2, ' ', '-');\n    }\n    return text;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t found\
    \ = fixed_text.find(\" \", pos);\n        if(found != std::string::npos) {\n \
    \           fixed_text.replace(pos, 1, std::string(\"-\"));\n            fixed_text.replace(found,\
    \ 2, std::string(\"-\"));\n            pos = found + 1;\n        } else {\n  \
    \          pos = fixed_text.length();\n        }\n    }\n    return fixed_text;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n    return\
    \ res;", "    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.length() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string res\
    \ = text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, \" \");\n        pos = res.find(\" \", pos +\
    \ 1);\n    }\n    if (res.size() > 2) {\n        res.replace(pos, res.size() -\
    \ 2, \" \");\n    }\n    return res;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, \" \");\n    }\n    while((pos = result.find(\"\
    \ \", pos + 1)) != std::string::npos) {\n        result.replace(pos, 1, \" \"\
    );\n    }\n    while((pos = result.find(\"  \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 2, \"-\");\n    }\n    return result;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos = fixed_text.find(\"  \", pos);\n    }\n    return fixed_text;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n\
    \        pos++;\n    }\n    if (result.size() > 2) {\n        pos = 0;\n     \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n         \
    \   result.replace(pos, 1, \" \");\n            pos++;\n        }\n    }\n   \
    \ return result;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t pos = 0;\n    while(pos < s.size()) {\n        if(s[pos] ==\
    \ ' ') {\n            s[pos] = '_';\n            pos++;\n        }\n        else\
    \ if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n       \
    \ }\n        else if(s[pos] == '-') {\n            s[pos] = '_';\n           \
    \ pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos] = '\
    \ ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n      \
    \      s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos] ==\
    \ '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n        else\
    \ if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n       \
    \ }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n           \
    \ pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos] = '\
    \ ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n      \
    \      s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos] ==\
    \ '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n        else\
    \ if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n       \
    \ }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n           \
    \ pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos] = '\
    \ ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n      \
    \      s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos] ==\
    \ '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n        else\
    \ if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n       \
    \ }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n           \
    \ pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos] = '\
    \ ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n      \
    \      s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos] ==\
    \ '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n        else\
    \ if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n       \
    \ }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n           \
    \ pos++;\n        }\n        ", "    std::string out = text;\n    for(size_t i\
    \ = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            out[i]\
    \ = '_';\n        }\n    }\n    \n    size_t prev = 0, pos = 0;\n    while(pos\
    \ < out.size()) {\n        pos = out.find(' ', prev);\n        if(pos == std::string::npos)\
    \ {\n            pos = out.size();\n        }\n        out.replace(pos, 1, out[prev]);\n\
    \        prev = pos + 1;\n    }\n    \n    if(out.size() > 2) {\n        size_t\
    \ prev = 0, pos = 0;\n        while(pos < out.size()) {\n            pos = out.find('\
    \ ', prev);\n            if(pos == std::string::npos) {\n                pos =\
    \ out.size();\n            }\n            out.replace(pos, 1, out[prev]);\n  \
    \          prev = pos + 1;\n        }\n    }\n    \n    return out;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), '  ', '-');\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '  ', '-');\n    return s;", "    std::string\
    \ fixed_text = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while\
    \ (i < text.length()) {\n        if (text[i] == ' ') {\n            fixed_text\
    \ += \"_\";\n            i++;\n        } else if (text[i] == ' ' && text[i + 1]\
    \ == ' ') {\n            fixed_text += \"-\";\n            i += 2;\n        }\
    \ else {\n            fixed_text += text[i];\n            i++;\n        }\n  \
    \  }\n    return fixed_text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string fixed_text = \"\";\n    \n  \
    \  for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n  \
    \          fixed_text += \"_\";\n        }\n        else {\n            fixed_text\
    \ += text[i];\n        }\n    }\n    \n    if(fixed_text.find(\"__\") != std::string::npos)\
    \ {\n        fixed_text = fixed_text.replace(\"__\", \"-\");\n    }\n    \n  \
    \  return fixed_text;", "    std::string res = text;\n    size_t pos = 0;\n  \
    \  while ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res =\
    \ res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n    }\n    while ((pos =\
    \ res.find(\"  \", pos)) != std::string::npos) {\n        res = res.substr(0,\
    \ pos) + \"-\" + res.substr(pos + 2);\n    }\n    return res;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   if (res.size() > 2) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;", "    std::string fixed_text = text;\n \
    \   size_t pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t next\
    \ = fixed_text.find(' ', pos);\n        if(next == std::string::npos) {\n    \
    \        fixed_text.replace(pos, 1, \" \");\n            pos = fixed_text.length();\n\
    \        } else {\n            fixed_text.replace(pos, next - pos, \" \");\n \
    \           pos = next + 1;\n        }\n    }\n    return fixed_text;", "    std::string\
    \ result = text;\n    std::replace(result.begin(), result.end(), ' ', '_');\n\
    \    if (result.find_first_not_of(' ') != std::string::npos) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '-');\n    }\n    return result;", "    std::string fixed\
    \ = text;\n    size_t pos = 0;\n    while ((pos = fixed.find(' ', pos)) != std::string::npos)\
    \ {\n        fixed.replace(pos, 1, \" \");\n        fixed.replace(pos, 1, \" \"\
    );\n        pos = fixed.find(' ', pos + 1);\n    }\n    return fixed;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos++;\n    }\n    return fixed_text;", "    std::string out = text;\n\
    \    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n    }\n    size_t count = 0;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            count++;\n\
    \        }\n        else {\n            if(count > 1) {\n                out.insert(i,\
    \ '-');\n            }\n            count = 0;\n        }\n    }\n    return out;",
  "    std::string fixed_text = text;\n    for(size_t i = 0; i < fixed_text.size();\
    \ i++) {\n        if(fixed_text[i] == ' ') {\n            fixed_text[i] = '_';\n\
    \        }\n        if(fixed_text[i] == ' ' && fixed_text[i+1] == ' ') {\n   \
    \         fixed_text[i] = '-';\n        }\n    }\n    return fixed_text;", " \
    \   std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        size_t next = s.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.replace(pos, next - pos,\
    \ \"_\");\n        pos = next + 1;\n    }\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    \n    size_t pos = 0;\n    \n    while(pos < text.size())\
    \ {\n        if(text[pos] == ' ') {\n            text.erase(pos, 1);\n       \
    \     text.insert(pos, \"-\");\n            pos += 1;\n        }\n        else\
    \ {\n            pos += 1;\n        }\n    }\n    \n    return text;", "    std::string\
    \ s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t pos = 0;\n  \
    \  while(pos < s.size()) {\n        size_t next = s.find(' ', pos);\n        if(next\
    \ == std::string::npos) {\n            next = s.size();\n        }\n        s.replace(pos,\
    \ next, ' ');\n        pos = next + 1;\n    }\n    while(pos < s.size()) {\n \
    \       size_t next = s.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.replace(pos, next, '-');\n\
    \        pos = next + 1;\n    }\n    return s;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n\
    \    return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    while(pos < fixed_text.length()) {\n        size_t found = fixed_text.find(\"\
    \ \", pos);\n        if (found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = found + 1;\n        }\n        else {\n      \
    \      pos = fixed_text.length();\n        }\n    }\n    if (fixed_text.find(\"\
    \  \", pos) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"-\"\
    );\n    }\n    return fixed_text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while(pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n        pos = result.find_first_of(\" \", pos);\n   \
    \     if(pos != std::string::npos) {\n            result.replace(pos, 1, \" \"\
    );\n        }\n    }\n    size_t pos = 0;\n    while(pos < result.length()) {\n\
    \        pos = result.find_first_not_of(\"  \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 2, \"-\");\n        }\n        pos = result.find_first_of(\"\
    \  \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 2, \"-\");\n        }\n    }\n    return result;", "    std::string fixed_text\
    \ = text;\n    size_t pos = 0;\n    while(pos < fixed_text.length()) {\n     \
    \   size_t found = fixed_text.find(\" \", pos);\n        if (found != std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n            pos = found +\
    \ 1;\n        }\n        else {\n            pos = fixed_text.length();\n    \
    \    }\n    }\n    return fixed_text;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        if(pos == 0 || result[pos-1]\
    \ != \" \") {\n            result.replace(pos, 1, \" \");\n        }\n       \
    \ pos++;\n    }\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        if(pos == 0 || result[pos-1] != \" \") {\n            result.replace(pos,\
    \ 1, \"-\");\n        }\n        pos++;\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;", "    std::string fixed_text = text;\n    std::string spaces = \"_\";\n\
    \    std::string consecutive_spaces = \"-\";\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        pos = fixed_text.find(spaces, pos);\n    \
    \    if(pos != std::string::npos) {\n            fixed_text.replace(pos, spaces.length(),\
    \ consecutive_spaces);\n            pos += consecutive_spaces.length();\n    \
    \    }\n    }\n    return fixed_text;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(true) {\n        pos = fixed_text.find(\"  \"\
    , pos);\n        if(pos == std::string::npos) {\n            break;\n        }\n\
    \        fixed_text.replace(pos, 2, \"_\");\n        pos = fixed_text.find(\"\
    \  \", pos);\n    }\n    return fixed_text;", "    std::string fixed_text = text;\n\
    \    \n    // Replace all spaces with underscores\n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.size()) {\n        if (fixed_text[pos] == ' ') {\n       \
    \     fixed_text[pos] = '_';\n            pos++;\n        }\n        else {\n\
    \            break;\n        }\n    }\n    \n    // If there are more than 2 consecutive\
    \ spaces, replace all consecutive spaces with -\n    pos = 0;\n    while (pos\
    \ < fixed_text.size()) {\n        if (fixed_text[pos] == ' ') {\n            if\
    \ (pos == fixed_text.size() - 1) {\n                fixed_text[pos] = '-';\n \
    \           }\n            else {\n                fixed_text[pos] = '-';\n  \
    \              pos++;\n            }\n        }\n        else {\n            break;\n\
    \        }\n    }\n    \n    return fixed_text;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) break;\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find_first_not_of(\" \", pos + 1);\n      \
    \  if (pos == std::string::npos) break;\n        result.replace(pos, 1, \" \"\
    );\n        pos = result.find_first_not_of(\" \", pos + 1);\n        if (pos ==\
    \ std::string::npos) break;\n        result.replace(pos, 1, \"-\");\n        pos\
    \ = result.find_first_not_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ break;\n    }\n    return result;", "    std::string res = text;\n    size_t\
    \ pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos) {\n\
    \        res.replace(pos, 1, \" \");\n        pos++;\n    }\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && res[pos\
    \ - 1] == ' ') {\n            res.replace(pos, 1, \" \");\n            pos++;\n\
    \        } else {\n            res.replace(pos, 1, \"-\");\n            pos++;\n\
    \        }\n    }\n    return res;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, \" \");\n        pos = result.find(\" \", pos\
    \ + 1);\n    }\n    pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos = result.find(\" \",\
    \ pos + 1);\n    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \" \");\n\
    \        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\"  \", pos)) != std::string::npos) {\n       \
    \ result.replace(pos, 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n\
    \    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \" \");\n        pos = result.find(\"  \"\
    , pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \" \");\n\
    \        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\"  \", pos)) != std::string::npos) {\n       \
    \ result.replace(pos, 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n\
    \    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \" \");\n        pos = result.find(\"  \"\
    , pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \" ", " \
    \   std::string result = text;\n    size_t pos = 0;\n    while(pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.insert(pos, \"_\");\n        }\n        pos = result.find_first_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.insert(pos,\
    \ \"-\");\n        }\n    }\n    return result;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while (pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;", "    std::string out = text;\n    std::replace(out.begin(),\
    \ out.end(), ' ', '_');\n    std::replace(out.begin(), out.end(), '\\t', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\n', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\r', '_');\n    std::replace(out.begin(), out.end(), '\\v', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\f', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\a', '_');\n    std::replace(out.begin(), out.end(), '\\e', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\v', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin",
  "    std::string result = text;\n    size_t pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) break;\n        result.replace(pos,\
    \ 1, \"-\");\n        pos = result.find_first_not_of(\" \", pos);\n        if\
    \ (pos == std::string::npos) break;\n    }\n    return result;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n \
    \       pos = result.find_first_of(' ', pos);\n        if (pos == std::string::npos)\
    \ break;\n        result.insert(pos, \"_\");\n        pos = result.find_first_of('\
    \ ', pos + 1);\n        if (pos == std::string::npos) break;\n        result.insert(pos,\
    \ \"-\");\n    }\n    return result;", "    std::string fixed = text;\n    size_t\
    \ pos = 0;\n    while(pos < fixed.length()) {\n        size_t next = fixed.find_first_of('\
    \ ', pos);\n        if(next == fixed.length()) next = fixed.length();\n      \
    \  fixed.replace(pos, next - pos, \"_\");\n        pos = next + 1;\n    }\n  \
    \  if(fixed.length() > 2) {\n        fixed = fixed.replace(fixed.find_last_of('_'),\
    \ fixed.length(), \"-\");\n    }\n    return fixed;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.find_first_of('\
    \ ') != std::string::npos) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;", "    std::string res = text;\n    size_t\
    \ pos = 0;\n    while(pos < res.size()) {\n        size_t next_pos = res.find('\
    \ ', pos);\n        if(next_pos == std::string::npos) {\n            res.replace(pos,\
    \ 1, \" \");\n            pos += 1;\n        } else {\n            std::string\
    \ temp = res.substr(pos, next_pos - pos);\n            pos = next_pos + 1;\n \
    \           if(temp.find_first_not_of(\"- \") == std::string::npos) {\n      \
    \          res.replace(pos, 1, \" \");\n                pos += 1;\n          \
    \  } else {\n                temp = temp.substr(0, temp.find_first_not_of(\"-\
    \ \"));\n                res.replace(pos, 1, temp);\n                pos += temp.find_first_not_of(\"\
    - \") + 1;\n            }\n        }\n    }\n    return res;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while(pos < result.length()) {\n  \
    \      pos = result.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ break;\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos == std::string::npos) break;\n        result.replace(pos,\
    \ 1, \"-\");\n        pos = result.find_first_not_of(\" \", pos);\n        if(pos\
    \ == std::string::npos) break;\n        result.replace(pos, 1, \" \");\n    }\n\
    \    return result;", "    std::string result = text;\n    size_t pos = 0;\n \
    \   while(pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.insert(pos,\
    \ \"_\");\n        }\n        pos = result.find_first_of(\" \", pos);\n      \
    \  if(pos != std::string::npos) {\n            result.insert(pos, \"-\");\n  \
    \      }\n    }\n    return result;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            break;\n   \
    \     }\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;",
  "    std::string result = text;\n    size_t pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n        pos = result.find_first_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\"  \", pos);\n        if (pos !=\
    \ std::string::npos) {\n            result.replace(pos, 2, \"-\");\n        }\n\
    \        pos = result.find_first_of(\"  \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 2, \"-\");\n        }\n    }\n    return\
    \ result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos = fixed_text.find(\"  \", pos + 2);\n    }\n    return\
    \ fixed_text;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(pos, result.size() - 2, \" \");\n    }\n    return\
    \ result;", "    std::string res = text;\n    size_t pos = 0;\n    while (pos\
    \ < res.size()) {\n        if (res[pos] == ' ') {\n            res[pos] = '_';\n\
    \            while (pos < res.size() && res[pos] == ' ') pos++;\n            if\
    \ (pos == res.size()) break;\n            res[pos] = '-';\n            while (pos\
    \ < res.size() && res[pos] == ' ') pos++;\n        }\n        pos++;\n    }\n\
    \    return res;", "    std::string fixed_text = \"\";\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n   \
    \         fixed_text += \"_\";\n            i++;\n        } else {\n         \
    \   fixed_text += text[i];\n            i++;\n        }\n    }\n    while (j <\
    \ fixed_text.length()) {\n        if (fixed_text[j] == ' ') {\n            fixed_text[j]\
    \ = '-';\n            j++;\n        } else {\n            j++;\n        }\n  \
    \  }\n    return fixed_text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string fixed = text;\n    std::replace(fixed.begin(),\
    \ fixed.end(), ' ', '_');\n    std::replace(fixed.begin(), fixed.end(), '  ',\
    \ '-');\n    return fixed;", "    std::string result = text;\n    size_t pos =\
    \ 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    if (result.length() > 2) {\n        pos =\
    \ 0;\n        while (pos < result.length()) {\n            pos = result.find_first_of(\"\
    \ \", pos);\n            if (pos != std::string::npos) {\n                result.replace(pos,\
    \ 1, \" \");\n            }\n        }\n    }\n    return result;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos++;\n    }\n    return fixed_text;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace((pos), 1, \" \");\n    }\n    if (res.size() > 2) {\n\
    \        res.replace((pos), 2, \" \");\n    }\n    return res;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;",
  "    std::string fixed_text = text;\n    \n    size_t pos = 0;\n    size_t prev_pos\
    \ = 0;\n    \n    while (pos < fixed_text.size()) {\n        pos = fixed_text.find(\"\
    \  \", pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.find(\"\
    \  \", prev_pos);\n        }\n        if (pos != std::string::npos) {\n      \
    \      fixed_text.replace(pos, 2, \"-\");\n        }\n        prev_pos = pos;\n\
    \        pos = fixed_text.find(\"  \", pos);\n    }\n    return fixed_text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), ' ', '-');\n    return s;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) !=\
    \ std::string::npos) {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos\
    \ + 1);\n        pos = res.find(\" \", pos);\n    }\n    if (res.size() > 2) {\n\
    \        res = res.substr(0, res.size() - 2) + \"-\";\n    }\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '  ', '-');\n    return s;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;",
  "    std::string fixed_text = text;\n    \n    // Replace all spaces with underscores\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n        char c = fixed_text[pos];\n\
    \        if(c == ' ') {\n            fixed_text[pos] = '_';\n        } else {\n\
    \            pos++;\n        }\n    }\n    \n    // Replace consecutive spaces\
    \ with -\n    pos = 0;\n    while(pos < fixed_text.size()) {\n        char c =\
    \ fixed_text[pos];\n        if(c == ' ') {\n            fixed_text[pos] = '-';\n\
    \        } else {\n            pos++;\n        }\n    }\n    \n    return fixed_text;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.length()\
    \ > 2) {\n        result.replace(pos, result.length() - 2, std::string(\"-\"));\n\
    \    }\n    return result;", "    std::string result = text;\n    size_t pos =\
    \ 0;\n    while(pos < result.length()) {\n        size_t next = result.find('\
    \ ', pos);\n        if(next == std::string::npos) {\n            next = result.length();\n\
    \        }\n        \n        size_t prev = result.rfind(' ', pos);\n        if(prev\
    \ == std::string::npos) {\n            prev = result.length();\n        }\n  \
    \      \n        if(next - prev > 2) {\n            next = result.find(' ', pos);\n\
    \            while(next != std::string::npos) {\n                result.insert(next,\
    \ \"-\");\n                next = result.find(' ', next + 1);\n            }\n\
    \        }\n        pos = next;\n    }\n    return result;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n\
    \        pos = result.find(\" \", pos);\n    }\n    return result;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \"_\");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    while ((pos = result.find(\"  \"\
    , pos)) != std::string::npos) {\n        result.replace(pos, 2, \"-\");\n    \
    \    pos = result.find(\"  \", pos + 2);\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size())\
    \ {\n        size_t space_pos = fixed_text.find(' ', pos);\n        if(space_pos\
    \ != std::string::npos) {\n            fixed_text.replace(space_pos, 1, \" \"\
    );\n            pos = space_pos + 1;\n        }\n        else {\n            pos\
    \ = fixed_text.size();\n        }\n    }\n    while(pos < fixed_text.size()) {\n\
    \        size_t space_pos = fixed_text.find(' ', pos);\n        if(space_pos !=\
    \ std::string::npos) {\n            fixed_text.replace(space_pos, 1, \" \");\n\
    \            pos = space_pos + 1;\n        }\n        else {\n            pos\
    \ = fixed_text.size();\n        }\n    }\n    return fixed_text;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while(pos < res.size()) {\n        size_t\
    \ next = res.find(' ', pos);\n        if(next == std::string::npos) {\n      \
    \      next = res.size();\n        }\n        std::string sub = res.substr(pos,\
    \ next - pos);\n        pos = next + 1;\n        while(pos < res.size() && res[pos]\
    \ == ' ') {\n            pos++;\n        }\n        if(pos < res.size() && res[pos]\
    \ == ' ') {\n            res[pos] = '_';\n        }\n    }\n    return res;",
  "    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size()) {\n\
    \        size_t prev = pos;\n        pos = res.find(\" \", pos);\n        if(pos\
    \ == std::string::npos) {\n            pos = res.size();\n        }\n        res[prev]\
    \ = '_';\n        pos = res.find(\" \", pos);\n        if(pos == std::string::npos)\
    \ {\n            pos = res.size();\n        }\n        res[prev] = '-';\n    }\n\
    \    return res;", "    std::string res = text;\n    size_t pos = 0;\n    while\
    \ ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (res.size() > 2) {\n        res.replace(pos,\
    \ 2, \" \");\n    }\n    return res;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) break;\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find_first_not_of(\" \", pos + 1);\n      \
    \  if (pos == std::string::npos) break;\n        result.replace(pos, 1, \" \"\
    );\n    }\n    if (result.length() > 2 && result.substr(0, 2) == \" \") {\n  \
    \      result.replace(result.begin(), result.begin() + 2, \"\");\n    }\n    return\
    \ result;", "    std::string fixed_text = text;\n    \n    size_t pos = 0;\n \
    \   \n    while(pos < fixed_text.size()) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        \n        if(next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.size();\n        } else {\n       \
    \     fixed_text.replace(pos, next - pos, \" \");\n            pos = next;\n \
    \       }\n    }\n    \n    return fixed_text;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2 && result.substr(0, 2) == \" \") {\n        result.replace(result.begin(),\
    \ result.begin() + 2, \"\");\n    }\n    return result;", "    std::string fixed_text\
    \ = text;\n    size_t pos = 0;\n    while (pos < fixed_text.length()) {\n    \
    \    size_t next = fixed_text.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n        } else {\n      \
    \      fixed_text.replace(pos, 1, \" \");\n            fixed_text.replace(next,\
    \ 1, \"_\");\n        }\n        pos = next + 1;\n    }\n    return fixed_text;",
  "    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        std::string sub = res.substr(pos,\
    \ next - pos);\n        pos = next + 1;\n        if (sub.empty()) {\n        \
    \    continue;\n        }\n        if (sub.back() == ' ' && sub.size() > 2) {\n\
    \            std::string sub2 = sub.substr(0, sub.size() - 1);\n            std::string\
    \ sub3 = sub.substr(sub.size() - 1);\n            res = res.substr(0, pos) + sub2\
    \ + \"-\" + sub3;\n        }\n    }\n    return res;", "    std::string res =\
    \ text;\n    size_t pos = 0;\n    while(pos < res.size()) {\n        pos = res.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            res.replace(pos,\
    \ 1, \" \");\n        }\n        pos = res.find_first_of(\" \", pos);\n      \
    \  if(pos != std::string::npos) {\n            res.replace(pos, 1, \" \");\n \
    \       }\n        pos = res.find_first_not_of(\" \", pos);\n        if(pos !=\
    \ std::string::npos) {\n            res.replace(pos, 1, \" \");\n        }\n \
    \   }\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while (pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    while(pos < fixed_text.size()) {\n        size_t found = fixed_text.find(\"\
    \ \", pos);\n        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos = found + 1;\n        }\n        else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;",
  "    std::string fixed_text = \"\";\n    int i = 0;\n    while (i < text.length())\
    \ {\n        if (text[i] == ' ') {\n            fixed_text += \"_\";\n       \
    \     i++;\n        }\n        else if (text[i] == ' ' && text[i+1] == ' ') {\n\
    \            fixed_text += \"-\";\n            i += 2;\n        }\n        else\
    \ {\n            fixed_text += text[i];\n            i++;\n        }\n    }\n\
    \    return fixed_text;", "    std::string fixed_text = text;\n    size_t pos\
    \ = 0;\n    while(pos < fixed_text.size()) {\n        size_t space_pos = fixed_text.find(\"\
    \ \", pos);\n        if (space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \       pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    return fixed_text;", "    std::string res = text;\n   \
    \ std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    return res;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n        size_t found\
    \ = fixed_text.find(\" \", pos);\n        if(found != std::string::npos) {\n \
    \           fixed_text.replace(pos, 1, std::to_string(\" \"));\n            pos\
    \ = fixed_text.find(\" \", pos + 1);\n        }\n        else if(fixed_text.size()\
    \ > 2) {\n            fixed_text.replace(pos, 1, std::to_string(\" \"));\n   \
    \         pos = fixed_text.find(\" \", pos + 1);\n        }\n        else {\n\
    \            pos = fixed_text.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ fixed_text;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ (pos < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length()) {\n\
    \        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    return res;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \"_\");\n        pos = pos + 2;\n    }\n\
    \    pos = 0;\n    while ((pos = fixed_text.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, \"-\");\n        pos = pos + 1;\n    }\n\
    \    return fixed_text;", "    std::string fixed_text = text;\n    size_t pos\
    \ = 0;\n    while(true) {\n        pos = fixed_text.find(\"  \", pos);\n     \
    \   if (pos == std::string::npos) break;\n        fixed_text.replace(pos, 2, \"\
    _\");\n        pos++;\n    }\n    return fixed_text;", "    std::string fixed_text\
    \ = text;\n    \n    size_t pos = 0;\n    \n    while (pos < fixed_text.length())\
    \ {\n        size_t space_pos = fixed_text.find(' ', pos);\n        \n       \
    \ if (space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \   }\n        \n        pos = fixed_text.find(' ', pos + 1);\n    }\n    \n \
    \   return fixed_text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, \" \");\n        pos = res.find(\" \", pos +\
    \ 1);\n    }\n    if (res.size() > 2) {\n        res.replace(pos, 2, \" \");\n\
    \    }\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '_', ' ');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n    return res;", "    std::string fixed_text = text;\n    size_t\
    \ pos = 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \"_\");\n        pos = pos + 2;\n    }\n\
    \    return fixed_text;", "    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), '  ', '-');\n    return res;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    return res;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n    \
    \    std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", "   \
    \ std::string fixed_text = text;\n    \n    size_t pos = 0;\n    \n    while (pos\
    \ < fixed_text.size()) {\n        size_t space_pos = fixed_text.find(' ', pos);\n\
    \        if (space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \       pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    \n    return fixed_text;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n\
    \    return result;", "    std::string res = text;\n    size_t pos = 0;\n    while\
    \ ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (res.size() > 2) {\n        res.replace(res.begin()\
    \ + 2, res.end(), \" \");\n    }\n    return res;", "    std::string result =\
    \ text;\n    size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos = result.find(\" \",\
    \ pos + 1);\n    }\n    while((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \"-\");\n        pos = result.find(\"  \"\
    , pos + 2);\n    }\n    return result;", "    std::string result = text;\n   \
    \ size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \"-\");\n        pos++;\n    }\n    return result;", "    std::string res\
    \ = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    if\
    \ (res.find_first_not_of(' ') != std::string::npos) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n        result.replace(pos, 1, \" \");\n    }\n    if\
    \ (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, \"-\"\
    );\n        }\n    }\n    return result;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    size_t len = fixed_text.size();\n    while (pos < len)\
    \ {\n        size_t next = fixed_text.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n            pos = len + 1;\n\
    \        } else {\n            fixed_text.replace(pos, 1, \" \");\n          \
    \  pos = next + 1;\n        }\n    }\n    return fixed_text;", "    std::string\
    \ fixed_text = text;\n    std::replace(fixed_text.begin(), fixed_text.end(), '\
    \ ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), '_', ' ');\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, \"-\");\n         \
    \   pos = result.find(\" \", pos + 1);\n        }\n    }\n    return result;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    if (res.find_first_not_of(' ') != std::string::npos) {\n     \
    \   std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return\
    \ res;", "    std::string fixed_text = text;\n    \n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n\
    \        if (next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.length();\n        } else {\n     \
    \       fixed_text.replace(pos, next - pos + 1, \" \");\n            pos = next\
    \ + 1;\n        }\n    }\n    \n    if (fixed_text.size() > 2) {\n        size_t\
    \ pos = 0;\n        while (pos < fixed_text.length()) {\n            size_t next\
    \ = fixed_text.find(' ', pos);\n            if (next == std::string::npos) {\n\
    \                fixed_text.replace(pos, 1, \" \");\n                pos = fixed_text.length();\n\
    \            } else {\n                fixed_text.replace(pos, next - pos + 1,\
    \ \"-\");\n                pos = next + 1;\n            }\n        }\n    }\n\
    \    \n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n    }\n    return s;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while(pos < res.size()) {\n        size_t next = res.find('\
    \ ', pos);\n        if(next == std::string::npos) {\n            next = res.size();\n\
    \        }\n        res[pos] = '_';\n        pos = next;\n    }\n    while(pos\
    \ < res.size()) {\n        size_t next = res.find(' ', pos);\n        if(next\
    \ == std::string::npos) {\n            next = res.size();\n        }\n       \
    \ res[pos] = '-';\n        pos = next;\n    }\n    return res;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos++;\n\
    \    }\n    if (result.size() > 2) {\n        size_t pos = 0;\n        while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n            pos++;\n        }\n    }\n    return result;", "   \
    \ std::string result = text;\n    std::replace(result.begin(), result.end(), '\
    \ ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string fixed\
    \ = text;\n    size_t pos = 0;\n    while ((pos = fixed.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed.replace(pos, 1, \" \");\n        fixed.replace(pos, 1, \" \"\
    );\n        pos++;\n    }\n    if (fixed.find(\"  \", pos) != std::string::npos)\
    \ {\n        fixed.replace(pos, 1, \" \");\n        fixed.replace(pos, 1, \" \"\
    );\n    }\n    return fixed;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \" \");\n        pos++;\n    }\n    size_t pos2\
    \ = result.find_first_not_of(\" \", pos);\n    while (pos2 != std::string::npos)\
    \ {\n        result.replace(pos2, 1, \"-\");\n        pos2 = result.find_first_not_of(\"\
    \ \", pos2 + 1);\n    }\n    return result;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n        size_t pos_space\
    \ = fixed_text.find(\" \", pos);\n        if(pos_space != std::string::npos) {\n\
    \            fixed_text.replace(pos_space, pos_space + 1, std::string(\"_\"));\n\
    \            pos = pos_space + 1;\n        }\n        else {\n            pos\
    \ = fixed_text.size();\n        }\n    }\n    return fixed_text;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   if (res.size() > 2 && res[0] == res[res.size() - 1]) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while(pos < res.size()) {\n        if(res[pos] == '\
    \ ') {\n            res[pos] = '_';\n            pos++;\n        }\n        else\
    \ if(res[pos] == ' ' && pos != 0) {\n            res[pos] = '-';\n           \
    \ pos++;\n        }\n        pos++;\n    }\n    return res;", "    std::string\
    \ fixed_text = text;\n    \n    // Replace all spaces with underscores\n    for(size_t\
    \ i = 0; i < fixed_text.size(); i++) {\n        if(fixed_text[i] == ' ') {\n \
    \           fixed_text[i] = '_';\n        }\n    }\n    \n    // Replace consecutive\
    \ spaces with -\n    size_t i = 0;\n    while(i < fixed_text.size()) {\n     \
    \   if(fixed_text[i] == ' ') {\n            fixed_text[i] = '-';\n           \
    \ i++;\n        }\n        i++;\n    }\n    \n    return fixed_text;", "    std::string\
    \ fixed = text;\n    size_t pos = 0;\n    while (pos < fixed.length()) {\n   \
    \     if (fixed[pos] == ' ') {\n            fixed.replace(pos, 1, std::string(\"\
    -\"));\n            pos += 1;\n        } else if (fixed[pos] == ' ' && pos !=\
    \ fixed.length() - 1) {\n            fixed.replace(pos, 1, std::string(\"-\"));\n\
    \            pos += 1;\n        } else {\n            pos += 1;\n        }\n \
    \   }\n    return fixed;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '_', ' ');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \" \");\n        pos = result.find(\" \", pos +\
    \ 1);\n    }\n    size_t pos2 = result.find(\" \");\n    if (pos2 != std::string::npos)\
    \ {\n        result.replace(pos2, 1, \"-\");\n    }\n    return result;", "  \
    \  std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos += 2;\n    }\n    if (fixed_text.find(\"  \", pos) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \"-\");\n    }\n    return fixed_text;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n   \
    \ return res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n   \
    \ while (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find('\
    \ ', pos);\n        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.size();\n        } else {\n       \
    \     fixed_text.replace(pos, 1, \" \");\n            pos = next_space + 1;\n\
    \        }\n    }\n    return fixed_text;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    size_t pos = 0;\n    while(pos < text.size()) {\n        size_t\
    \ next = text.find(' ', pos);\n        if(next == std::string::npos) {\n     \
    \       next = text.size();\n        }\n        text.erase(text.begin() + pos,\
    \ text.begin() + next);\n        pos = next + 1;\n    }\n    if(text.size() >\
    \ 2) {\n        text.erase(text.begin() + 2, text.end());\n    }\n    return text;",
  "    std::string out = text;\n    for(auto &c : out) {\n        if(c != ' ') {\n\
    \            out += '_';\n        }\n    }\n    for(auto &c : out) {\n       \
    \ if(c != ' ' && c != '_') {\n            out += '-';\n        }\n    }\n    return\
    \ out;", "    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res[pos] = '_';\n    \
    \    pos = next;\n    }\n    while(pos < res.size()) {\n        size_t next =\
    \ res.find(' ', pos);\n        if(next == std::string::npos) {\n            next\
    \ = res.size();\n        }\n        res[pos] = '-';\n        pos = next;\n   \
    \ }\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string res = text;\n    size_t pos =\
    \ 0;\n    while(pos < res.size()) {\n        size_t next = res.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            next = res.size();\n   \
    \     }\n        res.replace(pos, 1, res[pos]);\n        pos = next;\n    }\n\
    \    while(pos < res.size()) {\n        size_t next = res.find(' ', pos);\n  \
    \      if(next == std::string::npos) {\n            next = res.size();\n     \
    \   }\n        res.replace(pos, 1, res[pos]);\n        pos = next;\n    }\n  \
    \  return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ '_', ' ');\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" _ \")\n  \
    \      s.replace(s.begin(), s.begin() + 2, \" \");\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), '_', ' ');\n\
    \    std::replace(text.begin(), text.end(), '  ', ' ');\n    return text;", " \
    \   std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        pos = s.find_first_not_of(\" \", pos);\n        if(pos\
    \ != std::string::npos) {\n            s.erase(pos, 1);\n        }\n        pos\
    \ = s.find_first_of(\" \", pos);\n        if(pos != std::string::npos) {\n   \
    \         s.insert(pos, \"-\");\n        }\n    }\n    return s;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   if (res.find_first_of(' ') != std::string::npos) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;"]
stop_tokens:
- "\n}"
