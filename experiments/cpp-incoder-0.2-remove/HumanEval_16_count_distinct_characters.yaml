name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += (c == 'a' || c == 'b' || c == 'c' || c\
    \ == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z');\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += (c == c); // count\
    \ the number of distinct characters\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c : string) {\n        count += tolower(c) - 'a';\n    }\n   \
    \ return count;", "    long count = 0;\n    for (char c : string) {\n        count\
    \ += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        if (std::tolower(c) == c) count++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c\
    \ == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l'\
    \ || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c\
    \ == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (auto &c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n  \
    \  return count;", "    long count = 0;\n    for (char c : string) {\n       \
    \ if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        if (c ==\
    \ 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g'\
    \ || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto &c : string) {\n    \
    \    count += tolower(c) - 'a';\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto &c : string) {\n        count += std::tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (auto &c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        if (c == tolower(c)) count++;\n \
    \   }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        if (std::toupper(c) == c) count++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        if (std::tolower(c) == c) count++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += (c >= 'a' && c <= 'z') + (c >= 'A' && c <= 'Z');\n    }\n  \
    \  return count;", "    long count = 0;\n    for (char c : string) {\n       \
    \ count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto c : string) {\n        auto it = std::tolower(c);\n        if (it\
    \ != c) {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (std::tolower(c) == std::tolower(c))\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') +\
    \ (c >= 'a' && c <= 'z');\n    }\n    return count;", "    long count = 0;\n \
    \   for (auto &c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        if (std::tolower(c)\
    \ == c) count++;\n    }\n    return count;", "    long count = 0;\n    for (char\
    \ c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') +\
    \ (c >= 'a' && c <= 'z');\n    }\n    return count;", "    long count = 0;\n \
    \   for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == 'a' || c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c\
    \ == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z');\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto &c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        count += std::tolower(c) - std::tolower(c[0]) + 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        auto it = std::tolower(c);\n\
    \        if (it != c) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += (c >= 'A' &&\
    \ c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        if (std::tolower(c) == c) count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c: string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') +\
    \ (c >= 'a' && c <= 'z');\n    }\n    return count;", "    long count = 0;\n \
    \   for (char c : string) {\n        count += (c == c); // count the number of\
    \ distinct characters\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += (c == 'a' ||\
    \ c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c ==\
    \ 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\
    \ == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z');\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto &c : string) {\n    \
    \    count += tolower(c) - 'a';\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c\
    \ >= 'a' && c <= 'z');\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z') + (c >=\
    \ '0' && c <= '9');\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += (c >= 'a' && c <= 'z') + (c >= 'A' && c <= 'Z');\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ (c >= 'a' && c <= 'z') + (c >= 'A' && c <= 'Z');\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'a' && c <= 'z') + (c >= 'A' && c <= 'Z');\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto &c : string) {\n    \
    \    count += tolower(c) - 'a';\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto c : string) {\n        if (std::tolower(c) == c) count++;\n   \
    \ }\n    return count;", "    long count = 0;\n    for (char c : string) {\n \
    \       if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n  \
    \  return count;", "    long count = 0;\n    for (char c : string) {\n       \
    \ if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto &c: string) {\n        count += std::tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        if (c == 'A' || c == 'a' || c == 'B' || c == 'b' || c == 'C' || c ==\
    \ 'c' || c == 'D' || c == 'd' || c == 'E' || c == 'e' || c == 'F' || c == 'f'\
    \ || c == 'G' || c == 'g' || c == 'H' || c == 'h' || c == 'I' || c == 'i' || c\
    \ == 'J' || c == 'j' || c == 'K' || c == 'k' || c == 'L' || c == 'l' || c == 'M'\
    \ || c == 'm' || c == 'N' || c == 'n' || c == 'O' || c == 'o' || c == 'P' || c\
    \ == 'p' || c == 'Q' || c == 'q' || c == 'R' || c == 'r' || c == 'S' || c == 's'\
    \ || c == 'T' || c == 't' || c == 'U' || c == 'u' || c == 'V' || c == 'v' || c\
    \ == 'W' || c == 'w' || c == 'X' || c == 'x' || c == 'Y' || c == 'y' || c == 'Z'\
    \ || c == 'z') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += tolower(c) -\
    \ 'a';\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        if (c == 'A' || c == 'a' || c ==\
    \ 'B' || c == 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E'\
    \ || c == 'e' || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c\
    \ == 'h' || c == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k'\
    \ || c == 'L' || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c\
    \ == 'O' || c == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R'\
    \ || c == 'r' || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c\
    \ == 'u' || c == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x'\
    \ || c == 'Y' || c == 'y' || c == 'Z' || c == 'z') {\n            count++;\n \
    \       }\n    }\n    return count;", "    long count = 0;\n    for (char c :\
    \ string) {\n        count += tolower(c) - 'a';\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += tolower(c)\
    \ - 'a';\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += tolower(c) - 'a';\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += tolower(c) - 'a';\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        if (c == toupper(c))\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >=\
    \ 'a' && c <= 'z');\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        if (c == toupper(c))\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (char c : string) {\n        count += tolower(c) - 'a';\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c : string) {\n        count += tolower(c) - 'a';\n    }\n   \
    \ return count;", "    long count = 0;\n    for (char c : string) {\n        count\
    \ += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >= 'a' &&\
    \ c <= 'z');\n    }\n    return count;", "    long count = 0;\n    for (char c\
    \ : string) {\n        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += (c >= 'A' && c <= 'Z') + (c >= 'a' && c <= 'z');\n    }\n  \
    \  return count;", "    long count = 0;\n    for (char c : string) {\n       \
    \ count += tolower(c) - 'a';\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        if (std::toupper(c) == c)\n            count++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        if (std::tolower(c) == c) count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <=\
    \ 'z') + (c >= 'A' && c <= 'Z');\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        if (c == toupper(c)) {\n          \
    \  count++;\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        if (c == toupper(c)) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (char c :\
    \ string) {\n        count += tolower(c) - 'a';\n    }\n    return count;", " \
    \   long count = 0;\n    for (char c : string) {\n        if (std::tolower(c)\
    \ == c) count++;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += tolower(c) - 'a';\n    }\n    return count;"]
stop_tokens:
- "\n}"
