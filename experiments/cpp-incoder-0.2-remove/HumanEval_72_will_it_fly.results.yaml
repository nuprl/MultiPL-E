language: cpp
name: HumanEval_72_will_it_fly
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long max_sum = std::accumulate(q.begin(),\
    \ q.end(), 0);\n    return max_sum < w && std::equal(q.begin(), q.end(), q.rbegin());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjhr3_fnf: /tmp/tmpjhr3_fnf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)5})),
    (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i :\
    \ q) {\n        sum += i;\n        if (sum > max_weight) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpba6fn04y: /tmp/tmpba6fn04y.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long max_sum = 0;\n    long sum\
    \ = 0;\n    for(long i = 0; i < q.size(); i++){\n        sum += q[i];\n      \
    \  if(sum > w){\n            return false;\n        }\n        max_sum += w;\n\
    \    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpjodss3wz: /tmp/tmpjodss3wz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // TODO: Write your code here\n    long max_sum = 0;\n   \
    \ long sum = 0;\n    long n = q.size();\n    long max_weight = w;\n    long min_weight\
    \ = 0;\n    long mid = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4\
    \ = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8\
    \ = 0;\n    long mid9 = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long\
    \ mid12 = 0;\n    long mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n\
    \    long mid16 = 0;\n    long mid17 = 0;\n    long mid18 = 0;\n    long mid19\
    \ = 0;\n    long mid20 = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long\
    \ mid23 = 0;\n    long mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n\
    \    long mid27 = 0;\n    long mid28 = 0;\n    long mid29 = 0;\n    long mid30\
    \ = 0;\n    long mid31 = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long\
    \ mid34 = 0;\n    long mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n\
    \    long mid38 = 0;\n    long mid39 = 0;\n    long mid40 = 0;\n    long mid41\
    \ = 0;\n    long mid42 = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long\
    \ mid45 = 0;\n    long mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n\
    \    long mid49 = 0;\n    long mid50 = 0;\n    long mid51 = 0;\n    long mid52\
    \ = 0;\n    long mid53 = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long\
    \ mid56 = 0;\n    long mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n\
    \    long mid60 = 0;\n    long mid61 = 0;\n    long mid62 = 0;\n    long mid63\
    \ = 0;\n    long mid64 = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long\
    \ mid67 = 0;\n    long mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n\
    \    long mid71 = 0;\n    long mid72 = 0;\n    long mid73 = 0;\n    long mid74\
    \ = 0;\n    long mid75 = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long\
    \ mid78 = 0;\n    long mid79 = 0;\n    long mid80 = 0;\n\n}\nint main() {\n  \
    \  auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzvdoz4iq: /tmp/tmpzvdoz4iq.cpp:103: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum >= w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp32k5q0ct: /tmp/tmp32k5q0ct.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > max) max = sum;\n    }\n    if (sum == 0\
    \ || sum > w) return false;\n    long mid = sum / 2;\n    for (long i : q) {\n\
    \        if (i > mid) return false;\n        if (sum - i == w) return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpxndddcm0: /tmp/tmpxndddcm0.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8zrj43os: /tmp/tmp8zrj43os.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long maxSum = w;\n    long sum = 0;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum\
    \ > maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzwqexh8y: /tmp/tmpzwqexh8y.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ : q) {\n        sum += i;\n    }\n    if(sum < w) return false;\n    long maxSum\
    \ = sum;\n    for(long i : q) {\n        maxSum = std::max(maxSum, sum - i);\n\
    \    }\n    return maxSum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp92n94n57: /tmp/tmp92n94n57.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for (auto i : q) {\n        if (i > max_sum) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpd5w1pejz: /tmp/tmpd5w1pejz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp50_v2y34: /tmp/tmp50_v2y34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        sum += i;\n        if (sum > max_sum) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk__okvb7: /tmp/tmpk__okvb7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0nwaonrt: /tmp/tmp0nwaonrt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if (sum == w) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpttxg58ca: /tmp/tmpttxg58ca.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here.\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (auto i : q) {\n        max_sum = std::max(max_sum,\
    \ i + w);\n    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo_rxq7u8: /tmp/tmpo_rxq7u8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = w;\n    for(long i :\
    \ q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbg4mkn2n: /tmp/tmpbg4mkn2n.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto\
    \ i : q) {\n        max_sum = std::max(max_sum, i);\n    }\n    return max_sum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfp7csujh: /tmp/tmpfp7csujh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long max_sum = 0;\n    long sum = 0;\n\
    \    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum\
    \ > w) {\n            return false;\n        }\n    }\n    max_sum = sum;\n  \
    \  sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) {\n            return false;\n        }\n    }\n    max_sum\
    \ = sum;\n    sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum\
    \ += q[i];\n        if (sum > w) {\n            return false;\n        }\n   \
    \ }\n    max_sum = sum;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ya0c09t: /tmp/tmp_ya0c09t.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if(max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps9671mw6: /tmp/tmps9671mw6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if(sum < w) return false;\n    long max_sum\
    \ = w;\n    for(long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i] + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyrchau5z: /tmp/tmpyrchau5z.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long max_weight = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight\
    \ += q[i];\n        if (max_weight > w) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpud1s5bg5: /tmp/tmpud1s5bg5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxW = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > maxW) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz6fdbnne: /tmp/tmpz6fdbnne.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(), q.rbegin());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = 0;\n    for (long i\
    \ : q) {\n        max_sum += i;\n        if (max_sum > w) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn93yzfof: /tmp/tmpn93yzfof.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    long max\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    if (sum <\
    \ w) {\n        return false;\n    }\n    long mid = sum / 2;\n    for (long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > mid) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsyxz6it6: /tmp/tmpsyxz6it6.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_weight = w;\n    for(long\
    \ i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n    long max_sum\
    \ = sum;\n    for(long i : q) {\n        max_sum = std::max(max_sum, i);\n   \
    \ }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb0i3dyct: /tmp/tmpb0i3dyct.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        sum += i;\n        if (sum > max_sum) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk__okvb7: /tmp/tmpk__okvb7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max = 0;\n    for (long i : q)\
    \ {\n        max = std::max(max, i);\n    }\n    return sum == max;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo_f0jqm5: /tmp/tmpo_f0jqm5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(auto i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = 0;\n    for(auto i :\
    \ q) {\n        max_sum += i;\n    }\n    return max_sum == w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1_yh7ukz: /tmp/tmp1_yh7ukz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n    \
    \    return false;\n    }\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        max = std::max(max, q[i]);\n    }\n    if (sum == max) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6vn0hszt: /tmp/tmp6vn0hszt.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n    \
    \    return false;\n    }\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        if (q[i] > max) {\n            max = q[i];\n        }\n    }\n\
    \    if (sum == max) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpluitxfw3: /tmp/tmpluitxfw3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long\
    \ sum = 0;\n    long max_weight = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \            max_weight = i;\n        }\n    }\n    if(max_sum == w) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1snlwamm: /tmp/tmp1snlwamm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > maxWeight) {\n            maxWeight =\
    \ sum;\n        }\n    }\n    bool isBalanced = true;\n    for(long i : q) {\n\
    \        if(i != q[q.size()-1]) {\n            isBalanced = false;\n         \
    \   break;\n        }\n    }\n    return isBalanced && sum <= maxWeight;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnbf03_fw: /tmp/tmpnbf03_fw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n\
    \    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > max) max = q[i];\n    }\n    if(max < w) return false;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        if(q[i] != max) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3ialbnxw: /tmp/tmp3ialbnxw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n \
    \           max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6rpw8g46: /tmp/tmp6rpw8g46.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3o21r5g5: /tmp/tmp3o21r5g5.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ is_palindromic(q, max_sum);\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_g94m0g7.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_g94m0g7.cpp:22:28: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   22 |     return max_sum == w && is_palindromic(q,\
    \ max_sum);\n      |                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        sum += i;\n        if (sum > max_sum) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk__okvb7: /tmp/tmpk__okvb7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    long max_weight = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n\
    \        if (sum > max_sum) {\n            max_sum = sum;\n            max_weight\
    \ = w;\n        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3i214yjr: /tmp/tmp3i214yjr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmb1s17sw: /tmp/tmpmb1s17sw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_possible\
    \ = sum - w;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > max_possible) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph3postkc: /tmp/tmph3postkc.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_weight = w;\n    for (long\
    \ i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n    long max_sum\
    \ = max_weight - sum;\n    for (long i : q) {\n        if (max_sum < i - sum)\
    \ return false;\n        max_sum += i;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkqiinjvv: /tmp/tmpkqiinjvv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = sum;\n    for(long i\
    \ : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptka2938g: /tmp/tmptka2938g.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmb1s17sw: /tmp/tmpmb1s17sw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum = 0;\n\
    \    for (long i : q) {\n        max_sum += i;\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2mioyn52: /tmp/tmp2mioyn52.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ : q) {\n        sum += i;\n    }\n    if(sum == w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp1sgykrwj: /tmp/tmp1sgykrwj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++17\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = sum;\n    for (auto i : q) {\n        max_sum = std::max(max_sum,\
    \ i);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpamzeqbi9: /tmp/tmpamzeqbi9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long maxWeight = w;\n   \
    \ long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if(sum > maxWeight) {\n            maxWeight = sum;\n        }\n    }\n\
    \    if(sum == maxWeight) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2heyxuqq: /tmp/tmp2heyxuqq.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    return max_weight <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp192frgak: /tmp/tmp192frgak.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if(max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps9671mw6: /tmp/tmps9671mw6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(auto i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = w;\n    for(auto i :\
    \ q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqj5tlm5f: /tmp/tmpqj5tlm5f.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    long n = q.size();\n\
    \    for(long i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    return max_weight <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa7y6v39j: /tmp/tmpa7y6v39j.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    int max_sum = w;\n    long sum = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_r3x7gxo: /tmp/tmp_r3x7gxo.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (long i : q) {\n        max_sum = std::max(max_sum,\
    \ i + w);\n    }\n    if (max_sum < w) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqtih9cwq: /tmp/tmpqtih9cwq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum < w){\n       \
    \ return false;\n    }\n    long max_sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        max_sum += q[i];\n    }\n    if(max_sum >= w){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmphp1fkk5z: /tmp/tmphp1fkk5z.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for(long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    return max_sum <= w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph73od32e: /tmp/tmph73od32e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long\
    \ sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n \
    \       max_sum = std::max(max_sum, sum);\n    }\n    return max_sum <= w;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6dcb75nh: /tmp/tmp6dcb75nh.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i :\
    \ q) {\n        sum += i;\n        if (sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    if (max_weight == 0) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n\
    \        if (max_sum > max_weight) {\n            max_sum = max_weight;\n    \
    \    }\n    }\n    if (max_sum == max_weight) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmg171sc_: /tmp/tmpmg171sc_.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max = 0;\n    for(long i : q)\
    \ {\n        if(i > max) max = i;\n    }\n    long mid = max / 2;\n    long leftSum\
    \ = 0;\n    long rightSum = 0;\n    for(long i : q) {\n        if(i < mid) {\n\
    \            leftSum += i;\n        } else {\n            rightSum += i;\n   \
    \     }\n    }\n    if(leftSum == rightSum) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp9oysh6l: /tmp/tmpp9oysh6l.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++17\n    long max_sum = 0;\n    long\
    \ sum = 0;\n    for (auto i : q) {\n        sum += i;\n        max_sum = std::max(max_sum,\
    \ sum);\n    }\n    return max_sum <= w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp95a8tdj8: /tmp/tmp95a8tdj8.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for(long\
    \ i : q) {\n        sum += i;\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max = 0;\n    for(long i : q) {\n        if(i > max) {\n    \
    \        max = i;\n        }\n    }\n    long sum2 = 0;\n    for(long i : q) {\n\
    \        sum2 += i;\n    }\n    if(sum2 > w) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4zvjywnx: /tmp/tmp4zvjywnx.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum < w) return\
    \ false;\n    long max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++)\
    \ {\n        if(q[i] > max_sum) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm_ro70tw: /tmp/tmpm_ro70tw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i :\
    \ q) {\n        sum += i;\n        if (sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    bool is_balanced = max_weight == w;\n    long\
    \ max_sum = 0;\n    for (auto i : q) {\n        max_sum += i;\n        if (max_sum\
    \ > max_weight) {\n            is_balanced = false;\n            break;\n    \
    \    }\n    }\n    return is_balanced && max_sum <= max_weight;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsyyu0p4z: /tmp/tmpsyyu0p4z.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (auto i :\
    \ q) {\n        sum += i;\n        if (sum > max_weight) {\n            max_weight\
    \ = sum;\n        }\n    }\n    return max_weight == w && std::equal(q.begin(),\
    \ q.end(), q.rbegin());\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum < w && is_palindromic(q, max_sum);\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcu79cqdt.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcu79cqdt.cpp:14:27: error: \u2018is_palindromic\u2019\
    \ was not declared in this scope\n   14 |     return max_sum < w && is_palindromic(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxWeight = w;\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if(sum > maxWeight) {\n\
    \            maxWeight = sum;\n        }\n    }\n    \n    if(sum == maxWeight)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpchkip58b: /tmp/tmpchkip58b.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return\
    \ false;\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ q[i];\n        if (sum > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4d1tu6ks: /tmp/tmp4d1tu6ks.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long max_weight = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight\
    \ += q[i];\n        if (max_weight > w) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpud1s5bg5: /tmp/tmpud1s5bg5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    return sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpl32gjh7k: /tmp/tmpl32gjh7k.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum >= w){\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6l_m0lq7: /tmp/tmp6l_m0lq7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max_sum = w;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdetnat4h: /tmp/tmpdetnat4h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i :\
    \ q) {\n        sum += i;\n        if(sum > max_weight) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5zcdybg5: /tmp/tmp5zcdybg5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long max_sum = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum\
    \ < w) return false;\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnoj6_a2h: /tmp/tmpnoj6_a2h.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if(sum < w) return false;\n    long max = 0;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        if(q[i] > max) {\n        \
    \    max = q[i];\n        }\n    }\n    long mid = sum / 2;\n    long left = 0;\n\
    \    long right = 0;\n    for(long i = 0; i < q.size(); i++) {\n        if(q[i]\
    \ > mid) {\n            left += q[i];\n        } else {\n            right +=\
    \ q[i];\n        }\n    }\n    if(left > w) return false;\n    if(right > w) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpwze2r023: /tmp/tmpwze2r023.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpuh7f7dzm: /tmp/tmpuh7f7dzm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp50_v2y34: /tmp/tmp50_v2y34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_weight = w;\n    for (long\
    \ i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n    bool is_balanced\
    \ = true;\n    for (long i : q) {\n        is_balanced = is_balanced && (i ==\
    \ sum / max_weight);\n    }\n    return is_balanced;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpygmd6rit: /tmp/tmpygmd6rit.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxW = w;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > maxW) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz6fdbnne: /tmp/tmpz6fdbnne.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n    \
    \    return false;\n    }\n    long max = 0;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        if (q[i] > max) {\n            max = q[i];\n        }\n    }\n\
    \    if (sum == max) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpluitxfw3: /tmp/tmpluitxfw3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(), q.rbegin());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptfgozhlb: /tmp/tmptfgozhlb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    long max\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    if (sum ==\
    \ w) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt4tjrftp: /tmp/tmpt4tjrftp.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long maxSum = sum;\n    for (auto\
    \ i : q) {\n        maxSum -= i;\n        if (maxSum < w) return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzgva8aen: /tmp/tmpzgva8aen.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for (auto i : q) {\n        max_sum = std::max(max_sum,\
    \ i);\n    }\n    if (sum == max_sum) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvc2zitg8: /tmp/tmpvc2zitg8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    for(long i : q) {\n        if(i !=\
    \ q[q.size() - i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptzwvdg0e: /tmp/tmptzwvdg0e.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(), q.rbegin());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_sum) {\n \
    \           max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6rpw8g46: /tmp/tmp6rpw8g46.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpha01f9in: /tmp/tmpha01f9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max_sum = w;\n    for(auto i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if(sum == max_sum) {\n        return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2sufmc9e: /tmp/tmp2sufmc9e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i :\
    \ q) {\n        sum += i;\n        if(sum > max_weight) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5zcdybg5: /tmp/tmp5zcdybg5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for(long\
    \ i : q) {\n        sum += i;\n    }\n    if(sum < w) return false;\n    for(long\
    \ i : q) {\n        if(i != q[q.size()-1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjt7m089f: /tmp/tmpjt7m089f.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ : q){\n        sum += i;\n    }\n    if(sum < w){\n        return false;\n \
    \   }\n    long max_weight = w;\n    for(long i : q){\n        if(i > max_weight){\n\
    \            return false;\n        }\n        max_weight -= i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpocwb6loh: /tmp/tmpocwb6loh.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_possible = std::pow(2, w);\n\
    \    long max_possible_balanced = max_possible / 2;\n    long max_possible_balanced_sum\
    \ = 0;\n    for (long i : q) {\n        max_possible_balanced_sum += i;\n    \
    \    if (max_possible_balanced_sum > max_possible_balanced) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv4dvla2a: /tmp/tmpv4dvla2a.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) {\n        return false;\n\
    \    }\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ sum += q[i];\n        if (sum > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpuh7f7dzm: /tmp/tmpuh7f7dzm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum < w){\n       \
    \ return false;\n    }\n    long max_sum = 0;\n    for(long i = 0; i < q.size();\
    \ i++){\n        max_sum += q[i];\n    }\n    if(max_sum >= w){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmphp1fkk5z: /tmp/tmphp1fkk5z.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++17\n    long max_sum = 0;\n    for\
    \ (long i : q) {\n        max_sum += i;\n    }\n    if (max_sum < w) {\n     \
    \   return false;\n    }\n    long sum = 0;\n    for (long i : q) {\n        sum\
    \ += i;\n        if (sum > w) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2ujoj45p: /tmp/tmp2ujoj45p.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum < w) return\
    \ false;\n    long max_sum = sum;\n    for(long i = 0; i < q.size(); i++) {\n\
    \        max_sum = std::max(max_sum, q[i]);\n    }\n    return max_sum == w;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8u0bxk6i: /tmp/tmp8u0bxk6i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long max_sum = 0;\n    long\
    \ sum = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n \
    \       if(sum > w) {\n            return false;\n        }\n        max_sum =\
    \ std::max(max_sum, sum);\n    }\n    return max_sum == w;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_z5d275b: /tmp/tmp_z5d275b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnl74ffos: /tmp/tmpnl74ffos.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0nwaonrt: /tmp/tmp0nwaonrt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   if (max_sum < w) return false;\n    long max_weight = w;\n    for (long &i\
    \ : q) {\n        max_weight = std::max(max_weight, i);\n    }\n    long sum =\
    \ 0;\n    for (long &i : q) {\n        sum += i;\n    }\n    return max_weight\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjuinssuh: /tmp/tmpjuinssuh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpha01f9in: /tmp/tmpha01f9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n         \
    \   max = sum;\n        }\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long sum2 = 0;\n    for (long i = 0; i < q.size(); i++) {\n      \
    \  sum2 += q[i];\n    }\n    if (sum2 > w) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6nmlhvv5: /tmp/tmp6nmlhvv5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        max = std::max(max, q[i]);\n    }\n    long sum = 0;\n    for (long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > w) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm4imzlxq: /tmp/tmpm4imzlxq.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum = sum\
    \ - w;\n    long max_element = q.back();\n    for (long i : q) {\n        if (i\
    \ > max_sum) {\n            return false;\n        }\n        if (i > max_element)\
    \ {\n            max_element = i;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9khk0wr_: /tmp/tmp9khk0wr_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134617
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i :\
    \ q) {\n        sum += i;\n        if (sum > max_weight) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjte8olna: /tmp/tmpjte8olna.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if (sum < w) return false;\n    long maxSum\
    \ = sum - w;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > maxSum) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpycbya_6t: /tmp/tmpycbya_6t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmph8jjnsj1: /tmp/tmph8jjnsj1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy8c9yhbx: /tmp/tmpy8c9yhbx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        sum += q[i];\n        if (sum > max) {\n         \
    \   max = sum;\n        }\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long ans = 0;\n    for (long i = 0; i < q.size(); i++) {\n       \
    \ ans += q[i];\n        if (ans > w) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp0uoj18ui: /tmp/tmp0uoj18ui.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8zrj43os: /tmp/tmp8zrj43os.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) {\n    \
    \    return false;\n    }\n    long maxSum = w;\n    for (long i = 0; i < q.size();\
    \ i++) {\n        maxSum = std::max(maxSum, q[i]);\n    }\n    if (sum > maxSum)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbiqbxmpf: /tmp/tmpbiqbxmpf.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ : q){\n        sum += i;\n    }\n    if(sum == w){\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp1llngu8b: /tmp/tmp1llngu8b.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmph8jjnsj1: /tmp/tmph8jjnsj1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum\
    \ = 0;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n\
    \        if (max_sum > w) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpljm6em4p: /tmp/tmpljm6em4p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum < w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpia86ztj9: /tmp/tmpia86ztj9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   if (max_sum < w) return false;\n    long sum = 0;\n    for (long i : q) {\n\
    \        sum += i;\n        if (sum > w) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpes3kn529: /tmp/tmpes3kn529.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++11\n    long sum = 0;\n    long max\
    \ = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n     \
    \   if(sum > max) {\n            max = sum;\n        }\n    }\n    if(sum == w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_q8y7wj_: /tmp/tmp_q8y7wj_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3o21r5g5: /tmp/tmp3o21r5g5.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_weight\
    \ = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_weight = max(max_weight,\
    \ q[i]);\n    }\n    long min_weight = w;\n    for (long i = q.size() - 1; i >=\
    \ 0; i--) {\n        min_weight = min(min_weight, q[i]);\n    }\n    if (max_weight\
    \ == w) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm1wjzvtn.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm1wjzvtn.cpp:20:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   20 |    \
    \     max_weight = max(max_weight, q[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1wjzvtn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpm1wjzvtn.cpp:24:22: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   24 |         min_weight = min(min_weight, q[i]);\n      |                \
    \      ^~~\n      |                      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1wjzvtn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpha01f9in: /tmp/tmpha01f9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long maxWeight = w;\n   \
    \ long sum = 0;\n    bool isBalanced = true;\n    for (auto i : q) {\n       \
    \ sum += i;\n        if (sum > maxWeight) {\n            isBalanced = false;\n\
    \            break;\n        }\n    }\n    return isBalanced && sum <= maxWeight;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5siurr3n: /tmp/tmp5siurr3n.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for (auto i : q)\
    \ {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long max_sum\
    \ = 0;\n    for (auto i : q) {\n        max_sum += i;\n    }\n    if (max_sum\
    \ < w) return false;\n    long max_sum2 = max_sum;\n    for (auto i : q) {\n \
    \       max_sum2 += i;\n    }\n    if (max_sum2 < w) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx8pm1gp5: /tmp/tmpx8pm1gp5.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = sum - w;\n    for(long\
    \ i : q) {\n        if(i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplzvlfdcn: /tmp/tmplzvlfdcn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum < w && is_palindrome(q, max_sum);\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rqzl7ex.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp3rqzl7ex.cpp:14:27: error: \u2018is_palindrome\u2019\
    \ was not declared in this scope\n   14 |     return max_sum < w && is_palindrome(q,\
    \ max_sum);\n      |                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    long max_sum = w;\n    for (auto i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (sum == max_sum) {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa9yy0oau: /tmp/tmpa9yy0oau.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum;\n    for (auto\
    \ i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphn6m9nli: /tmp/tmphn6m9nli.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    int max_sum = w;\n    int max_sum_index\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int\
    \ j = 0; j < n; j++) {\n            sum += q[j];\n        }\n        if (sum >\
    \ max_sum) {\n            max_sum = sum;\n            max_sum_index = i;\n   \
    \     }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbpz06cup: /tmp/tmpbpz06cup.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long maxSum = sum - w;\n    for(long\
    \ i : q) {\n        sum += i;\n        if(sum > maxSum) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoty5oz9i: /tmp/tmpoty5oz9i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    int max_weight = w;\n    int sum =\
    \ 0;\n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum >\
    \ max_weight) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8rj10wdv: /tmp/tmp8rj10wdv.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0nwaonrt: /tmp/tmp0nwaonrt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxWeight = w;\n    long sum = 0;\n    bool isBalanced\
    \ = true;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n  \
    \      if(sum > maxWeight) {\n            isBalanced = false;\n            break;\n\
    \        }\n    }\n    return isBalanced && sum <= maxWeight;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5eksggql: /tmp/tmp5eksggql.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max = 0;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if(sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpem4hglhe: /tmp/tmpem4hglhe.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        sum += i;\n        if (sum > max_sum) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk__okvb7: /tmp/tmpk__okvb7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxSum = std::accumulate(q.begin(), q.end(), 0);\n  \
    \  return maxSum < w && std::equal(q.begin(), q.end(), q.rbegin(), q.rend());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4a8vfu7l: /tmp/tmp4a8vfu7l.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5})),
    (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp50_v2y34: /tmp/tmp50_v2y34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum < w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpia86ztj9: /tmp/tmpia86ztj9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = 0;\n    for (long i\
    \ : q) {\n        max_sum += i;\n    }\n    return max_sum == w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgurf1eyf: /tmp/tmpgurf1eyf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum;\n    for (auto i : q) {\n        max_sum = std::max(max_sum,\
    \ i + w);\n    }\n    return max_sum == sum;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmu2197i0: /tmp/tmpmu2197i0.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max_sum = w;\n\
    \    for (long i : q) {\n        sum += i;\n        if (sum > max_sum) {\n   \
    \         max_sum = sum;\n        }\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp4y0iy7w1: /tmp/tmp4y0iy7w1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_weight)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptfgozhlb: /tmp/tmptfgozhlb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnl74ffos: /tmp/tmpnl74ffos.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n\
    \    for (auto i : q) {\n        max_sum = std::max(max_sum, i);\n    }\n    if\
    \ (max_sum < w) {\n        return false;\n    }\n    long max_weight = w;\n  \
    \  for (auto i : q) {\n        max_weight = std::max(max_weight, i);\n    }\n\
    \    if (max_weight < w) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0auepdo2: /tmp/tmp0auepdo2.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for(long\
    \ i : q) {\n        sum += i;\n    }\n    if(sum < w) return false;\n    long\
    \ max_sum = 0;\n    for(long i : q) {\n        max_sum += i;\n    }\n    return\
    \ max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp080qrzsf: /tmp/tmp080qrzsf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max = 0;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    if(sum == w) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpem4hglhe: /tmp/tmpem4hglhe.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    return sum <=\
    \ w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1t08decw: /tmp/tmp1t08decw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    int max_weight = w;\n    long sum =\
    \ 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum\
    \ > max_weight) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpljzlvd8g: /tmp/tmpljzlvd8g.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    long max_weight = 0;\n    long min_weight = 0;\n    long min_sum = w;\n \
    \   long mid = 0;\n    long mid2 = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n\
    \    long mid5 = 0;\n    long mid6 = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n\
    \    long mid9 = 0;\n    long mid10 = 0;\n    long mid11 = 0;\n    long mid12\
    \ = 0;\n    long mid13 = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n    long\
    \ mid16 = 0;\n    long mid17 = 0;\n    long mid18 = 0;\n    long mid19 = 0;\n\
    \    long mid20 = 0;\n    long mid21 = 0;\n    long mid22 = 0;\n    long mid23\
    \ = 0;\n    long mid24 = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n    long\
    \ mid27 = 0;\n    long mid28 = 0;\n    long mid29 = 0;\n    long mid30 = 0;\n\
    \    long mid31 = 0;\n    long mid32 = 0;\n    long mid33 = 0;\n    long mid34\
    \ = 0;\n    long mid35 = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n    long\
    \ mid38 = 0;\n    long mid39 = 0;\n    long mid40 = 0;\n    long mid41 = 0;\n\
    \    long mid42 = 0;\n    long mid43 = 0;\n    long mid44 = 0;\n    long mid45\
    \ = 0;\n    long mid46 = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n    long\
    \ mid49 = 0;\n    long mid50 = 0;\n    long mid51 = 0;\n    long mid52 = 0;\n\
    \    long mid53 = 0;\n    long mid54 = 0;\n    long mid55 = 0;\n    long mid56\
    \ = 0;\n    long mid57 = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n    long\
    \ mid60 = 0;\n    long mid61 = 0;\n    long mid62 = 0;\n    long mid63 = 0;\n\
    \    long mid64 = 0;\n    long mid65 = 0;\n    long mid66 = 0;\n    long mid67\
    \ = 0;\n    long mid68 = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n    long\
    \ mid71 = 0;\n    long mid72 = 0;\n    long mid73 = 0;\n    long mid74 = 0;\n\
    \    long mid75 = 0;\n    long mid76 = 0;\n    long mid77 = 0;\n    long mid78\
    \ = 0;\n    long mid79 = 0;\n    long mid80 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa3j10zjo: /tmp/tmpa3j10zjo.cpp:103: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return q[0] == w;\n    long max_sum = 0;\n    long sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum\
    \ > w)\n            return false;\n        max_sum = std::max(max_sum, sum);\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7j27i84g: /tmp/tmp7j27i84g.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpha01f9in: /tmp/tmpha01f9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    long max_weight = 0;\n    long min_weight = 0;\n    long max_weight2 = 0;\n\
    \    long min_weight2 = 0;\n    long max_weight3 = 0;\n    long min_weight3 =\
    \ 0;\n    long max_weight4 = 0;\n    long min_weight4 = 0;\n    long max_weight5\
    \ = 0;\n    long min_weight5 = 0;\n    long max_weight6 = 0;\n    long min_weight6\
    \ = 0;\n    long max_weight7 = 0;\n    long min_weight7 = 0;\n    long max_weight8\
    \ = 0;\n    long min_weight8 = 0;\n    long max_weight9 = 0;\n    long min_weight9\
    \ = 0;\n    long max_weight10 = 0;\n    long min_weight10 = 0;\n    long max_weight11\
    \ = 0;\n    long min_weight11 = 0;\n    long max_weight12 = 0;\n    long min_weight12\
    \ = 0;\n    long max_weight13 = 0;\n    long min_weight13 = 0;\n    long max_weight14\
    \ = 0;\n    long min_weight14 = 0;\n    long max_weight15 = 0;\n    long min_weight15\
    \ = 0;\n    long max_weight16 = 0;\n    long min_weight16 = 0;\n    long max_weight17\
    \ = 0;\n    long min_weight17 = 0;\n    long max_weight18 = 0;\n    long min_weight18\
    \ = 0;\n    long max_weight19 = 0;\n    long min_weight19 = 0;\n    long max_weight20\
    \ = 0;\n    long min_weight20 = 0;\n    long max_weight21 = 0;\n    long min_weight21\
    \ = 0;\n    long max_weight22 = 0;\n    long min_weight22 = 0;\n    long max_weight23\
    \ = 0;\n    long min_weight23 = 0;\n    long max_weight24 = 0;\n    long min_weight24\
    \ = 0;\n    long max_weight25 = 0;\n    long min_weight25 = 0;\n    long max_weight26\
    \ = 0;\n    long min_weight26 = 0;\n    long max_weight27 = 0;\n    long min_weight27\
    \ = 0;\n    long max_weight28 = 0;\n    long min_weight28 = 0;\n    long max_weight29\
    \ = 0;\n    long min_weight29 = 0;\n    long max_weight30 = 0;\n    long min_weight30\
    \ = 0;\n    long max_weight31 = 0;\n    long min_weight31 = 0;\n    long max_weight32\
    \ = 0;\n    long min_weight32 = 0;\n    long max_weight33 = 0;\n    long min_weight33\
    \ = 0;\n    long max_weight34 = 0;\n    long min_weight34 = 0;\n    long max_weight35\
    \ = 0;\n    long min_weight35 = 0;\n    long max_weight36 = 0;\n    long min_weight36\
    \ = 0;\n\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqlz9r4li: /tmp/tmpqlz9r4li.cpp:92: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return q[0] == w;\n    long max_weight = w;\n    long\
    \ sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += q[i];\n       \
    \ if (sum > max_weight)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzrrvpnqj: /tmp/tmpzrrvpnqj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_weight\
    \ = w;\n    for (long i : q) {\n        max_weight = max(max_weight, i);\n   \
    \ }\n    long min_weight = w;\n    for (long i : q) {\n        min_weight = min(min_weight,\
    \ i);\n    }\n    if (max_weight == min_weight) {\n        return true;\n    }\n\
    \    long mid = (max_weight + min_weight) / 2;\n    long left_sum = 0;\n    long\
    \ right_sum = 0;\n    for (long i : q) {\n        left_sum += i;\n    }\n    for\
    \ (long i : q) {\n        right_sum += i;\n    }\n    if (left_sum == right_sum)\
    \ {\n        return will_it_fly(q, mid);\n    }\n    if (left_sum > right_sum)\
    \ {\n        return will_it_fly(q, mid);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9qe0iuo.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpk9qe0iuo.cpp:22:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_weight = max(max_weight, i);\n      |                      ^~~\n   \
    \   |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk9qe0iuo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpk9qe0iuo.cpp:26:22: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   26 |         min_weight = min(min_weight, i);\n      |                   \
    \   ^~~\n      |                      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk9qe0iuo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum - w;\n    for (long\
    \ i : q) {\n        if (i > max_sum) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8zrj43os: /tmp/tmp8zrj43os.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(auto i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w && std::equal(q.begin(), q.end(), q.rbegin());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if(sum > max_sum) {\n  \
    \          max_sum = sum;\n        }\n    }\n    if(sum == max_sum) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzd8k0npi: /tmp/tmpzd8k0npi.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = std::accumulate(q.begin(), q.end(), 0);\n \
    \   return max_sum < w && std::equal(q.begin(), q.end(), q.rbegin(), q.rend());\n\
    }\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3v7671da: /tmp/tmp3v7671da.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5})),
    (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max_weight\
    \ = 0;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n     \
    \   if(sum > max_weight) {\n            max_weight = sum;\n        }\n    }\n\
    \    if(max_weight == 0) {\n        return false;\n    }\n    long sum2 = 0;\n\
    \    for(long i = 0; i < q.size(); i++) {\n        sum2 += q[i];\n        if(sum2\
    \ > max_weight) {\n            return false;\n        }\n    }\n    if(sum ==\
    \ sum2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi6y8fpt_: /tmp/tmpi6y8fpt_.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = sum;\n    for(long i\
    \ : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm_k7kih6: /tmp/tmpm_k7kih6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for(long i : q){\n\
    \        sum += i;\n    }\n    if(sum >= w){\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxy58uit0: /tmp/tmpxy58uit0.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for(long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum < w) return false;\n\
    \    long max_sum = sum - w;\n    for(long i = 0; i < q.size(); i++) {\n     \
    \   if(q[i] > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2eit83nz: /tmp/tmp2eit83nz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long max_sum = 0;\n    long\
    \ sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) {\n            return false;\n        }\n    }\n    max_sum\
    \ = sum;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n  \
    \      if (sum > w) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7unl4y9t: /tmp/tmp7unl4y9t.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = w;\n    for (auto i : q) {\n        max_sum = std::max(max_sum, i\
    \ + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpchydg_kq: /tmp/tmpchydg_kq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = sum;\n    for(long i\
    \ : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm_k7kih6: /tmp/tmpm_k7kih6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long maxSum = w;\n    for (auto i\
    \ : q) {\n        maxSum = std::max(maxSum, i + w);\n    }\n    return maxSum\
    \ == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphmqgynmp: /tmp/tmphmqgynmp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = 0;\n    for (long i\
    \ : q) {\n        max_sum += i;\n        if (max_sum > w) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn93yzfof: /tmp/tmpn93yzfof.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmb1s17sw: /tmp/tmpmb1s17sw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    int max_sum = w;\n    int max_index\
    \ = -1;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            sum += q[j];\n        }\n        if (sum\
    \ > max_sum) {\n            max_sum = sum;\n            max_index = i;\n     \
    \   }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0w3ltb82: /tmp/tmp0w3ltb82.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum = w;\n\
    \    for (long i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n\
    \    if (sum > max_sum) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp18c13yp4: /tmp/tmp18c13yp4.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum < w){\n  \
    \      return false;\n    }\n    long max_sum = sum;\n    for(long i = 0; i <\
    \ q.size(); i++){\n        max_sum = std::max(max_sum, q[i]);\n    }\n    if(max_sum\
    \ < w){\n        return false;\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz069vg57: /tmp/tmpz069vg57.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    long max_sum = 0;\n\
    \    for (long i : q) {\n        max_sum += i;\n    }\n    if (max_sum > w) {\n\
    \        return false;\n    }\n    long mid = max_sum / 2;\n    for (long i :\
    \ q) {\n        if (i < mid) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt6n0y8vf: /tmp/tmpt6n0y8vf.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n        if (sum > w) {\n       \
    \     return false;\n        }\n        max_sum += w;\n    }\n    return max_sum\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph9rn1n0y: /tmp/tmph9rn1n0y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum < w) return false;\n   \
    \ long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \        if (sum > w) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpha01f9in: /tmp/tmpha01f9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    long max_sum = w;\n    long sum = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl80stjr5: /tmp/tmpl80stjr5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    int n = q.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return q[0] == w;\n    if (q[0] == q[n-1])\n       \
    \ return will_it_fly(q.substr(1, n-1), w);\n    return false;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5963jc3.cpp: In function \u2018bool will_it_fly(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpv5963jc3.cpp:19:30: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   19 |         return will_it_fly(q.substr(1,\
    \ n-1), w);\n      |                              ^~~~~~\n"
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    long max_weight\
    \ = w;\n    for(long i = 0; i < q.size(); i++) {\n        sum += q[i];\n     \
    \   if(sum > max_weight) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1p2xmoaj: /tmp/tmp1p2xmoaj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long maxWeight = w;\n    long sum = 0;\n    bool isBalanced\
    \ = true;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n \
    \       if (sum > maxWeight) {\n            isBalanced = false;\n            break;\n\
    \        }\n    }\n    return isBalanced && sum <= maxWeight;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp46a1kpew: /tmp/tmp46a1kpew.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long sum = 0;\n    for(long\
    \ i : q) {\n        sum += i;\n    }\n    if(sum < w) {\n        return false;\n\
    \    }\n    long max_sum = w;\n    for(long i : q) {\n        max_sum = std::max(max_sum,\
    \ i + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaoqolukw: /tmp/tmpaoqolukw.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // write your code in C++14\n    long maxWeight = w;\n   \
    \ long sum = 0;\n    for (long i : q) {\n        sum += i;\n        if (sum >\
    \ maxWeight) {\n            maxWeight = sum;\n        }\n    }\n    bool isBalanced\
    \ = true;\n    for (long i : q) {\n        if (i != sum) {\n            isBalanced\
    \ = false;\n            break;\n        }\n    }\n    return isBalanced;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw_qq6lri: /tmp/tmpw_qq6lri.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    if(sum < w) return false;\n    long max_sum = sum - w;\n    for(long\
    \ i : q) {\n        if(i > max_sum) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplzvlfdcn: /tmp/tmplzvlfdcn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134619
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for(auto i :\
    \ q) {\n        sum += i;\n        if(sum > max_weight) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5zcdybg5: /tmp/tmp5zcdybg5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        max_sum += q[i];\n    }\n    if (max_sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpv1kd5nwi: /tmp/tmpv1kd5nwi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i : q) {\n        sum += i;\n\
    \    }\n    if (sum < w) return false;\n    long max_sum = sum;\n    for (long\
    \ i : q) {\n        max_sum = std::max(max_sum, i + w);\n    }\n    return max_sum\
    \ == sum;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr6unt5mt: /tmp/tmpr6unt5mt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (long i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    if (max_sum == w) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo18uv9a: /tmp/tmpmo18uv9a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n\
    \        sum += q[i];\n    }\n    if (sum < w) return false;\n    long max_sum\
    \ = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum = std::max(max_sum,\
    \ q[i] + w);\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp776554el: /tmp/tmp776554el.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_weight = w;\n    long sum = 0;\n    for (long i =\
    \ 0; i < q.size(); i++) {\n        sum += q[i];\n        if (sum > max_weight)\
    \ {\n            max_weight = sum;\n        }\n    }\n    if (max_weight == w)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpepizmemu: /tmp/tmpepizmemu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for(long i : q)\
    \ {\n        sum += i;\n        if(sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0nwaonrt: /tmp/tmp0nwaonrt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Your code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) return false;\n\
    \    long max_sum = w;\n    for (long i = 0; i < q.size(); i++) {\n        max_sum\
    \ = std::max(max_sum, q[i]);\n    }\n    if (max_sum == w) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6_yvxq5b: /tmp/tmp6_yvxq5b.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long sum = 0;\n    for(long i : q) {\n        sum += i;\n\
    \    }\n    return sum <= w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpy5etivec: /tmp/tmpy5etivec.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    long max_sum = w;\n    long sum = 0;\n    for (auto i : q)\
    \ {\n        sum += i;\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \        }\n    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy8c9yhbx: /tmp/tmpy8c9yhbx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2})), (5)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134618
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1,\
    \ 2], 5) \n// False \n// # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n// # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
    \ q, long w) {\n    // Write your code here\n    long sum = 0;\n    for(long i\
    \ = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum < w) return\
    \ false;\n    long max = 0;\n    for(long i = 0; i < q.size(); i++) {\n      \
    \  if(q[i] > max) max = q[i];\n    }\n    long ans = 0;\n    for(long i = 0; i\
    \ < q.size(); i++) {\n        if(q[i] > max) {\n            ans += (sum - max);\n\
    \            q[i] = 0;\n        }\n    }\n    return ans <= w;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx18wm8t9: /tmp/tmpx18wm8t9.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)3})), (9)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134621
