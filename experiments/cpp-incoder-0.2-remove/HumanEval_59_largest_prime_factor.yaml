name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long max_factor = 1;\n    long max_factor_index = 0;\n    long\
    \ i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j =\
    \ i;\n            while (j < n) {\n                if (n % j == 0) {\n       \
    \             max_factor = j;\n                    max_factor_index = i;\n   \
    \                 break;\n                }\n                j++;\n          \
    \  }\n        }\n        i++;\n    }\n    return max_factor_index;", "    long\
    \ max_factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n        }\n        i += 2;\n    }\n\
    \    return max_factor;", "    long max_factor = 1;\n    long max_prime = 1;\n\
    \    long prime = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            prime = i;\n            while (n % i == 0) {\n        \
    \        n /= i;\n            }\n            if (n > 1) {\n                max_factor\
    \ = i;\n                max_prime = prime;\n            }\n        }\n       \
    \ i++;\n    }\n    return max_factor;", "    long factor = 1;\n    long i = 2;\n\
    \    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n   \
    \         break;\n        }\n        ++i;\n    }\n    return factor;", "    long\
    \ p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n    long t = 3;\n\
    \    long u = 3;\n    long v = 3;\n    long w = 3;\n    long x = 2;\n    long\
    \ y = 2;\n    long z = 2;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long ", "    long i = 2;\n   \
    \ long max_i = 1;\n    long max_factor = 1;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n            max_i = i;\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long max_factor = 1;\n   \
    \ long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n       \
    \     max_factor = i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n   \
    \ while (i < n) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n\
    \                n /= i;\n                max_factor_index = i;\n            \
    \    max_factor = i;\n            }\n        }\n        i++;\n    }\n    return\
    \ max_factor;", "    long i = 2;\n    long max_factor = 1;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n     \
    \   i += 1;\n    }\n    return max_factor;", "    long i = 2;\n    long max =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            max = i;\n \
    \       }\n        i += 2;\n    }\n    return max;", "    long max_factor = 0;\n\
    \    long max_factor_index = 0;\n    for (long i = 2; i <= n; i++) {\n       \
    \ if (n % i == 0) {\n            long j = i;\n            while (j > 1) {\n  \
    \              if (n % j == 0) {\n                    break;\n               \
    \ }\n                j--;\n            }\n            if (j == 1) {\n        \
    \        max_factor = i;\n                max_factor_index = i;\n            }\n\
    \        }\n    }\n    return max_factor;", "    long p = 2;\n    long q = n;\n\
    \    long r = n;\n    while (q != 0) {\n        if (q % p == 0) {\n          \
    \  q = q / p;\n        } else {\n            p = p * 2;\n        }\n    }\n  \
    \  return r;", "    long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n\
    \    while (i < max_i) {\n        if (n % i == 0) {\n            max_factor =\
    \ i;\n            max_i = max_i / i;\n        }\n        ++i;\n    }\n    return\
    \ max_factor;", "    long factor = 1;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            factor++;\n            n /= i;\n     \
    \   }\n        i++;\n    }\n    return factor;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i < n) {\n        if (n % i == 0) {\n            largest =\
    \ i;\n        }\n        i++;\n    }\n    return largest;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    long i;\n    for (i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            long j = max_factor;\n           \
    \ while (n % i == 0) {\n                n = n / i;\n                j++;\n   \
    \         }\n            if (j > max_factor) {\n                max_factor = j;\n\
    \                max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long i = 2;\n    long max_i = i;\n    long max_factor\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            i += 1;\n\
    \        } else {\n            i = i * 2;\n        }\n        if (i > max_i) {\n\
    \            max_i = i;\n            max_factor = i;\n        }\n    }\n    return\
    \ max_factor;", "    long i = 2;\n    long max_factor = 1;\n    while (i < n)\
    \ {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n     \
    \   ++i;\n    }\n    return max_factor;", "    long max_factor = 1;\n    long\
    \ max_factor_index = 0;\n    long i = 2;\n    long j;\n    while (i < n) {\n \
    \       j = i;\n        while (j < n) {\n            if (n % j == 0) {\n     \
    \           break;\n            }\n            j++;\n        }\n        if (j\
    \ > max_factor) {\n            max_factor = j;\n            max_factor_index =\
    \ i;\n        }\n        i++;\n    }\n    return max_factor_index;", "    long\
    \ i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i < max_i)\
    \ {\n        if (n % i == 0) {\n            max_factor = i;\n            max_i\
    \ = max_i / i;\n        }\n        i++;\n    }\n    return max_factor;", "   \
    \ long max_factor = 1;\n    long max_prime_factor = 1;\n    long i = 3;\n    while(i\
    \ <= sqrt(n)) {\n        if(n % i == 0) {\n            if(i * i > n) {\n     \
    \           max_factor = i;\n                max_prime_factor = n;\n         \
    \   }\n            i += 2;\n        }\n        else {\n            i += 1;\n \
    \       }\n    }\n    return max_prime_factor;", "    long i = 2;\n    long largest\
    \ = 2;\n    while (i <= n && n % i == 0) {\n        largest = i;\n        i +=\
    \ 2;\n    }\n    return largest;", "    long max_factor = 0;\n    long max_factor_index\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       long factor = i / max_factor;\n            if (factor > max_factor) {\n\
    \                max_factor = factor;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long i =\
    \ 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i <= max_i) {\n\
    \        if (n % i == 0) {\n            max_factor = i;\n            max_i = max_i\
    \ / i;\n        }\n        i++;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            long j = i;\n            while (j < n)\
    \ {\n                if (n % j == 0) {\n                    max_factor = j;\n\
    \                    max_factor_index = i;\n                    break;\n     \
    \           }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i;\n    long j;\n    for (i = 2; i <= n; i++) {\n        for\
    \ (j = 2; j <= max_factor; j++) {\n            if (n % j == 0) {\n           \
    \     break;\n            }\n        }\n        if (j > max_factor) {\n      \
    \      max_factor = j;\n            max_factor_index = i;\n        }\n    }\n\
    \    return max_factor_index;", "    long i = 2;\n    long max_factor = 1;\n \
    \   while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        i += 1;\n    }\n    return max_factor;", "    long\
    \ max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 2; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            long factor = i / max_factor;\n\
    \            if (factor > max_factor) {\n                max_factor = factor;\n\
    \                max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n          \
    \  max_factor = i;\n            max_factor_index = i;\n            n /= i;\n \
    \       }\n    }\n    return max_factor;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n        }\n        ++i;\n    }\n    return largest;", "    long i = 2;\n\
    \    long max_factor = 0;\n    while(i < n) {\n        if(n%i == 0) {\n      \
    \      if(i*i > max_factor) {\n                max_factor = i*i;\n           \
    \ }\n        }\n        i++;\n    }\n    return max_factor;", "    long i = 2;\n\
    \    long max_i = n;\n    while (i < max_i) {\n        if (n % i == 0) {\n   \
    \         max_i = i;\n        }\n        ++i;\n    }\n    return max_i;", "  \
    \  long max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n     \
    \       max_factor_index = i;\n        }\n    }\n    return max_factor;", "  \
    \  long p = 2;\n    long q = n;\n    long r = n;\n    while (q != 1) {\n     \
    \   while (r % p == 0) {\n            q = q / p;\n        }\n        p = p * q;\n\
    \        r = n;\n    }\n    return p;", "    long i = 2;\n    long max_i = n;\n\
    \    long max_factor = 1;\n    while (i < max_i) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n            max_i = max_i / i;\n        }\n    \
    \    i++;\n    }\n    return max_factor;", "    long max_factor = 1;\n    long\
    \ max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            max_factor = i;\n            max_factor_index = i;\n\
    \        }\n        i += 2;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i <= n; i++) {\n \
    \       if (n % i == 0) {\n            long factor = i / max_factor;\n       \
    \     if (factor > max_factor) {\n                max_factor = factor;\n     \
    \           max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long i = 2;\n    long max_i = 1;\n    while (i <= n\
    \ && n % i == 0) {\n        max_i = i;\n        i += 2;\n    }\n    return max_i;",
  "    long p = 2;\n    long q = 3;\n    long r = n;\n    while (r != 1) {\n     \
    \   while (r % p == 0) {\n            p = p * q;\n        }\n        while (r\
    \ % q == 0) {\n            q = q * p;\n        }\n        r = r / q;\n    }\n\
    \    return p;", "    long max_factor = 1;\n    long max_factor_index = 0;\n \
    \   long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n           \
    \ long j = 2;\n            while (j * i <= n) {\n                if (n % i ==\
    \ 0) {\n                    max_factor = i;\n                    max_factor_index\
    \ = j;\n                    break;\n                }\n                j++;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor;", "   \
    \ long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i < max_i)\
    \ {\n        if (n % i == 0) {\n            max_factor = i;\n            max_i\
    \ = max_i / i;\n        }\n        ++i;\n    }\n    return max_factor;", "   \
    \ long i = 2;\n    long largest = i;\n    while (i <= n / i) {\n        if (n\
    \ % i == 0) {\n            largest = i;\n        }\n        i++;\n    }\n    return\
    \ largest;", "    long max_factor = 1;\n    long max_factor_index = 0;\n    long\
    \ i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long\
    \ factor = i / max_factor;\n            if (factor > max_factor) {\n         \
    \       max_factor = factor;\n                max_factor_index = i;\n        \
    \    }\n        }\n    }\n    return max_factor_index;", "    long max_factor\
    \ = 0;\n    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            long j = 2;\n            while (j < i)\
    \ {\n                if (n % j == 0) {\n                    max_factor = j;\n\
    \                    max_factor_index = i;\n                    break;\n     \
    \           }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor_index;", "    long max_factor = 0;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n\
    \            long j = i;\n            while (j <= sqrt(n)) {\n               \
    \ if (n % j == 0) {\n                    max_factor_index = j;\n             \
    \       break;\n                }\n                j++;\n            }\n     \
    \       if (max_factor < max_factor_index) {\n                max_factor = max_factor_index;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor;", "   \
    \ long max_factor = 0;\n    long max_factor_index = 0;\n    long i = 2;\n    long\
    \ j;\n    while (i < n) {\n        if (n % i == 0) {\n            j = i;\n   \
    \         while (j < n) {\n                if (n % j == 0) {\n               \
    \     j++;\n                } else {\n                    break;\n           \
    \     }\n            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    \
    \    i++;\n    }\n    return max_factor_index;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i < n) {\n        if (n % i == 0) {\n            largest =\
    \ i;\n        }\n        i++;\n    }\n    return largest;", "    long ans = 1;\n\
    \    long i = 2;\n    long p = 1;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            ans = i;\n            while (n % i == 0) {\n             \
    \   n /= i;\n                ++p;\n            }\n        }\n        ++i;\n  \
    \  }\n    return ans * p;", "    long ans = 1;\n    long i = 2;\n    while (i\
    \ < n) {\n        if (n % i == 0) {\n            ans = i;\n            break;\n\
    \        }\n        i++;\n    }\n    return ans;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    for (int i = 1; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            long factor = i / max_factor;\n            if (factor\
    \ > max_factor) {\n                max_factor = factor;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor_index;", "    long\
    \ i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i < max_i)\
    \ {\n        if (n % i == 0) {\n            max_factor = i;\n            max_i\
    \ = max_i / i;\n        }\n        i++;\n    }\n    return max_factor;", "   \
    \ long factor = 2;\n    long i = 2;\n    while (i <= n/factor) {\n        if (n\
    \ % i == 0) {\n            factor = i;\n        }\n        ++i;\n    }\n    return\
    \ factor;", "    long max_factor = 1;\n    long max_factor_index = 0;\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;", "    long i = 2;\n    long largest = 2;\n\
    \    while (i <= n / 2) {\n        if (n % i == 0) {\n            largest = i;\n\
    \        }\n        i++;\n    }\n    return largest;", "    long i = 2;\n    long\
    \ max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n            max_i = max_i / i;\n \
    \       }\n        ++i;\n    }\n    return max_factor;", "    long ans = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  ans = i;\n            while (n % i == 0) {\n                n /= i;\n     \
    \       }\n        }\n        i++;\n    }\n    return ans;", "    long i = 2;\n\
    \    long max_factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n  \
    \          max_factor = i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                j++;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;", "    long ans = 1;\n    long i = 2;\n    while\
    \ (i <= n / 2) {\n        if (n % i == 0) {\n            ans = i;\n          \
    \  while (n % i == 0) {\n                n /= i;\n                ++i;\n     \
    \       }\n        }\n        ++i;\n    }\n    return ans;", "    long i = 2;\n\
    \    long max = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n    \
    \        max = i;\n        }\n        i += 2;\n    }\n    return max;", "    long\
    \ i = 2;\n    long max_i = i;\n    while (i < n && n % i == 0) {\n        max_i\
    \ = i;\n        i += 2;\n    }\n    return max_i;", "    long i = 2;\n    long\
    \ largest = i;\n    long factor = 1;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            factor = i;\n            largest = i;\n        }\n    \
    \    ++i;\n    }\n    return factor;", "    long p = 2;\n    long q = n;\n   \
    \ long r = n;\n    long s = 2;\n    long t = 3;\n    long u = 3;\n    long v =\
    \ 3;\n    long w = 3;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long ", "    long i = 2;\n    long largest = i;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            largest = i;\n        }\n\
    \        i++;\n    }\n    return largest;", "    long i = 2;\n    long max_i =\
    \ n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n % i ==\
    \ 0) {\n            max_factor = i;\n            max_i = max_i / i;\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i < n) {\n        if (n % i == 0) {\n            largest =\
    \ i;\n        }\n        i++;\n    }\n    return largest;", "    long i = 2;\n\
    \    long max_factor = 1;\n    while (i <= n / i) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        ++i;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            long factor = i / max_factor;\n\
    \            if (factor > max_factor) {\n                max_factor = factor;\n\
    \                max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long i = 2;\n    long max_i = n;\n    long max_factor\
    \ = 1;\n    while (i <= max_i) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n            max_i = max_factor;\n        }\n        ++i;\n    }\n    return\
    \ max_factor;", "    long i = 2;\n    long largest = i;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n\
    \    }\n    return largest;", "    long p = 2;\n    long q = n;\n    long r =\
    \ n;\n    long s = 2;\n    long t = 3;\n    long u = 3;\n    long v = 3;\n   \
    \ long w = 3;\n    long x = 3;\n    long y = 3;\n    long z = 3;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n   \
    \ long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m =\
    \ 1;\n    long ", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long\
    \ j;\n            for (j = i; j <= n; j += i) {\n                if (n % j ==\
    \ 0) {\n                    break;\n                }\n            }\n       \
    \     if (j > max_factor) {\n                max_factor = j;\n               \
    \ max_factor_index = i;\n            }\n        }\n    }\n    return max_factor;",
  "    long i = 2;\n    long max_factor = 1;\n    while (i <= n / i) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n\
    \    return max_factor;", "    long i = 2;\n    long largest = i;\n    while (i\
    \ < n) {\n        if (n % i == 0) {\n            largest = i;\n        }\n   \
    \     i++;\n    }\n    return largest;", "    long i = 2;\n    long max_factor\
    \ = 1;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        ++i;\n    }\n    return max_factor;", "    long i =\
    \ 2;\n    long max_i = n;\n    while (i < max_i) {\n        if (n % i == 0) {\n\
    \            max_i = i;\n        }\n        ++i;\n    }\n    return max_i;", " \
    \   long max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n  \
    \  while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n     \
    \       while (j < n) {\n                if (n % j == 0) {\n                 \
    \   max_factor_index = j;\n                    break;\n                }\n   \
    \             j++;\n            }\n            if (max_factor_index > max_factor)\
    \ {\n                max_factor = max_factor_index;\n            }\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long i = 2;\n    long max_factor\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        i++;\n    }\n    return max_factor;", "    long i =\
    \ 2;\n    long max_factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        i += 2;\n    }\n    return max_factor;",
  "    long i = 2;\n    long max_i = n;\n    while (i < max_i) {\n        if (n %\
    \ i == 0) {\n            long j = 2;\n            long max_j = i;\n          \
    \  while (j < max_j) {\n                if (i % j == 0) {\n                  \
    \  break;\n                }\n                j++;\n            }\n          \
    \  if (j == max_j) {\n                return i;\n            }\n        }\n  \
    \      i++;\n    }\n    return n;", "    long max_factor = 0;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n    \
    \        long j = i;\n            while (j < n) {\n                if (n % j ==\
    \ 0) {\n                    break;\n                }\n                j++;\n\
    \            }\n            if (j > i) {\n                i = j;\n           \
    \ }\n        }\n        i++;\n    }\n    while (max_factor < i && max_factor_index\
    \ < i) {\n        max_factor = i;\n        max_factor_index = i;\n        i++;\n\
    \    }\n    return max_factor;", "    long i = 2;\n    long max_i = n;\n    while\
    \ (i < max_i) {\n        if (n % i == 0) {\n            max_i = i;\n        }\n\
    \        ++i;\n    }\n    return max_i;", "    long max_factor = 1;\n    long\
    \ max_factor_index = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i\
    \ == 0) {\n            long factor = i / max_factor;\n            if (factor >\
    \ max_factor) {\n                max_factor = factor;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor_index;", "    long\
    \ i = 2;\n    long max_i = n;\n    while (i < max_i) {\n        if (n % i == 0)\
    \ {\n            long j = 2;\n            while (j < i) {\n                if\
    \ (i % j == 0) {\n                    max_i = i;\n                    break;\n\
    \                }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_i;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \   }\n    return max_factor;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       long factor = i / max_factor;\n            if (factor > max_factor) {\n\
    \                max_factor = factor;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long max_factor\
    \ = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        i += 1;\n    }\n    return max_factor;",
  "    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n   \
    \ return max_factor;", "    long p = 2;\n    long q = 3;\n    long r = n;\n  \
    \  while (r > 1) {\n        while (r % p == 0) {\n            q = p * q;\n   \
    \         r = r / p;\n        }\n        p = p * q;\n    }\n    return p;", " \
    \   long max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n  \
    \  long j;\n    for (; i <= n; i++) {\n        for (j = i; j < n; j += i) {\n\
    \            if (n % j == 0) {\n                break;\n            }\n      \
    \  }\n        if (j > max_factor) {\n            max_factor = j;\n           \
    \ max_factor_index = i;\n        }\n    }\n    return max_factor_index;", "  \
    \  long max_factor = 0;\n    long max_factor_index = 0;\n    long i = 2;\n   \
    \ while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n      \
    \      while (j < i) {\n                if (i % j == 0) {\n                  \
    \  break;\n                }\n                j++;\n            }\n          \
    \  if (j > i) {\n                max_factor = i;\n                max_factor_index\
    \ = j;\n            }\n        }\n        i++;\n    }\n    return max_factor;",
  "    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n    long t\
    \ = 2;\n    long u = 2;\n    long v = 2;\n    long w = 2;\n    long x = 2;\n \
    \   long y = 2;\n    long z = 2;\n    long A = 2;\n    long B = 2;\n    long C\
    \ = 2;\n    long D = 2;\n    long E = 2;\n    long F = 2;\n    long G = 2;\n \
    \   long H = 2;\n    long I = 2;\n    long J = 2;\n    long K = 2;\n    long L\
    \ = 2;\n    long M = 2;\n    long N = 2;\n    long O = 2;\n    long P = 2;\n \
    \   long Q = 2;\n    long R = 2;\n    long S = 2;\n    long T = 2;\n    long U\
    \ = 2;\n    long V = 2;\n    long W = 2;\n    long X = 2;\n    long Y = 2;\n \
    \   long Z = 2;\n    long aa = 2;\n    long ab = 2;\n    long ac = 2;\n    long\
    \ ad = 2;\n    long ae = 2;\n    long af = 2;\n    long ag = 2;\n    long ah =\
    \ 2;\n    long ai = 2;\n    long aj = 2;\n    long ak = 2;\n    long al = 2;\n\
    \    long am = 2;\n    long an = 2;\n    long ao = 2;\n    long ap = 2;\n    long\
    \ aq = 2;\n    long ar = 2;\n    long as = 2;\n    long at = 2;\n    long au =\
    \ 2;\n    long av = 2;\n    long aw = 2;\n    long ax = 2;\n    long ay = 2;\n\
    \    long az = 2;\n    long ba = 2;\n    long bb = 2;\n    long bc = 2;\n    long\
    \ bd = 2;\n    long be = 2;\n    long bf = 2;\n    long bg = 2;\n    long bh =\
    \ 2;\n    long bi = 2;\n    long bj = 2;\n    long bk = 2;\n    long bl = 2;\n\
    \    long bm = 2;\n    long bn = 2;\n    long bo = 2;\n    long bp = 2;\n    long\
    \ bq = 2;\n    long br = 2;\n    long bs = 2;\n    long bt = 2;\n    long bu =\
    \ 2;\n    long bv = 2;\n    long bw = 2;\n    long bx = 2;\n    long by = 2;\n\
    \    long bz = 2;\n    long ca = 2;\n    long cb = 2;\n    long cc = 2;\n    long\
    \ cd = 2;\n    long ce = 2;\n    long cf = 2;\n    long cg = 2;\n    long ch =\
    \ 2;\n    long ci = 2;\n    long cj = 2;\n    long ck = 2;\n    long cl = 2;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            long factor = i / max_factor;\n\
    \            if (factor > max_factor) {\n                max_factor = factor;\n\
    \                max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long\
    \ factor = i / max_factor;\n            if (factor > max_factor) {\n         \
    \       max_factor = factor;\n                max_factor_index = i;\n        \
    \    }\n        }\n    }\n    return max_factor_index;", "    long i = 2;\n  \
    \  long max_i = n;\n    long max_factor = 1;\n    while (i <= max_i) {\n     \
    \   if (n % i == 0) {\n            max_factor = i;\n            max_i = max_i\
    \ / i;\n        }\n        ++i;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            long j = i;\n            while (j < n)\
    \ {\n                if (n % j == 0) {\n                    max_factor_index =\
    \ j;\n                    break;\n                }\n                j++;\n  \
    \          }\n            max_factor = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return max_factor;", "    long i = 2;\n    long max_factor\
    \ = 0;\n    while (i <= n) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        i++;\n    }\n    return max_factor;", "    long i =\
    \ 2;\n    long largest = i;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            largest = i;\n        }\n        i++;\n    }\n    return largest;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                j++;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      long factor = i / max_factor;\n            if (factor > max_factor) {\n\
    \                max_factor = factor;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i <= n; i++) {\n \
    \       if (n % i == 0) {\n            long factor = i / max_factor;\n       \
    \     if (factor > max_factor) {\n                max_factor = factor;\n     \
    \           max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long i = 2;\n    long largest = i;\n    while (i <=\
    \ n / i) {\n        if (n % i == 0) {\n            largest = i;\n        }\n \
    \       ++i;\n    }\n    return largest;", "    long ans = 1;\n    long i = 2;\n\
    \    while (i <= n / 2) {\n        if (n % i == 0) {\n            ans = i;\n \
    \           while (n % i == 0) {\n                n /= i;\n            }\n   \
    \     }\n        i++;\n    }\n    return ans;", "    long max_factor = 1;\n  \
    \  long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n        \
    \    while (i <= n / 2 && n % i == 0) {\n                ++i;\n            }\n\
    \            if (i > max_factor) {\n                max_factor = i;\n        \
    \    }\n        }\n        ++i;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    long i;\n    for (i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            long j;\n            for (j = i; j\
    \ <= n; j += i) {\n                if (n % j == 0) {\n                    break;\n\
    \                }\n            }\n            if (j > max_factor) {\n       \
    \         max_factor = j;\n                max_factor_index = i;\n           \
    \ }\n        }\n    }\n    return max_factor_index;", "    long i = 2;\n    long\
    \ max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n            max_i = max_i / i;\n \
    \       }\n        ++i;\n    }\n    return max_factor;", "    long i = 2;\n  \
    \  long largest = i;\n    while (i < n) {\n        if (n % i == 0) {\n       \
    \     largest = i;\n        }\n        i++;\n    }\n    return largest;", "  \
    \  long max_factor = 0;\n    long max_factor_index = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            long j = i;\n       \
    \     while (j > 1) {\n                if (n % j == 0) {\n                   \
    \ break;\n                }\n                j--;\n            }\n           \
    \ if (j > max_factor) {\n                max_factor = j;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor_index;", "    long\
    \ max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n    while\
    \ (i <= n && max_factor < n) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n            max_factor_index = i;\n        }\n        i += 2;\n    }\n\
    \    return max_factor_index;", "    long p = 2;\n    while (p < n && n % p ==\
    \ 0) {\n        p = p * 2 + 1;\n    }\n    return p;", "    long i = 2;\n    long\
    \ max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n            max_i = max_i / i;\n \
    \       }\n        i++;\n    }\n    return max_factor;", "    long i = 2;\n  \
    \  long largest = i;\n    while (i <= n / i) {\n        if (n % i == 0) {\n  \
    \          largest = i;\n        }\n        i++;\n    }\n    return largest;",
  "    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            max_factor = i;\n        }\n        i++;\n    }\n   \
    \ return max_factor;", "    long max_factor = 1;\n    long max_factor_index =\
    \ 0;\n    for (int i = 1; i <= n; i++) {\n        // If n is divisible by i, then\
    \ n is prime\n        if (n % i == 0) {\n            // If n is larger than the\
    \ largest prime factor so far, update max_factor\n            if (n > max_factor)\
    \ {\n                max_factor = n;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor;", "    long i = 2;\n\
    \    long max = 2;\n    while (i <= n && n % i == 0) {\n        max = i;\n   \
    \     i += 2;\n    }\n    return max;", "    long max_factor = 1;\n    long i\
    \ = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        i++;\n    }\n    return max_factor;", "    long i =\
    \ 2;\n    long largest = i;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            largest = i;\n        }\n        i++;\n    }\n    return largest;",
  "    long i = 2;\n    long max_i = i;\n    long max_p = i;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            max_p = i;\n            max_i = i;\n \
    \       }\n        i += 2;\n    }\n    return max_p;", "    long max_factor =\
    \ 0;\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n      \
    \      max_factor = i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n    for(i\
    \ = 2; i <= n; i++) {\n        if(n % i == 0) {\n            if(i * i > n) {\n\
    \                max_factor = 1;\n                max_factor_index = 0;\n    \
    \        }\n            else {\n                max_factor = i;\n            \
    \    max_factor_index = i;\n            }\n        }\n    }\n    return max_factor;",
  "    long i = 2;\n    long largest = i;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            largest = i;\n        }\n        i++;\n    }\n    return\
    \ largest;", "    long p = 2;\n    long q = n;\n    long r = n;\n    while (q\
    \ != 0) {\n        if (q % 2 == 0) {\n            q = (q / 2);\n        } else\
    \ {\n            while (q % p == 0) {\n                p++;\n            }\n \
    \           q = (q / p);\n        }\n        r = (r * p);\n    }\n    return r;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 2; i\
    \ <= n; ++i) {\n        if (n % i == 0) {\n            max_factor_index = i;\n\
    \            max_factor = i;\n        }\n    }\n    return max_factor;", "   \
    \ long i = 2;\n    long max_factor = 1;\n    while (i <= sqrt(n)) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n\
    \    return max_factor;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \       i += 2;\n    }\n    return max_factor;", "    long max_factor = 1;\n \
    \   long max_factor_index = 0;\n    long i;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            long factor = i / max_factor;\n      \
    \      if (factor > max_factor) {\n                max_factor = factor;\n    \
    \            max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long\
    \ factor = 1;\n            while (n % i == 0) {\n                n /= i;\n   \
    \             factor++;\n            }\n            if (factor > max_factor) {\n\
    \                max_factor = factor;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long i =\
    \ 2;\n    long max_factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long ans = 1;\n    long i = 2;\n    while(i <= n/2) {\n        if(n%i == 0)\
    \ {\n            ans = i;\n            break;\n        }\n        i += 2;\n  \
    \  }\n    return ans;", "    long i = 2;\n    long max_i = n;\n    while (i <\
    \ max_i) {\n        if (n % i == 0) {\n            long j = i;\n            while\
    \ (j * j <= n) {\n                if (n % j == 0) {\n                    max_i\
    \ = n;\n                    break;\n                }\n                j++;\n\
    \            }\n        }\n        i++;\n    }\n    return max_i;", "    long\
    \ a = 2, b = 2, c = 2, d = 2, e = 2;\n    while (a <= n) {\n        while (n %\
    \ a == 0) {\n            n /= a;\n        }\n        while (n % b == 0) {\n  \
    \          n /= b;\n        }\n        while (n % c == 0) {\n            n /=\
    \ c;\n        }\n        while (n % d == 0) {\n            n /= d;\n        }\n\
    \        while (n % e == 0) {\n            n /= e;\n        }\n        if (n >\
    \ 1) {\n            long temp = n;\n            n = a;\n            a = b;\n \
    \           b = temp;\n        }\n        if (n > 2) {\n            long temp\
    \ = n;\n            n = c;\n            c = d;\n            d = temp;\n      \
    \  }\n        if (n > 3) {\n            long temp = n;\n            n = e;\n \
    \           e = n;\n        }\n    }\n    return n;", "    long factor = 1;\n\
    \    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n           \
    \ factor *= i;\n            n /= i;\n        }\n        ++i;\n    }\n    return\
    \ factor;", "    long max_factor = 0;\n    long max_factor_index = 0;\n    long\
    \ i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j = 2;\n            while (j * i <= n) {\n                if (n % j == 0) {\n\
    \                    break;\n                }\n                j++;\n       \
    \     }\n            if (j * i > n) {\n                max_factor = i;\n     \
    \           max_factor_index = j;\n            }\n        }\n        i++;\n  \
    \  }\n    return max_factor;", "    long i = 2;\n    long max_factor = 1;\n  \
    \  while (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n \
    \       }\n        i += 2;\n    }\n    return max_factor;", "    long i = 2;\n\
    \    long max_i = i;\n    long max_p = 1;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            i += 1;\n            continue;\n        }\n       \
    \ while (n % i == 0) {\n            i += 1;\n        }\n        if (i > max_i)\
    \ {\n            max_i = i;\n            max_p = 1;\n        }\n        if (i\
    \ == n) {\n            break;\n        }\n    }\n    return max_p;", "    long\
    \ i = 2;\n    long max_factor = 1;\n    while (i <= n / i) {\n        if (n %\
    \ i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n   \
    \ return max_factor;", "    long i = 2;\n    long max_factor = 1;\n    while (i\
    \ < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        i += 2;\n    }\n    return max_factor;", "    long i = 2;\n    long max_factor\
    \ = 1;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n        }\n        i++;\n    }\n    return max_factor;", "    long i =\
    \ 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n\
    \        if (n % i == 0) {\n            max_factor = i;\n            max_i = max_i\
    \ / i;\n        }\n        i++;\n    }\n    return max_factor;", "    long p =\
    \ 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n    long t = 0;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long ", "    long i = 2;\n    long\
    \ max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n\
    \ % i == 0) {\n            max_factor = i;\n            max_i = max_i / i;\n \
    \       }\n        i++;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long i = 2;\n    long max_factor = 1;\n    while (i <= n / i) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n\
    \    return max_factor;", "    long i = 2;\n    long largest = i;\n    while (i\
    \ <= n / i) {\n        if (n % i == 0) {\n            largest = i;\n        }\n\
    \        i++;\n    }\n    return largest;", "    long max_factor = 1;\n    long\
    \ max_factor_index = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i\
    \ == 0) {\n            while (n % i == 0) {\n                n /= i;\n       \
    \         max_factor_index = i;\n            }\n            max_factor = i;\n\
    \        }\n    }\n    return max_factor;", "    long i = 2;\n    long max_i =\
    \ i;\n    while (i < n) {\n        if (n % i == 0) {\n            n = n / i;\n\
    \            max_i = i;\n        }\n        i++;\n    }\n    return max_i;", " \
    \   long max_factor = 1;\n    long i = 2;\n    long j;\n    while (i <= n / 2)\
    \ {\n        j = i * 2;\n        while (j < n) {\n            if (n % j == 0)\
    \ {\n                break;\n            }\n            j++;\n        }\n    \
    \    if (j > max_factor) {\n            max_factor = j;\n        }\n        i++;\n\
    \    }\n    return max_factor;", "    long i = 2;\n    long largest = i;\n   \
    \ while (i < n) {\n        if (n % i == 0) {\n            largest = i;\n     \
    \   }\n        i += 2;\n    }\n    return largest;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    long i;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            max_factor = i;\n            max_factor_index\
    \ = i;\n        }\n    }\n    return max_factor;", "    long ans = 1;\n    long\
    \ i = 2;\n    while (i <= n / 2) {\n        while (n % i == 0) {\n           \
    \ ans = i;\n            n = n / i;\n        }\n        i++;\n    }\n    return\
    \ ans;", "    long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n   \
    \ while (i <= max_i) {\n        if (n % i == 0) {\n            max_factor = i;\n\
    \            max_i = max_i / i;\n        }\n        ++i;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n     \
    \       max_factor_index = i;\n        }\n    }\n    return max_factor;", "  \
    \  long i = 2;\n    long max_i = n;\n    while (i < max_i) {\n        if (n %\
    \ i == 0) {\n            while (n % i == 0) {\n                n /= i;\n     \
    \       }\n            if (n > 1) {\n                return n;\n            }\n\
    \        }\n        i++;\n    }\n    return n;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i < n) {\n        if (n % i == 0) {\n            largest =\
    \ i;\n        }\n        ++i;\n    }\n    return largest;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    for (long i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            long factor = i / max_factor;\n      \
    \      if (factor > max_factor) {\n                max_factor = factor;\n    \
    \            max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long ans = 1;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            ans = i;\n            break;\n   \
    \     }\n        i += 2;\n    }\n    return ans;", "    long i = 2;\n    long\
    \ largest = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n        \
    \    largest = i;\n        }\n        ++i;\n    }\n    return largest;", "   \
    \ long max_factor = 1;\n    long max_factor_index = 0;\n    for (long i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n     \
    \       max_factor_index = i;\n        }\n    }\n    return max_factor;", "  \
    \  long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n   \
    \ return max_factor;", "    long max_factor = 1;\n    long max_prime = 1;\n  \
    \  long i = 2;\n    while (i <= n && max_prime * i <= n) {\n        if (n % i\
    \ == 0) {\n            max_factor *= i;\n            max_prime = i;\n        }\n\
    \        i += 2;\n    }\n    return max_factor;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    for (int i = 1; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            max_factor = i;\n            max_factor_index =\
    \ i;\n            n /= i;\n        }\n    }\n    return max_factor;", "    long\
    \ i = 2;\n    long max_factor = 1;\n    while (i <= n && n % i == 0) {\n     \
    \   max_factor = i;\n        i++;\n    }\n    return max_factor;", "    long i\
    \ = 2;\n    long largest = n;\n    while (i <= largest) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n        }\n        ++i;\n    }\n    return largest;",
  "    long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while (i <=\
    \ max_i) {\n        if (n % i == 0) {\n            max_factor = i;\n         \
    \   max_i = max_i / i;\n        }\n        i++;\n    }\n    return max_factor;",
  "    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0)\
    \ {\n            ans = i;\n            break;\n        }\n        i += 2;\n  \
    \  }\n    return ans;", "    long max_factor = 1;\n    long i = 2;\n    while\
    \ (i <= sqrt(n)) {\n        if (n % i == 0) {\n            max_factor = i;\n \
    \       }\n        ++i;\n    }\n    return max_factor;", "    long i = 2;\n  \
    \  long max_factor = 0;\n    while(i <= sqrt(n)) {\n        if(n%i == 0) {\n \
    \           max_factor = i;\n            break;\n        }\n        ++i;\n   \
    \ }\n    return max_factor;", "    long p = 2;\n    long q = n;\n    long r =\
    \ n;\n    long s = 2;\n    while (p < q) {\n        while (r % p == 0) {\n   \
    \         r /= p;\n        }\n        while (s % p == 0) {\n            s /= p;\n\
    \        }\n        if (p * p > r * s) {\n            p = r;\n            q =\
    \ s;\n        } else {\n            p = s;\n            q = r;\n        }\n  \
    \  }\n    return p;", "    long ans = 1;\n    long i = 2;\n    while (i <= n /\
    \ 2) {\n        if (n % i == 0) {\n            ans = i;\n            while (n\
    \ % i == 0) {\n                n /= i;\n            }\n        }\n        ++i;\n\
    \    }\n    return ans;", "    long i = 2;\n    long max_factor = 1;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long max_factor = 1;\n   \
    \ long max_factor_index = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            while (n % i == 0) {\n                n /= i;\n   \
    \             max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long p = 2;\n    long q = n;\n    while (p < q) {\n\
    \        while (n % p == 0) {\n            n /= p;\n        }\n        while (n\
    \ % q == 0) {\n            n /= q;\n        }\n        if (n > 1) {\n        \
    \    return n;\n        }\n        p += 1;\n        q += 1;\n    }\n    return\
    \ n;", "    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            max_factor =\
    \ i;\n            max_factor_index = i;\n        }\n        i++;\n    }\n    return\
    \ max_factor;", "    long p = 2;\n    long q = n;\n    long r = n;\n    long s\
    \ = 2;\n    while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n\
    \        }\n        while (r % s == 0) {\n            r /= s;\n        }\n   \
    \     while (r % p == 0) {\n            r /= p;\n        }\n        while (r %\
    \ q == 0) {\n            r /= q;\n        }\n        p += 1;\n        s += 1;\n\
    \    }\n    return r;", "    long a = 2, b = n;\n    long c = 1;\n    while (a\
    \ < b) {\n        while (b % a == 0) {\n            b /= a;\n        }\n     \
    \   while (b % c == 0) {\n            b /= c;\n        }\n        if (b > 1) {\n\
    \            c += 1;\n        }\n        a += 1;\n    }\n    return c;", "   \
    \ long i = 2;\n    long max_i = n;\n    while (i < max_i) {\n        if (n % i\
    \ == 0) {\n            max_i = i;\n        }\n        i++;\n    }\n    return\
    \ max_i;", "    long i = 2;\n    long max_i = n;\n    while (i < max_i) {\n  \
    \      if (n % i == 0) {\n            max_i = i;\n        }\n        ++i;\n  \
    \  }\n    return max_i;", "    long i = 2;\n    long max_factor = 1;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        i += 2;\n    }\n    return max_factor;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    long i = 2;\n    while (i <= sqrt(n)) {\n\
    \        if (n % i == 0) {\n            max_factor = i;\n            max_factor_index\
    \ = i;\n        }\n        ++i;\n    }\n    return max_factor_index;", "    long\
    \ max_factor = 0;\n    long max_factor_index = 0;\n    long i;\n    for (i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            long factor = i / max_factor;\n\
    \            if (factor > max_factor) {\n                max_factor = factor;\n\
    \                max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long max_factor = 0;\n    long i = 2;\n    while (i\
    \ <= sqrt(n)) {\n        if (n % i == 0) {\n            max_factor = i;\n    \
    \    }\n        ++i;\n    }\n    return max_factor;", "    long a = 2, b = 2,\
    \ c = 2, d = 2, e = 2;\n    while (a < n) {\n        if (n % a == 0) {\n     \
    \       while (n % a == 0) {\n                n /= a;\n                ++a;\n\
    \            }\n        }\n        if (n % b == 0) {\n            while (n % b\
    \ == 0) {\n                n /= b;\n                ++b;\n            }\n    \
    \    }\n        if (n % c == 0) {\n            while (n % c == 0) {\n        \
    \        n /= c;\n                ++c;\n            }\n        }\n        if (n\
    \ % d == 0) {\n            while (n % d == 0) {\n                n /= d;\n   \
    \             ++d;\n            }\n        }\n        if (n % e == 0) {\n    \
    \        while (n % e == 0) {\n                n /= e;\n                ++e;\n\
    \            }\n        }\n    }\n    return n;", "    long i = 2;\n    long largest\
    \ = i;\n    while (i < n) {\n        if (n % i == 0) {\n            largest =\
    \ i;\n        }\n        i += 2;\n    }\n    return largest;", "    long i = 2;\n\
    \    long max_i = n;\n    long max_factor = 1;\n    while (i < max_i) {\n    \
    \    if (n % i == 0) {\n            max_factor = i;\n            max_i = max_i\
    \ / i;\n        }\n        i++;\n    }\n    return max_factor;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            long j = i;\n            while (j < n)\
    \ {\n                if (n % j == 0) {\n                    max_factor = j;\n\
    \                    max_factor_index = i;\n                    break;\n     \
    \           }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor_index;", "    long i = 2;\n    long max_factor =\
    \ 1;\n    while(i <= sqrt(n)) {\n        if(n%i == 0) {\n            max_factor\
    \ = i;\n        }\n        ++i;\n    }\n    return max_factor;", "    long max_factor\
    \ = 0;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n\
    \            max_factor = i;\n        }\n        ++i;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_prime_factor = 1;\n    long i;\n    for\
    \ (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j;\n   \
    \         for (j = i; j <= max_factor; j++) {\n                if (n % j == 0)\
    \ {\n                    break;\n                }\n            }\n          \
    \  if (j > max_factor) {\n                max_factor = j;\n                max_prime_factor\
    \ = i;\n            }\n        }\n    }\n    return max_prime_factor;", "    long\
    \ max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 1; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            long factor = 1;\n          \
    \  while (n % i == 0) {\n                n /= i;\n                factor++;\n\
    \            }\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;", "    long i = 2;\n    long max = 2;\n \
    \   while (i <= n && n % i == 0) {\n        max = i;\n        i += 2;\n    }\n\
    \    return max;", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n           \
    \ long factor = i / max_factor;\n            if (factor > max_factor) {\n    \
    \            max_factor = factor;\n                max_factor_index = i;\n   \
    \         }\n        }\n        i++;\n    }\n    return max_factor_index;", " \
    \   long i = 2;\n    long max_factor = 1;\n    while (i <= n / i) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n        }\n        ++i;\n    }\n\
    \    return max_factor;", "    long i = 2;\n    long max_factor = 1;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        ++i;\n    }\n    return max_factor;", "    long i = 2;\n    long max_i\
    \ = 1;\n    long max_factor = 1;\n    while (i < n) {\n        if (n % i == 0)\
    \ {\n            max_factor = i;\n            max_i = i;\n        }\n        i++;\n\
    \    }\n    return max_factor;", "    long i = 2;\n    long max_i = i;\n    long\
    \ max_factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n          \
    \  max_factor = i;\n            max_i = i;\n        }\n        ++i;\n    }\n \
    \   return max_factor;", "    long max_factor = 1;\n    long i = 2;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long ans = 1;\n    long i\
    \ = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            ans = i;\n\
    \            while (n % i == 0) {\n                n /= i;\n            }\n  \
    \      }\n        i++;\n    }\n    return ans;", "    long i = 2;\n    long max_i\
    \ = n;\n    long max_factor = 1;\n    while (i < max_i) {\n        if (n % i ==\
    \ 0) {\n            max_factor = i;\n            max_i = max_i / i;\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long i = 2;\n    long max_i\
    \ = i;\n    long max_factor = 1;\n    while (i < n) {\n        if (n % i == 0)\
    \ {\n            max_factor = i;\n            max_i = i;\n        }\n        i++;\n\
    \    }\n    return max_factor;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       long j = 1;\n            while (j * i <= n) {\n                j++;\n\
    \            }\n            if (j * i > max_factor) {\n                max_factor\
    \ = j * i;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;"]
stop_tokens:
- "\n}"
