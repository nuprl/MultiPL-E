language: cpp
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long minDiff\
    \ = std::numeric_limits<long>::max();\n    long minDiffIndex = 0;\n    long maxDiff\
    \ = std::numeric_limits<long>::min();\n    long maxDiffIndex = 0;\n    long minSum\
    \ = std::numeric_limits<long>::max();\n    long minSumIndex = 0;\n    long maxSum\
    \ = std::numeric_limits<long>::min();\n    long maxSumIndex = 0;\n    long minGame\
    \ = std::numeric_limits<long>::max();\n    long minGameIndex = 0;\n    long maxGame\
    \ = std::numeric_limits<long>::min();\n    long maxGameIndex = 0;\n    long minGuess\
    \ = std::numeric_limits<long>::max();\n    long minGuessIndex = 0;\n    long maxGuess\
    \ = std::numeric_limits<long>::min();\n    long maxGuessIndex = 0;\n    long minGameSum\
    \ = std::numeric_limits<long>::max();\n    long minGameSumIndex = 0;\n    long\
    \ maxGameSum = std::numeric_limits<long>::min();\n    long maxGameSumIndex = 0;\n\
    \    long minGuessSum = std::numeric_limits<long>::max();\n    long minGuessSumIndex\
    \ = 0;\n    long maxGuessSum = std::numeric_limits<long>::min();\n    long maxGuessSumIndex\
    \ = 0;\n    long minGameDiff = std::numeric_limits<long>::max();\n    long minGameDiffIndex\
    \ = 0;\n    long maxGameDiff = std::numeric_limits<long>::min();\n    long maxGameDiffIndex\
    \ = 0;\n    long minGuessDiff = std::numeric_limits<long>::max();\n    long minGuessDiffIndex\
    \ = 0;\n    long maxGuessDiff = std::numeric_limits<long>::min();\n    long maxGuessDiffIndex\
    \ = 0;\n    long minGameMin = std::numeric_limits<long>::max();\n    long minGameMinIndex\
    \ = 0;\n    long maxGameMin = std::numeric_limits<long>::min();\n    long maxGameMinIndex\
    \ = 0;\n    long minGuessMin = std::numeric_limits<long>::max();\n    long minGuessMinIndex\
    \ = 0;\n    long maxGuessMin = std::numeric_limits<long>::min();\n    long maxGuessMinIndex\
    \ = 0;\n    long minGameMax = std::numeric_limits<long>::max();\n    long minGameMaxIndex\
    \ = 0;\n    long maxGame\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsl81a48r.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpsl81a48r.cpp:59:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpsl81a48r.cpp:59:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s1o7_5q: /tmp/tmp5s1o7_5q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long\
    \ max = std::numeric_limits<long>::min();\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        if(game[i] > max) {\n            max\
    \ = game[i];\n        }\n        if(game[i] < min) {\n            min = game[i];\n\
    \        }\n    }\n    for(size_t i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = std::abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_5dd9uwx: /tmp/tmp_5dd9uwx.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxuxtgp1j: /tmp/tmpxuxtgp1j.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long sum = 0;\n    long long max = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        if (sum > max) {\n            max =\
    \ sum;\n        }\n    }\n    for (size_t i = 0; i < guess.size(); i++) {\n  \
    \      result[i] = abs(game[i] - guess[i]);\n    }\n    for (size_t i = 0; i <\
    \ guess.size(); i++) {\n        if (result[i] != 0) {\n            result[i] =\
    \ result[i] / max;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd73wpgzz: /tmp/tmpd73wpgzz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp533x_1wf: /tmp/tmp533x_1wf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp05vkrzxo: /tmp/tmp05vkrzxo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjvrw7tlb: /tmp/tmpjvrw7tlb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        score\
    \ += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwvyv6fib: /tmp/tmpwvyv6fib.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        guess = guess[i];\n        score = game[i];\n        if (guess\
    \ == score) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(guess - score);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpicmnm2y9.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpicmnm2y9.cpp:14:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   14 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpicmnm2y9.cpp:15:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   15 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpicmnm2y9.cpp:16:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   16 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659822104
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long sum = 0;\n    long long diff = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6um0d7b7: /tmp/tmp6um0d7b7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp533x_1wf: /tmp/tmp533x_1wf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(guess[i]\
    \ - sum);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp535zi1ts: /tmp/tmp535zi1ts.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(int i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n \
    \       result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw81cmfju: /tmp/tmpw81cmfju.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(guess - game[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2xpm2ya0.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2xpm2ya0.cpp:15:31: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   15 |         diff = std::abs(guess - game[i]);\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2xpm2ya0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2xpm2ya0.cpp:15:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   15 |         diff = std::abs(guess - game[i]);\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_trait"
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ ++i) {\n        diff = abs(game[i] - guess[i]);\n        if(diff == 0) {\n \
    \           result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n        score += game[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++){\n        diff = abs(game[i] - guess[i]);\n  \
    \      if(diff == 0){\n            result[i] = 0;\n        }\n        else{\n\
    \            result[i] = diff;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3jt4l5w2: /tmp/tmp3jt4l5w2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long max = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        if (game[i] > max) {\n            max\
    \ = game[i];\n        }\n    }\n    for (size_t i = 0; i < guess.size(); i++)\
    \ {\n        result[i] = abs(guess[i] - sum);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz2jj1b66: /tmp/tmpz2jj1b66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long min = 0;\n    long max =\
    \ 0;\n    long minDiff = std::numeric_limits<long>::max();\n    long maxDiff =\
    \ std::numeric_limits<long>::min();\n    for(long i = 0; i < guess.size(); i++)\
    \ {\n        sum += game[i];\n        if(sum < min)\n            min = sum;\n\
    \        if(sum > max)\n            max = sum;\n        sum -= guess[i];\n   \
    \     if(sum < minDiff)\n            minDiff = sum;\n        if(sum > maxDiff)\n\
    \            maxDiff = sum;\n    }\n    for(long i = 0; i < guess.size(); i++)\
    \ {\n        long diff = guess[i] - game[i];\n        if(diff < 0)\n         \
    \   diff *= -1;\n        if(diff < minDiff)\n            minDiff = diff;\n   \
    \     if(diff > maxDiff)\n            maxDiff = diff;\n        result[i] = diff;\n\
    \    }\n    for(long i = 0; i < guess.size(); i++) {\n        result[i] = std::abs(result[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpor0yc19f: /tmp/tmpor0yc19f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ long max = 0;\n    long min = 0;\n    long mid = 0;\n    long mid2 = 0;\n  \
    \  long mid3 = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n\
    \    long mid7 = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n    long mid10 =\
    \ 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long mid13 = 0;\n    long\
    \ mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n    long mid17 = 0;\n\
    \    long mid18 = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n    long mid21\
    \ = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long mid24 = 0;\n    long\
    \ mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n    long mid28 = 0;\n\
    \    long mid29 = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n    long mid32\
    \ = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long mid35 = 0;\n    long\
    \ mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n    long mid39 = 0;\n\
    \    long mid40 = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n    long mid43\
    \ = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long mid46 = 0;\n    long\
    \ mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n    long mid50 = 0;\n\
    \    long mid51 = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n    long mid54\
    \ = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long mid57 = 0;\n    long\
    \ mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n    long mid61 = 0;\n\
    \    long mid62 = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n    long mid65\
    \ = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long mid68 = 0;\n    long\
    \ mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n    long mid72 = 0;\n\
    \    long mid73 = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n    long mid76\
    \ = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long mid79 = 0;\n    long\
    \ mid80\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl0lhn8ta.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpl0lhn8ta.cpp:99:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   99 | }\n      | ^\n/tmp/tmpl0lhn8ta.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    for (size_t i = 0; i < game.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++){\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2on3tbx: /tmp/tmpo2on3tbx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp05vkrzxo: /tmp/tmp05vkrzxo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjsutcm8: /tmp/tmpbjsutcm8.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long diff = 0;\n    long count = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        if(sum > max) {\n            max =\
    \ sum;\n        }\n        if(sum < min) {\n            min = sum;\n        }\n\
    \        diff = game[i] - guess[i];\n        if(diff > max) {\n            max\
    \ = diff;\n        }\n        if(diff < min) {\n            min = diff;\n    \
    \    }\n        if(diff == 0) {\n            result[i] = 0;\n            count++;\n\
    \        }\n        else {\n            result[i] = abs(diff);\n        }\n  \
    \  }\n    if(count == 0) {\n        return result;\n    }\n    else {\n      \
    \  return result;\n    }\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += abs(game[i] - guess[i]);\n        result[i] = score;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmps5hq1vm3: /tmp/tmps5hq1vm3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     result[i] = 0;\n        } else {\n            diff = abs(game[i] - guess[i]);\n\
    \            result[i] = diff;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for(long i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfv7rev_m: /tmp/tmpfv7rev_m.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); ++i) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long min =\
    \ 0;\n    long max = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long min2\
    \ = 0;\n    long max2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n    long\
    \ min3 = 0;\n    long max3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n   \
    \ long min4 = 0;\n    long max4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n\
    \    long min5 = 0;\n    long max5 = 0;\n    long sum6 = 0;\n    long diff6 =\
    \ 0;\n    long min6 = 0;\n    long max6 = 0;\n    long sum7 = 0;\n    long diff7\
    \ = 0;\n    long min7 = 0;\n    long max7 = 0;\n    long sum8 = 0;\n    long diff8\
    \ = 0;\n    long min8 = 0;\n    long max8 = 0;\n    long sum9 = 0;\n    long diff9\
    \ = 0;\n    long min9 = 0;\n    long max9 = 0;\n    long sum10 = 0;\n    long\
    \ diff10 = 0;\n    long min10 = 0;\n    long max10 = 0;\n    long sum11 = 0;\n\
    \    long diff11 = 0;\n    long min11 = 0;\n    long max11 = 0;\n    long sum12\
    \ = 0;\n    long diff12 = 0;\n    long min12 = 0;\n    long max12 = 0;\n    long\
    \ sum13 = 0;\n    long diff13 = 0;\n    long min13 = 0;\n    long max13 = 0;\n\
    \    long sum14 = 0;\n    long diff14 = 0;\n    long min14 = 0;\n    long max14\
    \ = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long min15 = 0;\n    long\
    \ max15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long min16 = 0;\n\
    \    long max16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long min17\
    \ = 0;\n    long max17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n    long\
    \ min18 = 0;\n    long max18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long min19 = 0;\n    long max19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long min20 = 0;\n    long max20 = 0;\n    long sum21 = 0;\n    long\
    \ diff21 = 0;\n    long min21 = 0;\n    long max21 = 0;\n    long sum22 = 0;\n\
    \    long diff22 = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i_vhp6o.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3i_vhp6o.cpp:101:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp3i_vhp6o.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long minDiff\
    \ = std::numeric_limits<long>::max();\n    long maxDiff = 0;\n    long minSum\
    \ = std::numeric_limits<long>::max();\n    long maxSum = 0;\n    long minSumOfGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxSumOfGuesses = 0;\n    long\
    \ minSumOfScores = std::numeric_limits<long>::max();\n    long maxSumOfScores\
    \ = 0;\n    long minSumOfGuessesOfScores = std::numeric_limits<long>::max();\n\
    \    long maxSumOfGuessesOfScores = 0;\n    long minSumOfGuessesOfGuesses = std::numeric_limits<long>::max();\n\
    \    long maxSumOfGuessesOfGuesses = 0;\n    long minSumOfGuessesOfGuessesOfScores\
    \ = std::numeric_limits<long>::max();\n    long maxSumOfGuessesOfGuessesOfScores\
    \ = 0;\n    long minSumOfGuessesOfGuessesOfGuesses = std::numeric_limits<long>::max();\n\
    \    long maxSumOfGuessesOfGuessesOfGuesses = 0;\n    long minSumOfGuessesOfGuessesOfGuessesOfScores\
    \ = std::numeric_limits<long>::max();\n    long maxSumOfGuessesOfGuessesOfGuessesOfScores\
    \ = 0;\n    long minSumOfGuessesOfGuessesOfGuessesOfGuesses = std::numeric_limits<long>::max();\n\
    \    long maxSumOfGuessesOfGuessesOfGuessesOfGuesses = 0;\n    long minSumOfGuessesOfGuessesOfGuessesOfGuessesOfScores\
    \ = std::numeric_limits<long>::max();\n    long maxSumOfGuessesOfGuessesOfGuessesOfGuessesOfScores\
    \ = 0;\n    long minSumOfGuessesOfGuessesOfGuessesOfGuessesOfGuesses = std::numeric_limits<long>::max();\n\
    \    long maxSumOfGuessesOfGuessesOfGuessesOfGuessesOfGuesses = 0;\n    long minSumOfGuessesOfGuessesOfGuessesOfGuessesOfGuessesOfScores\
    \ = \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp27vyjpjj.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp27vyjpjj.cpp:41:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmp27vyjpjj.cpp:41:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcst7qx5r: /tmp/tmpcst7qx5r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); ++i) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score += game[i];\n        result[i] = abs(guess[i] - score);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0s9jkuc3: /tmp/tmp0s9jkuc3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long sum = 0;\n    long count =\
    \ 0;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n    long sum2 =\
    \ 0;\n    long min2 = 0;\n    long max2 = 0;\n    long mid2 = 0;\n    long sum3\
    \ = 0;\n    long min3 = 0;\n    long max3 = 0;\n    long mid3 = 0;\n    long sum4\
    \ = 0;\n    long min4 = 0;\n    long max4 = 0;\n    long mid4 = 0;\n    long sum5\
    \ = 0;\n    long min5 = 0;\n    long max5 = 0;\n    long mid5 = 0;\n    long sum6\
    \ = 0;\n    long min6 = 0;\n    long max6 = 0;\n    long mid6 = 0;\n    long sum7\
    \ = 0;\n    long min7 = 0;\n    long max7 = 0;\n    long mid7 = 0;\n    long sum8\
    \ = 0;\n    long min8 = 0;\n    long max8 = 0;\n    long mid8 = 0;\n    long sum9\
    \ = 0;\n    long min9 = 0;\n    long max9 = 0;\n    long mid9 = 0;\n    long sum10\
    \ = 0;\n    long min10 = 0;\n    long max10 = 0;\n    long mid10 = 0;\n    long\
    \ sum11 = 0;\n    long min11 = 0;\n    long max11 = 0;\n    long mid11 = 0;\n\
    \    long sum12 = 0;\n    long min12 = 0;\n    long max12 = 0;\n    long mid12\
    \ = 0;\n    long sum13 = 0;\n    long min13 = 0;\n    long max13 = 0;\n    long\
    \ mid13 = 0;\n    long sum14 = 0;\n    long min14 = 0;\n    long max14 = 0;\n\
    \    long mid14 = 0;\n    long sum15 = 0;\n    long min15 = 0;\n    long max15\
    \ = 0;\n    long mid15 = 0;\n    long sum16 = 0;\n    long min16 = 0;\n    long\
    \ max16 = 0;\n    long mid16 = 0;\n    long sum17 = 0;\n    long min17 = 0;\n\
    \    long max17 = 0;\n    long mid17 = 0;\n    long sum18 = 0;\n    long min18\
    \ = 0;\n    long max18 = 0;\n    long mid18 = 0;\n    long sum19 = 0;\n    long\
    \ min19 = 0;\n    long max19 = 0;\n    long mid19 = 0;\n    long sum20 = 0;\n\
    \    long min20 = 0;\n    long max20 = 0;\n    long mid20 = 0;\n    long sum21\
    \ = 0;\n    long min21 = 0;\n    long max21 = 0;\n    long mid21 = 0;\n    long\
    \ sum22\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpipt5a4po.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpipt5a4po.cpp:101:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpipt5a4po.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long diff = 0;\n    long count = 0;\n    long sum2 = 0;\n    long max2\
    \ = 0;\n    long min2 = 0;\n    long diff2 = 0;\n    long count2 = 0;\n    long\
    \ sum3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n    long diff3 = 0;\n   \
    \ long count3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4 = 0;\n\
    \    long diff4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long max5\
    \ = 0;\n    long min5 = 0;\n    long diff5 = 0;\n    long count5 = 0;\n    long\
    \ sum6 = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long diff6 = 0;\n   \
    \ long count6 = 0;\n    long sum7 = 0;\n    long max7 = 0;\n    long min7 = 0;\n\
    \    long diff7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long max8\
    \ = 0;\n    long min8 = 0;\n    long diff8 = 0;\n    long count8 = 0;\n    long\
    \ sum9 = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long diff9 = 0;\n   \
    \ long count9 = 0;\n    long sum10 = 0;\n    long max10 = 0;\n    long min10 =\
    \ 0;\n    long diff10 = 0;\n    long count10 = 0;\n    long sum11 = 0;\n    long\
    \ max11 = 0;\n    long min11 = 0;\n    long diff11 = 0;\n    long count11 = 0;\n\
    \    long sum12 = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long diff12\
    \ = 0;\n    long count12 = 0;\n    long sum13 = 0;\n    long max13 = 0;\n    long\
    \ min13 = 0;\n    long diff13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n\
    \    long max14 = 0;\n    long min14 = 0;\n    long diff14 = 0;\n    long count14\
    \ = 0;\n    long sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n    long\
    \ diff15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n    long max16 = 0;\n\
    \    long min16 = 0;\n    long diff16 = 0;\n    long count16 = 0;\n    long sum17\
    \ = 0;\n    long max17 = 0;\n    long min17 = 0;\n    long diff17 = 0;\n    long\
    \ count17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmuwu56wb: /tmp/tmpmuwu56wb.cpp:105: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxjw37a9: /tmp/tmpnxjw37a9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(guess[i]\
    \ - sum);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmplh6xr8m4: /tmp/tmplh6xr8m4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    for(int i = 0; i < guess.size(); i++) {\n   \
    \     sum += game[i];\n        sum2 += guess[i];\n        diff += abs(game[i]\
    \ - guess[i]);\n        diff2 += abs(game[i] - guess[i]);\n    }\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i] - sum);\n\
    \        result[i] = result[i] < abs(guess[i] - sum2) ? abs(guess[i] - sum2) :\
    \ result[i];\n        result[i] = result[i] < abs(guess[i] - diff) ? abs(guess[i]\
    \ - diff) : result[i];\n        result[i] = result[i] < abs(guess[i] - diff2)\
    \ ? abs(guess[i] - diff2) : result[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_ejeui9z: /tmp/tmp_ejeui9z.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); ++i) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); ++i) {\n        diff\
    \ = std::abs(guess - game[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxiw0tcd9.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpxiw0tcd9.cpp:15:31: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   15 |         diff = std::abs(guess - game[i]);\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxiw0tcd9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxiw0tcd9.cpp:15:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   15 |         diff = std::abs(guess - game[i]);\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_trait"
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3jt4l5w2: /tmp/tmp3jt4l5w2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long sum1 = 0;\n    long diff1 = 0;\n \
    \   long sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 =\
    \ 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5\
    \ = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long\
    \ diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n  \
    \  long diff9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long\
    \ sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n\
    \    long sum15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16\
    \ = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long\
    \ diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n\
    \    long diff20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long\
    \ sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n\
    \    long sum26 = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27\
    \ = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long\
    \ diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n\
    \    long diff31 = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33\
    \ = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long\
    \ sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n\
    \    long sum37 = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38\
    \ = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long\
    \ diff40 = 0;\n    long sum\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp26hysc3.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpp26hysc3.cpp:100:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmpp26hysc3.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for(size_t i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4odriqlg: /tmp/tmp4odriqlg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcst7qx5r: /tmp/tmpcst7qx5r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    for(int i = 0; i < guess.size(); i++) {\n   \
    \     sum += game[i];\n        sum2 += guess[i];\n        diff += abs(game[i]\
    \ - guess[i]);\n        diff2 += abs(game[i] - sum);\n    }\n    for(int i = 0;\
    \ i < guess.size(); i++) {\n        result[i] = abs(guess[i] - sum);\n    }\n\
    \    for(int i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - sum2);\n    }\n    for(int i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = abs(guess[i] - diff);\n    }\n    for(int i = 0; i < guess.size(); i++) {\n\
    \        result[i] = abs(guess[i] - diff2);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpguj8rhvz: /tmp/tmpguj8rhvz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long min = 0;\n    long max =\
    \ 0;\n    long diff = 0;\n    long sum2 = 0;\n    long min2 = 0;\n    long max2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long min3 = 0;\n    long\
    \ max3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long min4 = 0;\n   \
    \ long max4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long min5 = 0;\n\
    \    long max5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long min6 =\
    \ 0;\n    long max6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long min7\
    \ = 0;\n    long max7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long\
    \ min8 = 0;\n    long max8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n   \
    \ long min9 = 0;\n    long max9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n\
    \    long min10 = 0;\n    long max10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long min11 = 0;\n    long max11 = 0;\n    long diff11 = 0;\n    long\
    \ sum12 = 0;\n    long min12 = 0;\n    long max12 = 0;\n    long diff12 = 0;\n\
    \    long sum13 = 0;\n    long min13 = 0;\n    long max13 = 0;\n    long diff13\
    \ = 0;\n    long sum14 = 0;\n    long min14 = 0;\n    long max14 = 0;\n    long\
    \ diff14 = 0;\n    long sum15 = 0;\n    long min15 = 0;\n    long max15 = 0;\n\
    \    long diff15 = 0;\n    long sum16 = 0;\n    long min16 = 0;\n    long max16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long min17 = 0;\n    long\
    \ max17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long min18 = 0;\n\
    \    long max18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long min19\
    \ = 0;\n    long max19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long\
    \ min20 = 0;\n    long max20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n\
    \    long min21 = 0;\n    long max21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long min22 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpesucdjjf: /tmp/tmpesucdjjf.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822110
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long diff = 0;\n    long sum2 = 0;\n    long max2 = 0;\n    long min2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long\
    \ min3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n   \
    \ long min4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long max5 = 0;\n\
    \    long min5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long max6 =\
    \ 0;\n    long min6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long max7\
    \ = 0;\n    long min7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long\
    \ max8 = 0;\n    long min8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n   \
    \ long max9 = 0;\n    long min9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n\
    \    long max10 = 0;\n    long min10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long max11 = 0;\n    long min11 = 0;\n    long diff11 = 0;\n    long\
    \ sum12 = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long diff12 = 0;\n\
    \    long sum13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long diff13\
    \ = 0;\n    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long\
    \ diff14 = 0;\n    long sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n\
    \    long diff15 = 0;\n    long sum16 = 0;\n    long max16 = 0;\n    long min16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long\
    \ min17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n\
    \    long min18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long max19\
    \ = 0;\n    long min19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long\
    \ max20 = 0;\n    long min20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n\
    \    long max21 = 0;\n    long min21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long max22 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkgs455za: /tmp/tmpkgs455za.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822110
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ for (size_t i = 0; i < guess.size(); i++) {\n        score = game[i];\n    \
    \    diff = abs(guess - score);\n        sum += diff;\n        count++;\n    \
    \    result[i] = diff;\n    }\n    if (count == 0) {\n        return result;\n\
    \    }\n    long average = sum / count;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = result[i] / average;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfuwgsnqi.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpfuwgsnqi.cpp:19:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   19 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfuwgsnqi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfuwgsnqi.cpp:19:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   19 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp05vkrzxo: /tmp/tmp05vkrzxo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n  \
    \      diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822110
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(guess[i] - game[i]);\n        if (diff == 0) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822110
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long sum = 0;\n    for (long i =\
    \ 0; i < guess.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n     \
    \   sum += diff;\n        result[i] = sum;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmptsbbdozp: /tmp/tmptsbbdozp.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822110
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for(long i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgczucnha: /tmp/tmpgczucnha.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822110
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jz4w9sp: /tmp/tmp6jz4w9sp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++){\n        sum += abs(game[i] - guess[i]);\n    \
    \    diff = abs(game[i] - guess[i]);\n        if(game[i] == guess[i]){\n     \
    \       result[i] = 0;\n        }else{\n            result[i] = diff;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822110
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp05vkrzxo: /tmp/tmp05vkrzxo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    for (size_t i = 0; i < guess.size(); i++) {\n        score\
    \ = game[i];\n        result[i] = abs(guess - score);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnuk9aoay.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpnuk9aoay.cpp:16:31: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   16 |         result[i] = abs(guess - score);\n\
    \      |                         ~~~~~ ^ ~~~~~\n      |                      \
    \   |       |\n      |                         |       long int\n      |     \
    \                    std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnuk9aoay.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnuk9aoay.cpp:16:33:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   16 |         result[i] = abs(guess - score);\n      |                   \
    \              ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_a"
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += abs(game[i] - guess[i]);\n        result[i] = score;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmps5hq1vm3: /tmp/tmps5hq1vm3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long diff = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822110
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            result[i] = 0;\n    \
    \    } else {\n            diff = abs(game[i] - guess[i]);\n            result[i]\
    \ = diff;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822110
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc0ms8llv: /tmp/tmpc0ms8llv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822110
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dwlxg82.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7dwlxg82.cpp:14:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   14 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp7dwlxg82.cpp:68:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   68 |     long i = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:16:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   16 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:69:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   69 |     long j = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:17:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   17 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:70:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   70 |     long k = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:18:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   18 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:71:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   71 |     long l = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:19:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   19 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:72:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   72 |     long m = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:20:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   20 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:73:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   73 |     long n = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:74:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   74 |     long o = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:22:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   22 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:75:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   75 |     long p = 0;\n      |          ^\n/tmp/tmp7dwlxg82.cpp:23:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   23 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp7dwlx"
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < guess.size(); i++) {\n        sum += game[i];\n\
    \        diff = abs(guess[i] - sum);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdpaeuim9: /tmp/tmpdpaeuim9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long total = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  total += abs(game[i] - guess[i]);\n        result[i] = total;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp67dzw404: /tmp/tmp67dzw404.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiv4rrqzc: /tmp/tmpiv4rrqzc.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjsutcm8: /tmp/tmpbjsutcm8.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n\
    \        score += diff;\n    }\n    if(score == 0)\n        return result;\n \
    \   for(long i = 0; i < guess.size(); i++)\n        result[i] = abs(game[i] -\
    \ guess[i]);\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            diff = abs(game[i] - guess[i]);\n            result[i]\
    \ = diff;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     result[i] = 0;\n            score = 0;\n        } else {\n            diff\
    \ = abs(game[i] - guess[i]);\n            result[i] = diff;\n            score\
    \ = abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  if (game[i] == guess[i]) {\n            result[i] = 0;\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    for(int i = 0; i < guess.size(); i++) {\n\
    \        score = game[i];\n        diff = abs(guess - score);\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp92io1ns4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp92io1ns4.cpp:17:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   17 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp92io1ns4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp92io1ns4.cpp:17:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   17 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    for (int i = 0; i < guess.size(); i++) {\n\
    \        score = game[i];\n        diff = abs(guess - score);\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmputbvqx5g.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmputbvqx5g.cpp:17:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   17 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmputbvqx5g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmputbvqx5g.cpp:17:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   17 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjsnw7bwm: /tmp/tmpjsnw7bwm.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjap47z_b: /tmp/tmpjap47z_b.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score;\n    long diff;\n    for(int i = 0; i\
    \ < guess.size(); i++){\n        score = game[i];\n        diff = abs(guess -\
    \ score);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mf972sw.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp9mf972sw.cpp:18:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   18 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9mf972sw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9mf972sw.cpp:18:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   18 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcst7qx5r: /tmp/tmpcst7qx5r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long max_diff = std::numeric_limits<long>::max();\n    long min_diff = std::numeric_limits<long>::min();\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        max_diff = std::max(max_diff,\
    \ game[i] - guess[i]);\n        min_diff = std::min(min_diff, guess[i] - game[i]);\n\
    \        result[i] = std::abs(guess[i] - game[i]);\n    }\n    if (max_diff ==\
    \ min_diff) {\n        return result;\n    }\n    else {\n        return std::vector<long>(guess.size(),\
    \ max_diff);\n    }\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqng1tqve: /tmp/tmpqng1tqve.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n        sum\
    \ += game[i];\n        if (game[i] < min) min = game[i];\n        if (game[i]\
    \ > max) max = game[i];\n    }\n    for (size_t i = 0; i < guess.size(); i++)\
    \ {\n        result[i] = std::abs(guess[i] - sum);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2ze63807: /tmp/tmp2ze63807.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long minDiff\
    \ = std::numeric_limits<long>::max();\n    long minDiffIndex = 0;\n    long maxDiff\
    \ = 0;\n    long maxDiffIndex = 0;\n    long minDiffScore = std::numeric_limits<long>::max();\n\
    \    long minDiffScoreIndex = 0;\n    long maxDiffScore = std::numeric_limits<long>::max();\n\
    \    long maxDiffScoreIndex = 0;\n    long minDiffGuess = std::numeric_limits<long>::max();\n\
    \    long minDiffGuessIndex = 0;\n    long maxDiffGuess = std::numeric_limits<long>::max();\n\
    \    long maxDiffGuessIndex = 0;\n    long minDiffGame = std::numeric_limits<long>::max();\n\
    \    long minDiffGameIndex = 0;\n    long maxDiffGame = std::numeric_limits<long>::max();\n\
    \    long maxDiffGameIndex = 0;\n    long minDiffGuessScore = std::numeric_limits<long>::max();\n\
    \    long minDiffGuessScoreIndex = 0;\n    long maxDiffGuessScore = std::numeric_limits<long>::max();\n\
    \    long maxDiffGuessScoreIndex = 0;\n    long minDiffGameScore = std::numeric_limits<long>::max();\n\
    \    long minDiffGameScoreIndex = 0;\n    long maxDiffGameScore = std::numeric_limits<long>::max();\n\
    \    long maxDiffGameScoreIndex = 0;\n    long minDiffGameGuess = std::numeric_limits<long>::max();\n\
    \    long minDiffGameGuessIndex = 0;\n    long maxDiffGameGuess = std::numeric_limits<long>::max();\n\
    \    long maxDiffGameGuessIndex = 0;\n    long minDiffGameGame = std::numeric_limits<long>::max();\n\
    \    long minDiffGameGameIndex = 0;\n    long maxDiffGameGame = std::numeric_limits<long>::max();\n\
    \    long maxDiffGameGameIndex = 0;\n    long minDiffGuessGuess = std::numeric_limits<long>::max();\n\
    \    long minDiffGuessGuessIndex = 0;\n    long maxDiffGuessGuess = std::numeric_limits<long>::max();\n\
    \    long maxDiffGuessGuessIndex = 0;\n    long minDiffGameGuess = std::numeric_limits<long>::max();\n\
    \    long minDiffGameGuessIndex = 0;\n    long maxDiffGameGuess = std::numeric_limits<long>::max();\n\
    \    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg93hzyos.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpg93hzyos.cpp:52:10: error: redeclaration\
    \ of \u2018long int minDiffGameGuess\u2019\n   52 |     long minDiffGameGuess\
    \ = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~~~~~~~~\n/tmp/tmpg93hzyos.cpp:40:10:\
    \ note: \u2018long int minDiffGameGuess\u2019 previously declared here\n   40\
    \ |     long minDiffGameGuess = std::numeric_limits<long>::max();\n      |   \
    \       ^~~~~~~~~~~~~~~~\n/tmp/tmpg93hzyos.cpp:53:10: error: redeclaration of\
    \ \u2018long int minDiffGameGuessIndex\u2019\n   53 |     long minDiffGameGuessIndex\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg93hzyos.cpp:41:10: note:\
    \ \u2018long int minDiffGameGuessIndex\u2019 previously declared here\n   41 |\
    \     long minDiffGameGuessIndex = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg93hzyos.cpp:54:10: error: redeclaration of \u2018long int maxDiffGameGuess\u2019\
    \n   54 |     long maxDiffGameGuess = std::numeric_limits<long>::max();\n    \
    \  |          ^~~~~~~~~~~~~~~~\n/tmp/tmpg93hzyos.cpp:42:10: note: \u2018long int\
    \ maxDiffGameGuess\u2019 previously declared here\n   42 |     long maxDiffGameGuess\
    \ = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~~~~~~~~\n/tmp/tmpg93hzyos.cpp:56:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   56 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long total = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  total += abs(game[i] - guess[i]);\n        result[i] = total;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp67dzw404: /tmp/tmp67dzw404.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxjw37a9: /tmp/tmpnxjw37a9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n        sum\
    \ += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcst7qx5r: /tmp/tmpcst7qx5r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n \
    \       score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pqjec5j: /tmp/tmp0pqjec5j.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = diff;\n    }\n    if (sum == 0)\n        return\
    \ result;\n    for (int i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n\
    \    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n\
    \    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 =\
    \ 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long\
    \ sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n\
    \    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22\
    \ = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long\
    \ sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n\
    \    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33\
    \ = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long\
    \ sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n\
    \    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44\
    \ = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long\
    \ sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n\
    \    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55\
    \ = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long\
    \ sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n\
    \    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66\
    \ = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long\
    \ sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n\
    \    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77\
    \ = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long\
    \ sum81 = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n    long sum84\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwekhkvrv.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwekhkvrv.cpp:98:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmpwekhkvrv.cpp:98:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            result[i] = 0;\n    \
    \    } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++) {\n        sum += abs(game[i] - guess[i]);\n   \
    \     diff = abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw8eh6cpw: /tmp/tmpw8eh6cpw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvhp9j91e: /tmp/tmpvhp9j91e.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score - game[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeyq8vykp: /tmp/tmpeyq8vykp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long max_diff = 0;\n    long min_diff = std::numeric_limits<long>::max();\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        long diff = abs(game[i]\
    \ - guess[i]);\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \        }\n        if (diff < min_diff) {\n            min_diff = diff;\n   \
    \     }\n        result[i] = diff;\n    }\n    if (max_diff == 0) {\n        return\
    \ result;\n    }\n    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i]\
    \ = result[i] - max_diff;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3kjjmabd: /tmp/tmp3kjjmabd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long\
    \ max = std::numeric_limits<long>::min();\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        if (game[i] > max) {\n            max\
    \ = game[i];\n        }\n        if (game[i] < min) {\n            min = game[i];\n\
    \        }\n    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = std::abs(guess[i] - sum);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv8i8ki9q: /tmp/tmpv8i8ki9q.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822113
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s1o7_5q: /tmp/tmp5s1o7_5q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ ++i) {\n        diff = abs(game[i] - guess[i]);\n        if(diff == 0) {\n \
    \           result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n        score += game[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long score = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        score = game[i];\n\
    \        if(diff == 0) {\n            result[i] = 0;\n        } else {\n     \
    \       result[i] = diff;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc7yb186h: /tmp/tmpc7yb186h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822113
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpor0yc19f: /tmp/tmpor0yc19f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjsutcm8: /tmp/tmpbjsutcm8.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long total = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  total += abs(game[i] - guess[i]);\n        result[i] = total;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp67dzw404: /tmp/tmp67dzw404.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long total = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  total += abs(game[i] - guess[i]);\n        result[i] = total;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp67dzw404: /tmp/tmp67dzw404.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822111
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long min =\
    \ 0;\n    long max = 0;\n    long mid = 0;\n    long mid2 = 0;\n    long mid3\
    \ = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n    long mid7\
    \ = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n    long mid10 = 0;\n    long\
    \ mid11 = 0;\n    long mid12 = 0;\n    long mid13 = 0;\n    long mid14 = 0;\n\
    \    long mid15 = 0;\n    long mid16 = 0;\n    long mid17 = 0;\n    long mid18\
    \ = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n    long mid21 = 0;\n    long\
    \ mid22 = 0;\n    long mid23 = 0;\n    long mid24 = 0;\n    long mid25 = 0;\n\
    \    long mid26 = 0;\n    long mid27 = 0;\n    long mid28 = 0;\n    long mid29\
    \ = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n    long mid32 = 0;\n    long\
    \ mid33 = 0;\n    long mid34 = 0;\n    long mid35 = 0;\n    long mid36 = 0;\n\
    \    long mid37 = 0;\n    long mid38 = 0;\n    long mid39 = 0;\n    long mid40\
    \ = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n    long mid43 = 0;\n    long\
    \ mid44 = 0;\n    long mid45 = 0;\n    long mid46 = 0;\n    long mid47 = 0;\n\
    \    long mid48 = 0;\n    long mid49 = 0;\n    long mid50 = 0;\n    long mid51\
    \ = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n    long mid54 = 0;\n    long\
    \ mid55 = 0;\n    long mid56 = 0;\n    long mid57 = 0;\n    long mid58 = 0;\n\
    \    long mid59 = 0;\n    long mid60 = 0;\n    long mid61 = 0;\n    long mid62\
    \ = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n    long mid65 = 0;\n    long\
    \ mid66 = 0;\n    long mid67 = 0;\n    long mid68 = 0;\n    long mid69 = 0;\n\
    \    long mid70 = 0;\n    long mid71 = 0;\n    long mid72 = 0;\n    long mid73\
    \ = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n    long mid76 = 0;\n    long\
    \ mid77 = 0;\n    long mid78 = 0;\n    long mid79 = 0;\n    long mid80 = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprtx7lmko.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmprtx7lmko.cpp:99:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   99 | }\n      | ^\n/tmp/tmprtx7lmko.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822113
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(long i = 0; i < guess.size(); i++) {\n        if(game[i]\
    \ == guess[i]) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score - game[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpje7huz0z: /tmp/tmpje7huz0z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        diff = game[i] - guess[i];\n      \
    \  if (diff < 0) {\n            diff *= -1;\n        }\n        result[i] = sum\
    \ - diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpm2vqx2ph: /tmp/tmpm2vqx2ph.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long minDiff\
    \ = std::numeric_limits<long>::max();\n    long minDiffIndex = 0;\n    long maxDiff\
    \ = std::numeric_limits<long>::min();\n    long maxDiffIndex = 0;\n    long minScore\
    \ = std::numeric_limits<long>::max();\n    long maxScore = std::numeric_limits<long>::min();\n\
    \    long minScoreIndex = 0;\n    long maxScoreIndex = 0;\n    long minGuess =\
    \ std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGuessIndex = 0;\n    long maxGuessIndex = 0;\n    long minGame =\
    \ std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGameIndex = 0;\n    long maxGameIndex = 0;\n    long minGameScore\
    \ = std::numeric_limits<long>::max();\n    long maxGameScore = std::numeric_limits<long>::min();\n\
    \    long minGameScoreIndex = 0;\n    long maxGameScoreIndex = 0;\n    long minGuessScore\
    \ = std::numeric_limits<long>::max();\n    long maxGuessScore = std::numeric_limits<long>::min();\n\
    \    long minGuessScoreIndex = 0;\n    long maxGuessScoreIndex = 0;\n    long\
    \ minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGuessIndex = 0;\n    long maxGuessIndex = 0;\n    long minGame =\
    \ std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGameIndex = 0;\n    long maxGameIndex = 0;\n    long minGameScore\
    \ = std::numeric_limits<long>::max();\n    long maxGameScore = std::numeric_limits<long>::min();\n\
    \    long minGameScoreIndex = 0;\n    long maxGameScoreIndex = 0;\n    long minGuessScore\
    \ = std::numeric_limits<long>::max();\n    long maxGuessScore = std::numeric_limits<long>::min();\n\
    \    long minGuessScoreIndex = 0;\n    long maxGuessScoreIndex = 0;\n    long\
    \ minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGuessIndex\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbz92y_i.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpqbz92y_i.cpp:40:10: error: redeclaration\
    \ of \u2018long int minGuess\u2019\n   40 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmpqbz92y_i.cpp:24:10: note: \u2018long int minGuess\u2019\
    \ previously declared here\n   24 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmpqbz92y_i.cpp:41:10: error: redeclaration of\
    \ \u2018long int maxGuess\u2019\n   41 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~~\n/tmp/tmpqbz92y_i.cpp:25:10: note: \u2018long int maxGuess\u2019\
    \ previously declared here\n   25 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~~\n/tmp/tmpqbz92y_i.cpp:42:10: error: redeclaration of\
    \ \u2018long int minGuessIndex\u2019\n   42 |     long minGuessIndex = 0;\n  \
    \    |          ^~~~~~~~~~~~~\n/tmp/tmpqbz92y_i.cpp:26:10: note: \u2018long int\
    \ minGuessIndex\u2019 previously declared here\n   26 |     long minGuessIndex\
    \ = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpqbz92y_i.cpp:43:10: error: redeclaration\
    \ of \u2018long int maxGuessIndex\u2019\n   43 |     long maxGuessIndex = 0;\n\
    \      |          ^~~~~~~~~~~~~\n/tmp/tmpqbz92y_i.cpp:27:10: note: \u2018long\
    \ int maxGuessIndex\u2019 previously declared here\n   27 |     long maxGuessIndex\
    \ = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpqbz92y_i.cpp:44:10: error: redeclaration\
    \ of \u2018long int minGame\u2019\n   44 |     long minGame = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~\n/tmp/tmpqbz92y_i.cpp:28:10: note: \u2018long int minGame\u2019\
    \ previously declared here\n   28 |     long minGame = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~\n/tmp/tmpqbz92y_i.cpp:45:10: error: redeclaration of\
    \ \u2018long int maxGame\u2019\n   45 |     long maxGame = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~\n/tmp/tmpqbz92y_i.cpp:29:10: note: \u2018long int maxGame\u2019\
    \ previously declared here\n   29 |     long maxGame = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~\n/tmp/tmpqbz92y_i.cpp:46:10: error: redeclaration "
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s1o7_5q: /tmp/tmp5s1o7_5q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    for(int i = 0; i < guess.size(); i++) {\n\
    \        score = game[i];\n        diff = abs(guess - score);\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp92io1ns4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp92io1ns4.cpp:17:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   17 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp92io1ns4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp92io1ns4.cpp:17:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   17 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822111
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long maxScore = std::max(game.front(),\
    \ guess.front());\n    long minScore = std::min(game.back(), guess.back());\n\
    \    long maxDiff = maxScore - minScore;\n    long minDiff = maxScore - maxDiff;\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxDiffGuess = maxGuess - minGuess;\n\
    \    long minDiffGuess = maxGuess - maxDiffGuess;\n    long maxScoreGuess = std::max(game.back(),\
    \ guess.back());\n    long minScoreGuess = std::min(game.front(), guess.front());\n\
    \    long maxDiffGuess = maxScoreGuess - minScoreGuess;\n    long minDiffGuess\
    \ = maxScoreGuess - maxDiffGuess;\n    long maxGuesses = std::max(game.back(),\
    \ guess.back());\n    long minGuesses = std::min(game.front(), guess.front());\n\
    \    long maxDiffGuesses = maxGuesses - minGuesses;\n    long minDiffGuesses =\
    \ maxGuesses - maxDiffGuesses;\n    long maxGuessesGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuessesGuess = std::min(game.front(), guess.front());\n\
    \    long maxDiffGuessesGuess = maxGuessesGuess - minGuessesGuess;\n    long minDiffGuessesGuess\
    \ = maxGuessesGuess - maxDiffGuessesGuess;\n    long maxGuessesGuesses = std::max(game.back(),\
    \ guess.back());\n    long minGuessesGuesses = std::min(game.front(), guess.front());\n\
    \    long maxDiffGuessesGuesses = maxGuessesGuesses - minGuessesGuesses;\n   \
    \ long minDiffGuessesGuesses = maxGuessesGuesses - maxDiffGuessesGuesses;\n  \
    \  long maxGuessesGuesses = std::max(game.back(), guess.back());\n    long minGuessesGuesses\
    \ = std::min(game.front(), guess.front());\n    long maxDiff\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mnbhi56.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6mnbhi56.cpp:25:10: error: redeclaration\
    \ of \u2018long int maxDiffGuess\u2019\n   25 |     long maxDiffGuess = maxScoreGuess\
    \ - minScoreGuess;\n      |          ^~~~~~~~~~~~\n/tmp/tmp6mnbhi56.cpp:21:10:\
    \ note: \u2018long int maxDiffGuess\u2019 previously declared here\n   21 |  \
    \   long maxDiffGuess = maxGuess - minGuess;\n      |          ^~~~~~~~~~~~\n\
    /tmp/tmp6mnbhi56.cpp:26:10: error: redeclaration of \u2018long int minDiffGuess\u2019\
    \n   26 |     long minDiffGuess = maxScoreGuess - maxDiffGuess;\n      |     \
    \     ^~~~~~~~~~~~\n/tmp/tmp6mnbhi56.cpp:22:10: note: \u2018long int minDiffGuess\u2019\
    \ previously declared here\n   22 |     long minDiffGuess = maxGuess - maxDiffGuess;\n\
    \      |          ^~~~~~~~~~~~\n/tmp/tmp6mnbhi56.cpp:39:10: error: redeclaration\
    \ of \u2018long int maxGuessesGuesses\u2019\n   39 |     long maxGuessesGuesses\
    \ = std::max(game.back(), guess.back());\n      |          ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6mnbhi56.cpp:35:10: note: \u2018long int maxGuessesGuesses\u2019 previously\
    \ declared here\n   35 |     long maxGuessesGuesses = std::max(game.back(), guess.back());\n\
    \      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmp6mnbhi56.cpp:40:10: error: redeclaration\
    \ of \u2018long int minGuessesGuesses\u2019\n   40 |     long minGuessesGuesses\
    \ = std::min(game.front(), guess.front());\n      |          ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6mnbhi56.cpp:36:10: note: \u2018long int minGuessesGuesses\u2019 previously\
    \ declared here\n   36 |     long minGuessesGuesses = std::min(game.front(), guess.front());\n\
    \      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmp6mnbhi56.cpp:42:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   42 | }\n      | ^\n/tmp/tmp6mnbhi56.cpp:42:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n        score =\
    \ game[i];\n        if (guess == score) {\n            result[i] = 0;\n      \
    \  } else {\n            result[i] = abs(guess - score);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g518wy_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5g518wy_.cpp:15:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   15 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp5g518wy_.cpp:16:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   16 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmp5g518wy_.cpp:17:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   17 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659822114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score;\n    long diff;\n    long sum = 0;\n\
    \    long count = 0;\n    for(long i = 0; i < guess.size(); i++) {\n        score\
    \ = game[i];\n        diff = abs(guess - score);\n        sum += diff;\n     \
    \   if(diff == 0) {\n            result[i] = 0;\n            count++;\n      \
    \  } else {\n            result[i] = sum;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp108b4nve.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp108b4nve.cpp:20:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   20 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp108b4nve.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp108b4nve.cpp:20:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy54n3xhh: /tmp/tmpy54n3xhh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyy6vsb22: /tmp/tmpyy6vsb22.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(game[i]\
    \ - guess[i]);\n        result[i] = sum - diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8c8ttcyn: /tmp/tmp8c8ttcyn.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n \
    \       if(diff == 0) {\n            result[i] = 0;\n        } else {\n      \
    \      result[i] = diff;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n\
    \    long sum81 = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n    long sum84\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8t320ww.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpt8t320ww.cpp:98:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmpt8t320ww.cpp:98:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp05vkrzxo: /tmp/tmp05vkrzxo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long diff = 0;\n    long sum2 = 0;\n    long max2 = 0;\n    long min2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long\
    \ min3 = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n   \
    \ long min4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long max5 = 0;\n\
    \    long min5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long max6 =\
    \ 0;\n    long min6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long max7\
    \ = 0;\n    long min7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long\
    \ max8 = 0;\n    long min8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n   \
    \ long max9 = 0;\n    long min9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n\
    \    long max10 = 0;\n    long min10 = 0;\n    long diff10 = 0;\n    long sum11\
    \ = 0;\n    long max11 = 0;\n    long min11 = 0;\n    long diff11 = 0;\n    long\
    \ sum12 = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long diff12 = 0;\n\
    \    long sum13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long diff13\
    \ = 0;\n    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long\
    \ diff14 = 0;\n    long sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n\
    \    long diff15 = 0;\n    long sum16 = 0;\n    long max16 = 0;\n    long min16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long\
    \ min17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n\
    \    long min18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long max19\
    \ = 0;\n    long min19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long\
    \ max20 = 0;\n    long min20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n\
    \    long max21 = 0;\n    long min21 = 0;\n    long diff21 = 0;\n    long sum22\
    \ = 0;\n    long max22 = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpifd4_xbr: /tmp/tmpifd4_xbr.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw81cmfju: /tmp/tmpw81cmfju.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(guess - game[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2xpm2ya0.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2xpm2ya0.cpp:15:31: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   15 |         diff = std::abs(guess - game[i]);\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2xpm2ya0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2xpm2ya0.cpp:15:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   15 |         diff = std::abs(guess - game[i]);\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_trait"
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        diff = abs(guess[i] - sum);\n     \
    \   result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpovs5jxxp: /tmp/tmpovs5jxxp.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long max_diff = std::numeric_limits<long>::max();\n    for(size_t i = 0;\
    \ i < guess.size(); ++i) {\n        long diff = std::abs(game[i] - guess[i]);\n\
    \        if(diff > max_diff) {\n            max_diff = diff;\n        }\n    \
    \    result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(int i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjvrw7tlb: /tmp/tmpjvrw7tlb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ long sum2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long count3 =\
    \ 0;\n    long sum4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long count5\
    \ = 0;\n    long sum6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n    long\
    \ count7 = 0;\n    long sum8 = 0;\n    long count8 = 0;\n    long sum9 = 0;\n\
    \    long count9 = 0;\n    long sum10 = 0;\n    long count10 = 0;\n    long sum11\
    \ = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long count12 = 0;\n  \
    \  long sum13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long count14\
    \ = 0;\n    long sum15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n    long\
    \ count16 = 0;\n    long sum17 = 0;\n    long count17 = 0;\n    long sum18 = 0;\n\
    \    long count18 = 0;\n    long sum19 = 0;\n    long count19 = 0;\n    long sum20\
    \ = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long count21 = 0;\n  \
    \  long sum22 = 0;\n    long count22 = 0;\n    long sum23 = 0;\n    long count23\
    \ = 0;\n    long sum24 = 0;\n    long count24 = 0;\n    long sum25 = 0;\n    long\
    \ count25 = 0;\n    long sum26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n\
    \    long count27 = 0;\n    long sum28 = 0;\n    long count28 = 0;\n    long sum29\
    \ = 0;\n    long count29 = 0;\n    long sum30 = 0;\n    long count30 = 0;\n  \
    \  long sum31 = 0;\n    long count31 = 0;\n    long sum32 = 0;\n    long count32\
    \ = 0;\n    long sum33 = 0;\n    long count33 = 0;\n    long sum34 = 0;\n    long\
    \ count34 = 0;\n    long sum35 = 0;\n    long count35 = 0;\n    long sum36 = 0;\n\
    \    long count36 = 0;\n    long sum37 = 0;\n    long count37 = 0;\n    long sum38\
    \ = 0;\n    long count38 = 0;\n    long sum39 = 0;\n    long count39 = 0;\n  \
    \  long sum40 = 0;\n    long count40 = 0;\n    long sum41 = 0;\n    long count41\
    \ = 0;\n    long sum42 = 0;\n    long count42 = 0;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9m174yhk: /tmp/tmp9m174yhk.cpp:102: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjvrw7tlb: /tmp/tmpjvrw7tlb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score - game[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpje7huz0z: /tmp/tmpje7huz0z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(int i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long int sum = 0;\n    for(int i = 0; i < guess.size(); i++) {\n   \
    \     sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4qzybl4g: /tmp/tmp4qzybl4g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++){\n        sum += abs(game[i] - guess[i]);\n    }\n\
    \    for(int i = 0; i < guess.size(); i++){\n        diff = abs(game[i] - guess[i]);\n\
    \        if(diff == sum){\n            result[i] = 0;\n        }else{\n      \
    \      result[i] = diff;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++){\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2on3tbx: /tmp/tmpo2on3tbx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += abs(game[i] - guess[i]);\n        result[i] = score;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmps5hq1vm3: /tmp/tmps5hq1vm3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++){\n        diff = abs(game[i] - guess[i]);\n  \
    \      if(diff == 0){\n            result[i] = 0;\n        }else{\n          \
    \  result[i] = diff;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjsutcm8: /tmp/tmpbjsutcm8.cpp:104: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659822107
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ long max = 0;\n    long min = 0;\n    long mid = 0;\n    long mid2 = 0;\n  \
    \  long mid3 = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n\
    \    long mid7 = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n    long mid10 =\
    \ 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long mid13 = 0;\n    long\
    \ mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n    long mid17 = 0;\n\
    \    long mid18 = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n    long mid21\
    \ = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long mid24 = 0;\n    long\
    \ mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n    long mid28 = 0;\n\
    \    long mid29 = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n    long mid32\
    \ = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long mid35 = 0;\n    long\
    \ mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n    long mid39 = 0;\n\
    \    long mid40 = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n    long mid43\
    \ = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long mid46 = 0;\n    long\
    \ mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n    long mid50 = 0;\n\
    \    long mid51 = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n    long mid54\
    \ = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long mid57 = 0;\n    long\
    \ mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n    long mid61 = 0;\n\
    \    long mid62 = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n    long mid65\
    \ = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long mid68 = 0;\n    long\
    \ mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n    long mid72 = 0;\n\
    \    long mid73 = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n    long mid76\
    \ = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long mid79 = 0;\n    long\
    \ mid80\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl0lhn8ta.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpl0lhn8ta.cpp:99:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   99 | }\n      | ^\n/tmp/tmpl0lhn8ta.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659822107
