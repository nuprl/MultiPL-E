name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\nlong modp(long n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t =\
    \ modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p))\
    \ % p;", "  if (n == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res *\
    \ res) % p;\n  if (n % 2 == 1) res = (res * 2) % p;\n  return res;", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    long\
    \ res = 1;\n    while (n) {\n        if (n & 1)\n            res = (res * 2) %\
    \ p;\n        n >>= 1;\n    }\n    return res;", "    if (n == 0)\n        return\
    \ 1;\n    long u = modp(n/2, p);\n    u = (u*u)%p;\n    if (n%2 == 1)\n      \
    \  u = (u*2)%p;\n    return u;", "  long res = 1;\n  while (n) {\n    if (n &\
    \ 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res * 2) % p;\n  }\n\
    \  return res;", "    long res = 1;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;", "    if (n == 0)\
    \ return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n\
    \ % 2 == 0) return (x*x) % p;\n    else return (2*x*x) % p;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n\
    \    if (n % 2) x = (x*2) % p;\n    return x;", "    if (n == 0) return 1;\n \
    \   if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n \
    \ long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res =\
    \ (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (2 * modp(n-1, p)) % p;", "  long res = 1;\n  while (n > 0) {\n    if\
    \ (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;", "    if (n\
    \ == 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n   \
    \ if (n % 2 == 0) return (x*x) % p;\n    else return (2*x*x) % p;", "\tif (n ==\
    \ 0) return 1;\n\tlong long x = modp(n/2, p);\n\tx = (x*x) % p;\n\tif (n % 2 ==\
    \ 1) x = (x*2) % p;\n\treturn x;", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  long half = modp(n/2, p);\n  long result = (half * half) % p;\n  if (n\
    \ % 2 == 1) result = (result * 2) % p;\n  return result;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "    long res = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return res;",
  "  if (n == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n\
    \  if (n % 2 == 1) res = (res * 2) % p;\n  return res;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0)\n    return\
    \ (x * x) % p;\n  else\n    return (2 * x * x) % p;", "    long res = 1;\n   \
    \ while (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n\
    \    }\n    return res;", "  assert(n >= 0);\n  if (n == 0) return 1;\n  long\
    \ res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 != 0) res = (res\
    \ * 2) % p;\n  return res;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n \
    \   long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 *\
    \ modp(n-1, p)) % p;\n  }", "  long res = 1;\n  while (n) {\n    if (n & 1) res\
    \ = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res * 2) % p;\n  }\n  return\
    \ res;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n   \
    \     n >>= 1;\n    }\n    return res;", "  if (n == 0) return 1;\n  if (n % 2\
    \ == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n   \
    \ return (2 * modp(n-1, p)) % p;\n  }", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n  if (n %\
    \ 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n \
    \   return (2 * modp(n-1, p)) % p;\n  }", "  long res = 1;\n  while (n > 0) {\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    n /= 2;\n  }\n  return res;", " \
    \   long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n\
    \        n >>= 1;\n    }\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x) % p;\n\
    \    if (n % 2 == 0) return x2;\n    else return (x2 * 2) % p;", "  if (n == 0)\n\
    \    return 1;\n  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return\
    \ (t * t) % p;\n  }\n  return (2 * modp(n - 1, p)) % p;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n\
    \    if (n % 2 == 1) x = (x*2) % p;\n    return x;", "  assert(n >= 0);\n  if\
    \ (n == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n \
    \ if (n % 2 == 1) res = (res * 2) % p;\n  return res;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;", "  assert(n >= 0);\n  if (n == 0)\
    \ return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2\
    \ == 1) res = (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n   \
    \ long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n & 1) res = (res\
    \ * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0)\
    \ {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return\
    \ (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return\
    \ (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return (x*x) % p;\n    else\
    \ return (((x*x) % p) * 2) % p;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    long res =\
    \ modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res *\
    \ 2) % p;\n    return res;", "  assert(n >= 0);\n  if (n == 0) return 1;\n  long\
    \ res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res = (res\
    \ * 2) % p;\n  return res;", "    long res = 1;\n    while (n > 0) {\n       \
    \ if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;",
  "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return\
    \ (t*t) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "    if (n\
    \ == 0) return 1;\n    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if\
    \ (n % 2 == 1) sq = (sq*2) % p;\n    return sq;", "    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long t = modp(n/2, p);\n    t = (t*t) % p;\n \
    \   if (n % 2 == 1) t = (t*2) % p;\n    return t;", "  if (n == 0) return 1;\n\
    \  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res\
    \ = (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n    if (n % 2\
    \ == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n  if (n == 1)\
    \ return 2;\n  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n %\
    \ 2 == 1) res = (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n \
    \   if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "  if (n ==\
    \ 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t)\
    \ % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    long y = modp(n/2, p);\n    return (y*y) % p;\n\
    \  }\n  return (modp(n-1, p) * 2) % p;", "    if (n == 0) return 1;\n    long\
    \ sq = modp(n/2, p);\n    sq = (sq * sq) % p;\n    if (n % 2 == 1) sq = (sq *\
    \ 2) % p;\n    return sq;", "  assert(n >= 0);\n  if (n == 0) return 1;\n  long\
    \ res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 != 0) res = (res\
    \ * 2) % p;\n  return res;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2) res = (res\
    \ * 2) % p;\n  return res;", "\tif (n == 0) return 1;\n\tlong half = modp(n/2,\
    \ p);\n\tlong full = (half * half) % p;\n\tif (n % 2 == 1) full = (full * 2) %\
    \ p;\n\treturn full;", "  long res = 1;\n  while (n > 0) {\n    if (n & 1) res\
    \ = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 ==\
    \ 0) return (x*x) % p;\n    else return (2*x*x) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) result = (result * 2) % p;\n  return result;",
  "  long res = 1;\n  while (n > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n\
    \ >>= 1;\n  }\n  return res;", "    long res = 1;\n    while (n) {\n        if\
    \ (n & 1) res = (res * 2) % p;\n        n >>= 1;\n        if (n) res = (res *\
    \ 2) % p;\n    }\n    return res;", "  if (n == 0) return 1;\n  long res = modp(n/2,\
    \ p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res = (res * 2) % p;\n  return\
    \ res;", "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    long res =\
    \ modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res\
    \ * 2) % p;\n    return res;", "\tif (n == 0) return 1;\n\tlong res = modp(n/2,\
    \ p);\n\tres = (res*res) % p;\n\tif (n % 2 == 1) res = (res*2) % p;\n\treturn\
    \ res;", "\tlong ret = 1;\n\twhile (n > 0) {\n\t\tif (n & 1) ret = (ret * 2) %\
    \ p;\n\t\tn >>= 1;\n\t}\n\treturn ret;", "    long res = 1;\n    while (n > 0)\
    \ {\n        if (n & 1) {\n            res = (res * 2) % p;\n        }\n     \
    \   n >>= 1;\n        if (n > 0) {\n            res = (res * res) % p;\n     \
    \   }\n    }\n    return res;", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  long x = modp(n/2, p);\n  long x2 = (x * x) % p;\n  if (n % 2 == 0) return\
    \ x2;\n  return (x2 * 2) % p;", "\tlong res = 1;\n\twhile (n > 0) {\n\t\tif (n\
    \ & 1) res = (res * 2) % p;\n\t\tn >>= 1;\n\t}\n\treturn res;", "    if (n ==\
    \ 0) return 1;\n    if (n == 1) return 2;\n    long res = modp(n / 2, p);\n  \
    \  res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n  long x = modp(n/2,\
    \ p);\n  long x2 = (x * x) % p;\n  if (n % 2 == 0) return x2;\n  return (x2 *\
    \ 2) % p;", "  long res = 1;\n  for (long i = 0; i < n; i++) {\n    res = (res\
    \ * 2) % p;\n  }\n  return res;", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1)\
    \ res = (res * 2) % p;\n  return res;", "  long res = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;", "  if (n == 0)\
    \ return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t)\
    \ % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n\
    \  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  else return (2*x*x) % p;", "    if (n == 0) return 1;\n    long sq =\
    \ modp(n/2, p);\n    sq = (sq * sq) % p;\n    if (n % 2 == 1) sq = (sq * 2) %\
    \ p;\n    return sq;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n  long\
    \ res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res = (res\
    \ * 2) % p;\n  return res;", "    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1,\
    \ p)) % p;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n  long x = modp(n/2,\
    \ p);\n  if (n % 2 == 0) return (x*x) % p;\n  else return (2*x*x) % p;", "\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * 2) % p;\n\t\tn >>= 1;\n\
    \t}\n\treturn res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n     \
    \   long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 *\
    \ modp(n-1, p)) % p;", "    long res = 1;\n    while (n > 0) {\n        if (n\
    \ & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  long\
    \ res = 1;\n  while (n) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n\
    \    if (n) res = (res * 2) % p;\n  }\n  return res;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;", "  if (n == 0) return 1;\n  if (n %\
    \ 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n \
    \   return (2 * modp(n-1, p)) % p;\n  }", "  if (n == 0) return 1;\n  if (n ==\
    \ 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x) % p;\n\
    \  else return (2*x*x) % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0)\
    \ {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return\
    \ (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2) res = (res\
    \ * 2) % p;\n  return res;", "  assert(n >= 0);\n  if (n == 0) return 1;\n  long\
    \ res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n % 2 != 0) res = (res\
    \ * 2) % p;\n  return res;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x) % p;\n    if (n % 2 ==\
    \ 0) return x2;\n    else return (x2 * 2) % p;", "  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;",
  "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  assert(n\
    \ >= 0);\n  if (n == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res *\
    \ res) % p;\n  if (n % 2 == 1) res = (res * 2) % p;\n  return res;", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n\
    \ == 0) return 1;\n    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if\
    \ (n % 2 == 1) sq = (sq*2) % p;\n    return sq;", "  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;", "  if (n == 0) return 1;\n  if (n % 2 == 0)\
    \ {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return\
    \ (2 * modp(n-1, p)) % p;\n  }", "    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long\
    \ t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1,\
    \ p)) % p;\n  }", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t =\
    \ modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1,\
    \ p)) % p;\n  }", "  assert(n >= 0);\n  if (n == 0) return 1;\n  long res = modp(n/2,\
    \ p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res = (res * 2) % p;\n  return\
    \ res;", "    if (n == 0) return 1;\n    long x = modp(n/2, p);\n    x = (x*x)\
    \ % p;\n    if (n % 2 == 1) x = (x*2) % p;\n    return x;", "  assert(n >= 0);\n\
    \  if (n == 0) return 1;\n  long res = modp(n / 2, p);\n  res = (res * res) %\
    \ p;\n  if (n % 2 != 0) res = (res * 2) % p;\n  return res;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long res = (x*x)\
    \ % p;\n    if (n % 2 == 1) res = (res*2) % p;\n    return res;", "    if (n ==\
    \ 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x =\
    \ (x*x) % p;\n    if (n % 2 == 1) x = (x*2) % p;\n    return x;", "  if (n ==\
    \ 0) return 1;\n  long sq = modp(n/2, p);\n  sq = (sq*sq) % p;\n  if (n % 2 ==\
    \ 1) sq = (sq*2) % p;\n  return sq;", "  if (n == 0) return 1;\n  long res = modp(n/2,\
    \ p);\n  res = (res*res) % p;\n  if (n%2 == 1) res = (res*2) % p;\n  return res;",
  "  long res = 1;\n  while (n) {\n    if (n & 1) res = (res * 2) % p;\n    n >>=\
    \ 1;\n    if (n) res = (res * 2) % p;\n  }\n  return res;", "  if (n == 0) return\
    \ 1;\n  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1)\
    \ res = (res * 2) % p;\n  return res;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n  if (n %\
    \ 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n \
    \   return (2 * modp(n-1, p)) % p;\n  }", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (2 * modp(n-1, p)) % p;", "  if (n == 0) return 1;\n  if (n ==\
    \ 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x) % p;\n\
    \  return (2*x*x) % p;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n \
    \ long half = modp(n/2, p);\n  if (n % 2 == 0) return (half * half) % p;\n  else\
    \ return (2 * half * half) % p;", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  long half = modp(n/2, p);\n  long result = (half * half) % p;\n  if (n\
    \ % 2 == 1) {\n    result = (result * 2) % p;\n  }\n  return result;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    long res = 1;\n\
    \    while (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n\
    \    }\n    return res;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long\
    \ t = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1,\
    \ p)) % p;\n  }", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t =\
    \ modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1,\
    \ p)) % p;\n  }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1,\
    \ p)) % p;", "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    long x\
    \ = modp(n/2, p);\n    x = (x*x) % p;\n    if (n % 2 == 1) x = (x*2) % p;\n  \
    \  return x;", "  long res = 1;\n  while (n) {\n    if (n & 1) res = (res * 2)\
    \ % p;\n    n >>= 1;\n    if (n) res = (res * 2) % p;\n  }\n  return res;", " \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n\
    \    if (n % 2 == 0) return (x*x) % p;\n    else return (2*x*x) % p;", "    if\
    \ (n == 0) return 1;\n    if (n == 1) return 2;\n    long res = modp(n/2, p);\n\
    \    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "  long res = 1;\n  while (n) {\n    if (n & 1) res = (res * 2) % p;\n\
    \    n >>= 1;\n    if (n) res = (res * 2) % p;\n  }\n  return res;", "    if (n\
    \ == 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n / 2, p);\n \
    \   if (n % 2 == 0) return (x * x) % p;\n    else return (2 * x * x) % p;", " \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "  long\
    \ res = 1;\n  while (n > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>=\
    \ 1;\n  }\n  return res;", "  if (n == 0) return 1;\n  if (n == 1) return 2;\n\
    \  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x) % p;\n  else return\
    \ (2*x*x) % p;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2,\
    \ p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n\
    \  }", "    long res = 1;\n    while (n > 0) {\n        if (n & 1)\n         \
    \   res = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;", "    if (n\
    \ == 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n   \
    \ long x2 = (x * x) % p;\n    if (n % 2 == 0) return x2;\n    else return (x2\
    \ * 2) % p;", "    long res = 1;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;", "    if (n == 0)\
    \ return 1;\n    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res\
    \ = (res * res) % p;\n    if (n % 2) res = (res * 2) % p;\n    return res;", " \
    \   if (n == 0) return 1;\n    if (n == 1) return 2;\n    long x = modp(n/2, p);\n\
    \    long x2 = (x * x) % p;\n    if (n % 2 == 0) return x2;\n    else return (x2\
    \ * 2) % p;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2,\
    \ p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n\
    \  }", "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n\
    \    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    long res =\
    \ modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res\
    \ * 2) % p;\n    return res;", "    long res = 1;\n    while (n > 0) {\n     \
    \   if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;",
  "    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n\
    \        n >>= 1;\n    }\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n    if (n\
    \ % 2 == 1) x = (x*2) % p;\n    return x;", "    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n\
    \    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n\
    \    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return (x*x)\
    \ % p;\n    else return (2*x*x) % p;", "  long res = 1;\n  while (n > 0) {\n \
    \   if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;", "    if\
    \ (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return 2;\n    long half = modp(n/2, p);\n    long result\
    \ = (half * half) % p;\n    if (n % 2 == 1) result = (result * 2) % p;\n    return\
    \ result;", "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    long x\
    \ = modp(n/2, p);\n    x = (x*x) % p;\n    if (n % 2 == 1) x = (x*2) % p;\n  \
    \  return x;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1,\
    \ p)) % p;", "    if (n == 0) return 1;\n    long sq = modp(n/2, p);\n    sq =\
    \ (sq*sq) % p;\n    if (n % 2 == 1) sq = (sq*2) % p;\n    return sq;", "  if (n\
    \ == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return\
    \ (t*t) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "  if (n ==\
    \ 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t)\
    \ % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "    if (n == 0)\
    \ return 1;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return (x*x) % p;\n\
    \    else return (x*x*2) % p;", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  long half = modp(n/2, p);\n  long result = (half * half) % p;\n  if (n\
    \ % 2 == 1) result = (result * 2) % p;\n  return result;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n < 0)\n        n\
    \ += p;\n    long res = 1;\n    long x = 2;\n    while (n > 0) {\n        if (n\
    \ & 1)\n            res = (res * x) % p;\n        x = (x * x) % p;\n        n\
    \ >>= 1;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) return modp(n/2, p) * modp(n/2, p) % p;\n    return modp(n-1, p) * 2 % p;",
  "    if (n == 0) return 1;\n    if (n == 1) return 2;\n    if (n % 2 == 0) {\n \
    \       long t = modp(n/2, p);\n        return (t*t) % p;\n    } else {\n    \
    \    return (2 * modp(n-1, p)) % p;\n    }", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "  long res = 1;\n\
    \  for (long i = 0; i < n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;",
  "    if (n == 0) return 1;\n    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n\
    \    if (n % 2 == 1) sq = (sq*2) % p;\n    return sq;", "  if (n == 0) return\
    \ 1;\n  long x = modp(n/2, p);\n  x = (x*x) % p;\n  if (n%2 == 1) x = (x*2) %\
    \ p;\n  return x;", "  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t\
    \ = modp(n/2, p);\n    return (t*t) % p;\n  } else {\n    return (2 * modp(n-1,\
    \ p)) % p;\n  }", "    if (n == 0) return 1;\n    long res = modp(n / 2, p);\n\
    \    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2,\
    \ p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;",
  "  if (n == 0) return 1;\n  if (n == 1) return 2;\n  long half = modp(n/2, p);\n\
    \  long result = (half * half) % p;\n  if (n % 2 == 1) result = (result * 2) %\
    \ p;\n  return result;", "    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (2 * modp(n-1,\
    \ p)) % p;", "    if (n == 0) return 1;\n    long sq = modp(n/2, p);\n    sq =\
    \ (sq*sq) % p;\n    if (n % 2 == 1) sq = (sq*2) % p;\n    return sq;", "  if (n\
    \ == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return\
    \ (t*t) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n\
    \ == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n\
    \    if (n & 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (2 * modp(n-1, p)) % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;"]
stop_tokens:
- "\n}"
