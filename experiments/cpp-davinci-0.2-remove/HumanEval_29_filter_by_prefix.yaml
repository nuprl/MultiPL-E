name: HumanEval_29_filter_by_prefix
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that start with a given prefix.\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
  \ strings, std::string prefix) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
  xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    for (auto s : strings) {\n\
    \        if (s.find(prefix) == 0) {\n            result.push_back(s);\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            filtered.push_back(s);\n        }\n    }\n    return\
    \ filtered;", "    std::vector<std::string> filtered;\n    for (std::string s\
    \ : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.length())\
    \ == prefix) {\n            filtered.push_back(s);\n        }\n    }\n    return\
    \ filtered;", "    std::vector<std::string> result;\n    for (std::string s :\
    \ strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> filtered;\n    for (std::string s :\
    \ strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n  \
    \      }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "  std::vector<std::string> result;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> filtered;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n  \
    \      }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         filtered.push_back(s);\n        }\n    }\n    return filtered;", " \
    \   std::vector<std::string> filtered;\n    for (auto s : strings) {\n       \
    \ if (s.substr(0, prefix.size()) == prefix) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n     \
    \   }\n    }\n    return filtered;", "    std::vector<std::string> result;\n \
    \   for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n  \
    \      }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto str : strings)\
    \ {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (std::string s : strings)\
    \ {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n\
    \  return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string str : strings) {\n        if (str.find(prefix)\
    \ == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> ret;\n    for (auto s : strings) {\n        if (s.substr(0,\
    \ prefix.size()) == prefix) {\n            ret.push_back(s);\n        }\n    }\n\
    \    return ret;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         filtered.push_back(s);\n        }\n    }\n    return filtered;", " \
    \   std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(prefix) ==\
    \ 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         filtered.push_back(s);\n        }\n    }\n    return filtered;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "\tstd::vector<std::string> result;\n\tfor (auto s : strings) {\n\t\
    \tif (s.substr(0, prefix.size()) == prefix) {\n\t\t\tresult.push_back(s);\n\t\t\
    }\n\t}\n\treturn result;", "    std::vector<std::string> result;\n    for (auto\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
