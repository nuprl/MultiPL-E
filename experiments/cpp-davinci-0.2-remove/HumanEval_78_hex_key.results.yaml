language: cpp
name: HumanEval_78_hex_key
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long key = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] >= '0' && num[i] <= '9') {\n      key = key * 16 + (num[i]\
    \ - '0');\n    } else if (num[i] >= 'A' && num[i] <= 'F') {\n      key = key *\
    \ 16 + (num[i] - 'A' + 10);\n    }\n  }\n  return key;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxpd_np2y: /tmp/tmpxpd_np2y.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i]\
    \ - '0');\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey =\
    \ key * 16 + (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp46br_q4m: /tmp/tmp46br_q4m.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'B') {\n            key += 11 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'C') {\n            key +=\
    \ 12 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'D') {\n   \
    \         key += 13 * pow(16, num.size() - i - 1);\n        } else if (num[i]\
    \ == 'E') {\n            key += 14 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'F') {\n            key += 15 * pow(16, num.size() - i - 1);\n\
    \        } else {\n            key += (num[i] - '0') * pow(16, num.size() - i\
    \ - 1);\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0890uzqg: /tmp/tmp0890uzqg.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D' || num[i] == 'F') {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpd4yxpz30: /tmp/tmpd4yxpz30.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (auto c : num)\
    \ {\n        result *= 16;\n        if (c >= '0' && c <= '9') {\n            result\
    \ += c - '0';\n        } else {\n            result += c - 'A' + 10;\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp5z253xhu: /tmp/tmp5z253xhu.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (auto c : num)\
    \ {\n        result *= 16;\n        if (c >= '0' && c <= '9') {\n            result\
    \ += c - '0';\n        } else {\n            result += c - 'A' + 10;\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp5z253xhu: /tmp/tmp5z253xhu.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') result += 0;\n        else if\
    \ (num[i] == '1') result += 1;\n        else if (num[i] == '2') result += 2;\n\
    \        else if (num[i] == '3') result += 3;\n        else if (num[i] == '4')\
    \ result += 4;\n        else if (num[i] == '5') result += 5;\n        else if\
    \ (num[i] == '6') result += 6;\n        else if (num[i] == '7') result += 7;\n\
    \        else if (num[i] == '8') result += 8;\n        else if (num[i] == '9')\
    \ result += 9;\n        else if (num[i] == 'A') result += 10;\n        else if\
    \ (num[i] == 'B') result += 11;\n        else if (num[i] == 'C') result += 12;\n\
    \        else if (num[i] == 'D') result += 13;\n        else if (num[i] == 'E')\
    \ result += 14;\n        else if (num[i] == 'F') result += 15;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsqqmst1f: /tmp/tmpsqqmst1f.cpp:38: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong result = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long key = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] >= '0' && num[i] <= '9') {\n      key = key * 16 + (num[i]\
    \ - '0');\n    } else if (num[i] >= 'A' && num[i] <= 'F') {\n      key = key *\
    \ 16 + (num[i] - 'A' + 10);\n    }\n  }\n  return key;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxpd_np2y: /tmp/tmpxpd_np2y.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum += 1;\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10 * pow(16, i);\n\
    \        } else if (num[i] == 'B') {\n            key += 11 * pow(16, i);\n  \
    \      } else if (num[i] == 'C') {\n            key += 12 * pow(16, i);\n    \
    \    } else if (num[i] == 'D') {\n            key += 13 * pow(16, i);\n      \
    \  } else if (num[i] == 'E') {\n            key += 14 * pow(16, i);\n        }\
    \ else if (num[i] == 'F') {\n            key += 15 * pow(16, i);\n        } else\
    \ {\n            key += (num[i] - '0') * pow(16, i);\n        }\n    }\n    return\
    \ key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpicvds8rw: /tmp/tmpicvds8rw.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i]\
    \ - '0');\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey =\
    \ key * 16 + (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp46br_q4m: /tmp/tmp46br_q4m.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D' || num[i]\
    \ == 'E') {\n            sum++;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpv_cdz3v0: /tmp/tmpv_cdz3v0.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long long result = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        result = result * 16 + num[i] - '0';\n        } else {\n            result\
    \ = result * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) ==\
    \ (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu8v5eyqs: /tmp/tmpu8v5eyqs.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long long int sum = 0;\n    for (int i =\
    \ 0; i < num.length(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i]\
    \ == 'D' || num[i] == '3' || num[i] == '5' || num[i] == '7') {\n            sum++;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbvxkel1z: /tmp/tmpbvxkel1z.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= 'A') {\n            result += num[i]\
    \ - 'A' + 10;\n        } else {\n            result += num[i] - '0';\n       \
    \ }\n        result *= 16;\n    }\n    return result / 16;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmppncheis_: /tmp/tmppncheis_.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result = result\
    \ * 16 + 0;\n        } else if (num[i] == '1') {\n            result = result\
    \ * 16 + 1;\n        } else if (num[i] == '2') {\n            result = result\
    \ * 16 + 2;\n        } else if (num[i] == '3') {\n            result = result\
    \ * 16 + 3;\n        } else if (num[i] == '4') {\n            result = result\
    \ * 16 + 4;\n        } else if (num[i] == '5') {\n            result = result\
    \ * 16 + 5;\n        } else if (num[i] == '6') {\n            result = result\
    \ * 16 + 6;\n        } else if (num[i] == '7') {\n            result = result\
    \ * 16 + 7;\n        } else if (num[i] == '8') {\n            result = result\
    \ * 16 + 8;\n        } else if (num[i] == '9') {\n            result = result\
    \ * 16 + 9;\n        } else if (num[i] == 'A') {\n            result = result\
    \ * 16 + 10;\n        } else if (num[i] == 'B') {\n            result = result\
    \ * 16 + 11;\n        } else if (num[i] == 'C') {\n            result = result\
    \ * 16 + 12;\n        } else if (num[i] == 'D') {\n            result = result\
    \ * 16 + 13;\n        } else if (num[i] == 'E') {\n            result = result\
    \ * 16 + 14;\n        } else if (num[i] == 'F') {\n            result = result\
    \ * 16 + 15;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmppqzcngx0: /tmp/tmppqzcngx0.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'B') {\n            key += 11 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'C') {\n            key +=\
    \ 12 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'D') {\n   \
    \         key += 13 * pow(16, num.size() - i - 1);\n        } else if (num[i]\
    \ == 'E') {\n            key += 14 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'F') {\n            key += 15 * pow(16, num.size() - i - 1);\n\
    \        } else {\n            key += (num[i] - '0') * pow(16, num.size() - i\
    \ - 1);\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0890uzqg: /tmp/tmp0890uzqg.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result = result\
    \ * 16 + 0;\n        } else if (num[i] == '1') {\n            result = result\
    \ * 16 + 1;\n        } else if (num[i] == '2') {\n            result = result\
    \ * 16 + 2;\n        } else if (num[i] == '3') {\n            result = result\
    \ * 16 + 3;\n        } else if (num[i] == '4') {\n            result = result\
    \ * 16 + 4;\n        } else if (num[i] == '5') {\n            result = result\
    \ * 16 + 5;\n        } else if (num[i] == '6') {\n            result = result\
    \ * 16 + 6;\n        } else if (num[i] == '7') {\n            result = result\
    \ * 16 + 7;\n        } else if (num[i] == '8') {\n            result = result\
    \ * 16 + 8;\n        } else if (num[i] == '9') {\n            result = result\
    \ * 16 + 9;\n        } else if (num[i] == 'A') {\n            result = result\
    \ * 16 + 10;\n        } else if (num[i] == 'B') {\n            result = result\
    \ * 16 + 11;\n        } else if (num[i] == 'C') {\n            result = result\
    \ * 16 + 12;\n        } else if (num[i] == 'D') {\n            result = result\
    \ * 16 + 13;\n        } else if (num[i] == 'E') {\n            result = result\
    \ * 16 + 14;\n        } else if (num[i] == 'F') {\n            result = result\
    \ * 16 + 15;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmppqzcngx0: /tmp/tmppqzcngx0.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] == 'A') {\n            hex_key +=\
    \ 10 * pow(16, num.length() - 1 - i);\n        } else if (num[i] == 'B') {\n \
    \           hex_key += 11 * pow(16, num.length() - 1 - i);\n        } else if\
    \ (num[i] == 'C') {\n            hex_key += 12 * pow(16, num.length() - 1 - i);\n\
    \        } else if (num[i] == 'D') {\n            hex_key += 13 * pow(16, num.length()\
    \ - 1 - i);\n        } else if (num[i] == 'E') {\n            hex_key += 14 *\
    \ pow(16, num.length() - 1 - i);\n        } else if (num[i] == 'F') {\n      \
    \      hex_key += 15 * pow(16, num.length() - 1 - i);\n        } else {\n    \
    \        hex_key += (num[i] - '0') * pow(16, num.length() - 1 - i);\n        }\n\
    \    }\n    return hex_key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpytzdbtvk: /tmp/tmpytzdbtvk.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'B') {\n            key += 11 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'C') {\n            key +=\
    \ 12 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'D') {\n   \
    \         key += 13 * pow(16, num.size() - i - 1);\n        } else if (num[i]\
    \ == 'E') {\n            key += 14 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'F') {\n            key += 15 * pow(16, num.size() - i - 1);\n\
    \        } else {\n            key += (num[i] - '0') * pow(16, num.size() - i\
    \ - 1);\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0890uzqg: /tmp/tmp0890uzqg.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    // your code here\n    long sum = 0;\n  \
    \  for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n            sum++;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long sum = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '0') {\n      sum += 0;\n    } else if (num[i] ==\
    \ '1') {\n      sum += 1;\n    } else if (num[i] == '2') {\n      sum += 2;\n\
    \    } else if (num[i] == '3') {\n      sum += 3;\n    } else if (num[i] == '4')\
    \ {\n      sum += 4;\n    } else if (num[i] == '5') {\n      sum += 5;\n    }\
    \ else if (num[i] == '6') {\n      sum += 6;\n    } else if (num[i] == '7') {\n\
    \      sum += 7;\n    } else if (num[i] == '8') {\n      sum += 8;\n    } else\
    \ if (num[i] == '9') {\n      sum += 9;\n    } else if (num[i] == 'A') {\n   \
    \   sum += 10;\n    } else if (num[i] == 'B') {\n      sum += 11;\n    } else\
    \ if (num[i] == 'C') {\n      sum += 12;\n    } else if (num[i] == 'D') {\n  \
    \    sum += 13;\n    } else if (num[i] == 'E') {\n      sum += 14;\n    } else\
    \ if (num[i] == 'F') {\n      sum += 15;\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1n4kcmi6: /tmp/tmp1n4kcmi6.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'B') {\n            key += 11 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'C') {\n            key +=\
    \ 12 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'D') {\n   \
    \         key += 13 * pow(16, num.size() - i - 1);\n        } else if (num[i]\
    \ == 'E') {\n            key += 14 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'F') {\n            key += 15 * pow(16, num.size() - i - 1);\n\
    \        } else {\n            key += (num[i] - '0') * pow(16, num.size() - i\
    \ - 1);\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0890uzqg: /tmp/tmp0890uzqg.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      result++;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long res = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            res = res\
    \ * 16 + num[i] - '0';\n        } else {\n            res = res * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpc2h7w9ih: /tmp/tmpc2h7w9ih.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long sum = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      sum++;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    // your code here\n    long key = 0;\n  \
    \  for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n            key++;\n        }\n    }\n    return key;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D' || num[i] == 'E') {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpscqe0rys: /tmp/tmpscqe0rys.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') result += 0;\n        else if\
    \ (num[i] == '1') result += 1;\n        else if (num[i] == '2') result += 2;\n\
    \        else if (num[i] == '3') result += 3;\n        else if (num[i] == '4')\
    \ result += 4;\n        else if (num[i] == '5') result += 5;\n        else if\
    \ (num[i] == '6') result += 6;\n        else if (num[i] == '7') result += 7;\n\
    \        else if (num[i] == '8') result += 8;\n        else if (num[i] == '9')\
    \ result += 9;\n        else if (num[i] == 'A') result += 10;\n        else if\
    \ (num[i] == 'B') result += 11;\n        else if (num[i] == 'C') result += 12;\n\
    \        else if (num[i] == 'D') result += 13;\n        else if (num[i] == 'E')\
    \ result += 14;\n        else if (num[i] == 'F') result += 15;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsqqmst1f: /tmp/tmpsqqmst1f.cpp:38: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += (num[i]\
    \ - '0') * pow(16, num.size() - i - 1);\n        } else {\n            key +=\
    \ (num[i] - 'A' + 10) * pow(16, num.size() - i - 1);\n        }\n    }\n    return\
    \ key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmph7gb9u08: /tmp/tmph7gb9u08.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long n = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            n = n * 16\
    \ + (num[i] - '0');\n        } else {\n            n = n * 16 + (num[i] - 'A'\
    \ + 10);\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpet5eq87g: /tmp/tmpet5eq87g.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i]\
    \ - '0');\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey =\
    \ key * 16 + (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp46br_q4m: /tmp/tmp46br_q4m.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= 'A') {\n            key = key * 16 + num[i] -\
    \ 'A' + 10;\n        } else {\n            key = key * 16 + num[i] - '0';\n  \
    \      }\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmplg3uw56x: /tmp/tmplg3uw56x.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum += 1;\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (auto c : num) {\n\
    \        key *= 16;\n        if (c >= '0' && c <= '9') {\n            key += c\
    \ - '0';\n        } else if (c >= 'A' && c <= 'F') {\n            key += c - 'A'\
    \ + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp4og5097b: /tmp/tmp4og5097b.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long long sum = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D' || num[i] == 'F') {\n            sum++;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwscyd7n1: /tmp/tmpwscyd7n1.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        hex_key = hex_key * 16 + (num[i] - 'A' + 10);\n        } else {\n   \
    \         hex_key = hex_key * 16 + (num[i] - '0');\n        }\n    }\n    return\
    \ hex_key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb5i0y3gs: /tmp/tmpb5i0y3gs.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085694
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] >= '0' && num[i] <= '9') {\n      result += num[i] -\
    \ '0';\n    } else {\n      result += num[i] - 'A' + 10;\n    }\n    result *=\
    \ 16;\n  }\n  return result / 16;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpaoeoaooy: /tmp/tmpaoeoaooy.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] == '0') {\n            hex_key =\
    \ hex_key * 16 + 0;\n        } else if (num[i] == '1') {\n            hex_key\
    \ = hex_key * 16 + 1;\n        } else if (num[i] == '2') {\n            hex_key\
    \ = hex_key * 16 + 2;\n        } else if (num[i] == '3') {\n            hex_key\
    \ = hex_key * 16 + 3;\n        } else if (num[i] == '4') {\n            hex_key\
    \ = hex_key * 16 + 4;\n        } else if (num[i] == '5') {\n            hex_key\
    \ = hex_key * 16 + 5;\n        } else if (num[i] == '6') {\n            hex_key\
    \ = hex_key * 16 + 6;\n        } else if (num[i] == '7') {\n            hex_key\
    \ = hex_key * 16 + 7;\n        } else if (num[i] == '8') {\n            hex_key\
    \ = hex_key * 16 + 8;\n        } else if (num[i] == '9') {\n            hex_key\
    \ = hex_key * 16 + 9;\n        } else if (num[i] == 'A') {\n            hex_key\
    \ = hex_key * 16 + 10;\n        } else if (num[i] == 'B') {\n            hex_key\
    \ = hex_key * 16 + 11;\n        } else if (num[i] == 'C') {\n            hex_key\
    \ = hex_key * 16 + 12;\n        } else if (num[i] == 'D') {\n            hex_key\
    \ = hex_key * 16 + 13;\n        } else if (num[i] == 'E') {\n            hex_key\
    \ = hex_key * 16 + 14;\n        } else if (num[i] == 'F') {\n            hex_key\
    \ = hex_key * 16 + 15;\n        }\n    }\n    return hex_key;\n}\nint main() {\n\
    \    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpx7yxp_xm: /tmp/tmpx7yxp_xm.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D' || num[i] == 'E') {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpscqe0rys: /tmp/tmpscqe0rys.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long sum = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      sum++;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long res = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            res = res\
    \ * 16 + num[i] - '0';\n        } else {\n            res = res * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpc2h7w9ih: /tmp/tmpc2h7w9ih.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] == 'A') {\n            hex_key +=\
    \ 10;\n        } else if (num[i] == 'B') {\n            hex_key += 11;\n     \
    \   } else if (num[i] == 'C') {\n            hex_key += 12;\n        } else if\
    \ (num[i] == 'D') {\n            hex_key += 13;\n        } else if (num[i] ==\
    \ 'E') {\n            hex_key += 14;\n        } else if (num[i] == 'F') {\n  \
    \          hex_key += 15;\n        } else {\n            hex_key += num[i] - '0';\n\
    \        }\n    }\n    return hex_key;\n}\nint main() {\n    auto candidate =\
    \ hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp9_3t10by: /tmp/tmp9_3t10by.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] - '0');\n    }\n    return key;\n}\n\
    int main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) ==\
    \ (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmprqaa2cmf: /tmp/tmprqaa2cmf.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += (num[i]\
    \ - '0') * pow(16, num.size() - i - 1);\n        } else {\n            key +=\
    \ (num[i] - 'A' + 10) * pow(16, num.size() - i - 1);\n        }\n    }\n    return\
    \ key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmph7gb9u08: /tmp/tmph7gb9u08.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10;\n        } else\
    \ if (num[i] == 'B') {\n            key += 11;\n        } else if (num[i] == 'C')\
    \ {\n            key += 12;\n        } else if (num[i] == 'D') {\n           \
    \ key += 13;\n        } else if (num[i] == 'E') {\n            key += 14;\n  \
    \      } else if (num[i] == 'F') {\n            key += 15;\n        } else {\n\
    \            key += num[i] - '0';\n        }\n    }\n    return key;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo9uta3f9: /tmp/tmpo9uta3f9.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    std::string hex = \"0123456789ABCDEF\";\n\
    \    std::string primes = \"2357BD\";\n    long count = 0;\n    for (int i = 0;\
    \ i < num.length(); i++) {\n        for (int j = 0; j < primes.length(); j++)\
    \ {\n            if (num[i] == primes[j]) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') sum += 0;\n        else if (num[i] == '1')\
    \ sum += 1;\n        else if (num[i] == '2') sum += 2;\n        else if (num[i]\
    \ == '3') sum += 3;\n        else if (num[i] == '4') sum += 4;\n        else if\
    \ (num[i] == '5') sum += 5;\n        else if (num[i] == '6') sum += 6;\n     \
    \   else if (num[i] == '7') sum += 7;\n        else if (num[i] == '8') sum +=\
    \ 8;\n        else if (num[i] == '9') sum += 9;\n        else if (num[i] == 'A')\
    \ sum += 10;\n        else if (num[i] == 'B') sum += 11;\n        else if (num[i]\
    \ == 'C') sum += 12;\n        else if (num[i] == 'D') sum += 13;\n        else\
    \ if (num[i] == 'E') sum += 14;\n        else if (num[i] == 'F') sum += 15;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpi4y3qzbj: /tmp/tmpi4y3qzbj.cpp:38: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0')\n            sum += 0;\n        else if (num[i]\
    \ == '1')\n            sum += 1;\n        else if (num[i] == '2')\n          \
    \  sum += 2;\n        else if (num[i] == '3')\n            sum += 3;\n       \
    \ else if (num[i] == '4')\n            sum += 4;\n        else if (num[i] == '5')\n\
    \            sum += 5;\n        else if (num[i] == '6')\n            sum += 6;\n\
    \        else if (num[i] == '7')\n            sum += 7;\n        else if (num[i]\
    \ == '8')\n            sum += 8;\n        else if (num[i] == '9')\n          \
    \  sum += 9;\n        else if (num[i] == 'A')\n            sum += 10;\n      \
    \  else if (num[i] == 'B')\n            sum += 11;\n        else if (num[i] ==\
    \ 'C')\n            sum += 12;\n        else if (num[i] == 'D')\n            sum\
    \ += 13;\n        else if (num[i] == 'E')\n            sum += 14;\n        else\
    \ if (num[i] == 'F')\n            sum += 15;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0api2vba: /tmp/tmp0api2vba.cpp:54: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        hex_key = hex_key * 16 + (num[i] - '0');\n        } else if (num[i] >=\
    \ 'A' && num[i] <= 'F') {\n            hex_key = hex_key * 16 + (num[i] - 'A'\
    \ + 10);\n        }\n    }\n    return hex_key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7igjcc8l: /tmp/tmp7igjcc8l.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += (num[i] - '0');\n        } else {\n            result += (num[i]\
    \ - 'A' + 10);\n        }\n        result *= 16;\n    }\n    return result / 16;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbazdq8a2: /tmp/tmpbazdq8a2.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D' || num[i]\
    \ == 'F') {\n            sum++;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbr4eb1ym: /tmp/tmpbr4eb1ym.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result = result\
    \ * 16 + 0;\n        } else if (num[i] == '1') {\n            result = result\
    \ * 16 + 1;\n        } else if (num[i] == '2') {\n            result = result\
    \ * 16 + 2;\n        } else if (num[i] == '3') {\n            result = result\
    \ * 16 + 3;\n        } else if (num[i] == '4') {\n            result = result\
    \ * 16 + 4;\n        } else if (num[i] == '5') {\n            result = result\
    \ * 16 + 5;\n        } else if (num[i] == '6') {\n            result = result\
    \ * 16 + 6;\n        } else if (num[i] == '7') {\n            result = result\
    \ * 16 + 7;\n        } else if (num[i] == '8') {\n            result = result\
    \ * 16 + 8;\n        } else if (num[i] == '9') {\n            result = result\
    \ * 16 + 9;\n        } else if (num[i] == 'A') {\n            result = result\
    \ * 16 + 10;\n        } else if (num[i] == 'B') {\n            result = result\
    \ * 16 + 11;\n        } else if (num[i] == 'C') {\n            result = result\
    \ * 16 + 12;\n        } else if (num[i] == 'D') {\n            result = result\
    \ * 16 + 13;\n        } else if (num[i] == 'E') {\n            result = result\
    \ * 16 + 14;\n        } else if (num[i] == 'F') {\n            result = result\
    \ * 16 + 15;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmppqzcngx0: /tmp/tmppqzcngx0.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? (num[i] - 'A' + 10) : (num[i]\
    \ - '0'));\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpmbam_3yh: /tmp/tmpmbam_3yh.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key += (num[i] - '0') * pow(16, i);\n    }\n    return key;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2_wpk26o: /tmp/tmp2_wpk26o.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += num[i]\
    \ - '0';\n        } else {\n            key += num[i] - 'A' + 10;\n        }\n\
    \        key *= 16;\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdiisiyo5: /tmp/tmpdiisiyo5.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    std::string hex_digits = \"0123456789ABCDEF\"\
    ;\n    std::string prime_hex_digits = \"2357BD\";\n    long count = 0;\n    for\
    \ (int i = 0; i < num.length(); i++) {\n        if (prime_hex_digits.find(num[i])\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (char c : num) {\n\
    \        if (c >= '0' && c <= '9') {\n            key = key * 16 + (c - '0');\n\
    \        } else {\n            key = key * 16 + (c - 'A' + 10);\n        }\n \
    \   }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpr5tvkvc2: /tmp/tmpr5tvkvc2.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong sum = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] == '0') {\n\t\t\tsum += 0;\n\t\t}\n\t\telse if (num[i]\
    \ == '1') {\n\t\t\tsum += 1;\n\t\t}\n\t\telse if (num[i] == '2') {\n\t\t\tsum\
    \ += 2;\n\t\t}\n\t\telse if (num[i] == '3') {\n\t\t\tsum += 3;\n\t\t}\n\t\telse\
    \ if (num[i] == '4') {\n\t\t\tsum += 4;\n\t\t}\n\t\telse if (num[i] == '5') {\n\
    \t\t\tsum += 5;\n\t\t}\n\t\telse if (num[i] == '6') {\n\t\t\tsum += 6;\n\t\t}\n\
    \t\telse if (num[i] == '7') {\n\t\t\tsum += 7;\n\t\t}\n\t\telse if (num[i] ==\
    \ '8') {\n\t\t\tsum += 8;\n\t\t}\n\t\telse if (num[i] == '9') {\n\t\t\tsum +=\
    \ 9;\n\t\t}\n\t\telse if (num[i] == 'A') {\n\t\t\tsum += 10;\n\t\t}\n\t\telse\
    \ if (num[i] == 'B') {\n\t\t\tsum += 11;\n\t\t}\n\t\telse if (num[i] == 'C') {\n\
    \t\t\tsum += 12;\n\t\t}\n\t\telse if (num[i] == 'D') {\n\t\t\tsum += 13;\n\t\t\
    }\n\t\telse if (num[i] == 'E') {\n\t\t\tsum += 14;\n\t\t}\n\t\telse if (num[i]\
    \ == 'F') {\n\t\t\tsum += 15;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpcqhkviur: /tmp/tmpcqhkviur.cpp:70: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long long result = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        result += num[i] - '0';\n        } else {\n            result += num[i]\
    \ - 'A' + 10;\n        }\n        result *= 16;\n    }\n    return result / 16;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpind3gwds: /tmp/tmpind3gwds.cpp:28: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') result += 0;\n        else if\
    \ (num[i] == '1') result += 1;\n        else if (num[i] == '2') result += 2;\n\
    \        else if (num[i] == '3') result += 3;\n        else if (num[i] == '4')\
    \ result += 4;\n        else if (num[i] == '5') result += 5;\n        else if\
    \ (num[i] == '6') result += 6;\n        else if (num[i] == '7') result += 7;\n\
    \        else if (num[i] == '8') result += 8;\n        else if (num[i] == '9')\
    \ result += 9;\n        else if (num[i] == 'A') result += 10;\n        else if\
    \ (num[i] == 'B') result += 11;\n        else if (num[i] == 'C') result += 12;\n\
    \        else if (num[i] == 'D') result += 13;\n        else if (num[i] == 'E')\
    \ result += 14;\n        else if (num[i] == 'F') result += 15;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsqqmst1f: /tmp/tmpsqqmst1f.cpp:38: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmphbuoc4yr: /tmp/tmphbuoc4yr.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10;\n        } else\
    \ if (num[i] == 'B') {\n            key += 11;\n        } else if (num[i] == 'C')\
    \ {\n            key += 12;\n        } else if (num[i] == 'D') {\n           \
    \ key += 13;\n        } else if (num[i] == 'E') {\n            key += 14;\n  \
    \      } else if (num[i] == 'F') {\n            key += 15;\n        } else {\n\
    \            key += (num[i] - '0');\n        }\n        key *= 16;\n    }\n  \
    \  return key / 16;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1x0b0x0h: /tmp/tmp1x0b0x0h.cpp:38: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long long int key = 0;\n    for (int i =\
    \ 0; i < num.length(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n\
    \            key = key * 16 + (num[i] - '0');\n        } else if (num[i] >= 'A'\
    \ && num[i] <= 'F') {\n            key = key * 16 + (num[i] - 'A' + 10);\n   \
    \     }\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpj9qe_09z: /tmp/tmpj9qe_09z.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key += (num[i] - '0') * pow(16, num.size() - i - 1);\n    }\n\
    \    return key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxnbpblz0: /tmp/tmpxnbpblz0.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpok1kj4sy: /tmp/tmpok1kj4sy.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong result = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] == '0') {\n\t\t\tresult = result * 16 + 0;\n\t\t}\n\t\
    \telse if (num[i] == '1') {\n\t\t\tresult = result * 16 + 1;\n\t\t}\n\t\telse\
    \ if (num[i] == '2') {\n\t\t\tresult = result * 16 + 2;\n\t\t}\n\t\telse if (num[i]\
    \ == '3') {\n\t\t\tresult = result * 16 + 3;\n\t\t}\n\t\telse if (num[i] == '4')\
    \ {\n\t\t\tresult = result * 16 + 4;\n\t\t}\n\t\telse if (num[i] == '5') {\n\t\
    \t\tresult = result * 16 + 5;\n\t\t}\n\t\telse if (num[i] == '6') {\n\t\t\tresult\
    \ = result * 16 + 6;\n\t\t}\n\t\telse if (num[i] == '7') {\n\t\t\tresult = result\
    \ * 16 + 7;\n\t\t}\n\t\telse if (num[i] == '8') {\n\t\t\tresult = result * 16\
    \ + 8;\n\t\t}\n\t\telse if (num[i] == '9') {\n\t\t\tresult = result * 16 + 9;\n\
    \t\t}\n\t\telse if (num[i] == 'A') {\n\t\t\tresult = result * 16 + 10;\n\t\t}\n\
    \t\telse if (num[i] == 'B') {\n\t\t\tresult = result * 16 + 11;\n\t\t}\n\t\telse\
    \ if (num[i] == 'C') {\n\t\t\tresult = result * 16 + 12;\n\t\t}\n\t\telse if (num[i]\
    \ == 'D') {\n\t\t\tresult = result * 16 + 13;\n\t\t}\n\t\telse if (num[i] == 'E')\
    \ {\n\t\t\tresult = result * 16 + 14;\n\t\t}\n\t\telse if (num[i] == 'F') {\n\t\
    \t\tresult = result *\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpek_g3740.cpp: In function \u2018long int hex_key(std::string)\u2019\
    :\n/tmp/tmpek_g3740.cpp:64:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   64 | }\n      | ^\n/tmp/tmpek_g3740.cpp:65:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   65 | int main() {\n     \
    \ |            ^\n/tmp/tmpek_g3740.cpp:73:1: error: expected \u2018}\u2019 at\
    \ end of input\n   73 | }\n      | ^\n/tmp/tmpek_g3740.cpp:16:41: note: to match\
    \ this \u2018{\u2019\n   16 |  for (int i = 0; i < num.length(); i++) {\n    \
    \  |                                         ^\n/tmp/tmpek_g3740.cpp:73:1: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpek_g3740.cpp:14:31:\
    \ note: to match this \u2018{\u2019\n   14 | long hex_key(std::string num) {\n\
    \      |                               ^\n/tmp/tmpek_g3740.cpp:73:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   73 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D' || num[i] == 'E') {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpscqe0rys: /tmp/tmpscqe0rys.cpp:25: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (auto i : num)\
    \ {\n        result += i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpv31qop58: /tmp/tmpv31qop58.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long sum = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      sum++;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key += 10;\n        } else\
    \ if (num[i] == 'B') {\n            key += 11;\n        } else if (num[i] == 'C')\
    \ {\n            key += 12;\n        } else if (num[i] == 'D') {\n           \
    \ key += 13;\n        } else if (num[i] == 'E') {\n            key += 14;\n  \
    \      } else if (num[i] == 'F') {\n            key += 15;\n        } else {\n\
    \            key += num[i] - '0';\n        }\n    }\n    return key;\n}\nint main()\
    \ {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n\
    \    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\"\
    )) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo9uta3f9: /tmp/tmpo9uta3f9.cpp:37: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key += (num[i] - '0') * pow(16, num.size() - i - 1);\n    }\n\
    \    return key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxnbpblz0: /tmp/tmpxnbpblz0.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '0') {\n            result += 0;\n\
    \        } else if (num[i] == '1') {\n            result += 1;\n        } else\
    \ if (num[i] == '2') {\n            result += 2;\n        } else if (num[i] ==\
    \ '3') {\n            result += 3;\n        } else if (num[i] == '4') {\n    \
    \        result += 4;\n        } else if (num[i] == '5') {\n            result\
    \ += 5;\n        } else if (num[i] == '6') {\n            result += 6;\n     \
    \   } else if (num[i] == '7') {\n            result += 7;\n        } else if (num[i]\
    \ == '8') {\n            result += 8;\n        } else if (num[i] == '9') {\n \
    \           result += 9;\n        } else if (num[i] == 'A') {\n            result\
    \ += 10;\n        } else if (num[i] == 'B') {\n            result += 11;\n   \
    \     } else if (num[i] == 'C') {\n            result += 12;\n        } else if\
    \ (num[i] == 'D') {\n            result += 13;\n        } else if (num[i] == 'E')\
    \ {\n            result += 14;\n        } else if (num[i] == 'F') {\n        \
    \    result += 15;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ses6mcx: /tmp/tmp1ses6mcx.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        hex_key += num[i] - '0';\n        } else if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            hex_key += num[i] - 'A' + 10;\n        }\n    }\n   \
    \ return hex_key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpmmb7tkus: /tmp/tmpmmb7tkus.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] == '0') {\n      result += 0;\n    } else if (num[i]\
    \ == '1') {\n      result += 1;\n    } else if (num[i] == '2') {\n      result\
    \ += 2;\n    } else if (num[i] == '3') {\n      result += 3;\n    } else if (num[i]\
    \ == '4') {\n      result += 4;\n    } else if (num[i] == '5') {\n      result\
    \ += 5;\n    } else if (num[i] == '6') {\n      result += 6;\n    } else if (num[i]\
    \ == '7') {\n      result += 7;\n    } else if (num[i] == '8') {\n      result\
    \ += 8;\n    } else if (num[i] == '9') {\n      result += 9;\n    } else if (num[i]\
    \ == 'A') {\n      result += 10;\n    } else if (num[i] == 'B') {\n      result\
    \ += 11;\n    } else if (num[i] == 'C') {\n      result += 12;\n    } else if\
    \ (num[i] == 'D') {\n      result += 13;\n    } else if (num[i] == 'E') {\n  \
    \    result += 14;\n    } else if (num[i] == 'F') {\n      result += 15;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = hex_key;\n \
    \   assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpftpfth3s: /tmp/tmpftpfth3s.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += (num[i]\
    \ - '0') * pow(16, num.size() - i - 1);\n        } else {\n            key +=\
    \ (num[i] - 'A' + 10) * pow(16, num.size() - i - 1);\n        }\n    }\n    return\
    \ key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmph7gb9u08: /tmp/tmph7gb9u08.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    std::string hex_digits = \"0123456789ABCDEF\"\
    ;\n    std::string prime_hex_digits = \"2357BD\";\n    long count = 0;\n    for\
    \ (int i = 0; i < num.length(); i++) {\n        if (prime_hex_digits.find(num[i])\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long sum = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      sum++;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '0') {\n            sum += 0;\n        } else\
    \ if (num[i] == '1') {\n            sum += 1;\n        } else if (num[i] == '2')\
    \ {\n            sum += 2;\n        } else if (num[i] == '3') {\n            sum\
    \ += 3;\n        } else if (num[i] == '4') {\n            sum += 4;\n        }\
    \ else if (num[i] == '5') {\n            sum += 5;\n        } else if (num[i]\
    \ == '6') {\n            sum += 6;\n        } else if (num[i] == '7') {\n    \
    \        sum += 7;\n        } else if (num[i] == '8') {\n            sum += 8;\n\
    \        } else if (num[i] == '9') {\n            sum += 9;\n        } else if\
    \ (num[i] == 'A') {\n            sum += 10;\n        } else if (num[i] == 'B')\
    \ {\n            sum += 11;\n        } else if (num[i] == 'C') {\n           \
    \ sum += 12;\n        } else if (num[i] == 'D') {\n            sum += 13;\n  \
    \      } else if (num[i] == 'E') {\n            sum += 14;\n        } else if\
    \ (num[i] == 'F') {\n            sum += 15;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzty3n3v5: /tmp/tmpzty3n3v5.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long hex_key = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (num[i] == '0') {\n            hex_key +=\
    \ 0;\n        } else if (num[i] == '1') {\n            hex_key += 1;\n       \
    \ } else if (num[i] == '2') {\n            hex_key += 2;\n        } else if (num[i]\
    \ == '3') {\n            hex_key += 3;\n        } else if (num[i] == '4') {\n\
    \            hex_key += 4;\n        } else if (num[i] == '5') {\n            hex_key\
    \ += 5;\n        } else if (num[i] == '6') {\n            hex_key += 6;\n    \
    \    } else if (num[i] == '7') {\n            hex_key += 7;\n        } else if\
    \ (num[i] == '8') {\n            hex_key += 8;\n        } else if (num[i] == '9')\
    \ {\n            hex_key += 9;\n        } else if (num[i] == 'A') {\n        \
    \    hex_key += 10;\n        } else if (num[i] == 'B') {\n            hex_key\
    \ += 11;\n        } else if (num[i] == 'C') {\n            hex_key += 12;\n  \
    \      } else if (num[i] == 'D') {\n            hex_key += 13;\n        } else\
    \ if (num[i] == 'E') {\n            hex_key += 14;\n        } else if (num[i]\
    \ == 'F') {\n            hex_key += 15;\n        }\n    }\n    return hex_key;\n\
    }\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"))\
    \ == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmppdc8htfb: /tmp/tmppdc8htfb.cpp:55: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else {\n            key = key * 16 + num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return key;\n}\nint main() {\n    auto candidate\
    \ = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"\
    1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2vplxgxd: /tmp/tmp2vplxgxd.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i]\
    \ - '0');\n    }\n    return key;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo0mn1cce: /tmp/tmpo0mn1cce.cpp:23: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n\tlong sum = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n\t\t\tsum++;\n\t\t}\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085696
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            sum++;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085691
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = hex_key;\n\
    \    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) ==\
    \ (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"\
    2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n   \
    \ assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to\
    \ write a function that receives \n// a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n// digits that are primes (prime number, or a prime,\
    \ is a natural number \n// greater than 1 that is not a product of two smaller\
    \ natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal\
    \ 11), D (=decimal 13).\n// Note: you may assume the input is always correct or\
    \ empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
    long hex_key(std::string num) {\n  long key = 0;\n  for (auto c : num) {\n   \
    \ if (c >= '0' && c <= '9') {\n      key = key * 16 + c - '0';\n    } else if\
    \ (c >= 'A' && c <= 'F') {\n      key = key * 16 + c - 'A' + 10;\n    }\n  }\n\
    \  return key;\n}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"\
    AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
    ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
    123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12));\n}\n"
  status: Exception
  stderr: 'tmpckxz5anr: /tmp/tmpckxz5anr.cpp:27: int main(): Assertion `candidate(("AB"))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660085695
