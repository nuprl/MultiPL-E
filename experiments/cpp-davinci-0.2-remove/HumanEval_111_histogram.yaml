name: HumanEval_111_histogram
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
  \ a space separated lowercase letters, return a dictionary\n// of the letter with\
  \ the most repetition and containing the corresponding count.\n// If several letters\
  \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
  \ histogram(std::string test) {\n"
tests: "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
  a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1},\
  \ {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"\
  b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
  \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
  }\n"
completions: ["    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;",
  "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item) ==\
    \ result.end()) {\n      result[item] = 1;\n    } else {\n      result[item] +=\
    \ 1;\n    }\n  }\n  return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,token,'\
    \ ')){\n        it = result.find(token);\n        if(it == result.end()){\n  \
    \          result.insert(std::pair<std::string,long>(token,1));\n        }\n \
    \       else{\n            it->second++;\n        }\n    }\n    return result;",
  "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n  }\n  return\
    \ hist;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        result[word]++;\n   \
    \ }\n    return result;", "    std::map<std::string,long> hist;\n    for(int i=0;i<test.length();i++){\n\
    \        std::string temp(1,test[i]);\n        hist[temp]++;\n    }\n    return\
    \ hist;", "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;",
  "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item) ==\
    \ result.end()) {\n      result[item] = 1;\n    } else {\n      result[item]++;\n\
    \    }\n  }\n  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item] += 1;\n    }\n  }\n  return result;",
  "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   if(result.find(token) == result.end()) {\n      result[token] = 1;\n    }\
    \ else {\n      result[token]++;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item) ==\
    \ result.end()) {\n      result[item] = 1;\n    } else {\n      result[item]++;\n\
    \    }\n  }\n  return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(getline(ss,item,' ')) {\n    if(hist.find(item)\
    \ == hist.end()) {\n      hist[item] = 1;\n    } else {\n      hist[item] += 1;\n\
    \    }\n  }\n  return hist;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >>\
    \ word) {\n        it = result.find(word);\n        if(it != result.end()) {\n\
    \            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(word,1));\n\
    \        }\n    }\n    return result;", "  std::map<std::string,long> result;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   result[word]++;\n  }\n  return result;", "    std::map<std::string,long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return result;", " \
    \   std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (result.find(item)\
    \ == result.end()) {\n            result[item] = 1;\n        } else {\n      \
    \      result[item]++;\n        }\n    }\n    return result;", "  std::map<std::string,long>\
    \ dict;\n  std::stringstream ss(test);\n  std::string token;\n  while(std::getline(ss,\
    \ token, ' ')) {\n    if(dict.find(token) == dict.end()) {\n      dict[token]\
    \ = 1;\n    } else {\n      dict[token] += 1;\n    }\n  }\n  return dict;", " \
    \   std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while(ss >> word) {\n        result[word]++;\n    }\n    return result;",
  "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while(ss >> word) {\n        result[word]++;\n    }\n    return result;",
  "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while(std::getline(ss,item,' ')){\n    hist[item]++;\n  }\n  return\
    \ hist;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n\
    \  std::string token;\n  while(std::getline(ss, token, ' ')) {\n    hist[token]++;\n\
    \  }\n  return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \   std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (result.find(item)\
    \ == result.end()) {\n            result[item] = 1;\n        } else {\n      \
    \      result[item]++;\n        }\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item) ==\
    \ result.end()) {\n      result[item] = 1;\n    } else {\n      result[item] +=\
    \ 1;\n    }\n  }\n  return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> dict;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        dict[token]++;\n    }\n    return dict;", "    std::map<std::string,long>\
    \ hist;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        hist[word]++;\n    }\n    return hist;", "    std::map<std::string,long>\
    \ result;\n    for(int i = 0; i < test.length(); i++) {\n        std::string letter\
    \ = test.substr(i,1);\n        if(result.find(letter) == result.end()) {\n   \
    \         result[letter] = 1;\n        } else {\n            result[letter] +=\
    \ 1;\n        }\n    }\n    return result;", "    std::map<std::string,long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long> result;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   result[word]++;\n  }\n  return result;", "    std::map<std::string,long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item] += 1;\n     \
    \   }\n    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item] += 1;\n     \
    \   }\n    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> mymap;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word)\n        mymap[word]++;\n\
    \    return mymap;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::map<std::string,long>::iterator it;\n    std::string::iterator\
    \ it2;\n    for(it2 = test.begin(); it2 != test.end(); it2++) {\n        std::string\
    \ temp = *it2;\n        it = result.find(temp);\n        if(it != result.end())\
    \ {\n            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(temp,1));\n\
    \        }\n    }\n    return result;", "  std::map<std::string,long> m;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    m[word]++;\n  }\n\
    \  return m;", "    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;", "    std::map<std::string,long> hist;\n    long max = 0;\n\
    \    std::string max_letter;\n    for(int i = 0; i < test.length(); i++) {\n \
    \       std::string letter = test.substr(i,1);\n        if(hist.find(letter) ==\
    \ hist.end()) {\n            hist[letter] = 1;\n        } else {\n           \
    \ hist[letter]++;\n        }\n        if(hist[letter] > max) {\n            max\
    \ = hist[letter];\n            max_letter = letter;\n        }\n    }\n    std::map<std::string,long>\
    \ result;\n    result[max_letter] = max;\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n  }\n  return\
    \ hist;", "  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string token;\n  while(std::getline(ss,\
    \ token, ' ')) {\n    it = result.find(token);\n    if(it != result.end()) {\n\
    \      it->second += 1;\n    } else {\n      result.insert(std::pair<std::string,long>(token,1));\n\
    \    }\n  }\n  return result;", "  std::map<std::string,long> hist;\n  for(int\
    \ i = 0; i < test.length(); i++) {\n    std::string letter = test.substr(i,1);\n\
    \    if(hist.find(letter) == hist.end()) {\n      hist[letter] = 1;\n    } else\
    \ {\n      hist[letter]++;\n    }\n  }\n  return hist;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long> result;\n\
    \  std::map<std::string,long>::iterator it;\n  std::stringstream ss(test);\n \
    \ std::string token;\n  while(std::getline(ss, token, ' ')) {\n    it = result.find(token);\n\
    \    if(it == result.end()) {\n      result.insert(std::pair<std::string,long>(token,1));\n\
    \    } else {\n      it->second++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string item;\n  while(std::getline(ss,item,'\
    \ ')) {\n    hist[item]++;\n  }\n  return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item] += 1;\n     \
    \   }\n    }\n    return result;", "    std::map<std::string,long> result;\n \
    \   std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string item;\n  while(std::getline(ss,item,'\
    \ ')) {\n    hist[item]++;\n  }\n  return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        result[word]++;\n   \
    \ }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item] += 1;\n    }\n  }\n  return result;",
  "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ token;\n  while(std::getline(ss, token, ' ')) {\n    result[token]++;\n  }\n\
    \  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    result[item]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \   std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while(ss >> word) {\n        result[word]++;\n    }\n    return result;",
  "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (result.find(item)\
    \ == result.end()) {\n            result[item] = 1;\n        } else {\n      \
    \      result[item]++;\n        }\n    }\n    return result;", "  std::map<std::string,long>\
    \ dict;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    dict[word]++;\n  }\n  return dict;", "  std::map<std::string,long> hist;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   hist[word]++;\n  }\n  return hist;", "    std::map<std::string,long> hist;\n\
    \    std::stringstream ss(test);\n    std::string word;\n    while(ss >> word)\
    \ {\n        hist[word]++;\n    }\n    return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss\
    \ >> temp) {\n        result[temp]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) != result.end()) {\n      result[item]++;\n    } else\
    \ {\n      result[item] = 1;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item] += 1;\n    }\n  }\n  return result;",
  "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (result.find(item)\
    \ == result.end()) {\n            result[item] = 1;\n        } else {\n      \
    \      result[item] += 1;\n        }\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \   std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while(ss >> word) {\n        hist[word]++;\n    }\n    return hist;",
  "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    result[word]++;\n  }\n  return result;", " \
    \ std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long>\
    \ hist;\n  for(int i = 0; i < test.length(); i++) {\n    std::string letter =\
    \ std::string(1, test[i]);\n    if(hist.find(letter) == hist.end()) {\n      hist[letter]\
    \ = 1;\n    } else {\n      hist[letter] += 1;\n    }\n  }\n  return hist;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item) ==\
    \ result.end()) {\n      result[item] = 1;\n    } else {\n      result[item]++;\n\
    \    }\n  }\n  return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "  std::map<std::string,long> result;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item)\
    \ == result.end()) {\n      result[item] = 1;\n    } else {\n      result[item]\
    \ += 1;\n    }\n  }\n  return result;", "    std::map<std::string,long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item] += 1;\n     \
    \   }\n    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string item;\n  while(std::getline(ss,item,'\
    \ ')) {\n    hist[item]++;\n  }\n  return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item] += 1;\n     \
    \   }\n    }\n    return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ hist;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        hist[word]++;\n    }\n    return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long> result;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   result[word]++;\n  }\n  return result;", "    std::map<std::string,long> result;\n\
    \    std::map<std::string,long>::iterator it;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        it = result.find(word);\n\
    \        if(it != result.end()) {\n            it->second++;\n        } else {\n\
    \            result.insert(std::pair<std::string,long>(word,1));\n        }\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> hist;\n    for(int\
    \ i = 0; i < test.length(); i++) {\n        std::string letter = test.substr(i,1);\n\
    \        if(hist.find(letter) == hist.end()) {\n            hist[letter] = 1;\n\
    \        } else {\n            hist[letter] += 1;\n        }\n    }\n    return\
    \ hist;", "    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss >>\
    \ temp) {\n        it = result.find(temp);\n        if(it != result.end()) {\n\
    \            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(temp,1));\n\
    \        }\n    }\n    return result;", "  std::map<std::string,long> result;\n\
    \  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string\
    \ token;\n  while(std::getline(ss, token, ' ')) {\n    result[token]++;\n  }\n\
    \  return result;", "  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if(result.find(token)\
    \ != result.end()) {\n            result[token]++;\n        } else {\n       \
    \     result[token] = 1;\n        }\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        if(result.find(token) != result.end()) {\n         \
    \   result[token]++;\n        } else {\n            result[token] = 1;\n     \
    \   }\n    }\n    return result;", "    std::map<std::string,long> result;\n \
    \   std::stringstream ss(test);\n    std::string word;\n    while(ss >> word)\
    \ {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \   std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while(ss >> word) {\n        result[word]++;\n    }\n    return result;",
  "  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string item;\n  while(std::getline(ss,item,'\
    \ ')) {\n    hist[item]++;\n  }\n  return hist;", "  std::map<std::string,long>\
    \ hist;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long> hist;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   hist[word]++;\n  }\n  return hist;", "  std::map<std::string,long> result;\n\
    \  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word) {\n \
    \   result[word]++;\n  }\n  return result;", "  std::map<std::string,long> hist;\n\
    \  std::stringstream ss(test);\n  std::string token;\n  while(std::getline(ss,\
    \ token, ' ')) {\n    hist[token]++;\n  }\n  return hist;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \ std::map<std::string,long> dict;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while(ss >> word) {\n    dict[word]++;\n  }\n  return dict;", "   \
    \ std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (result.find(item)\
    \ == result.end()) {\n            result[item] = 1;\n        } else {\n      \
    \      result[item] += 1;\n        }\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item]++;\n    }\n  }\n  return result;", " \
    \   std::map<std::string,long> hist;\n    for(auto c: test) {\n        std::string\
    \ s(1,c);\n        hist[s]++;\n    }\n    return hist;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result[item]++;\n    }\n    return result;"]
stop_tokens:
- "\n}"
