language: cpp
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv6n3lnbx: /tmp/tmpv6n3lnbx.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpywlgmcrf: /tmp/tmpywlgmcrf.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  result += \"db\";\n  std::reverse(result.begin() + 2, result.end() - 2);\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq7gypaws: /tmp/tmpq7gypaws.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprvibrthc: /tmp/tmprvibrthc.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp3cuokmjx: /tmp/tmp3cuokmjx.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin(), binary.end());\n  return \"db\" + binary + \"\
    db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr5ohfkuw: /tmp/tmpr5ohfkuw.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = std::to_string(decimal % 2) + binary;\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplssylk0h: /tmp/tmplssylk0h.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal != 0) {\n        if (decimal % 2 == 0) {\n            binary += \"\
    0\";\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdsseyv_k: /tmp/tmpdsseyv_k.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  result += \"db\";\n  std::reverse(result.begin() + 2, result.end() - 2);\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq7gypaws: /tmp/tmpq7gypaws.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(result.begin() + 2, result.end());\n  result += \"db\";\n  return\
    \ result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpf9fbu_np: /tmp/tmpf9fbu_np.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      result += \"0\";\n    } else {\n\
    \      result += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppfipzlvu: /tmp/tmppfipzlvu.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv6n3lnbx: /tmp/tmpv6n3lnbx.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal != 0) {\n        if (decimal % 2 == 0) {\n            binary += \"\
    0\";\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqlp27q2j: /tmp/tmpqlp27q2j.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp504wwjn8: /tmp/tmp504wwjn8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv6n3lnbx: /tmp/tmpv6n3lnbx.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp504wwjn8: /tmp/tmp504wwjn8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal)\
    \ {\n    binary += decimal % 2 + '0';\n    decimal /= 2;\n  }\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpi7901oza: /tmp/tmpi7901oza.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ != 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return \"\
    db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpm6go0w8z: /tmp/tmpm6go0w8z.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary;\n  while (decimal >\
    \ 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n \
    \ std::reverse(binary.begin(), binary.end());\n  return \"db\" + binary + \"db\"\
    ;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptntvdxn8: /tmp/tmptntvdxn8.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result;\n    while (decimal\
    \ > 0) {\n        result.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return \"db\" + result\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprnn7tofg: /tmp/tmprnn7tofg.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result;\n  while (decimal >\
    \ 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n \
    \ std::reverse(result.begin(), result.end());\n  return \"db\" + result + \"db\"\
    ;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1i2ivo7v: /tmp/tmp1i2ivo7v.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprvibrthc: /tmp/tmprvibrthc.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp504wwjn8: /tmp/tmp504wwjn8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += (decimal % 2 == 0) ? \"0\" : \"1\";\n   \
    \     decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpcs0dpp6o: /tmp/tmpcs0dpp6o.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv6n3lnbx: /tmp/tmpv6n3lnbx.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp504wwjn8: /tmp/tmp504wwjn8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp0dp_p78c: /tmp/tmp0dp_p78c.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdj4izoxx: /tmp/tmpdj4izoxx.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  result += \"db\";\n  std::reverse(result.begin() + 2, result.end() - 2);\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq7gypaws: /tmp/tmpq7gypaws.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp7mzkpznu: /tmp/tmp7mzkpznu.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = std::to_string(decimal % 2) + binary;\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplssylk0h: /tmp/tmplssylk0h.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.insert(binary.begin(), (decimal % 2) + '0');\n      \
    \  decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmparxvjl48: /tmp/tmparxvjl48.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp62dqidla: /tmp/tmp62dqidla.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary.push_back(decimal % 2 + '0');\n    decimal /= 2;\n  }\n \
    \ binary.push_back('b');\n  std::reverse(binary.begin() + 2, binary.end() - 1);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpn__vpcl_: /tmp/tmpn__vpcl_.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary;\n  while (decimal >\
    \ 0) {\n    binary.insert(0, std::to_string(decimal % 2));\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_mgjtvss: /tmp/tmp_mgjtvss.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary_string = \"db\";\n \
    \ while (decimal > 0) {\n    binary_string += std::to_string(decimal % 2);\n \
    \   decimal /= 2;\n  }\n  std::reverse(binary_string.begin() + 2, binary_string.end());\n\
    \  binary_string += \"db\";\n  return binary_string;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppu4b6eu9: /tmp/tmppu4b6eu9.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpuz8051i_: /tmp/tmpuz8051i_.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary;\n  binary.push_back('d');\n\
    \  binary.push_back('b');\n  while (decimal != 0) {\n    binary.push_back(decimal\
    \ % 2 + '0');\n    decimal /= 2;\n  }\n  binary.push_back('b');\n  binary.push_back('d');\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpldl7pwzv: /tmp/tmpldl7pwzv.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpevay7j93: /tmp/tmpevay7j93.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary;\n  while (decimal !=\
    \ 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n \
    \ std::reverse(binary.begin(), binary.end());\n  return \"db\" + binary + \"db\"\
    ;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpm1_u66q9: /tmp/tmpm1_u66q9.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string result = \"db\";\n  while (decimal\
    \ > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  result += \"db\";\n  std::reverse(result.begin() + 2, result.end() - 2);\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq7gypaws: /tmp/tmpq7gypaws.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary;\n  while (decimal >\
    \ 0) {\n    binary.push_back(decimal % 2 + '0');\n    decimal /= 2;\n  }\n  std::reverse(binary.begin(),\
    \ binary.end());\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpf5zj9r96: /tmp/tmpf5zj9r96.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprvibrthc: /tmp/tmprvibrthc.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkveg0o8o: /tmp/tmpkveg0o8o.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp62dqidla: /tmp/tmp62dqidla.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp7mzkpznu: /tmp/tmp7mzkpznu.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while\
    \ (decimal > 0) {\n        result += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    std::reverse(result.begin() + 2, result.end()\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpld9o2hwd: /tmp/tmpld9o2hwd.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal) {\n        binary += (decimal % 2) ? '1' : '0';\n        decimal /=\
    \ 2;\n    }\n    reverse(binary.begin() + 2, binary.end());\n    binary += \"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp8s7a5zst: /tmp/tmp8s7a5zst.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal\
    \ > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin(), binary.end());\n    return \"db\" + binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp62dqidla: /tmp/tmp62dqidla.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\"\
    ;\n        } else {\n            binary += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpeshnf81b: /tmp/tmpeshnf81b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp8hard0e4: /tmp/tmp8hard0e4.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkw_36hes: /tmp/tmpkw_36hes.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr0ey5pxg: /tmp/tmpr0ey5pxg.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp174ce97c: /tmp/tmp174ce97c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy8wve_41: /tmp/tmpy8wve_41.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk3t8ik11: /tmp/tmpk3t8ik11.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"db\";\n    while\
    \ (decimal > 0) {\n        binary.push_back('0' + (decimal % 2));\n        decimal\
    \ /= 2;\n    }\n    binary.push_back('b');\n    std::reverse(binary.begin() +\
    \ 2, binary.end() - 1);\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp3e05zgtx: /tmp/tmp3e05zgtx.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_quwrntd: /tmp/tmp_quwrntd.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n\
    \      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  binary += \"db\";\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppefrxj9w: /tmp/tmppefrxj9w.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660077832
