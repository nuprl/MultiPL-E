name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n      \
    \  if (n % i == 0) {\n            largest = i;\n            n /= i;\n        \
    \    i--;\n        }\n    }\n    return largest;", "    long largest_prime = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;", "    long max_factor = 1;\n   \
    \ for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return max_factor;", "    long largest_prime = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 2;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n\
    \            largest_prime = i;\n            n /= i;\n        }\n    }\n    if\
    \ (n > 2) {\n        largest_prime = n;\n    }\n    return largest_prime;", " \
    \   long largest_prime = 1;\n    while (n % 2 == 0) {\n        largest_prime =\
    \ 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n \
    \       while (n % i == 0) {\n            largest_prime = i;\n            n /=\
    \ i;\n        }\n    }\n    if (n > 2) {\n        largest_prime = n;\n    }\n\
    \    return largest_prime;", "    long largest_prime = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    return largest;", "    long\
    \ largest = 0;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largest\
    \ = n;\n    }\n    return largest;", "    long largest_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_factor;", "    long largest = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest;",
  "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            largest_factor = factor;\n           \
    \ while (n % factor == 0) {\n                n /= factor;\n            }\n   \
    \     }\n        factor++;\n    }\n    return largest_factor;", "    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    if (n > largest_prime_factor) {\n   \
    \     largest_prime_factor = n;\n    }\n    return largest_prime_factor;", " \
    \   long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n            i--;\n        }\n    }\n    return i;", "    long\
    \ largest_prime = 1;\n    while (n % 2 == 0) {\n        largest_prime = 2;\n \
    \       n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n       \
    \ while (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        }\n    }\n    if (n > 2) {\n        largest_prime = n;\n    }\n    return\
    \ largest_prime;", "    long largest_prime = 1;\n    for (long i = 2; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n        \
    \    while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime;", "  long largest = 0;\n  for (long i = 2; i\
    \ <= n; i++) {\n    if (n % i == 0) {\n      largest = i;\n      n /= i;\n   \
    \   i--;\n    }\n  }\n  return largest;", "  long largest_factor = 1;\n  long\
    \ factor = 2;\n  while (n > 1) {\n    while (n % factor == 0) {\n      largest_factor\
    \ = factor;\n      n /= factor;\n    }\n    factor++;\n  }\n  return largest_factor;",
  "    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   if (n % i == 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n            i--;\n        }\n    }\n    return largest_prime_factor;", " \
    \   long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long i;\n    for\
    \ (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            n /= i;\n   \
    \         i--;\n        }\n    }\n    return i;", "    long largest_prime = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest = 0;\n \
    \   for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest;",
  "    long largest_prime = 1;\n    for (long i = 2; i * i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n >\
    \ 1) {\n        largest_prime = n;\n    }\n    return largest_prime;", "    long\
    \ largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            largest = i;\n            while (n % i == 0) {\n                n\
    \ /= i;\n            }\n        }\n    }\n    return largest;", "    long largest_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_factor = i;\n            while (n % i == 0) {\n              \
    \  n /= i;\n            }\n        }\n    }\n    return largest_factor;", "  \
    \  long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    return largest;", "    long\
    \ largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest_prime = i;\n            while (n % i == 0) {\n   \
    \             n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor ==\
    \ 0) {\n            largest_factor = factor;\n            n /= factor;\n     \
    \   }\n        factor++;\n    }\n    return largest_factor;", "  long largest_factor\
    \ = 0;\n  long factor = 2;\n  while (n > 1) {\n    if (n % factor == 0) {\n  \
    \    largest_factor = factor;\n      n /= factor;\n      while (n % factor ==\
    \ 0) {\n        n /= factor;\n      }\n    }\n    factor++;\n  }\n  return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "  long largest = 1;\n  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n\
    \      largest = i;\n      while (n % i == 0) {\n        n /= i;\n      }\n  \
    \  }\n  }\n  return largest;", "    long largest = 0;\n    for (long i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n        \
    \    while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest;", "    long largest_prime = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;", "    long largest_prime = 0;\n    for (long i\
    \ = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_factor = 1;\n    long d = 2;\n    while (d * d <= n) {\n     \
    \   if (n % d == 0) {\n            largest_factor = d;\n            while (n %\
    \ d == 0) {\n                n /= d;\n            }\n        }\n        d += 1;\n\
    \    }\n    if (n > 1) {\n        largest_factor = n;\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  }\n    }\n    return largest_prime;", "    long largest = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return largest;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long i;\n    for\
    \ (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;", "    long largest_prime = 1;\n    long\
    \ i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    if (n > largest_prime) {\n        largest_prime = n;\n    }\n    return\
    \ largest_prime;", "    long largest = -1;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest = i;\n            while (n\
    \ % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if\
    \ (n > 1) {\n        largest = n;\n    }\n    return largest;", "    long largest\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest = i;\n            n /= i;\n            i--;\n        }\n    }\n\
    \    return largest;", "    long largest_prime = 0;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n     \
    \       n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            n /= i;\n            i--;\n    \
    \    }\n    }\n    return largest;", "  long i;\n  for (i = 2; i < n; i++) {\n\
    \    if (n % i == 0) {\n      return largest_prime_factor(n / i);\n    }\n  }\n\
    \  return n;", "    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest = i;\n            n /= i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return largest;", " \
    \   long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    return factor\
    \ - 1;", "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_prime = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;", "  long largest_prime_factor = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      largest_prime_factor = i;\n\
    \      n /= i;\n      i--;\n    }\n  }\n  return largest_prime_factor;", "   \
    \ long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++) {\n      \
    \  if (n % i == 0) {\n            largest_prime_factor = i;\n            while\
    \ (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n \
    \   return largest_prime_factor;", "    long largest_prime = 1;\n    long i =\
    \ 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    if (n > largest_prime) {\n        largest_prime = n;\n    }\n    return\
    \ largest_prime;", "    long largest_factor = 1;\n    long d = 2;\n    while (d\
    \ * d <= n) {\n        if (n % d == 0) {\n            largest_factor = d;\n  \
    \          n /= d;\n        } else {\n            d += 1;\n        }\n    }\n\
    \    if (n > 1) {\n        largest_factor = n;\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest_factor = 1;\n    long i = 2;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n    \
    \    largest_factor = n;\n    }\n    return largest_factor;", "    long largest_prime\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            while (n % i == 0) {\n               \
    \ n /= i;\n            }\n        }\n    }\n    return largest_prime;", "    long\
    \ largest_prime = 1;\n    long factor = 2;\n    while (n > 1) {\n        if (n\
    \ % factor == 0) {\n            largest_prime = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) {\n                n /= factor;\n       \
    \     }\n        }\n        factor++;\n    }\n    return largest_prime;", "  \
    \  long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            largest_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0) {\n                n /= factor;\n\
    \            }\n        }\n        factor++;\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime\
    \ = 1;\n    while (n % 2 == 0) {\n        largest_prime = 2;\n        n /= 2;\n\
    \    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i ==\
    \ 0) {\n            largest_prime = i;\n            n /= i;\n        }\n    }\n\
    \    if (n > 2) {\n        largest_prime = n;\n    }\n    return largest_prime;",
  "    long largest_prime = 2;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n\
    \            largest_prime = i;\n            n /= i;\n        }\n    }\n    if\
    \ (n > 2) {\n        largest_prime = n;\n    }\n    return largest_prime;", " \
    \   long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest;", "    long max_factor = 1;\n    long\
    \ factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n      \
    \      max_factor = factor;\n            n /= factor;\n        }\n        factor\
    \ += 1;\n    }\n    return max_factor;", "    long largest_prime = 2;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            largest_factor = factor;\n           \
    \ while (n % factor == 0) {\n                n /= factor;\n            }\n   \
    \     }\n        factor++;\n    }\n    return largest_factor;", "    long largest_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            largest_factor = factor;\n            while (n % factor == 0)\
    \ {\n                n /= factor;\n            }\n        }\n        factor++;\n\
    \    }\n    return largest_factor;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_factor = i;\n            while (n % i == 0) {\n              \
    \  n /= i;\n            }\n        }\n    }\n    return largest_factor;", "  \
    \  long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            largest_factor = factor;\n           \
    \ while (n % factor == 0) {\n                n /= factor;\n            }\n   \
    \     }\n        factor++;\n    }\n    return largest_factor;", "    long largest_prime\
    \ = -1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n    \
    \        largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "  long largest_prime = 1;\n  for (long i\
    \ = 2; i <= n; i++) {\n    if (n % i == 0) {\n      largest_prime = i;\n     \
    \ n /= i;\n      i--;\n    }\n  }\n  return largest_prime;", "    long largest\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest = i;\n            while (n % i == 0) {\n                n /= i;\n\
    \            }\n        }\n    }\n    return largest;", "    long largest_prime\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_factor =\
    \ 1;\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor ==\
    \ 0) {\n            largest_factor = factor;\n            n /= factor;\n     \
    \   }\n        factor++;\n    }\n    return largest_factor;", "    long largest_prime\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long i;\n    for (i =\
    \ 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            n /= i;\n    \
    \    }\n    }\n    return n;", "    long largest_prime = 1;\n    for (long i =\
    \ 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime_factor\
    \ = 1;\n    // Check if n is divisible by 2.\n    if (n % 2 == 0) {\n        largest_prime_factor\
    \ = 2;\n        // Keep dividing by 2 until n is no longer divisible by 2.\n \
    \       while (n % 2 == 0) {\n            n /= 2;\n        }\n    }\n    // n\
    \ is now odd.\n    // Check if n is divisible by odd numbers up to sqrt(n).\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            // Keep dividing by i until n\
    \ is no longer divisible by i.\n            while (n % i == 0) {\n           \
    \     n /= i;\n            }\n        }\n    }\n    // n is now the largest prime\
    \ factor.\n    if (n > 2) {\n        largest_prime_factor = n;\n    }\n    return\
    \ largest_prime_factor;", "    long largest_prime = 2;\n    while (n % 2 == 0)\
    \ {\n        n /= 2;\n    }\n    for (long i = 3; i <= n; i += 2) {\n        while\
    \ (n % i == 0) {\n            n /= i;\n            largest_prime = i;\n      \
    \  }\n    }\n    return largest_prime;", "    long largest_prime_factor = 1;\n\
    \    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n \
    \           largest_prime_factor = factor;\n            n /= factor;\n       \
    \     while (n % factor == 0) {\n                n /= factor;\n            }\n\
    \        }\n        factor++;\n    }\n    return largest_prime_factor;", "   \
    \ long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    return largest;", "    long\
    \ largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            largest = i;\n            while (n % i == 0) {\n                n\
    \ /= i;\n            }\n        }\n    }\n    return largest;", "    long largest_prime\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_factor = 1;\n    long factor\
    \ = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            largest_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   return largest_factor;", "    long largest_prime_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime_factor;", "    long largest_prime\
    \ = 2;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for (long i = 3;\
    \ i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        largest_prime\
    \ = n;\n    }\n    return largest_prime;", "    long largest_prime = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_prime_factor\
    \ = 1;\n    long d = 2;\n    while (d * d <= n) {\n        if (n % d == 0) {\n\
    \            largest_prime_factor = d;\n            while (n % d == 0) {\n   \
    \             n /= d;\n            }\n        }\n        d += 1;\n    }\n    if\
    \ (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;",
  "    long largest_factor = 1;\n    long d = 2;\n    while (d * d <= n) {\n     \
    \   if (n % d == 0) {\n            largest_factor = d;\n            n /= d;\n\
    \        } else {\n            d++;\n        }\n    }\n    if (n > 1) { // The\
    \ remainder is a prime number\n        largest_factor = n;\n    }\n    return\
    \ largest_factor;", "  long largest_prime = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      largest_prime = i;\n      while (n % i == 0)\
    \ {\n        n /= i;\n      }\n    }\n  }\n  return largest_prime;", "    long\
    \ largest_prime = 2;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for\
    \ (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n       \
    \     n /= i;\n            largest_prime = i;\n        }\n    }\n    if (n > 2)\
    \ {\n        largest_prime = n;\n    }\n    return largest_prime;", "    long\
    \ largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest_prime = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest_prime;", "    long largest_prime = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_factor = i;\n            n /= i;\n        \
    \    i--;\n        }\n    }\n    return largest_factor;", "    long largest_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            largest_factor = factor;\n            while (n % factor == 0)\
    \ {\n                n /= factor;\n            }\n        }\n        factor++;\n\
    \    }\n    return largest_factor;", "    long largest = 0;\n    for (long i =\
    \ 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n   \
    \         n /= i;\n            i--;\n        }\n    }\n    return largest;", " \
    \   long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return largest_prime;", " \
    \   long max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n \
    \       n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n       \
    \ while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n \
    \       }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;",
  "  long i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      n /= i;\n \
    \   } else {\n      i++;\n    }\n  }\n  return n;", "    long largest_factor =\
    \ 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n       \
    \     largest_factor = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_factor;", "    long largest_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_factor;",
  "    long i=2;\n    while(i*i<=n){\n        if(n%i==0){\n            n=n/i;\n  \
    \      }\n        else{\n            i++;\n        }\n    }\n    return n;", " \
    \   long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i\
    \ == 0) {\n            largest = i;\n            n /= i;\n            i--;\n \
    \       }\n    }\n    return largest;", "    long largest_prime = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long i = 2;\n    while\
    \ (n % i != 0) {\n        i++;\n    }\n    if (n == i) {\n        return n;\n\
    \    }\n    return largest_prime_factor(n / i);", "    long largest_prime = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_prime =\
    \ 2;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for (long i = 3; i\
    \ <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            n /= i;\n \
    \           largest_prime = i;\n        }\n    }\n    if (n > 2) {\n        largest_prime\
    \ = n;\n    }\n    return largest_prime;", "    long largest_factor = 1;\n   \
    \ // Check if n is divisible by 2.\n    while (n % 2 == 0) {\n        largest_factor\
    \ = 2;\n        n = n / 2;\n    }\n    // n must be odd at this point. So we can\
    \ skip one element (Note i = i +2)\n    for (int i = 3; i <= sqrt(n); i = i +\
    \ 2) {\n        // While i divides n, print i and divide n\n        while (n %\
    \ i == 0) {\n            largest_factor = i;\n            n = n / i;\n       \
    \ }\n    }\n    // This condition is to handle the case when n is a prime number\n\
    \    // greater than 2\n    if (n > 2)\n        largest_factor = n;\n    return\
    \ largest_factor;", "    long largest_prime = 0;\n    for (long i = 2; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n        \
    \    n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long i;\n    for\
    \ (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            n /= i;\n   \
    \         i--;\n        }\n    }\n    return i;", "    long i;\n    for (i = 2;\
    \ i * i <= n; i++) {\n        if (n % i == 0) {\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return n;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            while (n % i == 0) {\n               \
    \ n /= i;\n            }\n        }\n    }\n    return largest_prime;", "    long\
    \ largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i\
    \ == 0) {\n            largest_factor = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest_factor;", "    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest;", "    long largest = 0;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            largest = i;\n           \
    \ n /= i;\n            i--;\n        }\n    }\n    return largest;", "    long\
    \ largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            largest = i;\n            while (n % i == 0) {\n                n\
    \ /= i;\n            }\n        }\n    }\n    return largest;", "    long largest_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            largest_factor = factor;\n            while (n % factor == 0)\
    \ {\n                n /= factor;\n            }\n        }\n        factor++;\n\
    \    }\n    return largest_factor;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_factor =\
    \ 1;\n    // Check if n is divisible by 2.\n    while (n % 2 == 0) {\n       \
    \ largest_factor = 2;\n        n = n / 2;\n    }\n    // Check odd factors up\
    \ to sqrt(n).\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n\
    \ % i == 0) {\n            largest_factor = i;\n            n = n / i;\n     \
    \   }\n    }\n    // If n is prime, it is the largest factor.\n    if (n > 2)\
    \ {\n        largest_factor = n;\n    }\n    return largest_factor;", "    long\
    \ largest_factor = 1;\n    long d = 2;\n    while (d * d <= n) {\n        if (n\
    \ % d == 0) {\n            largest_factor = d;\n            while (n % d == 0)\
    \ {\n                n /= d;\n            }\n        }\n        d += 1;\n    }\n\
    \    if (n > 1) {\n        largest_factor = n;\n    }\n    return largest_factor;",
  "    long largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_factor = i;\n            n /= i;\n        \
    \    i--;\n        }\n    }\n    return largest_factor;", "    long largest_prime\
    \ = 2;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return largest;", "    long largest_factor = 1;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n    \
    \        n /= i;\n            i--;\n        }\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    return largest;", "    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i * i <= n) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n        i++;\n    }\n\
    \    if (n > 1) {\n        largest_prime = n;\n    }\n    return largest_prime;",
  "    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n   \
    \         n /= factor;\n        } else {\n            factor++;\n        }\n \
    \   }\n    return factor;", "    long i;\n    for (i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n  \
    \  }\n    return i;", "    long largest_prime = 1;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n     \
    \       while (n % i == 0) {\n                n /= i;\n            }\n       \
    \ }\n    }\n    return largest_prime;", "  long largest = 0;\n  for (long i =\
    \ 2; i <= n; i++) {\n    if (n % i == 0) {\n      largest = i;\n      while (n\
    \ % i == 0) {\n        n /= i;\n      }\n    }\n  }\n  return largest;", "  long\
    \ largest_prime_factor = 1;\n  for (long i = 2; i <= n; i++) {\n    if (n % i\
    \ == 0) {\n      largest_prime_factor = i;\n      n /= i;\n      i--;\n    }\n\
    \  }\n  return largest_prime_factor;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_prime =\
    \ -1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_factor = 1;\n    long factor\
    \ = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) {\n\
    \                n /= factor;\n            }\n        }\n        factor++;\n \
    \   }\n    return largest_factor;", "    long largest_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_factor;",
  "  long i;\n  for (i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      n /= i;\n\
    \      i--;\n    }\n  }\n  return i;", "    long largest_factor = 1;\n    long\
    \ factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n         \
    \   largest_factor = factor;\n            while (n % factor == 0) {\n        \
    \        n /= factor;\n            }\n        }\n        factor++;\n    }\n  \
    \  return largest_factor;", "\tlong i;\n\tfor (i = 2; i <= n; i++) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == n) {\n\t\treturn n;\n\t}\n\
    \tlong largest_prime_factor = largest_prime_factor(n / i);\n\treturn largest_prime_factor;",
  "    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_factor = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_factor;",
  "    long largest_prime_factor = 1;\n    long factor = 2;\n    while (n != 1) {\n\
    \        if (n % factor == 0) {\n            largest_prime_factor = factor;\n\
    \            while (n % factor == 0) {\n                n /= factor;\n       \
    \     }\n        }\n        factor++;\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return largest_prime;", " \
    \ long largest_factor = 1;\n  for (long i = 2; i <= n; i++) {\n    if (n % i ==\
    \ 0) {\n      largest_factor = i;\n      n /= i;\n      i--;\n    }\n  }\n  return\
    \ largest_factor;", "    long largest_factor = 1;\n    for (long i = 2; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n       \
    \     n /= i;\n            i--;\n        }\n    }\n    return largest_factor;",
  "    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            largest_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0) {\n                n /= factor;\n\
    \            }\n        }\n        factor++;\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime;",
  "    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return i;", "  long max_prime\
    \ = -1;\n  while (n % 2 == 0) {\n    max_prime = 2;\n    n >>= 1;\n  }\n  for\
    \ (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n      max_prime\
    \ = i;\n      n = n / i;\n    }\n  }\n  if (n > 2)\n    max_prime = n;\n  return\
    \ max_prime;", "    long largest = 0;\n    long i = 2;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            largest = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    if (n > largest) {\n\
    \        largest = n;\n    }\n    return largest;", "    long largest_prime_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime_factor = i;\n            n /= i;\n            i--;\n   \
    \     }\n    }\n    return largest_prime_factor;", "  long largest_factor = 1;\n\
    \  long factor = 2;\n  while (n > 1) {\n    if (n % factor == 0) {\n      largest_factor\
    \ = factor;\n      n /= factor;\n      while (n % factor == 0) {\n        n /=\
    \ factor;\n      }\n    }\n    factor++;\n  }\n  return largest_factor;", "  \
    \  long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime_factor = i;\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n >\
    \ largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n    return\
    \ largest_prime_factor;", "  long largest_prime = 1;\n  for (long i = 2; i <=\
    \ n; i++) {\n    if (n % i == 0) {\n      largest_prime = i;\n      while (n %\
    \ i == 0) {\n        n /= i;\n      }\n    }\n  }\n  return largest_prime;", " \
    \   long largest_prime_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n\
    \        while (n % factor == 0) {\n            largest_prime_factor = factor;\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    return largest_prime_factor;",
  "    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            n /= i;\n            i--;\n    \
    \    }\n    }\n    return largest;", "    long largest_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_factor;", "    long largest_prime_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime_factor = i;\n            n /= i;\n            i--;\n   \
    \     }\n    }\n    return largest_prime_factor;", "    long largest_factor =\
    \ 1;\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor ==\
    \ 0) {\n            largest_factor = factor;\n            n /= factor;\n     \
    \   }\n        factor++;\n    }\n    return largest_factor;", "    long largest_factor\
    \ = 1;\n    // Try dividing n by 2, 3, 4, ...\n    for (long i = 2; i <= n; i++)\
    \ {\n        // If i divides n, then i is a factor of n.\n        if (n % i ==\
    \ 0) {\n            // If i is prime, then it is the largest factor.\n       \
    \     if (is_prime(i)) {\n                largest_factor = i;\n            }\n\
    \            // Divide n by i.\n            n /= i;\n            // Start over\
    \ again at 2.\n            i = 1;\n        }\n    }\n    return largest_factor;",
  "    long largest_prime_factor = 1;\n    // TODO: Implement this function.\n   \
    \ if(n%2==0)\n    {\n        largest_prime_factor=2;\n        while(n%2==0)\n\
    \        {\n            n=n/2;\n        }\n    }\n    for(int i=3;i<=sqrt(n);i=i+2)\n\
    \    {\n        if(n%i==0)\n        {\n            largest_prime_factor=i;\n \
    \           while(n%i==0)\n            {\n                n=n/i;\n           \
    \ }\n        }\n    }\n    if(n>2)\n    {\n        largest_prime_factor=n;\n \
    \   }\n    return largest_prime_factor;", "    long largest_prime = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest = 1;\n \
    \   for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest;", "    long largest_prime_factor =\
    \ 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            while (n % i == 0) {\n    \
    \            n /= i;\n            }\n        }\n        i++;\n    }\n    if (n\
    \ > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;",
  "    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) {\n     \
    \   while (n % factor == 0) {\n            largest_factor = factor;\n        \
    \    n /= factor;\n        }\n        factor++;\n    }\n    return largest_factor;",
  "    long largest_prime = 1;\n    long i = 2;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0) {\n            largest_prime = i;\n            while (n % i\
    \ == 0) {\n                n /= i;\n            }\n        }\n        i++;\n \
    \   }\n    if (n > 1) {\n        largest_prime = n;\n    }\n    return largest_prime;",
  "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_factor\
    \ = 1;\n    long d = 2;\n    while (d * d <= n) {\n        if (n % d == 0) {\n\
    \            largest_factor = d;\n            n /= d;\n        } else {\n    \
    \        d += 1;\n        }\n    }\n    if (n > 1) {\n        largest_factor =\
    \ n;\n    }\n    return largest_factor;", "    long largest_prime_factor = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime_factor;", "    long largest_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_factor = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_factor;", "    long largest = 1;\n    for (long i =\
    \ 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n   \
    \         while (n % i == 0) {\n                n /= i;\n            }\n     \
    \   }\n    }\n    return largest;", "    long largest_prime = 2;\n    while (n\
    \ % 2 == 0) {\n        n /= 2;\n    }\n    long i = 3;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            largest_prime = i;\n            n\
    \ /= i;\n        } else {\n            i += 2;\n        }\n    }\n    if (n >\
    \ largest_prime) {\n        largest_prime = n;\n    }\n    return largest_prime;",
  "    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return n;", "    long largest = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n\
    \            while (n % i == 0) {\n                n /= i;\n            }\n  \
    \      }\n    }\n    return largest;", "    // TODO: Implement this function.\n\
    \    long largest_prime = 1;\n    for(long i = 2; i <= n; i++){\n        if(n\
    \ % i == 0){\n            largest_prime = i;\n            n /= i;\n          \
    \  i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_prime = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime;", "    long largest_factor =\
    \ 1;\n    // Try dividing n by 2, 3, 4, ...\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            // i is a factor.\n            largest_factor\
    \ = i;\n            // Divide n by i as many times as possible.\n            while\
    \ (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n \
    \   return largest_factor;", "    long largest = 0;\n    while (n % 2 == 0) {\n\
    \        largest = 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n);\
    \ i += 2) {\n        while (n % i == 0) {\n            largest = i;\n        \
    \    n /= i;\n        }\n    }\n    if (n > 2) {\n        largest = n;\n    }\n\
    \    return largest;", "    long largest_prime = 1;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            largest_prime = i;\n     \
    \       n /= i;\n            i--;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest = 0;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest;", "  // TODO: implement this function.\n\
    \  long i;\n  for(i=2;i<=n;i++)\n  {\n    if(n%i==0)\n    {\n      n=n/i;\n  \
    \    i--;\n    }\n  }\n  return i;"]
stop_tokens:
- "\n}"
