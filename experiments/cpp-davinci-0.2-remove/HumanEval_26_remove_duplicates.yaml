name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
completions: ["    std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n\
    \    for (auto number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ numbers_set;\n    for (auto number : numbers) {\n        if (numbers_set.find(number)\
    \ == numbers_set.end()) {\n            numbers_set.insert(number);\n         \
    \   result.push_back(number);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto n : numbers) {\n\
    \        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> s;\n    for (auto n : numbers) {\n   \
    \     if (s.find(n) == s.end()) {\n            s.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (auto number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> set;\n    for (auto number : numbers)\
    \ {\n        if (set.find(number) == set.end()) {\n            result.push_back(number);\n\
    \            set.insert(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::set<long> s;\n\
    \    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        if\
    \ (s.find(*it) == s.end()) {\n            s.insert(*it);\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ int> map;\n    for (int i = 0; i < numbers.size(); i++) {\n        map[numbers[i]]++;\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        if (map[numbers[i]]\
    \ == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (auto n : numbers) {\n        if (seen.find(n) == seen.end()) {\n   \
    \         result.push_back(n);\n            seen.insert(n);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (auto number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> set;\n    for (auto number : numbers)\
    \ {\n        if (set.find(number) == set.end()) {\n            result.push_back(number);\n\
    \            set.insert(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ i : numbers) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n\
    \            set.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> set;\n    for (auto num : numbers) {\n\
    \        if (set.find(num) == set.end()) {\n            result.push_back(num);\n\
    \            set.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long number : numbers)\
    \ {\n        if (seen.find(number) == seen.end()) {\n            result.push_back(number);\n\
    \            seen.insert(number);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto &number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (auto number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto &number : numbers) {\n        if (seen.find(number) ==\
    \ seen.end()) {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n  \
    \      if (seen.find(*it) == seen.end()) {\n            result.push_back(*it);\n\
    \            seen.insert(*it);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> s;\n    for (auto n : numbers) {\n   \
    \     if (s.find(n) == s.end()) {\n            s.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::unordered_set<long>\
    \ s;\n    for (auto num : numbers) {\n        if (s.find(num) == s.end()) {\n\
    \            s.insert(num);\n            res.push_back(num);\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n   \
    \     if (set.find(*it) == set.end()) {\n            set.insert(*it);\n      \
    \      result.push_back(*it);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> s;\n    for (auto i : numbers) {\n   \
    \     if (s.find(i) == s.end()) {\n            s.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i])\
    \ == set.end()) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> result;\n\tstd::unordered_set<long>\
    \ s;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (s.find(numbers[i])\
    \ == s.end()) {\n\t\t\ts.insert(numbers[i]);\n\t\t\tresult.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto num : numbers) {\n        if (s.find(num) == s.end()) {\n\
    \            s.insert(num);\n            result.push_back(num);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto n : numbers) {\n        if (unique.find(n) == unique.end())\
    \ {\n            unique.insert(n);\n            result.push_back(n);\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n   \
    \     if (set.find(*it) == set.end()) {\n            set.insert(*it);\n      \
    \      result.push_back(*it);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> s;\n    for (auto n : numbers) {\n        if (s.find(n)\
    \ == s.end()) {\n            s.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto& number : numbers) {\n        if (seen.find(number) ==\
    \ seen.end()) {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
