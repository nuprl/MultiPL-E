name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)5})));\n}\n"
completions: ["    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i])\
    \ == set.end()) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long>::iterator it;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    it = std::unique(numbers.begin(), numbers.end());\n   \
    \ numbers.resize(std::distance(numbers.begin(), it));\n    return numbers;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ n : numbers) {\n        if (set.find(n) == set.end()) {\n            result.push_back(n);\n\
    \            set.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> set;\n    for (auto number : numbers)\
    \ {\n        if (set.find(number) == set.end()) {\n            result.push_back(number);\n\
    \            set.insert(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ hash;\n    for (auto num : numbers) {\n        if (hash.find(num) == hash.end())\
    \ {\n            hash.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto i : numbers) {\n        if (unique.find(i) == unique.end())\
    \ {\n            unique.insert(i);\n            result.push_back(i);\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (long number : numbers) {\n        if (s.find(number) == s.end())\
    \ {\n            s.insert(number);\n            result.push_back(number);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (auto number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (long number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto& n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n   \
    \     if (set.find(*it) == set.end()) {\n            set.insert(*it);\n      \
    \      result.push_back(*it);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto number : numbers)\
    \ {\n        if (seen.find(number) == seen.end()) {\n            result.push_back(number);\n\
    \            seen.insert(number);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::set<long> set;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i])\
    \ == set.end()) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> unique;\n    std::set<long>\
    \ unique_set;\n    for (auto number : numbers) {\n        if (unique_set.find(number)\
    \ == unique_set.end()) {\n            unique.push_back(number);\n            unique_set.insert(number);\n\
    \        }\n    }\n    return unique;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::set<long> s;\n  \
    \  for (auto x : numbers) {\n        if (s.find(x) == s.end()) {\n           \
    \ s.insert(x);\n            result.push_back(x);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> set;\n\
    \    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ numbers_set;\n    for (long number : numbers) {\n        if (numbers_set.find(number)\
    \ == numbers_set.end()) {\n            numbers_set.insert(number);\n         \
    \   result.push_back(number);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> set;\n    for (auto number : numbers)\
    \ {\n        if (set.find(number) == set.end()) {\n            result.push_back(number);\n\
    \            set.insert(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto& number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    for (long number : numbers) {\n        if (unique_numbers.find(number)\
    \ == unique_numbers.end()) {\n            unique_numbers.insert(number);\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> s;\n    for (auto i : numbers) {\n   \
    \     if (s.find(i) == s.end()) {\n            s.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.count(n) == 0) {\n   \
    \         result.push_back(n);\n            seen.insert(n);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
