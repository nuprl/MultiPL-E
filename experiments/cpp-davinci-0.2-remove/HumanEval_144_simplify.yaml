name: HumanEval_144_simplify
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement\
  \ a function that will simplify the expression\n// x * n. The function returns True\
  \ if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are\
  \ string representation of a fraction, and have the following format,\n// <numerator>/<denominator>\
  \ where both numerator and denominator are positive whole numbers.\n// You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\nbool\
  \ simplify(std::string x, std::string n) {\n"
tests: "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"\
  1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"\
  1/5\"), (\"1/5\")) == (false));\n}\n"
completions: ["  // Your code here\n  int x_num = std::stoi(x.substr(0, x.find(\"\
    /\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num =\
    \ std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd\
    \ = std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return num % den ==\
    \ 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den =\
    \ std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return den == 1;", "  int x_num\
    \ = std::stoi(x.substr(0, x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int n_num = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return (num % den ==\
    \ 0);", "  // Your code here\n  int num1,num2,den1,den2;\n  int i=0;\n  while(x[i]!='/')\n\
    \  {\n    num1=num1*10+(x[i]-'0');\n    i++;\n  }\n  i++;\n  while(i<x.length())\n\
    \  {\n    den1=den1*10+(x[i]-'0');\n    i++;\n  }\n  i=0;\n  while(n[i]!='/')\n\
    \  {\n    num2=num2*10+(n[i]-'0');\n    i++;\n  }\n  i++;\n  while(i<n.length())\n\
    \  {\n    den2=den2*10+(n[i]-'0');\n    i++;\n  }\n  int num=num1*num2;\n  int\
    \ den=den1*den2;\n  int g=__gcd(num,den);\n  num=num/g;\n  den=den/g;\n  if(num%den==0)\n\
    \  return true;\n  else\n  return false;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return (num\
    \ % den == 0);", "  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n \
    \ int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  if (numerator % denominator == 0) {\n    return true;\n\
    \  }\n  return false;", "    int x1, x2, n1, n2;\n    char c;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> x1 >> c >> x2;\n    ss2 >>\
    \ n1 >> c >> n2;\n    int num = x1 * n2;\n    int den = x2 * n1;\n    return num\
    \ % den == 0;", "    // your code here\n    int num1,num2,den1,den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    std::string temp;\n    getline(ss1,temp,'/');\n\
    \    num1 = std::stoi(temp);\n    getline(ss1,temp,'/');\n    den1 = std::stoi(temp);\n\
    \    getline(ss2,temp,'/');\n    num2 = std::stoi(temp);\n    getline(ss2,temp,'/');\n\
    \    den2 = std::stoi(temp);\n    int num = num1*num2;\n    int den = den1*den2;\n\
    \    int gcd = __gcd(num,den);\n    num = num/gcd;\n    den = den/gcd;\n    if(den\
    \ == 1)\n        return true;\n    else\n        return false;", "  int num1 =\
    \ std::stoi(x.substr(0, x.find('/')));\n  int den1 = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int num2 = std::stoi(n.substr(0, n.find('/')));\n  int den2 = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = num1 * num2;\n  int den = den1 * den2;\n  if (num % den\
    \ == 0) {\n    return true;\n  }\n  return false;", "    // your code here\n \
    \   int num1, den1, num2, den2;\n    std::stringstream ss(x);\n    std::stringstream\
    \ ss1(n);\n    std::string temp;\n    std::getline(ss, temp, '/');\n    num1 =\
    \ std::stoi(temp);\n    std::getline(ss, temp, '/');\n    den1 = std::stoi(temp);\n\
    \    std::getline(ss1, temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    den2 = std::stoi(temp);\n    if(num1*den2 == num2*den1)\n \
    \       return true;\n    return false;", "    int a,b,c,d;\n    std::stringstream\
    \ ss(x);\n    std::stringstream ss1(n);\n    std::getline(ss,x,'/');\n    std::getline(ss1,n,'/');\n\
    \    a=std::stoi(x);\n    b=std::stoi(n);\n    c=std::stoi(x);\n    d=std::stoi(n);\n\
    \    int gcd=__gcd(a,b);\n    a=a/gcd;\n    b=b/gcd;\n    gcd=__gcd(c,d);\n  \
    \  c=c/gcd;\n    d=d/gcd;\n    int num=a*d;\n    int den=b*c;\n    gcd=__gcd(num,den);\n\
    \    num=num/gcd;\n    den=den/gcd;\n    if(num%den==0)\n        return true;\n\
    \    else\n        return false;", "    int numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = numerator * n_numerator;\n\
    \    int den = denominator * n_denominator;\n    int gcd = std::__gcd(num, den);\n\
    \    return (num / gcd) % (den / gcd) == 0;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return (den\
    \ % num == 0);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "  int\
    \ num1 = std::stoi(x.substr(0, x.find(\"/\")));\n  int den1 = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int num2 = std::stoi(n.substr(0, n.find(\"/\")));\n  int den2 =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = num1 * num2;\n  int den\
    \ = den1 * den2;\n  if (den == 0) {\n    return false;\n  }\n  if (num % den ==\
    \ 0) {\n    return true;\n  }\n  return false;", "    int num1 = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int den1 = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ num2 = std::stoi(n.substr(0, n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd\
    \ = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (den ==\
    \ 1);", "    std::stringstream ss(x);\n    std::string item;\n    std::vector<std::string>\
    \ tokens;\n    while (std::getline(ss, item, '/')) {\n        tokens.push_back(item);\n\
    \    }\n    int x_numerator = std::stoi(tokens[0]);\n    int x_denominator = std::stoi(tokens[1]);\n\
    \    ss.clear();\n    ss.str(n);\n    tokens.clear();\n    while (std::getline(ss,\
    \ item, '/')) {\n        tokens.push_back(item);\n    }\n    int n_numerator =\
    \ std::stoi(tokens[0]);\n    int n_denominator = std::stoi(tokens[1]);\n    int\
    \ numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    if (numerator % denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    int num1 = std::stoi(x.substr(0, x.find('/')));\n\
    \    int den1 = std::stoi(x.substr(x.find('/') + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = num1 * num2;\n    int den = den1 * den2;\n    int gcd = __gcd(num, den);\n\
    \    num /= gcd;\n    den /= gcd;\n    return den == 1;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_num * n_den) % (x_den * n_num) == 0;", "  // your code\
    \ here\n  int numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  int denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int result_numerator = numerator * n_numerator;\n  int result_denominator =\
    \ denominator * n_denominator;\n  return result_numerator % result_denominator\
    \ == 0;", "  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \  return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;",
  "  int num1, num2, den1, den2;\n  std::stringstream ss1(x);\n  std::stringstream\
    \ ss2(n);\n  std::string temp;\n  std::getline(ss1, temp, '/');\n  num1 = std::stoi(temp);\n\
    \  std::getline(ss1, temp, '/');\n  den1 = std::stoi(temp);\n  std::getline(ss2,\
    \ temp, '/');\n  num2 = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  den2\
    \ = std::stoi(temp);\n  int num = num1 * num2;\n  int den = den1 * den2;\n  if\
    \ (num % den == 0) {\n    return true;\n  }\n  return false;", "    // Your code\
    \ here\n    int num1,num2,den1,den2;\n    int i=0;\n    while(x[i]!='/')\n   \
    \ {\n        num1=num1*10+(x[i]-'0');\n        i++;\n    }\n    i++;\n    while(i<x.length())\n\
    \    {\n        den1=den1*10+(x[i]-'0');\n        i++;\n    }\n    i=0;\n    while(n[i]!='/')\n\
    \    {\n        num2=num2*10+(n[i]-'0');\n        i++;\n    }\n    i++;\n    while(i<n.length())\n\
    \    {\n        den2=den2*10+(n[i]-'0');\n        i++;\n    }\n    int num=num1*num2;\n\
    \    int den=den1*den2;\n    int gcd=__gcd(num,den);\n    if(gcd==1)\n    {\n\
    \        return true;\n    }\n    else\n    {\n        return false;\n    }",
  "  // Your code here\n  int numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \  int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int result_numerator = numerator * n_numerator;\n  int result_denominator\
    \ = denominator * n_denominator;\n  if (result_numerator % result_denominator\
    \ == 0) {\n    return true;\n  }\n  return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = __gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  std::stringstream\
    \ ss(x);\n  std::string item;\n  std::vector<std::string> tokens;\n  while (std::getline(ss,\
    \ item, '/')) {\n    tokens.push_back(item);\n  }\n  int x_num = std::stoi(tokens[0]);\n\
    \  int x_den = std::stoi(tokens[1]);\n  tokens.clear();\n  ss.clear();\n  ss.str(n);\n\
    \  while (std::getline(ss, item, '/')) {\n    tokens.push_back(item);\n  }\n \
    \ int n_num = std::stoi(tokens[0]);\n  int n_den = std::stoi(tokens[1]);\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  if (num % den == 0) {\n\
    \    return true;\n  }\n  return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = __gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num %\
    \ den == 0);", "    // your code here\n    int num1,num2,den1,den2;\n    int i=0;\n\
    \    while(x[i]!='/')\n    {\n        num1=num1*10+(x[i]-'0');\n        i++;\n\
    \    }\n    i++;\n    while(i<x.length())\n    {\n        den1=den1*10+(x[i]-'0');\n\
    \        i++;\n    }\n    i=0;\n    while(n[i]!='/')\n    {\n        num2=num2*10+(n[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(i<n.length())\n    {\n        den2=den2*10+(n[i]-'0');\n\
    \        i++;\n    }\n    int num=num1*num2;\n    int den=den1*den2;\n    if(num%den==0)\n\
    \    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }", "    int numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = numerator * n_numerator;\n    int result_denominator\
    \ = denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int n_num = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  return (num / gcd) % (den / gcd) == 0;", "  int numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n  int denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int multiplier = std::stoi(n.substr(0, n.find('/')));\n  int multiplierDenominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int newNumerator = numerator * multiplier;\n\
    \  int newDenominator = denominator * multiplierDenominator;\n  int gcd = std::__gcd(newNumerator,\
    \ newDenominator);\n  newNumerator /= gcd;\n  newDenominator /= gcd;\n  return\
    \ newDenominator == 1;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return num % den ==\
    \ 0;", "    // Your code here\n    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    int\
    \ a = std::stoi(x.substr(0, x.find('/')));\n    int b = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int c = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (a * d) % (b * c) == 0;", "    int num1, num2, den1, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp1, temp2;\n    std::getline(ss1, temp1, '/');\n    std::getline(ss1, temp2,\
    \ '/');\n    num1 = std::stoi(temp1);\n    den1 = std::stoi(temp2);\n    std::getline(ss2,\
    \ temp1, '/');\n    std::getline(ss2, temp2, '/');\n    num2 = std::stoi(temp1);\n\
    \    den2 = std::stoi(temp2);\n    int num = num1 * num2;\n    int den = den1\
    \ * den2;\n    if (num % den == 0) {\n        return true;\n    }\n    return\
    \ false;", "  std::stringstream ss(x);\n  std::string item;\n  std::vector<std::string>\
    \ tokens;\n  while (std::getline(ss, item, '/')) {\n    tokens.push_back(item);\n\
    \  }\n  int x_num = std::stoi(tokens[0]);\n  int x_den = std::stoi(tokens[1]);\n\
    \  tokens.clear();\n  ss.clear();\n  ss.str(n);\n  while (std::getline(ss, item,\
    \ '/')) {\n    tokens.push_back(item);\n  }\n  int n_num = std::stoi(tokens[0]);\n\
    \  int n_den = std::stoi(tokens[1]);\n  int num = x_num * n_num;\n  int den =\
    \ x_den * n_den;\n  return (num % den == 0);", "  // your code here\n  int a,b,c,d;\n\
    \  std::stringstream ss(x);\n  std::stringstream ss1(n);\n  std::string temp;\n\
    \  std::getline(ss,temp,'/');\n  a=std::stoi(temp);\n  std::getline(ss,temp,'/');\n\
    \  b=std::stoi(temp);\n  std::getline(ss1,temp,'/');\n  c=std::stoi(temp);\n \
    \ std::getline(ss1,temp,'/');\n  d=std::stoi(temp);\n  if((a*d)%(b*c)==0)\n  \
    \  return true;\n  else\n    return false;", "    int num1 = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int den1 = std::stoi(x.substr(x.find(\"/\") + 1));\n \
    \   int num2 = std::stoi(n.substr(0, n.find(\"/\")));\n    int den2 = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd\
    \ = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num %\
    \ den == 0);", "    std::stringstream ss(x);\n    std::stringstream ss2(n);\n\
    \    int a, b, c, d;\n    char ch;\n    ss >> a >> ch >> b;\n    ss2 >> c >> ch\
    \ >> d;\n    int num = a * d + b * c;\n    int den = b * d;\n    if (num % den\
    \ == 0)\n        return true;\n    return false;", "    int numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int multiplier = std::stoi(n.substr(0, n.find('/')));\n    int multiplierDenominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int resultNumerator = numerator\
    \ * multiplier;\n    int resultDenominator = denominator * multiplierDenominator;\n\
    \    return resultNumerator % resultDenominator == 0;", "    int a = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int b = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ c = std::stoi(n.substr(0, n.find(\"/\")));\n    int d = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int e = a * c;\n    int f = b * d;\n    if (e % f == 0) {\n \
    \       return true;\n    }\n    return false;", "\tint x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n\tint x_den = std::stoi(x.substr(x.find('/') + 1));\n\tint n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n\tint n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n\tint num = x_num * n_num;\n\tint den = x_den * n_den;\n\tint gcd =\
    \ __gcd(num, den);\n\tnum /= gcd;\n\tden /= gcd;\n\treturn num % den == 0;", " \
    \   int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    return numerator % denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num\
    \ % den == 0);", "    // Your code here\n    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return numerator %\
    \ denominator == 0;", "  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  return den == 1;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return num % den == 0;",
  "  int a,b,c,d;\n  sscanf(x.c_str(),\"%d/%d\",&a,&b);\n  sscanf(n.c_str(),\"%d/%d\"\
    ,&c,&d);\n  return (a*d)%(b*c)==0;", "    std::stringstream ss(x);\n    int a,\
    \ b;\n    char c;\n    ss >> a >> c >> b;\n    std::stringstream ss2(n);\n   \
    \ int a2, b2;\n    char c2;\n    ss2 >> a2 >> c2 >> b2;\n    return (a*b2)%(b*a2)\
    \ == 0;", "    // your code here\n    int num1, num2, den1, den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss1,\
    \ temp, '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n\
    \    den1 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n    int num =\
    \ num1 * num2;\n    int den = den1 * den2;\n    if (num % den == 0) {\n      \
    \  return true;\n    }\n    return false;", "  // your code here\n  std::stringstream\
    \ ss(x);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '/')) {\n    v.push_back(token);\n  }\n  int numerator = std::stoi(v[0]);\n\
    \  int denominator = std::stoi(v[1]);\n  std::stringstream ss1(n);\n  std::string\
    \ token1;\n  std::vector<std::string> v1;\n  while(std::getline(ss1, token1, '/'))\
    \ {\n    v1.push_back(token1);\n  }\n  int numerator1 = std::stoi(v1[0]);\n  int\
    \ denominator1 = std::stoi(v1[1]);\n  int num = numerator * denominator1;\n  int\
    \ den = denominator * numerator1;\n  if(num % den == 0) {\n    return true;\n\
    \  }\n  return false;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    int a,b,c,d;\n    sscanf(x.c_str(),\"\
    %d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;",
  "    int num1, num2, den1, den2;\n    char c;\n    std::stringstream ss(x);\n  \
    \  ss >> num1 >> c >> den1;\n    ss.clear();\n    ss.str(n);\n    ss >> num2 >>\
    \ c >> den2;\n    int num = num1 * den2;\n    int den = den1 * num2;\n    return\
    \ (num % den == 0);", "    // Your code here\n    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if\
    \ (num % den == 0) {\n        return true;\n    }\n    return false;", "  int\
    \ x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  return result_numerator % result_denominator == 0;", "  int num1 = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int den1 = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ num2 = std::stoi(n.substr(0, n.find(\"/\")));\n  int den2 = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = num1 * num2;\n  int den = den1 * den2;\n  if (num % den\
    \ == 0) {\n    return true;\n  }\n  return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  int\
    \ x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "    int num1, num2, den1, den2;\n    std::stringstream ss(x);\n   \
    \ std::stringstream ss2(n);\n    ss >> num1;\n    ss.ignore();\n    ss >> den1;\n\
    \    ss2 >> num2;\n    ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * den2;\n\
    \    int den = den1 * num2;\n    if (num % den == 0) {\n        return true;\n\
    \    }\n    return false;", "    int num1, num2, den1, den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n\
    \    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n    ss2 >> den2;\n   \
    \ int num = num1 * num2;\n    int den = den1 * den2;\n    return (num % den ==\
    \ 0);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den =\
    \ std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return (num % den ==\
    \ 0);", "  // Your code here\n  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  return numerator % denominator == 0;", "  int num1, num2,\
    \ den1, den2;\n  std::stringstream ss1(x);\n  std::stringstream ss2(n);\n  ss1\
    \ >> num1;\n  ss1.ignore();\n  ss1 >> den1;\n  ss2 >> num2;\n  ss2.ignore();\n\
    \  ss2 >> den2;\n  int num = num1 * num2;\n  int den = den1 * den2;\n  if (num\
    \ % den == 0)\n    return true;\n  else\n    return false;", "    int numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = numerator * n_numerator;\n    int result_denominator = denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    return den / gcd == 1;", "    std::stringstream\
    \ ss(x);\n    int a, b;\n    char c;\n    ss >> a >> c >> b;\n    std::stringstream\
    \ ss2(n);\n    int a2, b2;\n    char c2;\n    ss2 >> a2 >> c2 >> b2;\n    std::cout\
    \ << a << \" \" << b << \" \" << a2 << \" \" << b2 << std::endl;\n    int num\
    \ = a * b2;\n    int den = b * a2;\n    std::cout << num << \" \" << den << std::endl;\n\
    \    if (num % den == 0) {\n        return true;\n    }\n    return false;", " \
    \ int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int result_numerator = x_numerator * n_numerator;\n  int result_denominator\
    \ = x_denominator * n_denominator;\n  return result_numerator % result_denominator\
    \ == 0;", "    int a,b,c,d;\n    std::stringstream ss(x);\n    std::stringstream\
    \ ss1(n);\n    std::getline(ss,x,'/');\n    std::getline(ss1,n,'/');\n    a=std::stoi(x);\n\
    \    b=std::stoi(n);\n    c=std::stoi(x);\n    d=std::stoi(n);\n    while(b!=0)\n\
    \    {\n        int r=a%b;\n        a=b;\n        b=r;\n    }\n    while(d!=0)\n\
    \    {\n        int r=c%d;\n        c=d;\n        d=r;\n    }\n    if(a==1 &&\
    \ c==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }", "  int num1, num2, den1, den2;\n  std::stringstream ss1(x);\n  std::stringstream\
    \ ss2(n);\n  ss1 >> num1;\n  ss1.ignore();\n  ss1 >> den1;\n  ss2 >> num2;\n \
    \ ss2.ignore();\n  ss2 >> den2;\n  int num = num1 * num2;\n  int den = den1 *\
    \ den2;\n  int gcd = __gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return\
    \ num % den == 0;", "  std::stringstream ss(x);\n  std::stringstream ss2(n);\n\
    \  std::string item;\n  std::string item2;\n  std::vector<std::string> tokens;\n\
    \  std::vector<std::string> tokens2;\n  while (std::getline(ss, item, '/')) {\n\
    \    tokens.push_back(item);\n  }\n  while (std::getline(ss2, item2, '/')) {\n\
    \    tokens2.push_back(item2);\n  }\n  int num1 = std::stoi(tokens[0]);\n  int\
    \ num2 = std::stoi(tokens[1]);\n  int num3 = std::stoi(tokens2[0]);\n  int num4\
    \ = std::stoi(tokens2[1]);\n  int num5 = num1 * num3;\n  int num6 = num2 * num4;\n\
    \  if (num5 % num6 == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    int gcd = std::__gcd(numerator, denominator);\n    numerator\
    \ /= gcd;\n    denominator /= gcd;\n    return numerator % denominator == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    return numerator % denominator == 0;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return den == 1;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num\
    \ % den == 0) {\n        return true;\n    }\n    return false;", "  int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator\
    \ * n_numerator;\n  int denominator = x_denominator * n_denominator;\n  return\
    \ (numerator % denominator == 0);", "    int a,b,c,d;\n    sscanf(x.c_str(),\"\
    %d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    int gcd=__gcd(a,b);\n\
    \    a/=gcd;\n    b/=gcd;\n    gcd=__gcd(c,d);\n    c/=gcd;\n    d/=gcd;\n   \
    \ int num=a*d;\n    int den=b*c;\n    gcd=__gcd(num,den);\n    num/=gcd;\n   \
    \ den/=gcd;\n    return num%den==0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  if (numerator % denominator\
    \ == 0) {\n    return true;\n  }\n  return false;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  return (num / gcd) % (den / gcd) == 0;", "    // Your\
    \ code here\n    int num1,num2,den1,den2;\n    int i;\n    for(i=0;x[i]!='/';i++)\n\
    \    {\n        num1=num1*10+(x[i]-'0');\n    }\n    i++;\n    for(;i<x.length();i++)\n\
    \    {\n        den1=den1*10+(x[i]-'0');\n    }\n    for(i=0;n[i]!='/';i++)\n\
    \    {\n        num2=num2*10+(n[i]-'0');\n    }\n    i++;\n    for(;i<n.length();i++)\n\
    \    {\n        den2=den2*10+(n[i]-'0');\n    }\n    int num=num1*num2;\n    int\
    \ den=den1*den2;\n    int gcd=__gcd(num,den);\n    num=num/gcd;\n    den=den/gcd;\n\
    \    if(num%den==0)\n    {\n        return true;\n    }\n    else\n    {\n   \
    \     return false;\n    }", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    return (den / gcd) % (num / gcd) == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "  int num1 = std::stoi(x.substr(0, x.find('/')));\n  int den1 = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int num2 = std::stoi(n.substr(0, n.find('/')));\n  int den2 = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = num1 * num2;\n  int den = den1 * den2;\n  int gcd = std::__gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  return (den == 1);", "    int x_num,\
    \ x_den, n_num, n_den;\n    std::stringstream ss;\n    ss << x;\n    ss >> x_num;\n\
    \    ss.clear();\n    ss << n;\n    ss >> n_num;\n    ss.clear();\n    ss << x;\n\
    \    ss.ignore(1, '/');\n    ss >> x_den;\n    ss.clear();\n    ss << n;\n   \
    \ ss.ignore(1, '/');\n    ss >> n_den;\n    ss.clear();\n    int num = x_num *\
    \ n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n\
    \    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "    int num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int num2 = std::stoi(n.substr(0, n.find(\"/\")));\n    int den2\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num3 = num * num2;\n    int\
    \ den3 = den * den2;\n    if (num3 % den3 == 0) {\n        return true;\n    }\n\
    \    return false;", "    // Your code here\n    int num1, num2, den1, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp;\n    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n\
    \    // std::cout << num1 << \" \" << den1 << \" \" << num2 << \" \" << den2 <<\
    \ std::endl;\n    int num = num1 * num2;\n    int den = den1 * den2;\n    if (num\
    \ % den == 0) {\n        return true;\n    }\n    return false;", "  // your code\
    \ here\n  int numerator1 = std::stoi(x.substr(0, x.find(\"/\")));\n  int denominator1\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int numerator2 = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int denominator2 = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int numerator = numerator1 * numerator2;\n  int denominator = denominator1\
    \ * denominator2;\n  if (numerator % denominator == 0) {\n    return true;\n \
    \ }\n  return false;", "    int num1 = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int den1 = std::stoi(x.substr(x.find(\"/\") + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int den2 = std::stoi(n.substr(n.find(\"/\") + 1));\n \
    \   int num = num1 * num2;\n    int den = den1 * den2;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return numerator % denominator == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    return numerator % denominator == 0;", "    std::stringstream\
    \ ss(x);\n    std::string item;\n    std::vector<int> x_vec;\n    while (std::getline(ss,\
    \ item, '/')) {\n        x_vec.push_back(std::stoi(item));\n    }\n    std::stringstream\
    \ ss2(n);\n    std::vector<int> n_vec;\n    while (std::getline(ss2, item, '/'))\
    \ {\n        n_vec.push_back(std::stoi(item));\n    }\n    int x_num = x_vec[0];\n\
    \    int x_den = x_vec[1];\n    int n_num = n_vec[0];\n    int n_den = n_vec[1];\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    int\
    \ num1, den1, num2, den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n \
    \   sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    return (num1 * den2) % (num2\
    \ * den1) == 0;", "\tint x_numerator = std::stoi(x.substr(0, x.find('/')));\n\t\
    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\tint n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n\tint n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n\tint result_numerator = x_numerator * n_numerator;\n\tint result_denominator\
    \ = x_denominator * n_denominator;\n\treturn result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    if (numerator % denominator == 0) {\n\
    \        return true;\n    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int product_numerator = x_numerator\
    \ * n_numerator;\n    int product_denominator = x_denominator * n_denominator;\n\
    \    return product_numerator % product_denominator == 0;", "    int numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result\
    \ = numerator * n_numerator;\n    int result_denominator = denominator * n_denominator;\n\
    \    return result % result_denominator == 0;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return (num\
    \ % den == 0);", "    int num1 = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ den1 = std::stoi(x.substr(x.find('/') + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = num1 * num2;\n    int den = den1 * den2;\n    return (num % den == 0);",
  "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    return (num % den == 0);", "    int x_numerator =\
    \ std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "    int x_num, x_den, n_num, n_den;\n    std::stringstream\
    \ ss;\n    ss << x;\n    ss >> x_num;\n    ss.clear();\n    ss << n;\n    ss >>\
    \ n_num;\n    ss.clear();\n    ss << x;\n    ss.ignore(1);\n    ss >> x_den;\n\
    \    ss.clear();\n    ss << n;\n    ss.ignore(1);\n    ss >> n_den;\n    ss.clear();\n\
    \    return (x_num * n_den) % (x_den * n_num) == 0;", "  int a = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int b = std::stoi(x.substr(x.find(\"/\") + 1));\n  int c\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int d = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  return (a * d) % (b * c) == 0;", "    int num1, num2, den1, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    char c;\n \
    \   ss1 >> num1 >> c >> den1;\n    ss2 >> num2 >> c >> den2;\n    int num = num1\
    \ * num2;\n    int den = den1 * den2;\n    int gcd = std::__gcd(num, den);\n \
    \   num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    int num1,\
    \ num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n\
    \    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int den = den1 *\
    \ den2;\n    if (num % den == 0) {\n        return true;\n    }\n    return false;",
  "    // Your code here\n    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    return (num / gcd) % (den / gcd) == 0;", "    int numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator = numerator\
    \ * n_numerator;\n    int result_denominator = denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int numerator =\
    \ std::stoi(x.substr(0, x.find(\"/\")));\n    int denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int gcd =\
    \ std::__gcd(numerator, denominator);\n    numerator /= gcd;\n    denominator\
    \ /= gcd;\n    gcd = std::__gcd(n_numerator, n_denominator);\n    n_numerator\
    \ /= gcd;\n    n_denominator /= gcd;\n    return (numerator * n_denominator) %\
    \ (denominator * n_numerator) == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return numerator %\
    \ denominator == 0;", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int\
    \ x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num, den);\n\
    \  return den / gcd == num / gcd;", "    int x_num = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "  int x_numerator = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int numerator = x_numerator * n_numerator;\n  int denominator =\
    \ x_denominator * n_denominator;\n  int gcd = std::__gcd(numerator, denominator);\n\
    \  numerator /= gcd;\n  denominator /= gcd;\n  return numerator % denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ x_num_new = x_num * n_num;\n    int x_den_new = x_den * n_den;\n    if (x_num_new\
    \ % x_den_new == 0) {\n        return true;\n    }\n    return false;", "    int\
    \ x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num\
    \ % den == 0);", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num, den);\n\
    \  num /= gcd;\n  den /= gcd;\n  return num % den == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return (numerator % denominator == 0);",
  "    // Your code here\n    int num1 = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int den1 = std::stoi(x.substr(x.find(\"/\") + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int den2 = std::stoi(n.substr(n.find(\"/\") + 1));\n \
    \   int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  \
    \  int numerator = std::stoi(x.substr(0, x.find('/')));\n    int denominator =\
    \ std::stoi(x.substr(x.find('/') + 1));\n    int multiplier = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int multiplierDenominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result = numerator * multiplier;\n    int resultDenominator\
    \ = denominator * multiplierDenominator;\n    return result % resultDenominator\
    \ == 0;", "  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den =\
    \ std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  if (num % den == 0) {\n\
    \    return true;\n  }\n  return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return num\
    \ % den == 0;", "    int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss1, temp,\
    \ '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    den1\
    \ = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n    int num =\
    \ num1 * num2;\n    int den = den1 * den2;\n    if (den == 0)\n        return\
    \ false;\n    if (num % den == 0)\n        return true;\n    return false;", " \
    \   int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    return (num % den == 0);", "    int num1, num2, den1,\
    \ den2;\n    int i = 0;\n    while(x[i] != '/')\n    {\n        num1 = num1 *\
    \ 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < x.length())\n\
    \    {\n        den1 = den1 * 10 + (x[i] - '0');\n        i++;\n    }\n    i =\
    \ 0;\n    while(n[i] != '/')\n    {\n        num2 = num2 * 10 + (n[i] - '0');\n\
    \        i++;\n    }\n    i++;\n    while(i < n.length())\n    {\n        den2\
    \ = den2 * 10 + (n[i] - '0');\n        i++;\n    }\n    int num = num1 * num2;\n\
    \    int den = den1 * den2;\n    int gcd = __gcd(num, den);\n    if(gcd == 1)\n\
    \        return true;\n    else\n        return false;", "    std::stringstream\
    \ ss(x);\n    std::stringstream ss2(n);\n    std::string num1, num2, den1, den2;\n\
    \    std::getline(ss, num1, '/');\n    std::getline(ss, den1, '/');\n    std::getline(ss2,\
    \ num2, '/');\n    std::getline(ss2, den2, '/');\n    int n1 = std::stoi(num1);\n\
    \    int n2 = std::stoi(num2);\n    int d1 = std::stoi(den1);\n    int d2 = std::stoi(den2);\n\
    \    int n3 = n1 * n2;\n    int d3 = d1 * d2;\n    if (n3 % d3 == 0) {\n     \
    \   return true;\n    }\n    return false;", "  // your code here\n  int num1,\
    \ den1, num2, den2;\n  int i = x.find(\"/\");\n  num1 = stoi(x.substr(0, i));\n\
    \  den1 = stoi(x.substr(i+1));\n  i = n.find(\"/\");\n  num2 = stoi(n.substr(0,\
    \ i));\n  den2 = stoi(n.substr(i+1));\n  int num = num1 * num2;\n  int den = den1\
    \ * den2;\n  if(num % den == 0)\n    return true;\n  return false;", "    int\
    \ num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n\
    \    getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n    getline(ss2, temp,\
    \ '/');\n    num2 = std::stoi(temp);\n    getline(ss2, temp, '/');\n    den2 =\
    \ std::stoi(temp);\n    int num = num1 * num2;\n    int den = den1 * den2;\n \
    \   if (num % den == 0) {\n        return true;\n    }\n    return false;", " \
    \   int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n\
    \    ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * num2;\n    int den\
    \ = den1 * den2;\n    return (num % den == 0);", "    // Your code here\n    int\
    \ a,b,c,d;\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n    std::getline(ss,x,'/');\n\
    \    std::getline(ss1,n,'/');\n    a=std::stoi(x);\n    b=std::stoi(n);\n    c=a*b;\n\
    \    d=a*b;\n    if(c%d==0)\n    return true;\n    else\n    return false;", " \
    \   int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    int gcd = __gcd(num, den);\n    num /= gcd;\n    den\
    \ /= gcd;\n    return num % den == 0;", "    int num1, num2, den1, den2;\n   \
    \ std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string temp;\n\
    \    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n\
    \    int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    int\
    \ num1, den1, num2, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::getline(ss1, x, '/');\n    std::getline(ss1, n, '/');\n  \
    \  std::getline(ss2, x, '/');\n    std::getline(ss2, n, '/');\n    num1 = std::stoi(x);\n\
    \    den1 = std::stoi(n);\n    num2 = std::stoi(x);\n    den2 = std::stoi(n);\n\
    \    int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "  //\
    \ your code here\n  int num1 = std::stoi(x.substr(0, x.find(\"/\")));\n  int den1\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int num2 = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int den2 = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = num1 * num2;\n  int den = den1 * den2;\n  double res = (double)num / den;\n\
    \  if (res == (int)res) {\n    return true;\n  }\n  return false;", "    int num1,\
    \ num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n\
    \    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int den = den1 *\
    \ den2;\n    if (num % den == 0) {\n        return true;\n    }\n    return false;",
  "    // your code here\n    int num1,num2,den1,den2;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    char c;\n    ss1>>num1>>c>>den1;\n    ss2>>num2>>c>>den2;\n\
    \    int num=num1*den2;\n    int den=den1*num2;\n    if(num%den==0)\n        return\
    \ true;\n    else\n        return false;", "    int a = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int b = std::stoi(x.substr(x.find('/') + 1));\n    int c\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (a * d) % (b * c) == 0;", "    // Your code here\n    int\
    \ num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n\
    \    ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * num2;\n    int den\
    \ = den1 * den2;\n    if (num % den == 0) {\n        return true;\n    }\n   \
    \ return false;", "    // Your code here\n    int a,b,c,d;\n    int i;\n    for(i=0;x[i]!='/';i++){\n\
    \        a=a*10+(x[i]-'0');\n    }\n    i++;\n    for(;i<x.length();i++){\n  \
    \      b=b*10+(x[i]-'0');\n    }\n    for(i=0;n[i]!='/';i++){\n        c=c*10+(n[i]-'0');\n\
    \    }\n    i++;\n    for(;i<n.length();i++){\n        d=d*10+(n[i]-'0');\n  \
    \  }\n    if((a*d)%(b*c)==0){\n        return true;\n    }\n    else{\n      \
    \  return false;\n    }", "    int numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = numerator\
    \ * n_numerator;\n    int result_denominator = denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    int gcd = __gcd(numerator, denominator);\n    numerator /= gcd;\n    denominator\
    \ /= gcd;\n    return numerator % denominator == 0;", "    int num1, num2, den1,\
    \ den2;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp;\n    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n\
    \    std::cout << num1 << \" \" << den1 << \" \" << num2 << \" \" << den2 << std::endl;\n\
    \    return (num1 * den2) % (num2 * den1) == 0;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return (num % den ==\
    \ 0);", "    // Your code here\n    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = __gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  \
    \  int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"\
    %d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num\
    \ % den == 0);", "    // your code here\n    int a,b,c,d;\n    std::stringstream(x.substr(0,x.find(\"\
    /\")))>>a;\n    std::stringstream(x.substr(x.find(\"/\")+1))>>b;\n    std::stringstream(n.substr(0,n.find(\"\
    /\")))>>c;\n    std::stringstream(n.substr(n.find(\"/\")+1))>>d;\n    return (a*d)%(b*c)==0;",
  "  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = x_num * n_num;\n  int\
    \ den = x_den * n_den;\n  return (num % den == 0);", "    int numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int multiplier = std::stoi(n.substr(0, n.find('/')));\n    int multiplierDenominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int product = numerator * multiplier;\n\
    \    int productDenominator = denominator * multiplierDenominator;\n    return\
    \ product % productDenominator == 0;", "    int a = std::stoi(x.substr(0, x.find('/')));\n\
    \    int b = std::stoi(x.substr(x.find('/') + 1));\n    int c = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int d = std::stoi(n.substr(n.find('/') + 1));\n    int e\
    \ = a * c;\n    int f = b * d;\n    if (e % f == 0) {\n        return true;\n\
    \    }\n    return false;", "  // your code here\n  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd =\
    \ std::__gcd(num, den);\n  return (num / gcd) % (den / gcd) == 0;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    return (num\
    \ / gcd) % (den / gcd) == 0;", "  int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "    int a = std::stoi(x.substr(0, x.find('/')));\n    int b = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int c = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (a * d) % (b * c) == 0;", "    int x_num, x_den, n_num, n_den;\n\
    \    std::stringstream ss(x);\n    std::getline(ss, x, '/');\n    x_num = std::stoi(x);\n\
    \    std::getline(ss, x, '/');\n    x_den = std::stoi(x);\n    ss.clear();\n \
    \   ss.str(n);\n    std::getline(ss, n, '/');\n    n_num = std::stoi(n);\n   \
    \ std::getline(ss, n, '/');\n    n_den = std::stoi(n);\n    int num = x_num *\
    \ n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\n        return\
    \ true;\n    return false;", "  int x_num = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  return (num % den == 0);", "  int num1,\
    \ num2, den1, den2;\n  std::stringstream ss1(x);\n  std::stringstream ss2(n);\n\
    \  std::string temp;\n  std::getline(ss1, temp, '/');\n  num1 = std::stoi(temp);\n\
    \  std::getline(ss1, temp, '/');\n  den1 = std::stoi(temp);\n  std::getline(ss2,\
    \ temp, '/');\n  num2 = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  den2\
    \ = std::stoi(temp);\n  int num = num1 * num2;\n  int den = den1 * den2;\n  if(num\
    \ % den == 0)\n    return true;\n  return false;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return numerator %\
    \ denominator == 0;", "    int numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = numerator * n_numerator;\n    int result_denominator\
    \ = denominator * n_denominator;\n    int gcd = std::__gcd(result_numerator, result_denominator);\n\
    \    result_numerator /= gcd;\n    result_denominator /= gcd;\n    return result_denominator\
    \ == 1;", "  std::stringstream ss(x);\n  std::stringstream ss2(n);\n  int num1,\
    \ den1, num2, den2;\n  char c;\n  ss >> num1 >> c >> den1;\n  ss2 >> num2 >> c\
    \ >> den2;\n  int num = num1 * den2;\n  int den = den1 * num2;\n  return (num\
    \ % den == 0);", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num, den);\n\
    \  return (den / gcd) % (num / gcd) == 0;", "  int numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int multiplier = std::stoi(n.substr(0, n.find('/')));\n  int multiplierDenominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int resultNumerator = numerator *\
    \ multiplier;\n  int resultDenominator = denominator * multiplierDenominator;\n\
    \  int gcd = std::__gcd(resultNumerator, resultDenominator);\n  resultNumerator\
    \ /= gcd;\n  resultDenominator /= gcd;\n  return resultDenominator == 1;", " \
    \   int numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result = numerator * n_numerator;\n    int result_denominator\
    \ = denominator * n_denominator;\n    return (result % result_denominator == 0);",
  "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    return (num % den == 0);", "    int num1 = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int den1 = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ num2 = std::stoi(n.substr(0, n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = num1 * num2;\n    int den = den1 * den2;\n    if (num\
    \ % den == 0)\n        return true;\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  return numerator % denominator == 0;", "  // your code here\n\
    \  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  int gcd = std::__gcd(numerator, denominator);\n  return\
    \ denominator / gcd == numerator / gcd;", "    // Your code here\n    int num1,\
    \ num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    ss1 >> num1;\n    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n   \
    \ ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * num2;\n    int den = den1\
    \ * den2;\n    int gcd = __gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n\
    \    if (den == 1) {\n        return true;\n    }\n    return false;", "    int\
    \ x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    return num % den == 0;", "    int a = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int b = std::stoi(x.substr(x.find('/') + 1));\n    int c\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int e = a * c;\n    int f = b * d;\n    if (e % f == 0) {\n    \
    \    return true;\n    }\n    return false;", "    int a,b,c,d;\n    sscanf(x.c_str(),\"\
    %d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    int gcd = __gcd(a,b);\n\
    \    a/=gcd;\n    b/=gcd;\n    gcd = __gcd(c,d);\n    c/=gcd;\n    d/=gcd;\n \
    \   int num = a*d;\n    int den = b*c;\n    gcd = __gcd(num,den);\n    num/=gcd;\n\
    \    den/=gcd;\n    return num%den==0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "  // your code here\n  int num1,num2,den1,den2;\n  int\
    \ pos = x.find('/');\n  num1 = stoi(x.substr(0,pos));\n  den1 = stoi(x.substr(pos+1));\n\
    \  pos = n.find('/');\n  num2 = stoi(n.substr(0,pos));\n  den2 = stoi(n.substr(pos+1));\n\
    \  int num = num1*num2;\n  int den = den1*den2;\n  if(num%den==0)\n    return\
    \ true;\n  return false;", "    std::stringstream ss(x);\n    std::stringstream\
    \ ss2(n);\n    int num1, num2, den1, den2;\n    char c;\n    ss >> num1 >> c >>\
    \ den1;\n    ss2 >> num2 >> c >> den2;\n    int num = num1 * den2;\n    int den\
    \ = den1 * num2;\n    if (num % den == 0) {\n        return true;\n    }\n   \
    \ return false;", "  int numerator = std::stoi(x.substr(0, x.find('/')));\n  int\
    \ denominator = std::stoi(x.substr(x.find('/') + 1));\n  int multiplier = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int multiplierDenominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int resultNumerator = numerator * multiplier;\n  int resultDenominator\
    \ = denominator * multiplierDenominator;\n  int gcd = std::__gcd(resultNumerator,\
    \ resultDenominator);\n  resultNumerator /= gcd;\n  resultDenominator /= gcd;\n\
    \  return resultDenominator == 1;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return numerator %\
    \ denominator == 0;", "  // Your code here\n  int a,b,c,d;\n  std::stringstream\
    \ ss(x);\n  getline(ss,x,'/');\n  a=std::stoi(x);\n  getline(ss,x,'/');\n  b=std::stoi(x);\n\
    \  std::stringstream ss1(n);\n  getline(ss1,n,'/');\n  c=std::stoi(n);\n  getline(ss1,n,'/');\n\
    \  d=std::stoi(n);\n  if((a*d)%(b*c)==0)\n  return true;\n  else\n  return false;",
  "    int num1 = std::stoi(x.substr(0, x.find('/')));\n    int den1 = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int num2 = std::stoi(n.substr(0, n.find('/')));\n    int den2 =\
    \ std::stoi(n.substr(n.find('/') + 1));\n    int num = num1 * num2;\n    int den\
    \ = den1 * den2;\n    return (num % den == 0);", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  return result_numerator % result_denominator == 0;", "    int x_numerator =\
    \ std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    int\
    \ gcd = std::__gcd(numerator, denominator);\n    numerator /= gcd;\n    denominator\
    \ /= gcd;\n    return numerator % denominator == 0;", "    // Your code here\n\
    \    int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1\
    \ = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int\
    \ den = den1 * den2;\n    int gcd = std::__gcd(num, den);\n    num /= gcd;\n \
    \   den /= gcd;\n    return (num % den == 0);", "    // Your code here\n    int\
    \ x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return num % den == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  int gcd = std::__gcd(numerator,\
    \ denominator);\n  return denominator / gcd == numerator / gcd;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    std::stringstream ss(x);\n    std::stringstream ss2(n);\n\
    \    int a, b, c, d;\n    char ch;\n    ss >> a >> ch >> b;\n    ss2 >> c >> ch\
    \ >> d;\n    int num = a * d + b * c;\n    int den = b * d;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return (num\
    \ % den == 0);", "    // Your code here\n    int num1, den1, num2, den2;\n   \
    \ std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    char ch;\n   \
    \ ss1 >> num1 >> ch >> den1;\n    ss2 >> num2 >> ch >> den2;\n    int num = num1\
    \ * den2;\n    int den = den1 * num2;\n    if (num % den == 0)\n        return\
    \ true;\n    else\n        return false;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "  int num1 = std::stoi(x.substr(0, x.find(\"/\")));\n  int den1 = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int num2 = std::stoi(n.substr(0, n.find(\"/\")));\n  int den2 =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = num1 * num2;\n  int den\
    \ = den1 * den2;\n  int gcd = std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n\
    \  return (den == 1);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return num % den ==\
    \ 0;", "    // your code here\n    int num1,num2,den1,den2;\n    std::stringstream\
    \ ss;\n    ss<<x;\n    ss>>num1;\n    ss.clear();\n    ss<<n;\n    ss>>num2;\n\
    \    ss.clear();\n    ss<<x;\n    ss.ignore(1,'/');\n    ss>>den1;\n    ss.clear();\n\
    \    ss<<n;\n    ss.ignore(1,'/');\n    ss>>den2;\n    ss.clear();\n    int num=num1*num2;\n\
    \    int den=den1*den2;\n    if(num%den==0)\n        return true;\n    else\n\
    \        return false;", "    int num1 = std::stoi(x.substr(0, x.find('/')));\n\
    \    int den1 = std::stoi(x.substr(x.find('/') + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = num1 * num2;\n    int den = den1 * den2;\n    return (num % den == 0);",
  "  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator =\
    \ std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \  int result_numerator = x_numerator * n_numerator;\n  int result_denominator\
    \ = x_denominator * n_denominator;\n  return result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return (numerator % denominator == 0);"]
stop_tokens:
- "\n}"
