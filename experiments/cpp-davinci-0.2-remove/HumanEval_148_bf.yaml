name: HumanEval_148_bf
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in\
  \ our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus,\
  \ then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function\
  \ that takes two planet names as strings planet1 and planet2. \n// The function\
  \ should return a tuple containing all planets whose orbits are \n// located between\
  \ the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to\
  \ the sun. \n// The function should return an empty tuple if planet1 or planet2\n\
  // are not correct planet names. \n// Examples\nstd::vector<std::string> bf(std::string\
  \ planet1, std::string planet2) {\n"
tests: "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
  ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
  Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
  Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
  Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
  , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"))\
  \ == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"\
  Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"\
  Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
completions: ["    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = -1;\n    int index2 = -1;\n    for (int i = 0; i <\
    \ planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        int temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 < p2)\
    \ {\n        for (int i = p1 + 1; i < p2; i++) res.push_back(planets[i]);\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n \
    \   if (p1 == -1 || p2 == -1) {\n        return res;\n    }\n    if (p1 > p2)\
    \ {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int start\
    \ = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n \
    \       if (planets[i] == planet1) {\n            start = i;\n        }\n    \
    \    if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n  \
    \  if (start == -1 || end == -1) {\n        return result;\n    }\n    if (start\
    \ > end) {\n        std::swap(start, end);\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n \
    \   if (p1 == -1 || p2 == -1) {\n        return res;\n    }\n    if (p1 > p2)\
    \ {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int pos1\
    \ = -1, pos2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) pos1 = i;\n        if (planets[i] == planet2) pos2 =\
    \ i;\n    }\n    if (pos1 == -1 || pos2 == -1) return result;\n    if (pos1 >\
    \ pos2) {\n        int temp = pos1;\n        pos1 = pos2;\n        pos2 = temp;\n\
    \    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) res.push_back(planets[i]);\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int idx1 = -1, idx2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            idx1 = i;\n        }\n        if (planets[i] == planet2) {\n    \
    \        idx2 = i;\n        }\n    }\n    if (idx1 == -1 || idx2 == -1) {\n  \
    \      return result;\n    }\n    if (idx1 > idx2) {\n        std::swap(idx1,\
    \ idx2);\n    }\n    for (int i = idx1 + 1; i < idx2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        int temp = start;\n        start = end;\n    \
    \    end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n       \
    \ result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    bool found1 = false;\n    bool found2\
    \ = false;\n    int i1 = 0;\n    int i2 = 0;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            found1 = true;\n \
    \           i1 = i;\n        }\n        if (planets[i] == planet2) {\n       \
    \     found2 = true;\n            i2 = i;\n        }\n    }\n    if (!found1 ||\
    \ !found2) {\n        return result;\n    }\n    if (i1 < i2) {\n        for (int\
    \ i = i1 + 1; i < i2; i++) {\n            result.push_back(planets[i]);\n    \
    \    }\n    } else {\n        for (int i = i2 + 1; i < i1; i++) {\n          \
    \  result.push_back(planets[i]);\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int start\
    \ = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n \
    \       if (planets[i] == planet1) {\n            start = i;\n        }\n    \
    \    if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n  \
    \  if (start == -1 || end == -1) {\n        return result;\n    }\n    if (start\
    \ > end) {\n        std::swap(start, end);\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] ==\
    \ planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return result;\n    if\
    \ (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2; i++) {\n    \
    \    result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int pos1 = -1, pos2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            pos1 = i;\n      \
    \  }\n        if (planets[i] == planet2) {\n            pos2 = i;\n        }\n\
    \    }\n    if (pos1 == -1 || pos2 == -1) {\n        return res;\n    }\n    if\
    \ (pos1 > pos2) {\n        std::swap(pos1, pos2);\n    }\n    for (int i = pos1\
    \ + 1; i < pos2; i++) {\n        res.push_back(planets[i]);\n    }\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        std::swap(start, end);\n    }\n    for (int i\
    \ = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int i\
    \ = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n    \
    \        p1 = i;\n        }\n        if (planets[i] == planet2) {\n          \
    \  p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "\tstd::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint i = 0;\n\tfor (auto p : planets)\
    \ {\n\t\tif (p == planet1) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i == planets.size())\
    \ {\n\t\treturn result;\n\t}\n\tint j = 0;\n\tfor (auto p : planets) {\n\t\tif\
    \ (p == planet2) {\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\tif (j == planets.size())\
    \ {\n\t\treturn result;\n\t}\n\tif (i > j) {\n\t\tstd::swap(i, j);\n\t}\n\tfor\
    \ (int k = i + 1; k < j; k++) {\n\t\tresult.push_back(planets[k]);\n\t}\n\treturn\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n \
    \   if (i1 == -1 || i2 == -1) {\n        return res;\n    }\n    if (i1 > i2)\
    \ {\n        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        std::swap(start, end);\n    }\n    for (int i\
    \ = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int i =\
    \ 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n      \
    \      p1 = i;\n        }\n        if (planets[i] == planet2) {\n            p2\
    \ = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return res;\n\
    \    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for (int i\
    \ = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2)\
    \ std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return result;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1\
    \ + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1\
    \ = -1;\n    int index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n\
    \        if (planets[i] == planet1) {\n            index1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n\
    \    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    if\
    \ (index1 > index2) {\n        int temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    for (int i = index1 + 1; i < index2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int idx1 =\
    \ -1, idx2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            idx1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            idx2 = i;\n        }\n    }\n    if (idx1 == -1 || idx2 == -1)\
    \ {\n        return res;\n    }\n    if (idx1 > idx2) {\n        std::swap(idx1,\
    \ idx2);\n    }\n    for (int i = idx1 + 1; i < idx2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int idx1 = -1, idx2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            idx1 = i;\n      \
    \  }\n        if (planets[i] == planet2) {\n            idx2 = i;\n        }\n\
    \    }\n    if (idx1 == -1 || idx2 == -1) {\n        return res;\n    }\n    if\
    \ (idx1 > idx2) {\n        std::swap(idx1, idx2);\n    }\n    for (int i = idx1\
    \ + 1; i < idx2; i++) {\n        res.push_back(planets[i]);\n    }\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int pos1 = -1, pos2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            pos1 = i;\n        }\n        if (planets[i] == planet2) {\n    \
    \        pos2 = i;\n        }\n    }\n    if (pos1 == -1 || pos2 == -1) {\n  \
    \      return res;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1, pos2);\n\
    \    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    bool found1 = false;\n    bool found2\
    \ = false;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            found1 = true;\n        }\n        if (planets[i]\
    \ == planet2) {\n            found2 = true;\n        }\n    }\n    if (!found1\
    \ || !found2) {\n        return result;\n    }\n    int start = 0;\n    int end\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            start = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            end = i;\n        }\n    }\n    if (start > end) {\n\
    \        int temp = start;\n        start = end;\n        end = temp;\n    }\n\
    \    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = std::find(planets.begin(), planets.end(), planet1)\
    \ - planets.begin();\n    int index2 = std::find(planets.begin(), planets.end(),\
    \ planet2) - planets.begin();\n    if (index1 == planets.size() || index2 == planets.size())\
    \ {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ res;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int i\
    \ = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n    \
    \        p1 = i;\n        }\n        if (planets[i] == planet2) {\n          \
    \  p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == planets.size() ||\
    \ i2 == planets.size()) {\n        return res;\n    }\n    if (i1 > i2) {\n  \
    \      std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++) {\n  \
    \      res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int planet1_index = -1;\n    int\
    \ planet2_index = -1;\n    for (int i = 0; i < planets.size(); i++) {\n      \
    \  if (planets[i] == planet1) {\n            planet1_index = i;\n        }\n \
    \       if (planets[i] == planet2) {\n            planet2_index = i;\n       \
    \ }\n    }\n    if (planet1_index == -1 || planet2_index == -1) {\n        return\
    \ result;\n    }\n    if (planet1_index < planet2_index) {\n        for (int i\
    \ = planet1_index + 1; i < planet2_index; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = planet2_index + 1; i < planet1_index;\
    \ i++) {\n            result.push_back(planets[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        int temp = start;\n        start = end;\n    \
    \    end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n       \
    \ result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int i = 0;\n    while (i < planets.size()\
    \ && planets[i] != planet1) {\n        i++;\n    }\n    if (i == planets.size())\
    \ {\n        return res;\n    }\n    int j = i + 1;\n    while (j < planets.size()\
    \ && planets[j] != planet2) {\n        j++;\n    }\n    if (j == planets.size())\
    \ {\n        return res;\n    }\n    for (int k = i + 1; k < j; k++) {\n     \
    \   res.push_back(planets[k]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int start\
    \ = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n \
    \       if (planets[i] == planet1) {\n            start = i;\n        }\n    \
    \    if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n  \
    \  if (start == -1 || end == -1) {\n        return result;\n    }\n    if (start\
    \ > end) {\n        int temp = start;\n        start = end;\n        end = temp;\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int i1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\n\
    \    int i2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n\
    \    if (i1 >= planets.size() || i2 >= planets.size()) {\n        return res;\n\
    \    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for (int i\
    \ = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == 0 && end == 0) {\n        return result;\n    }\n   \
    \ if (start > end) {\n        int temp = start;\n        start = end;\n      \
    \  end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        std::swap(start, end);\n    }\n    for (int i\
    \ = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "\tstd::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> res;\n\tint start = 0, end = 0;\n\tfor (int i\
    \ = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tstart\
    \ = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tend = i;\n\t\t}\n\t}\n\t\
    if (start == 0 || end == 0) {\n\t\treturn res;\n\t}\n\tif (start > end) {\n\t\t\
    int temp = start;\n\t\tstart = end;\n\t\tend = temp;\n\t}\n\tfor (int i = start\
    \ + 1; i < end; i++) {\n\t\tres.push_back(planets[i]);\n\t}\n\treturn res;", " \
    \   std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n\
    \    if (i1 == -1 || i2 == -1) {\n        return result;\n    }\n    if (i1 >\
    \ i2) {\n        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "\tstd::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 < index2) {\n\t\tfor (int i = index1 + 1; i < index2; i++) {\n\t\t\t\
    result.push_back(planets[i]);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = index2 +\
    \ 1; i < index1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i1 = -1,\
    \ i2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) i1 = i;\n        if (planets[i] == planet2) i2 = i;\n    }\n   \
    \ if (i1 == -1 || i2 == -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n\
    \    for (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2)\
    \ std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ res;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int pos1 = -1, pos2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          pos1 = i;\n        }\n        if (planets[i] == planet2) {\n      \
    \      pos2 = i;\n        }\n    }\n    if (pos1 == -1 || pos2 == -1) {\n    \
    \    return result;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1, pos2);\n\
    \    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n \
    \   if (p1 == -1 || p2 == -1) {\n        return res;\n    }\n    if (p1 > p2)\
    \ {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int i1\
    \ = -1, i2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) i1 = i;\n        if (planets[i] == planet2) i2 = i;\n    }\n   \
    \ if (i1 == -1 || i2 == -1) return result;\n    if (i1 > i2) std::swap(i1, i2);\n\
    \    for (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\n        \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n    std::vector<std::string>\
    \ result;\n    int i = 0;\n    for (auto p : planets) {\n        if (p == planet1)\
    \ {\n            break;\n        }\n        i++;\n    }\n    if (i == planets.size())\
    \ {\n        return result;\n    }\n    int j = 0;\n    for (auto p : planets)\
    \ {\n        if (p == planet2) {\n            break;\n        }\n        j++;\n\
    \    }\n    if (j == planets.size()) {\n        return result;\n    }\n    if\
    \ (i > j) {\n        std::swap(i, j);\n    }\n    for (int k = i + 1; k < j; k++)\
    \ {\n        result.push_back(planets[k]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    bool found1\
    \ = false;\n    bool found2 = false;\n    int start = 0;\n    int end = 0;\n \
    \   for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            found1 = true;\n            start = i;\n        }\n        if\
    \ (planets[i] == planet2) {\n            found2 = true;\n            end = i;\n\
    \        }\n    }\n    if (!found1 || !found2) {\n        return result;\n   \
    \ }\n    if (start > end) {\n        int temp = start;\n        start = end;\n\
    \        end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n   \
    \     result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1\
    \ = -1;\n    int index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n\
    \        if (planets[i] == planet1) {\n            index1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n\
    \    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    if\
    \ (index1 > index2) {\n        std::swap(index1, index2);\n    }\n    for (int\
    \ i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1, end = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            start = i;\n        }\n        if (planets[i] == planet2) {\n   \
    \         end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n  \
    \      return res;\n    }\n    if (start > end) {\n        std::swap(start, end);\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == planets.size() ||\
    \ p2 == planets.size()) {\n        return res;\n    }\n    if (p1 > p2) {\n  \
    \      std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n  \
    \      res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 < p2) {\n        for (int\
    \ i = p1 + 1; i < p2; i++) {\n            res.push_back(planets[i]);\n       \
    \ }\n    } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n    std::vector<std::string> result;\n    int i = 0;\n    while\
    \ (planets[i] != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j]\
    \ != planet2) {\n        j++;\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int i =\
    \ 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "\tstd::vector<std::string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string>\
    \ result;\n\tint start = -1, end = -1;\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tstart = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tend = i;\n\t\t}\n\t}\n\tif (start == -1 || end == -1) {\n\
    \t\treturn result;\n\t}\n\tif (start > end) {\n\t\tstd::swap(start, end);\n\t\
    }\n\tfor (int i = start + 1; i < end; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;", "    std::vector<std::string> planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = -1;\n    int index2 = -1;\n    for (int i = 0; i <\
    \ planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (int i = index1 + 1;\
    \ i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n \
    \   } else {\n        for (int i = index2 + 1; i < index1; i++) {\n          \
    \  result.push_back(planets[i]);\n        }\n    }\n    return result;", "\tstd::vector<std::string>\
    \ planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string> res;\n\tint start = -1,\
    \ end = -1;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i]\
    \ == planet1) {\n\t\t\tstart = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\
    \t\tend = i;\n\t\t}\n\t}\n\tif (start == -1 || end == -1) {\n\t\treturn res;\n\
    \t}\n\tif (start > end) {\n\t\tstd::swap(start, end);\n\t}\n\tfor (int i = start\
    \ + 1; i < end; i++) {\n\t\tres.push_back(planets[i]);\n\t}\n\treturn res;", "\t\
    std::vector<std::string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string>\
    \ result;\n\tint start = -1, end = -1;\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tstart = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tend = i;\n\t\t}\n\t}\n\tif (start == -1 || end == -1) {\n\
    \t\treturn result;\n\t}\n\tif (start > end) {\n\t\tstd::swap(start, end);\n\t\
    }\n\tfor (int i = start + 1; i < end; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;", "  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::vector<std::string> res;\n  int start = -1;\n  int end = -1;\n  for\
    \ (int i = 0; i < planets.size(); i++) {\n    if (planets[i] == planet1) {\n \
    \     start = i;\n    }\n    if (planets[i] == planet2) {\n      end = i;\n  \
    \  }\n  }\n  if (start == -1 || end == -1) {\n    return res;\n  }\n  if (start\
    \ > end) {\n    std::swap(start, end);\n  }\n  for (int i = start + 1; i < end;\
    \ i++) {\n    res.push_back(planets[i]);\n  }\n  return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1\
    \ = -1;\n    int index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n\
    \        if (planets[i] == planet1) {\n            index1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n\
    \    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    if\
    \ (index1 > index2) {\n        std::swap(index1, index2);\n    }\n    for (int\
    \ i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int index1 = -1;\n    int index2 = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            index2 = i;\n        }\n    }\n    if (index1 == -1 || index2 ==\
    \ -1) {\n        return result;\n    }\n    if (index1 > index2) {\n        int\
    \ temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n  \
    \  for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "\tstd::vector<std::string> planets = { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\t\
    std::vector<std::string> result;\n\tint start = -1, end = -1;\n\tfor (int i =\
    \ 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) start = i;\n\t\
    \tif (planets[i] == planet2) end = i;\n\t}\n\tif (start == -1 || end == -1) return\
    \ result;\n\tif (start > end) std::swap(start, end);\n\tfor (int i = start + 1;\
    \ i < end; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = 0, p2 = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == 0 || p2 == 0) return result;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int pos1\
    \ = -1, pos2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) pos1 = i;\n        if (planets[i] == planet2) pos2 =\
    \ i;\n    }\n    if (pos1 == -1 || pos2 == -1) return result;\n    if (pos1 >\
    \ pos2) std::swap(pos1, pos2);\n    for (int i = pos1 + 1; i < pos2; i++) result.push_back(planets[i]);\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 < i2) {\n        for (int i = i1 + 1; i < i2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = i2 + 1; i < i1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1\
    \ = -1;\n    int index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n\
    \        if (planets[i] == planet1) {\n            index1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n\
    \    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    if\
    \ (index1 < index2) {\n        for (int i = index1 + 1; i < index2; i++) {\n \
    \           result.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1, end = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            start = i;\n        }\n        if (planets[i] == planet2) {\n   \
    \         end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n  \
    \      return res;\n    }\n    if (start > end) {\n        std::swap(start, end);\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) index1 = i;\n        if (planets[i] == planet2) index2 = i;\n  \
    \  }\n    if (index1 == -1 || index2 == -1) return result;\n    if (index1 > index2)\
    \ std::swap(index1, index2);\n    for (int i = index1 + 1; i < index2; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == 0 && end == 0) {\n        return result;\n    }\n   \
    \ if (start > end) {\n        int temp = start;\n        start = end;\n      \
    \  end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int i =\
    \ 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2)\
    \ std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        std::swap(start, end);\n    }\n    for (int i\
    \ = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    bool is_planet1_found = false;\n\
    \    bool is_planet2_found = false;\n    int planet1_index = -1;\n    int planet2_index\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            is_planet1_found = true;\n            planet1_index\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            is_planet2_found\
    \ = true;\n            planet2_index = i;\n        }\n    }\n    if (!is_planet1_found\
    \ || !is_planet2_found) {\n        return result;\n    }\n    if (planet1_index\
    \ < planet2_index) {\n        for (int i = planet1_index + 1; i < planet2_index;\
    \ i++) {\n            result.push_back(planets[i]);\n        }\n    } else {\n\
    \        for (int i = planet2_index + 1; i < planet1_index; i++) {\n         \
    \   result.push_back(planets[i]);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n \
    \   if (p1 == -1 || p2 == -1) {\n        return res;\n    }\n    if (p1 > p2)\
    \ {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int i\
    \ = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n    \
    \        p1 = i;\n        }\n        if (planets[i] == planet2) {\n          \
    \  p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "\tstd::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n\tint index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n\tif (index1 == 8 || index2 == 8)\n\
    \t\treturn result;\n\tif (index1 > index2)\n\t\tstd::swap(index1, index2);\n\t\
    for (int i = index1 + 1; i < index2; i++)\n\t\tresult.push_back(planets[i]);\n\
    \treturn result;", "    std::vector<std::string> planets = {\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n  \
    \  for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            p1 = i;\n        }\n        if (planets[i] == planet2) {\n  \
    \          p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n      \
    \  return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n   \
    \ }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n \
    \   if (i1 == -1 || i2 == -1) {\n        return res;\n    }\n    if (i1 < i2)\
    \ {\n        for (int i = i1 + 1; i < i2; i++) {\n            res.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = i2 + 1; i < i1; i++) {\n      \
    \      res.push_back(planets[i]);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n \
    \   if (p1 == -1 || p2 == -1) {\n        return res;\n    }\n    if (p1 > p2)\
    \ {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int idx1 = -1, idx2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            idx1 = i;\n        }\n        if (planets[i] == planet2) {\n    \
    \        idx2 = i;\n        }\n    }\n    if (idx1 == -1 || idx2 == -1) {\n  \
    \      return result;\n    }\n    if (idx1 > idx2) {\n        std::swap(idx1,\
    \ idx2);\n    }\n    for (int i = idx1 + 1; i < idx2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "\tstd::vector<std::string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string>\
    \ result;\n\tint start = -1, end = -1;\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tstart = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tend = i;\n\t\t}\n\t}\n\tif (start == -1 || end == -1) {\n\
    \t\treturn result;\n\t}\n\tif (start > end) {\n\t\tstd::swap(start, end);\n\t\
    }\n\tfor (int i = start + 1; i < end; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;", "    std::vector<std::string> planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "\tstd::vector<std::string> planets = { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string>\
    \ result;\n\tint p1 = -1, p2 = -1;\n\tfor (int i = 0; i < planets.size(); i++)\
    \ {\n\t\tif (planets[i] == planet1) p1 = i;\n\t\tif (planets[i] == planet2) p2\
    \ = i;\n\t}\n\tif (p1 == -1 || p2 == -1) return result;\n\tif (p1 > p2) std::swap(p1,\
    \ p2);\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;", "    std::vector<std::string> planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i = 0;\n    while (planets[i] != planet1) {\n        i++;\n\
    \    }\n    int j = 0;\n    while (planets[j] != planet2) {\n        j++;\n  \
    \  }\n    if (i > j) {\n        for (int k = j; k <= i; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    } else {\n        for (int k = i; k <= j; k++) {\n           \
    \ result.push_back(planets[k]);\n        }\n    }\n    return result;", "\tstd::vector<std::string>\
    \ planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string> result;\n\tint start\
    \ = -1, end = -1;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i]\
    \ == planet1) {\n\t\t\tstart = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\
    \t\tend = i;\n\t\t}\n\t}\n\tif (start == -1 || end == -1) {\n\t\treturn result;\n\
    \t}\n\tif (start > end) {\n\t\tstd::swap(start, end);\n\t}\n\tfor (int i = start\
    \ + 1; i < end; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) i1 = i;\n        if (planets[i] ==\
    \ planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 == -1) return result;\n    if\
    \ (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 + 1; i < i2; i++) result.push_back(planets[i]);\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = -1;\n    int index2 = -1;\n    for (int i = 0; i <\
    \ planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        int temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2)\
    \ {\n        int tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int i =\
    \ 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n      \
    \      p1 = i;\n        }\n        if (planets[i] == planet2) {\n            p2\
    \ = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return res;\n\
    \    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for (int i\
    \ = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        std::swap(start, end);\n    }\n    for (int i\
    \ = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n    }\n\
    \    return result;", "    std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int idx1 = -1, idx2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) idx1\
    \ = i;\n        if (planets[i] == planet2) idx2 = i;\n    }\n    if (idx1 == -1\
    \ || idx2 == -1) return res;\n    if (idx1 > idx2) std::swap(idx1, idx2);\n  \
    \  for (int i = idx1 + 1; i < idx2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\n        \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n  \
    \  for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            p1 = i;\n        }\n        if (planets[i] == planet2) {\n  \
    \          p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n      \
    \  return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n   \
    \ }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "\tstd::vector<std::string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string>\
    \ result;\n\tint index1 = -1, index2 = -1;\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tindex2 = i;\n\t\t}\n\t}\n\tif (index1 == -1 || index2 ==\
    \ -1) {\n\t\treturn result;\n\t}\n\tif (index1 > index2) {\n\t\tstd::swap(index1,\
    \ index2);\n\t}\n\tfor (int i = index1 + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;", "    std::vector<std::string> planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1, p2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    bool found1 = false;\n   \
    \ bool found2 = false;\n    for (auto planet : planets) {\n        if (planet\
    \ == planet1) {\n            found1 = true;\n        }\n        if (planet ==\
    \ planet2) {\n            found2 = true;\n        }\n        if (found1 && !found2)\
    \ {\n            result.push_back(planet);\n        }\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = -1;\n    int index2 = -1;\n    for (int i = 0; i <\
    \ planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (int i = index1 + 1;\
    \ i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n \
    \   } else {\n        for (int i = index2 + 1; i < index1; i++) {\n          \
    \  result.push_back(planets[i]);\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == 0 || end == 0) {\n        return result;\n    }\n   \
    \ if (start < end) {\n        for (int i = start + 1; i < end; i++) {\n      \
    \      result.push_back(planets[i]);\n        }\n    } else {\n        for (int\
    \ i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i1 = -1, i2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) i1 = i;\n        if (planets[i] == planet2) i2 = i;\n    }\n   \
    \ if (i1 == -1 || i2 == -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n\
    \    for (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "\tstd::vector<std::string>\
    \ planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" };\n\tstd::vector<std::string> result;\n\tint p1 = -1,\
    \ p2 = -1;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] ==\
    \ planet1) {\n\t\t\tp1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2\
    \ = i;\n\t\t}\n\t}\n\tif (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (p1 > p2) {\n\t\tstd::swap(p1, p2);\n\t}\n\tfor (int i = p1 + 1; i < p2; i++)\
    \ {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        int temp = start;\n        start = end;\n    \
    \    end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n       \
    \ result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i1 = -1,\
    \ i2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) i1 = i;\n        if (planets[i] == planet2) i2 = i;\n    }\n   \
    \ if (i1 == -1 || i2 == -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n\
    \    for (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            break;\n        }\n\
    \    }\n    for (j = 0; j < planets.size(); j++) {\n        if (planets[j] ==\
    \ planet2) {\n            break;\n        }\n    }\n    if (i == planets.size()\
    \ || j == planets.size()) {\n        return result;\n    }\n    if (i > j) {\n\
    \        std::swap(i, j);\n    }\n    for (int k = i + 1; k < j; k++) {\n    \
    \    result.push_back(planets[k]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n\
    \    if (i1 == -1 || i2 == -1) {\n        return result;\n    }\n    if (i1 >\
    \ i2) {\n        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int start\
    \ = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n \
    \       if (planets[i] == planet1) {\n            start = i;\n        }\n    \
    \    if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n  \
    \  if (start == -1 || end == -1) {\n        return result;\n    }\n    if (start\
    \ > end) {\n        int temp = start;\n        start = end;\n        end = temp;\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int i =\
    \ 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return res;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1 +\
    \ 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) res.push_back(planets[i]);\n    return\
    \ res;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    bool start = false;\n    for (auto p : planets) {\n        if (p ==\
    \ planet1) {\n            start = true;\n        }\n        if (start) {\n   \
    \         res.push_back(p);\n        }\n        if (p == planet2) {\n        \
    \    break;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i = 0;\n\
    \    while (planets[i] != planet1) {\n        i++;\n    }\n    int j = i;\n  \
    \  while (planets[j] != planet2) {\n        j++;\n    }\n    for (int k = i; k\
    \ <= j; k++) {\n        res.push_back(planets[k]);\n    }\n    return res;", " \
    \   std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) p1 = i;\n        if (planets[i] == planet2)\
    \ p2 = i;\n    }\n    if (p1 == -1 || p2 == -1) return res;\n    if (p1 > p2)\
    \ std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) i1 = i;\n\
    \        if (planets[i] == planet2) i2 = i;\n    }\n    if (i1 == -1 || i2 ==\
    \ -1) return result;\n    if (i1 > i2) std::swap(i1, i2);\n    for (int i = i1\
    \ + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;", "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ res;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size(); i++)\
    \ {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n  \
    \      if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n \
    \   if (i1 == -1 || i2 == -1) {\n        return res;\n    }\n    if (i1 > i2)\
    \ {\n        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;"]
stop_tokens:
- "\n}"
