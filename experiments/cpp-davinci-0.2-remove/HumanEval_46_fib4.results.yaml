language: cpp
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e =\
    \ 0;\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\
    \tif (n == 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c +\
    \ d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ tmp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n     \
    \   d = tmp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp28zln2il: /tmp/tmp28zln2il.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e\
    \ = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n \
    \       e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n \
    \       d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e\
    \ = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n \
    \       e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n \
    \       d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n <= 3) return n;\n    long a =\
    \ 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp4y4p_rkh: /tmp/tmp4y4p_rkh.cpp:24: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n     \
    \   return 2;\n    } else if (n == 3) {\n        return 0;\n    } else {\n   \
    \     long a = 0;\n        long b = 0;\n        long c = 2;\n        long d =\
    \ 0;\n        long e = 0;\n        for (int i = 4; i <= n; i++) {\n          \
    \  e = a + b + c + d;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = e;\n        }\n        return e;\n    }\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmphdlipcls: /tmp/tmphdlipcls.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long temp;\n  \
    \  for (int i = 4; i <= n; i++) {\n        temp = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a;\n        a = b;\n        b = c;\n        c = d;\n        d = temp\
    \ + b + c + d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpfdsv9iw9: /tmp/tmpfdsv9iw9.cpp:28: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = temp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tlong fib4[n + 1];\n\tfib4[0] = 0;\n\t\
    fib4[1] = 0;\n\tfib4[2] = 2;\n\tfib4[3] = 0;\n\tfor (int i = 4; i <= n; i++) {\n\
    \t\tfib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n\t}\n\t\
    return fib4[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b\
    \ + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpbosg2mqy: /tmp/tmpbosg2mqy.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) return\
    \ 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n\
    \  long a = 0, b = 0, c = 2, d = 0;\n  for (long i = 4; i <= n; i++) {\n    long\
    \ temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n \
    \ }\n  return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpnfq089sv: /tmp/tmpnfq089sv.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n \
    \       return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return\
    \ 2;\n    if(n==3)\n        return 0;\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int\
    \ i=4;i<=n;i++)\n    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n     \
    \   c=d;\n        d=e;\n    }\n    return e;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  long a = 0, b = 0, c = 2, d = 0, e;\n\
    \  if (n == 0) return a;\n  if (n == 1) return b;\n  if (n == 2) return c;\n \
    \ for (int i = 3; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b =\
    \ c;\n    c = d;\n    d = e;\n  }\n  return d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp60ti48jj: /tmp/tmp60ti48jj.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long temp;\n  \
    \  for (int i = 4; i <= n; i++) {\n        temp = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n < 0) return -1;\n  if (n == 0)\
    \ return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return\
    \ 0;\n  long a = 0, b = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n \
    \   long temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n\
    \  }\n  return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n \
    \   assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp_qwij071: /tmp/tmp_qwij071.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, e =\
    \ 0;\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\telse if (n == 1) {\n\t\treturn 0;\n\
    \t}\n\telse if (n == 2) {\n\t\treturn 2;\n\t}\n\telse if (n == 3) {\n\t\treturn\
    \ 0;\n\t}\n\telse {\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\te = a + b + c +\
    \ d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = e;\n\t\t}\n\t\treturn\
    \ e;\n\t}\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  // your code here\n  long a = 0, b =\
    \ 0, c = 2, d = 0, e;\n  if (n == 0)\n    return a;\n  if (n == 1)\n    return\
    \ b;\n  if (n == 2)\n    return c;\n  if (n == 3)\n    return d;\n  for (int i\
    \ = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c =\
    \ d;\n    d = e;\n  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b\
    \ + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpbosg2mqy: /tmp/tmpbosg2mqy.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\t\
    if (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n\
    \ == 3) {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\t\
    long d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong tmp = a + b + c + d;\n\
    \t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = tmp;\n\t}\n\treturn a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpgbv88y44: /tmp/tmpgbv88y44.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ fib4_n_1 = 0;\n    long fib4_n_2 = 0;\n    long fib4_n_3 = 2;\n    long fib4_n_4\
    \ = 0;\n    long fib4_n = 0;\n    for (int i = 4; i <= n; i++) {\n        fib4_n\
    \ = fib4_n_1 + fib4_n_2 + fib4_n_3 + fib4_n_4;\n        fib4_n_4 = fib4_n_3;\n\
    \        fib4_n_3 = fib4_n_2;\n        fib4_n_2 = fib4_n_1;\n        fib4_n_1\
    \ = fib4_n;\n    }\n    return fib4_n;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpid4w_u2q: /tmp/tmpid4w_u2q.cpp:32: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b\
    \ + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpbosg2mqy: /tmp/tmpbosg2mqy.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a;\n        a = b;\n        b = c;\n        c = d;\n        d = temp\
    \ + b + c + d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpfdsv9iw9: /tmp/tmpfdsv9iw9.cpp:28: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  // your code here\n  if(n==0)\n    return\
    \ 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return 2;\n  if(n==3)\n    return\
    \ 0;\n  long a=0,b=0,c=2,d=0,e=0;\n  for(int i=4;i<=n;i++)\n  {\n    e=a+b+c+d;\n\
    \    a=b;\n    b=c;\n    c=d;\n    d=e;\n  }\n  return e;\n}\nint main() {\n \
    \   auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long fib4[n+1];\n    fib4[0] = 0;\n\
    \    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for (int i = 4; i <=\
    \ n; i++) {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \    }\n    return fib4[n];\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b\
    \ = 0, c = 2, d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong temp = a + b\
    \ + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\treturn a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmptokd7v38: /tmp/tmptokd7v38.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ tmp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n     \
    \   d = tmp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp28zln2il: /tmp/tmp28zln2il.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n     \
    \   a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmphdlipcls: /tmp/tmphdlipcls.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = temp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b\
    \ + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpbosg2mqy: /tmp/tmpbosg2mqy.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b\
    \ = 0, c = 2, d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\td = a + b + c;\n\t\
    \ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp_i0ii5qt: /tmp/tmp_i0ii5qt.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n < 0) {\n    return -1;\n  }\n \
    \ if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if\
    \ (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n    return 0;\n  }\n  long\
    \ a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n  long e = 0;\n  for (long\
    \ i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c\
    \ = d;\n    d = e;\n  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n < 0) {\n        return -1;\n\
    \    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n     \
    \   return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n ==\
    \ 3) {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpm2ca9p4m: /tmp/tmpm2ca9p4m.cpp:41: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long tmp = a + b +\
    \ c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = tmp;\n  }\n  return a +\
    \ b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpkib_c6zp: /tmp/tmpkib_c6zp.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b\
    \ = 0, c = 2, d = 0, e = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b +\
    \ c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n \
    \ if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if\
    \ (n == 3) {\n    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n\
    \  long d = 0;\n  long e = 0;\n  for (long i = 4; i <= n; i++) {\n    e = a +\
    \ b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b\
    \ = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b\
    \ + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpbosg2mqy: /tmp/tmpbosg2mqy.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n <= 3) {\n\
    \        return n == 2;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for\
    \ (long i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpelq7nfdm: /tmp/tmpelq7nfdm.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e\
    \ = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 2;\n    if (n == 3) return 0;\n    for (int i = 4; i <= n; i++) {\n \
    \       e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n \
    \       d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if\
    \ (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n\
    \    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n     \
    \   a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return\
    \ a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpc_n7ee0n: /tmp/tmpc_n7ee0n.cpp:39: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n < 0) {\n        return -1;\n\
    \    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n     \
    \   return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n ==\
    \ 3) {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 2;\n    long d = 0;\n    long e = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b\
    \ = 0, c = 2, d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong temp = a + b\
    \ + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\treturn a\
    \ + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmptokd7v38: /tmp/tmptokd7v38.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if\
    \ (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n\
    \    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n     \
    \   a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return\
    \ a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpc_n7ee0n: /tmp/tmpc_n7ee0n.cpp:39: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ tmp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n     \
    \   d = tmp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp28zln2il: /tmp/tmp28zln2il.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\t\
    if (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n\
    \ == 3) {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\t\
    long d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong temp = a + b + c + d;\n\
    \t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\treturn a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp8inv2but: /tmp/tmp8inv2but.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) return\
    \ 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n\
    \  long a = 0, b = 0, c = 2, d = 0;\n  for (int i = 4; i <= n; i++) {\n    long\
    \ temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n \
    \ }\n  return a + b + c + d;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpqmulayns: /tmp/tmpqmulayns.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n \
    \   for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    for (int i = 3; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpha02nr7u: /tmp/tmpha02nr7u.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n  // your code here\n  if(n==0) return\
    \ 0;\n  if(n==1) return 0;\n  if(n==2) return 2;\n  if(n==3) return 0;\n  long\
    \ a=0,b=0,c=2,d=0,e=0;\n  for(int i=4;i<=n;i++){\n    e=a+b+c+d;\n    a=b;\n \
    \   b=c;\n    c=d;\n    d=e;\n  }\n  return e;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n\
    \    if (n == 0)\n        return a;\n    else if (n == 1)\n        return b;\n\
    \    else if (n == 2)\n        return c;\n    else if (n == 3)\n        return\
    \ d;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n     \
    \   return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvxj3b2am: /tmp/tmpvxj3b2am.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpoxgu2urv: /tmp/tmpoxgu2urv.cpp:27: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpyse3jweq: /tmp/tmpyse3jweq.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109802
