name: HumanEval_33_sort_third
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list\
  \ l and returns a list l' such that\n// l' is identical to l in the indicies that\
  \ are not divisible by three, while its values at the indicies that are divisible\
  \ by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n\
  std::vector<long> sort_third(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2,\
  \ (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n"
completions: ["    std::vector<long> l_prime;\n    std::vector<long> l_third;\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n         \
    \   l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int\
    \ i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() +\
    \ 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l_new;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_new.push_back(l1[i / 3]);\n\
    \        } else if (i % 3 == 1) {\n            l_new.push_back(l2[i / 3]);\n \
    \       } else {\n            l_new.push_back(l3[i / 3]);\n        }\n    }\n\
    \    return l_new;", "    std::vector<long> result;\n    std::vector<long> temp;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     temp.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        result.insert(result.begin() + 3 * i, temp[i]);\n\
    \    }\n    return result;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n        } else if (i\
    \ % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else {\n      \
    \      l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            third.push_back(l[i]);\n        }\n\
    \        else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, third[i]);\n    }\n    return l_prime;", "    std::vector<long> result;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        } else {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        result.insert(result.begin()\
    \ + 3 * i, third[i]);\n    }\n    return result;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    // Your code here\n\
    \    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    std::vector<long> l4;\n    for(int i=0;i<l.size();i++)\n    {\n        if(i%3==0)\n\
    \        {\n            l1.push_back(l[i]);\n        }\n        else if(i%3==1)\n\
    \        {\n            l2.push_back(l[i]);\n        }\n        else\n       \
    \ {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),l1.end());\n\
    \    for(int i=0;i<l1.size();i++)\n    {\n        l4.push_back(l1[i]);\n    }\n\
    \    for(int i=0;i<l2.size();i++)\n    {\n        l4.push_back(l2[i]);\n    }\n\
    \    for(int i=0;i<l3.size();i++)\n    {\n        l4.push_back(l3[i]);\n    }\n\
    \    return l4;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int\
    \ i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() +\
    \ i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    // Your code here\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n\
    \    {\n        if(i%3==0)\n        {\n            std::vector<long> l2;\n   \
    \         l2.push_back(l[i]);\n            l2.push_back(l[i+1]);\n           \
    \ l2.push_back(l[i+2]);\n            std::sort(l2.begin(),l2.end());\n       \
    \     l1.push_back(l2[0]);\n            l1.push_back(l2[1]);\n            l1.push_back(l2[2]);\n\
    \        }\n        else\n        {\n            l1.push_back(l[i]);\n       \
    \ }\n    }\n    return l1;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l_new;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            l_new.push_back(l1[i / 3]);\n        } else\
    \ if (i % 3 == 1) {\n            l_new.push_back(l2[i / 3]);\n        } else {\n\
    \            l_new.push_back(l3[i / 3]);\n        }\n    }\n    return l_new;",
  "    std::vector<long> l_new;\n    for (int i = 0; i < l.size(); i++) {\n      \
    \  if (i % 3 == 0) {\n            std::vector<long> l_temp;\n            l_temp.push_back(l[i]);\n\
    \            l_temp.push_back(l[i + 1]);\n            l_temp.push_back(l[i + 2]);\n\
    \            std::sort(l_temp.begin(), l_temp.end());\n            l_new.push_back(l_temp[0]);\n\
    \            l_new.push_back(l_temp[1]);\n            l_new.push_back(l_temp[2]);\n\
    \            i += 2;\n        } else {\n            l_new.push_back(l[i]);\n \
    \       }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_prime_sorted;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime_sorted.push_back(l[i]);\n      \
    \  }\n    }\n    std::sort(l_prime.begin(), l_prime.end());\n    for (int i =\
    \ 0; i < l_prime.size(); i++) {\n        l_prime_sorted.insert(l_prime_sorted.begin()\
    \ + 3 * i, l_prime[i]);\n    }\n    return l_prime_sorted;", "\tstd::vector<long>\
    \ l_prime;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\
    \tstd::vector<long> temp;\n\t\t\ttemp.push_back(l[i]);\n\t\t\ttemp.push_back(l[i\
    \ + 1]);\n\t\t\ttemp.push_back(l[i + 2]);\n\t\t\tsort(temp.begin(), temp.end());\n\
    \t\t\tl_prime.push_back(temp[0]);\n\t\t\tl_prime.push_back(temp[1]);\n\t\t\tl_prime.push_back(temp[2]);\n\
    \t\t}\n\t\telse {\n\t\t\tl_prime.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_prime;",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        }\n        else\
    \ if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\n        else\
    \ {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l3.begin(), l3.end());\n    int j = 0;\n    int k\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            l4.push_back(l1[j]);\n            j++;\n        }\n        else if\
    \ (i % 3 == 1) {\n            l4.push_back(l[i]);\n        }\n        else {\n\
    \            l4.push_back(l3[k]);\n            k++;\n        }\n    }\n    return\
    \ l4;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> result;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        } else {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        result.insert(result.begin()\
    \ + i * 3, third[i]);\n    }\n    return result;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            for (int j = i; j < i + 3; j++) {\n\
    \                temp.push_back(l[j]);\n            }\n            std::sort(temp.begin(),\
    \ temp.end());\n            for (int j = 0; j < temp.size(); j++) {\n        \
    \        l_prime.push_back(temp[j]);\n            }\n        } else {\n      \
    \      l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;", "   \
    \ std::vector<long> l1;\n    l1.reserve(l.size());\n    std::vector<long> l2;\n\
    \    l2.reserve(l.size());\n    std::vector<long> l3;\n    l3.reserve(l.size());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n\
    \        } else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    l4.reserve(l.size());\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i]);\n        } else\
    \ if (i % 3 == 1) {\n            l4.push_back(l2[i]);\n        } else {\n    \
    \        l4.push_back(l3[i]);\n        }\n    }\n    return l4;", "    std::vector<long>\
    \ l_new;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n       \
    \ } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n       \
    \     l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l4.push_back(l1[i / 3]);\n        }\n        else if (i % 3 ==\
    \ 1) {\n            l4.push_back(l2[i / 3]);\n        }\n        else {\n    \
    \        l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;", "    std::vector<long>\
    \ result;\n    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            third.push_back(l[i]);\n        }\
    \ else {\n            result.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        result.insert(result.begin()\
    \ + 3 * i, third[i]);\n    }\n    return result;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ if (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n       \
    \     }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i\
    \ + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n  \
    \          l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l4;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n \
    \   for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n        \
    \    l4.push_back(l1[j]);\n            j++;\n        } else if (i % 3 == 1) {\n\
    \            l4.push_back(l2[k]);\n            k++;\n        } else {\n      \
    \      l4.push_back(l3[m]);\n            m++;\n        }\n    }\n    return l4;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n\
    \        } else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        }\n        else\
    \ if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\n        else\
    \ {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l3.begin(), l3.end());\n    int i = 0;\n    int j\
    \ = 0;\n    int k = 0;\n    while (i < l1.size() && j < l2.size() && k < l3.size())\
    \ {\n        l4.push_back(l1[i]);\n        l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n\
    \        i++;\n        j++;\n        k++;\n    }\n    while (i < l1.size() &&\
    \ j < l2.size()) {\n        l4.push_back(l1[i]);\n        l4.push_back(l2[j]);\n\
    \        i++;\n        j++;\n    }\n    while (i < l1.size() && k < l3.size())\
    \ {\n        l4.push_back(l1[i]);\n        l4.push_back(l3[k]);\n        i++;\n\
    \        k++;\n    }\n    while (j < l2.size() && k < l3.size()) {\n        l4.push_back(l2[j]);\n\
    \        l4.push_back(l3[k]);\n        j++;\n        k++;\n    }\n    while (i\
    \ < l1.size()) {\n        l4.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        l4.push_back(l2[", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> res;\n    std::vector<long> temp;\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n\
    \        } else {\n            res.push_back(l[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        res.insert(res.begin()\
    \ + 3 * i, temp[i]);\n    }\n    return res;", "    std::vector<long> l1;\n  \
    \  std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n       \
    \ } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n\
    \            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    std::vector<long> l_new;\n    std::vector<long> l_third;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_new.insert(l_new.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_new;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            std::vector<long> temp;\n            temp.push_back(l[i]);\n\
    \            temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n\
    \            std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l_new;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_new.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n        \
    \    l_new.push_back(l2[i / 3]);\n        } else {\n            l_new.push_back(l3[i\
    \ / 3]);\n        }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ if (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n       \
    \     }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i\
    \ + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n  \
    \          l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l_new;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            l_new.push_back(l1[i/3]);\n        } else\
    \ if (i % 3 == 1) {\n            l_new.push_back(l2[i/3]);\n        } else {\n\
    \            l_new.push_back(l3[i/3]);\n        }\n    }\n    return l_new;",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> l_prime;\n    std::vector<long> temp;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  std::sort(temp.begin(), temp.end());\n    for (int i = 0; i < temp.size();\
    \ i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, temp[i]);\n    }\n \
    \   return l_prime;", "    std::vector<long> l_prime;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n\
    \            temp.push_back(l[i]);\n            if (i + 1 < l.size()) {\n    \
    \            temp.push_back(l[i + 1]);\n            }\n            if (i + 2 <\
    \ l.size()) {\n                temp.push_back(l[i + 2]);\n            }\n    \
    \        std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l_new;\n    std::vector<long> l_third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_third.push_back(l[i]);\n        } else {\n            l_new.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    int j =\
    \ 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n  \
    \          l_new.insert(l_new.begin() + i, l_third[j]);\n            j++;\n  \
    \      }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long>\
    \ l4;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n \
    \           l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n \
    \           l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.size()\
    \ && j < l2.size() && k < l3.size()) {\n        l4.push_back(l1[i]);\n       \
    \ l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n        i++;\n        j++;\n\
    \        k++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        l4.push_back(l1[i]);\n\
    \        l4.push_back(l2[j]);\n        i++;\n        j++;\n    }\n    while (i\
    \ < l1.size() && k < l3.size()) {\n        l4.push_back(l1[i]);\n        l4.push_back(l3[k]);\n\
    \        i++;\n        k++;\n    }\n    while (j < l2.size() && k < l3.size())\
    \ {\n        l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n        j++;\n\
    \        k++;\n    }\n    while (i < l1.size()) {\n        l4.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        l4.push_back(l2[",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        }\n      \
    \  else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, third[i]);\n    }\n    return l_prime;", "    std::vector<long> l2;\n\
    \    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l3.push_back(l[i]);\n        } else {\n     \
    \       l2.push_back(l[i]);\n        }\n    }\n    std::sort(l3.begin(), l3.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l2.insert(l2.begin() + i, l3[i / 3]);\n        }\n    }\n    return l2;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    std::vector<long> l4;\n    std::vector<long> l5;\n    std::vector<long> l6;\n\
    \    std::vector<long> l7;\n    std::vector<long> l8;\n    std::vector<long> l9;\n\
    \    std::vector<long> l10;\n    std::vector<long> l11;\n    std::vector<long>\
    \ l12;\n    std::vector<long> l13;\n    std::vector<long> l14;\n    std::vector<long>\
    \ l15;\n    std::vector<long> l16;\n    std::vector<long> l17;\n    std::vector<long>\
    \ l18;\n    std::vector<long> l19;\n    std::vector<long> l20;\n    std::vector<long>\
    \ l21;\n    std::vector<long> l22;\n    std::vector<long> l23;\n    std::vector<long>\
    \ l24;\n    std::vector<long> l25;\n    std::vector<long> l26;\n    std::vector<long>\
    \ l27;\n    std::vector<long> l28;\n    std::vector<long> l29;\n    std::vector<long>\
    \ l30;\n    std::vector<long> l31;\n    std::vector<long> l32;\n    std::vector<long>\
    \ l33;\n    std::vector<long> l34;\n    std::vector<long> l35;\n    std::vector<long>\
    \ l36;\n    std::vector<long> l37;\n    std::vector<long> l38;\n    std::vector<long>\
    \ l39;\n    std::vector<long> l40;\n    std::vector<long> l41;\n    std::vector<long>\
    \ l42;\n    std::vector<long> l43;\n    std::vector<long> l44;\n    std::vector<long>\
    \ l45;\n    std::vector<long> l46;\n    std::vector<", "\tstd::vector<long> l_new;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long>\
    \ temp;\n\t\t\ttemp.push_back(l[i]);\n\t\t\ttemp.push_back(l[i + 1]);\n\t\t\t\
    temp.push_back(l[i + 2]);\n\t\t\tstd::sort(temp.begin(), temp.end());\n\t\t\t\
    l_new.push_back(temp[0]);\n\t\t\tl_new.push_back(temp[1]);\n\t\t\tl_new.push_back(temp[2]);\n\
    \t\t}\n\t\telse {\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_new;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        }\n        else\
    \ if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\n        else\
    \ {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l3.begin(), l3.end());\n    int j = 0;\n    int k\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            l4.push_back(l1[j]);\n            j++;\n        }\n        else if\
    \ (i % 3 == 1) {\n            l4.push_back(l[i]);\n        }\n        else {\n\
    \            l4.push_back(l3[k]);\n            k++;\n        }\n    }\n    return\
    \ l4;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            temp.push_back(l[i]);\n            if (i + 1 < l.size())\
    \ {\n                temp.push_back(l[i + 1]);\n            }\n            if\
    \ (i + 2 < l.size()) {\n                temp.push_back(l[i + 2]);\n          \
    \  }\n            std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    std::vector<long> l4;\n    std::vector<long> l5;\n\
    \    std::vector<long> l6;\n    std::vector<long> l7;\n    std::vector<long> l8;\n\
    \    std::vector<long> l9;\n    std::vector<long> l10;\n    std::vector<long>\
    \ l11;\n    std::vector<long> l12;\n    std::vector<long> l13;\n    std::vector<long>\
    \ l14;\n    std::vector<long> l15;\n    std::vector<long> l16;\n    std::vector<long>\
    \ l17;\n    std::vector<long> l18;\n    std::vector<long> l19;\n    std::vector<long>\
    \ l20;\n    std::vector<long> l21;\n    std::vector<long> l22;\n    std::vector<long>\
    \ l23;\n    std::vector<long> l24;\n    std::vector<long> l25;\n    std::vector<long>\
    \ l26;\n    std::vector<long> l27;\n    std::vector<long> l28;\n    std::vector<long>\
    \ l29;\n    std::vector<long> l30;\n    std::vector<long> l31;\n    std::vector<long>\
    \ l32;\n    std::vector<long> l33;\n    std::vector<long> l34;\n    std::vector<long>\
    \ l35;\n    std::vector<long> l36;\n    std::vector<long> l37;\n    std::vector<long>\
    \ l38;\n    std::vector<long> l39;\n    std::vector<long> l40;\n    std::vector<long>\
    \ l41;\n    std::vector<long> l42;\n    std::vector<long> l43;\n    std::vector<long>\
    \ l44;\n    std::vector<long> l45;\n    std::vector<long> l46;\n    std::vector<",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            temp.push_back(l[i]);\n            temp.push_back(l[i + 1]);\n\
    \            temp.push_back(l[i + 2]);\n            std::sort(temp.begin(), temp.end());\n\
    \            l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_copy = l;\n\
    \    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_prime.size(); i++) {\n        l_prime[i] = l_third[i];\n    }\n    for (int\
    \ i = 0; i < l_prime.size(); i++) {\n        l_copy[i] = l_prime[i];\n    }\n\
    \    return l_copy;", "    std::vector<long> l1;\n    std::vector<long> l2;\n\
    \    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3\
    \ == 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l4.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n           \
    \ l4.push_back(l2[i / 3]);\n        } else {\n            l4.push_back(l3[i /\
    \ 3]);\n        }\n    }\n    return l4;", "    std::vector<long> l_new;\n   \
    \ std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else {\n\
    \            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n       \
    \     l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.size()\
    \ && j < l2.size() && k < l3.size()) {\n        l4.push_back(l1[i]);\n       \
    \ l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n        i++;\n        j++;\n\
    \        k++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        l4.push_back(l1[i]);\n\
    \        l4.push_back(l2[j]);\n        i++;\n        j++;\n    }\n    while (i\
    \ < l1.size() && k < l3.size()) {\n        l4.push_back(l1[i]);\n        l4.push_back(l3[k]);\n\
    \        i++;\n        k++;\n    }\n    while (j < l2.size() && k < l3.size())\
    \ {\n        l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n        j++;\n\
    \        k++;\n    }\n    while (i < l1.size()) {\n        l4.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        l4.push_back(l2[",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n         \
    \   std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int\
    \ i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() +\
    \ i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n\
    \        } else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n       \
    \ } else if (i % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else\
    \ {\n            l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;",
  "    std::vector<long> result;\n    std::vector<long> third;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third.push_back(l[i]);\n\
    \        } else {\n            result.push_back(l[i]);\n        }\n    }\n   \
    \ std::sort(third.begin(), third.end());\n    for (int i = 0; i < third.size();\
    \ i++) {\n        result.insert(result.begin() + i * 3, third[i]);\n    }\n  \
    \  return result;", "    std::vector<long> l1;\n    std::vector<long> l2;\n  \
    \  std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l4.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n           \
    \ l4.push_back(l2[i / 3]);\n        } else {\n            l4.push_back(l3[i /\
    \ 3]);\n        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n \
    \   for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n        \
    \    std::vector<long> temp;\n            for (int j = i; j < i + 3; j++) {\n\
    \                temp.push_back(l[j]);\n            }\n            std::sort(temp.begin(),\
    \ temp.end());\n            for (int j = 0; j < temp.size(); j++) {\n        \
    \        l_prime.push_back(temp[j]);\n            }\n        } else {\n      \
    \      l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;", "   \
    \ std::vector<long> l_copy = l;\n    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_prime_copy;\n    std::vector<long> l_prime_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy;\n    std::vector<long> l_prime_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy;\n    std::vector<long> l_prime_copy_copy_copy_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::vector<long>\
    \ l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n\
    \    std::vector<long> l_prime_copy_copy_copy_copy_copy_", "    std::vector<long>\
    \ l_new;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n       \
    \ } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_new.insert(l_new.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_new;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        }\n        else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n\
    \        }\n        else {\n            l3.push_back(l[i]);\n        }\n    }\n\
    \    sort(l1.begin(), l1.end());\n    sort(l3.begin(), l3.end());\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.size() && j < l2.size()\
    \ && k < l3.size()) {\n        l4.push_back(l1[i]);\n        l4.push_back(l2[j]);\n\
    \        l4.push_back(l3[k]);\n        i++;\n        j++;\n        k++;\n    }\n\
    \    while (i < l1.size() && j < l2.size()) {\n        l4.push_back(l1[i]);\n\
    \        l4.push_back(l2[j]);\n        i++;\n        j++;\n    }\n    while (i\
    \ < l1.size() && k < l3.size()) {\n        l4.push_back(l1[i]);\n        l4.push_back(l3[k]);\n\
    \        i++;\n        k++;\n    }\n    while (j < l2.size() && k < l3.size())\
    \ {\n        l4.push_back(l2[j]);\n        l4.push_back(l3[k]);\n        j++;\n\
    \        k++;\n    }\n    while (i < l1.size()) {\n        l4.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        l4.push_back(l2[j]);\n\
    \       ", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n \
    \   for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n        \
    \    l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    int j =\
    \ 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n  \
    \          l_prime.insert(l_prime.begin() + i, l_third[j]);\n            j++;\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n   \
    \ std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n     \
    \   else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long>\
    \ l4;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n \
    \           l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n \
    \           l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int j = 0;\n    int k = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l4.push_back(l1[j]);\n      \
    \      j++;\n        }\n        else if (i % 3 == 1) {\n            l4.push_back(l[i]);\n\
    \        }\n        else {\n            l4.push_back(l3[k]);\n            k++;\n\
    \        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l_new;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_new.push_back(l1[i / 3]);\n\
    \        } else if (i % 3 == 1) {\n            l_new.push_back(l2[i / 3]);\n \
    \       } else {\n            l_new.push_back(l3[i / 3]);\n        }\n    }\n\
    \    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long> third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    for (int i\
    \ = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i *\
    \ 3, third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n         \
    \   std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l4.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n           \
    \ l4.push_back(l2[i / 3]);\n        } else {\n            l4.push_back(l3[i /\
    \ 3]);\n        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n \
    \   std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n   \
    \     else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> temp;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        } else\
    \ {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, temp[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n       \
    \     l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int j = 0;\n    int k = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l4.push_back(l1[j]);\n      \
    \      j++;\n        }\n        else if (i % 3 == 1) {\n            l4.push_back(l[i]);\n\
    \        }\n        else {\n            l4.push_back(l3[k]);\n            k++;\n\
    \        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> result;\n    std::vector<long>\
    \ third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            third.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    for (int i\
    \ = 0; i < third.size(); i++) {\n        result.insert(result.begin() + i * 3,\
    \ third[i]);\n    }\n    return result;", "    std::vector<long> l_prime;\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n         \
    \   std::vector<long> temp;\n            temp.push_back(l[i]);\n            temp.push_back(l[i\
    \ + 1]);\n            temp.push_back(l[i + 2]);\n            std::sort(temp.begin(),\
    \ temp.end());\n            l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n          \
    \  std::vector<long> temp;\n            temp.push_back(l[i]);\n            temp.push_back(l[i\
    \ + 1]);\n            temp.push_back(l[i + 2]);\n            std::sort(temp.begin(),\
    \ temp.end());\n            l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n   \
    \ std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n     \
    \   else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "  std::vector<long>\
    \ l_prime;\n  std::vector<long> l_third;\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (i % 3 == 0) {\n      l_third.push_back(l[i]);\n    }\n    else {\n\
    \      l_prime.push_back(l[i]);\n    }\n  }\n  std::sort(l_third.begin(), l_third.end());\n\
    \  for (int i = 0; i < l_third.size(); i++) {\n    l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n  }\n  return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        }\n      \
    \  else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l_new;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_new.push_back(l1[i / 3]);\n\
    \        } else if (i % 3 == 1) {\n            l_new.push_back(l2[i / 3]);\n \
    \       } else {\n            l_new.push_back(l3[i / 3]);\n        }\n    }\n\
    \    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int\
    \ i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() +\
    \ i * 3, l_third[i]);\n    }\n    return l_prime;", "    // Your code here\n \
    \   std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n\
    \    for(int i=0;i<l.size();i++)\n    {\n        if(i%3==0)\n        {\n     \
    \       l1.push_back(l[i]);\n        }\n        else if(i%3==1)\n        {\n \
    \           l2.push_back(l[i]);\n        }\n        else\n        {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),l1.end());\n\
    \    std::sort(l2.begin(),l2.end());\n    std::sort(l3.begin(),l3.end());\n  \
    \  std::vector<long> l4;\n    for(int i=0;i<l1.size();i++)\n    {\n        l4.push_back(l1[i]);\n\
    \        l4.push_back(l2[i]);\n        l4.push_back(l3[i]);\n    }\n    return\
    \ l4;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ temp;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            temp.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3,\
    \ temp[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n  \
    \  std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n    \
    \    else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_new;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        } else {\n            l_new.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int\
    \ i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin() + i *\
    \ 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            l4.push_back(l1[j]);\n            j++;\n        } else if (i % 3\
    \ == 1) {\n            l4.push_back(l2[k]);\n            k++;\n        } else\
    \ {\n            l4.push_back(l3[i]);\n        }\n    }\n    return l4;", "  \
    \  std::vector<long> l_new;\n    std::vector<long> l_third;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_new.insert(l_new.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_new;", "\tstd::vector<long>\
    \ l_new;\n\tstd::vector<long> l_sorted;\n\tfor (int i = 0; i < l.size(); i++)\
    \ {\n\t\tif (i % 3 == 0) {\n\t\t\tl_sorted.push_back(l[i]);\n\t\t}\n\t\telse {\n\
    \t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(l_sorted.begin(), l_sorted.end());\n\
    \tfor (int i = 0; i < l_sorted.size(); i++) {\n\t\tl_new.insert(l_new.begin()\
    \ + i * 3, l_sorted[i]);\n\t}\n\treturn l_new;", "\tstd::vector<long> l_prime;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long>\
    \ temp;\n\t\t\ttemp.push_back(l[i]);\n\t\t\ttemp.push_back(l[i + 1]);\n\t\t\t\
    temp.push_back(l[i + 2]);\n\t\t\tstd::sort(temp.begin(), temp.end());\n\t\t\t\
    l_prime.push_back(temp[0]);\n\t\t\tl_prime.push_back(temp[1]);\n\t\t\tl_prime.push_back(temp[2]);\n\
    \t\t}\n\t\telse {\n\t\t\tl_prime.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_prime;",
  "    std::vector<long> l_copy = l;\n    std::vector<long> l_prime;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::sort(l_copy.begin()\
    \ + i, l_copy.begin() + i + 3);\n        }\n    }\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l_copy[i]);\n\
    \            l_prime.push_back(l_copy[i + 1]);\n            l_prime.push_back(l_copy[i\
    \ + 2]);\n        } else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            for (int j = i; j < i + 3; j++) {\n                temp.push_back(l[j]);\n\
    \            }\n            std::sort(temp.begin(), temp.end());\n           \
    \ for (int j = 0; j < temp.size(); j++) {\n                l_prime.push_back(temp[j]);\n\
    \            }\n        } else {\n            l_prime.push_back(l[i]);\n     \
    \   }\n    }\n    return l_prime;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     if (i % 3 == 0) {\n            result.push_back(l1[i / 3]);\n        } else\
    \ if (i % 3 == 1) {\n            result.push_back(l2[i / 3]);\n        } else\
    \ {\n            result.push_back(l3[i / 3]);\n        }\n    }\n    return result;",
  "    std::vector<long> l_new;\n    std::vector<long> l_third;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            temp.push_back(l[i]);\n            if (i + 1 < l.size())\
    \ {\n                temp.push_back(l[i + 1]);\n            }\n            if\
    \ (i + 2 < l.size()) {\n                temp.push_back(l[i + 2]);\n          \
    \  }\n            std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l4.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n           \
    \ l4.push_back(l2[i / 3]);\n        } else {\n            l4.push_back(l3[i /\
    \ 3]);\n        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < l.size(); i++) {\n      \
    \  if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        }\n        else\
    \ {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, temp[i]);\n    }\n    return l_prime;", "    std::vector<long> res;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n         \
    \   std::sort(temp.begin(), temp.end());\n            res.push_back(temp[0]);\n\
    \            res.push_back(temp[1]);\n            res.push_back(temp[2]);\n  \
    \          i += 2;\n        } else {\n            res.push_back(l[i]);\n     \
    \   }\n    }\n    return res;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    for (int i\
    \ = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i *\
    \ 3, third[i]);\n    }\n    return l_prime;", "    std::vector<long> result;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        } else {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        result.insert(result.begin()\
    \ + i * 3, third[i]);\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        } else {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            result.insert(result.begin() + i, third[j]);\n\
    \            j++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ l_copy;\n    std::vector<long> l_sorted;\n    std::vector<long> l_result;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_copy.push_back(l[i]);\n        }\n    }\n    l_sorted = l_copy;\n    std::sort(l_sorted.begin(),\
    \ l_sorted.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_result.push_back(l_sorted[j]);\n   \
    \         j++;\n        } else {\n            l_result.push_back(l[i]);\n    \
    \    }\n    }\n    return l_result;", "  std::vector<long> l_prime;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      std::vector<long>\
    \ temp;\n      temp.push_back(l[i]);\n      temp.push_back(l[i + 1]);\n      temp.push_back(l[i\
    \ + 2]);\n      std::sort(temp.begin(), temp.end());\n      l_prime.push_back(temp[0]);\n\
    \      l_prime.push_back(temp[1]);\n      l_prime.push_back(temp[2]);\n    } else\
    \ {\n      l_prime.push_back(l[i]);\n    }\n  }\n  return l_prime;", "    std::vector<long>\
    \ l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l_new;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_new.push_back(l1[i / 3]);\n\
    \        } else if (i % 3 == 1) {\n            l_new.push_back(l2[i / 3]);\n \
    \       } else {\n            l_new.push_back(l3[i / 3]);\n        }\n    }\n\
    \    return l_new;", "    std::vector<long> result;\n    std::vector<long> third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     third.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    for (int i\
    \ = 0; i < third.size(); i++) {\n        result.insert(result.begin() + i * 3,\
    \ third[i]);\n    }\n    return result;", "    std::vector<long> l_prime;\n  \
    \  std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n    \
    \    else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> result;\n\
    \    std::vector<long> temp;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        } else {\n \
    \           result.push_back(l[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     if (i % 3 == 0) {\n            result.insert(result.begin() + i, temp[j]);\n\
    \            j++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> result;\n    std::vector<long> third;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third.push_back(l[i]);\n\
    \        } else {\n            result.push_back(l[i]);\n        }\n    }\n   \
    \ std::sort(third.begin(), third.end());\n    for (int i = 0; i < third.size();\
    \ i++) {\n        result.insert(result.begin() + i * 3, third[i]);\n    }\n  \
    \  return result;", "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_third.begin(), l_third.end());\n    int j =\
    \ 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n  \
    \          l_prime.insert(l_prime.begin() + i, l_third[j]);\n            j++;\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n          \
    \  std::vector<long> temp;\n            temp.push_back(l[i]);\n            if\
    \ (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n          \
    \  }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i\
    \ + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n  \
    \          l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n   \
    \ std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n     \
    \   else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n         \
    \   std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l_prime;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n\
    \            temp.push_back(l[i]);\n            if (i + 1 < l.size()) {\n    \
    \            temp.push_back(l[i + 1]);\n            }\n            if (i + 2 <\
    \ l.size()) {\n                temp.push_back(l[i + 2]);\n            }\n    \
    \        std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l_prime;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n\
    \            temp.push_back(l[i]);\n            if (i + 1 < l.size()) {\n    \
    \            temp.push_back(l[i + 1]);\n            }\n            if (i + 2 <\
    \ l.size()) {\n                temp.push_back(l[i + 2]);\n            }\n    \
    \        std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l_new;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_new.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n        \
    \    l_new.push_back(l2[i / 3]);\n        } else {\n            l_new.push_back(l3[i\
    \ / 3]);\n        }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> third;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (i % 3 == 0) {\n            third.push_back(l[i]);\n        }\n      \
    \  else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(third.begin(),\
    \ third.end());\n    for (int i = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n\
    \        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        }\
    \ else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    std::vector<long> l4;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            l4.push_back(l1[j]);\n            j++;\n        } else if (i % 3\
    \ == 1) {\n            l4.push_back(l2[k]);\n            k++;\n        } else\
    \ {\n            l4.push_back(l3[i]);\n        }\n    }\n    return l4;", "  \
    \  std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            temp.push_back(l[i]);\n            temp.push_back(l[i + 1]);\n\
    \            temp.push_back(l[i + 2]);\n            std::sort(temp.begin(), temp.end());\n\
    \            l_prime.push_back(temp[0]);\n            l_prime.push_back(temp[1]);\n\
    \            l_prime.push_back(temp[2]);\n        } else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    return l_prime;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l4;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (i % 3 == 0) {\n            l4.push_back(l1[i / 3]);\n        } else if (i\
    \ % 3 == 1) {\n            l4.push_back(l2[i / 3]);\n        } else {\n      \
    \      l4.push_back(l3[i / 3]);\n        }\n    }\n    return l4;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i <\
    \ l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i * 3, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> result;\n    std::vector<long>\
    \ third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            third.push_back(l[i]);\n        } else {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    int j = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     result.insert(result.begin() + i, third[j]);\n            j++;\n       \
    \ }\n    }\n    return result;", "    std::vector<long> l1;\n    std::vector<long>\
    \ l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n \
    \       if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if\
    \ (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n        \
    \    l3.push_back(l[i]);\n        }\n    }\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::sort(l3.begin(), l3.end());\n\
    \    std::vector<long> l_new;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_new.push_back(l1[j]);\n            j++;\n        } else if (i % 3 == 1)\
    \ {\n            l_new.push_back(l2[k]);\n            k++;\n        } else {\n\
    \            l_new.push_back(l3[m]);\n            m++;\n        }\n    }\n   \
    \ return l_new;", "    std::vector<long> l_new;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n   \
    \         temp.push_back(l[i]);\n            temp.push_back(l[i + 1]);\n     \
    \       temp.push_back(l[i + 2]);\n            std::sort(temp.begin(), temp.end());\n\
    \            l_new.push_back(temp[0]);\n            l_new.push_back(temp[1]);\n\
    \            l_new.push_back(temp[2]);\n        } else {\n            l_new.push_back(l[i]);\n\
    \        }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n\
    \            third.push_back(l[i]);\n        }\n        else {\n            l_prime.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(third.begin(), third.end());\n    for (int i\
    \ = 0; i < third.size(); i++) {\n        l_prime.insert(l_prime.begin() + i *\
    \ 3, third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_copy = l;\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            std::sort(l_copy.begin() + i,\
    \ l_copy.begin() + i + 3);\n        }\n    }\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l_copy[i]);\n\
    \            l_prime.push_back(l_copy[i + 1]);\n            l_prime.push_back(l_copy[i\
    \ + 2]);\n        } else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    return l_prime;", "\tstd::vector<long> l_new;\n\tfor (int i = 0; i\
    \ < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long> temp;\n\t\
    \t\ttemp.push_back(l[i]);\n\t\t\ttemp.push_back(l[i + 1]);\n\t\t\ttemp.push_back(l[i\
    \ + 2]);\n\t\t\tstd::sort(temp.begin(), temp.end());\n\t\t\tl_new.push_back(temp[0]);\n\
    \t\t\tl_new.push_back(temp[1]);\n\t\t\tl_new.push_back(temp[2]);\n\t\t}\n\t\t\
    else {\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_new;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> temp;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i % 3 == 0) {\n            temp.push_back(l[i]);\n        }\n\
    \        else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, temp[i]);\n    }\n    return l_prime;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_copy = l;\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            std::sort(l_copy.begin() + i,\
    \ l_copy.begin() + i + 3);\n        }\n    }\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l_copy[i]);\n\
    \            l_prime.push_back(l_copy[i + 1]);\n            l_prime.push_back(l_copy[i\
    \ + 2]);\n        } else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        } else\
    \ {\n            l_new.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_new.insert(l_new.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l_new;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> l_temp;\n            l_temp.push_back(l[i]);\n       \
    \     l_temp.push_back(l[i + 1]);\n            l_temp.push_back(l[i + 2]);\n \
    \           std::sort(l_temp.begin(), l_temp.end());\n            l_new.push_back(l_temp[0]);\n\
    \            l_new.push_back(l_temp[1]);\n            l_new.push_back(l_temp[2]);\n\
    \            i += 2;\n        } else {\n            l_new.push_back(l[i]);\n \
    \       }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + i * 3, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n       \
    \     l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int j = 0;\n    int k = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l4.push_back(l1[j]);\n      \
    \      j++;\n        }\n        else if (i % 3 == 1) {\n            l4.push_back(l[i]);\n\
    \        }\n        else {\n            l4.push_back(l3[k]);\n            k++;\n\
    \        }\n    }\n    return l4;", "  std::vector<long> l1;\n  std::vector<long>\
    \ l2;\n  std::vector<long> l3;\n  for (int i = 0; i < l.size(); i++) {\n    if\
    \ (i % 3 == 0) {\n      l1.push_back(l[i]);\n    } else if (i % 3 == 1) {\n  \
    \    l2.push_back(l[i]);\n    } else {\n      l3.push_back(l[i]);\n    }\n  }\n\
    \  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::sort(l3.begin(),\
    \ l3.end());\n  std::vector<long> l4;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    if (i % 3 == 0) {\n      l4.push_back(l1[i / 3]);\n    } else if (i % 3 ==\
    \ 1) {\n      l4.push_back(l2[i / 3]);\n    } else {\n      l4.push_back(l3[i\
    \ / 3]);\n    }\n  }\n  return l4;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "\tstd::vector<long> l1;\n\
    \tstd::vector<long> l2;\n\tstd::vector<long> l3;\n\tstd::vector<long> l4;\n\t\
    for (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl1.push_back(l[i]);\n\
    \t\t}\n\t\telse if (i % 3 == 1) {\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t\telse\
    \ {\n\t\t\tl3.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(l1.begin(), l1.end());\n\
    \tstd::sort(l3.begin(), l3.end());\n\tfor (int i = 0; i < l1.size(); i++) {\n\t\
    \tl4.push_back(l1[i]);\n\t}\n\tfor (int i = 0; i < l2.size(); i++) {\n\t\tl4.push_back(l2[i]);\n\
    \t}\n\tfor (int i = 0; i < l3.size(); i++) {\n\t\tl4.push_back(l3[i]);\n\t}\n\t\
    return l4;", "    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long>\
    \ l3;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n \
    \           l1.push_back(l[i]);\n        } else if (i % 3 == 1) {\n          \
    \  l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n  \
    \      }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l_new;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_new.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n        \
    \    l_new.push_back(l2[i / 3]);\n        } else {\n            l_new.push_back(l3[i\
    \ / 3]);\n        }\n    }\n    return l_new;", "    std::vector<long> l_prime;\n\
    \    std::vector<long> l_third;\n    for (int i = 0; i < l.size(); i++) {\n  \
    \      if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n        }\n  \
    \      else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin() + i, l_third[j]);\n\
    \            j++;\n        }\n    }\n    return l_prime;", "    std::vector<long>\
    \ l_prime;\n    std::vector<long> l_third;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n  \
    \      }\n        else {\n            l_prime.push_back(l[i]);\n        }\n  \
    \  }\n    std::sort(l_third.begin(), l_third.end());\n    int j = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.insert(l_prime.begin()\
    \ + i, l_third[j]);\n            j++;\n        }\n    }\n    return l_prime;",
  "    std::vector<long> l_prime;\n    std::vector<long> l_third;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_third.push_back(l[i]);\n\
    \        }\n        else {\n            l_prime.push_back(l[i]);\n        }\n\
    \    }\n    std::sort(l_third.begin(), l_third.end());\n    for (int i = 0; i\
    \ < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin() + 3 * i, l_third[i]);\n\
    \    }\n    return l_prime;", "    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_third;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\
    \ {\n            l_third.push_back(l[i]);\n        }\n        else {\n       \
    \     l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_third.begin(),\
    \ l_third.end());\n    for (int i = 0; i < l_third.size(); i++) {\n        l_prime.insert(l_prime.begin()\
    \ + 3 * i, l_third[i]);\n    }\n    return l_prime;", "    std::vector<long> l1;\n\
    \    std::vector<long> l2;\n    std::vector<long> l3;\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l1.push_back(l[i]);\n        }\n        else if (i % 3 == 1) {\n       \
    \     l2.push_back(l[i]);\n        }\n        else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l3.begin(),\
    \ l3.end());\n    int k = 0;\n    int j = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i % 3 == 0) {\n            l4.push_back(l1[k]);\n      \
    \      k++;\n        }\n        else if (i % 3 == 1) {\n            l4.push_back(l2[j]);\n\
    \            j++;\n        }\n        else {\n            l4.push_back(l3[j]);\n\
    \            j++;\n        }\n    }\n    return l4;", "    std::vector<long> sorted;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ if (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n       \
    \     }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i\
    \ + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n  \
    \          for (int j = 0; j < temp.size(); j++) {\n                sorted.push_back(temp[j]);\n\
    \            }\n        } else {\n            sorted.push_back(l[i]);\n      \
    \  }\n    }\n    return sorted;", "\tstd::vector<long> l1;\n\tstd::vector<long>\
    \ l2;\n\tstd::vector<long> l3;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif\
    \ (i % 3 == 0) {\n\t\t\tl1.push_back(l[i]);\n\t\t}\n\t\telse if (i % 3 == 1) {\n\
    \t\t\tl2.push_back(l[i]);\n\t\t}\n\t\telse {\n\t\t\tl3.push_back(l[i]);\n\t\t\
    }\n\t}\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::sort(l3.begin(), l3.end());\n\tstd::vector<long> l_new;\n\tfor (int i =\
    \ 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_new.push_back(l1[i /\
    \ 3]);\n\t\t}\n\t\telse if (i % 3 == 1) {\n\t\t\tl_new.push_back(l2[i / 3]);\n\
    \t\t}\n\t\telse {\n\t\t\tl_new.push_back(l3[i / 3]);\n\t\t}\n\t}\n\treturn l_new;",
  "    std::vector<long> l_copy = l;\n    std::vector<long> l_prime;\n    std::vector<long>\
    \ l_prime_copy;\n    std::vector<long> l_prime_sorted;\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l_copy[i]);\n\
    \        }\n    }\n    l_prime_copy = l_prime;\n    std::sort(l_prime_copy.begin(),\
    \ l_prime_copy.end());\n    for (int i = 0; i < l_prime.size(); i++) {\n     \
    \   l_prime_sorted.push_back(l_prime_copy[i]);\n    }\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (i % 3 == 0) {\n            l_copy[i] = l_prime_sorted[i\
    \ / 3];\n        }\n    }\n    return l_copy;", "    std::vector<long> l_prime;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     std::vector<long> temp;\n            temp.push_back(l[i]);\n           \
    \ temp.push_back(l[i + 1]);\n            temp.push_back(l[i + 2]);\n         \
    \   std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "  std::vector<long> l1;\n  std::vector<long> l2;\n  std::vector<long>\
    \ l3;\n  std::vector<long> l4;\n  for (int i = 0; i < l.size(); i++) {\n    if\
    \ (i % 3 == 0) {\n      l1.push_back(l[i]);\n    } else if (i % 3 == 1) {\n  \
    \    l2.push_back(l[i]);\n    } else {\n      l3.push_back(l[i]);\n    }\n  }\n\
    \  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::sort(l3.begin(),\
    \ l3.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n\
    \      l4.push_back(l1[i / 3]);\n    } else if (i % 3 == 1) {\n      l4.push_back(l2[i\
    \ / 3]);\n    } else {\n      l4.push_back(l3[i / 3]);\n    }\n  }\n  return l4;",
  "\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tstd::vector<long> l3;\n\tstd::vector<long>\
    \ l4;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl1.push_back(l[i]);\n\
    \t\t}\n\t\telse if (i % 3 == 1) {\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t\telse\
    \ {\n\t\t\tl3.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(l1.begin(), l1.end());\n\
    \tstd::sort(l3.begin(), l3.end());\n\tfor (int i = 0; i < l1.size(); i++) {\n\t\
    \tl4.push_back(l1[i]);\n\t}\n\tfor (int i = 0; i < l2.size(); i++) {\n\t\tl4.push_back(l2[i]);\n\
    \t}\n\tfor (int i = 0; i < l3.size(); i++) {\n\t\tl4.push_back(l3[i]);\n\t}\n\t\
    return l4;", "\tstd::vector<long> l_new;\n\tstd::vector<long> l_third;\n\tfor\
    \ (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_third.push_back(l[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(l_third.begin(),\
    \ l_third.end());\n\tint j = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\t\
    if (i % 3 == 0) {\n\t\t\tl_new.insert(l_new.begin() + i, l_third[j]);\n\t\t\t\
    j++;\n\t\t}\n\t}\n\treturn l_new;", "    std::vector<long> l_prime;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long>\
    \ temp;\n            temp.push_back(l[i]);\n            if (i + 1 < l.size())\
    \ {\n                temp.push_back(l[i + 1]);\n            }\n            if\
    \ (i + 2 < l.size()) {\n                temp.push_back(l[i + 2]);\n          \
    \  }\n            std::sort(temp.begin(), temp.end());\n            l_prime.push_back(temp[0]);\n\
    \            l_prime.push_back(temp[1]);\n            l_prime.push_back(temp[2]);\n\
    \        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n  \
    \  return l_prime;", "    std::vector<long> l1;\n    std::vector<long> l2;\n \
    \   std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 ==\
    \ 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::sort(l3.begin(), l3.end());\n    std::vector<long> l4;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l4.push_back(l1[i / 3]);\n        } else if (i % 3 == 1) {\n           \
    \ l4.push_back(l2[i / 3]);\n        } else {\n            l4.push_back(l3[i /\
    \ 3]);\n        }\n    }\n    return l4;", "    std::vector<long> l_prime;\n \
    \   std::vector<long> l_prime_sorted;\n    std::vector<long> l_prime_unsorted;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n       \
    \     l_prime_sorted.push_back(l[i]);\n        } else {\n            l_prime_unsorted.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(l_prime_sorted.begin(), l_prime_sorted.end());\n\
    \    l_prime.reserve(l_prime_sorted.size() + l_prime_unsorted.size());\n    l_prime.insert(l_prime.end(),\
    \ l_prime_sorted.begin(), l_prime_sorted.end());\n    l_prime.insert(l_prime.end(),\
    \ l_prime_unsorted.begin(), l_prime_unsorted.end());\n    return l_prime;"]
stop_tokens:
- "\n}"
