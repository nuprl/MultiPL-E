name: HumanEval_21_rescale_to_unit
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers (of\
  \ at least two elements), apply a linear transform to that list,\n// such that the\
  \ smallest number will become 0 and the largest will become 1\nstd::vector<float>\
  \ rescale_to_unit(std::vector<float> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
  \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
  \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
  \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
  \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
  \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
  }\n"
completions: ["    assert(numbers.size() > 1);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float range =\
    \ max - min;\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    std::vector<float> result;\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    for (auto &number\
    \ : numbers) {\n        result.push_back((number - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float diff = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / diff);\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> rescaled;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        rescaled.push_back((numbers[i] -\
    \ min) / range);\n    }\n    return rescaled;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (float number : numbers) {\n        if (number < min) {\n           \
    \ min = number;\n        }\n        if (number > max) {\n            max = number;\n\
    \        }\n    }\n    float range = max - min;\n    std::vector<float> result;\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    float scale = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / scale);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / range);\n    }\n   \
    \ return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   std::vector<float> rescaled_numbers;\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back((number - min_number) / (max_number - min_number));\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        if (number < min_number) {\n            min_number\
    \ = number;\n        }\n        if (number > max_number) {\n            max_number\
    \ = number;\n        }\n    }\n    float range = max_number - min_number;\n  \
    \  std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min_number) / range);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;",
  "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ i = numbers.begin(); i != numbers.end(); i++) {\n        if (*i < min) {\n \
    \           min = *i;\n        }\n        if (*i > max) {\n            max = *i;\n\
    \        }\n    }\n    std::vector<float> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); i++) {\n        result.push_back((*i - min) / (max - min));\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float delta = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / delta);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / range);\n    }\n   \
    \ return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / diff);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> result;\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() > 1);\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        }\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    float range = max_number - min_number;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / range);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled;\n    for (auto number : numbers) {\n        rescaled.push_back((number\
    \ - min) / (max - min));\n    }\n    return rescaled;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float diff = max - min;\n    for (int i =\
    \ 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / diff;\n\
    \    }\n    return numbers;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (float number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto n : numbers) {\n        result.push_back((n - min) /\
    \ (max - min));\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    std::vector<float> result;\n    for (auto number : numbers) {\n     \
    \   result.push_back((number - min) / (max - min));\n    }\n    return result;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto& number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    std::vector<float> result;\n    for (auto number : numbers) {\n  \
    \      result.push_back((number - min) / (max - min));\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (auto number : numbers) {\n        if (number < min) {\n\
    \            min = number;\n        }\n        if (number > max) {\n         \
    \   max = number;\n        }\n    }\n    std::vector<float> result;\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / (max - min));\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (auto number : numbers)\
    \ {\n        if (number < min_number) {\n            min_number = number;\n  \
    \      }\n        if (number > max_number) {\n            max_number = number;\n\
    \        }\n    }\n    std::vector<float> rescaled_numbers;\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back((number - min_number) / (max_number\
    \ - min_number));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto &number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "  assert(numbers.size()\
    \ > 1);\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int i =\
    \ 1; i < numbers.size(); i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
    \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  float\
    \ range = max - min;\n  std::vector<float> result;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    result.push_back((numbers[i] - min) / range);\n  }\n  return result;",
  "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (auto number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min_number\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max_number =\
    \ *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min_number) / (max_number - min_number));\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    std::vector<float> rescaled_numbers;\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back((number - min) / range);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    float min_number =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max_number = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min_number) / (max_number - min_number));\n\
    \    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back((number - min)\
    \ / range);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number)\
    \ {\n            min_number = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_number) {\n            max_number = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / (max_number - min_number));\n    }\n    return result;", " \
    \   assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled;\n    for (auto number : numbers) {\n        rescaled.push_back((number\
    \ - min) / (max - min));\n    }\n    return rescaled;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n < min) {\n            min = n;\n        }\n  \
    \      if (n > max) {\n            max = n;\n        }\n    }\n    float range\
    \ = max - min;\n    std::vector<float> result;\n    for (auto n : numbers) {\n\
    \        result.push_back((n - min) / range);\n    }\n    return result;", " \
    \   assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (auto number : numbers) {\n        if (number < min) {\n\
    \            min = number;\n        }\n        if (number > max) {\n         \
    \   max = number;\n        }\n    }\n    std::vector<float> result;\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / (max - min));\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    std::vector<float> rescaled;\n\
    \    for (auto number : numbers) {\n        rescaled.push_back((number - min)\
    \ / (max - min));\n    }\n    return rescaled;", "    assert(numbers.size() >\
    \ 1);\n    float max = *std::max_element(numbers.begin(), numbers.end());\n  \
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto &number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> rescaled_numbers;\n\
    \    for (auto &number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min) / range);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / (max - min));\n\
    \    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto num : numbers) {\n        result.push_back((num\
    \ - min) / (max - min));\n    }\n    return result;", "  assert(numbers.size()\
    \ > 1);\n  float min = numbers[0];\n  float max = numbers[0];\n  for (auto n :\
    \ numbers) {\n    if (n < min) {\n      min = n;\n    }\n    if (n > max) {\n\
    \      max = n;\n    }\n  }\n  float range = max - min;\n  std::vector<float>\
    \ result;\n  for (auto n : numbers) {\n    result.push_back((n - min) / range);\n\
    \  }\n  return result;", "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number < min_number) {\n     \
    \       min_number = number;\n        }\n        if (number > max_number) {\n\
    \            max_number = number;\n        }\n    }\n    float range = max_number\
    \ - min_number;\n    std::vector<float> rescaled_numbers;\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back((number - min_number) / range);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float range = max - min;\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min_number =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max_number = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> rescaled_numbers;\n    for (auto number\
    \ : numbers) {\n        float rescaled_number = (number - min_number) / (max_number\
    \ - min_number);\n        rescaled_numbers.push_back(rescaled_number);\n    }\n\
    \    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float min_value\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max_value =\
    \ *std::max_element(numbers.begin(), numbers.end());\n    float range = max_value\
    \ - min_value;\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min_value) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    float range = max - min;\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back((number - min)\
    \ / range);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled;\n    for (float number : numbers) {\n        rescaled.push_back((number\
    \ - min) / (max - min));\n    }\n    return rescaled;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled;\n    for (auto\
    \ number : numbers) {\n        rescaled.push_back((number - min) / range);\n \
    \   }\n    return rescaled;", "    assert(numbers.size() > 1);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  std::vector<float>\
    \ result;\n  for (auto number : numbers) {\n    result.push_back((number - min)\
    \ / (max - min));\n  }\n  return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   std::vector<float> rescaled_numbers;\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back((number - min_number) / (max_number - min_number));\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (auto number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        rescaled.push_back((numbers[i] -\
    \ min) / range);\n    }\n    return rescaled;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float delta = max - min;\n    std::vector<float> result;\n    for\
    \ (auto number : numbers) {\n        result.push_back((number - min) / delta);\n\
    \    }\n    return result;", "    // find the minimum and maximum values\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    // apply the linear transform\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto &number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number < min_number) {\n     \
    \       min_number = number;\n        }\n        if (number > max_number) {\n\
    \            max_number = number;\n        }\n    }\n    std::vector<float> result;\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min_number)\
    \ / (max_number - min_number));\n    }\n    return result;", "    float min =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    std::vector<float> result;\n\
    \    for (auto n : numbers) {\n        result.push_back((n - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min_number\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max_number =\
    \ *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled_numbers;\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min_number) / (max_number - min_number));\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> rescaled_numbers;\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min) / range);\n    }\n    return rescaled_numbers;", "  assert(numbers.size()\
    \ >= 2);\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int i =\
    \ 1; i < numbers.size(); i++) {\n    min = std::min(min, numbers[i]);\n    max\
    \ = std::max(max, numbers[i]);\n  }\n  std::vector<float> result;\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min) /\
    \ (max - min));\n  }\n  return result;", "    assert(numbers.size() >= 2);\n \
    \   float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (int i = 1; i < numbers.size(); i++) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    std::vector<float> rescaled_numbers;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        float rescaled_number = (numbers[i] - min_number) / (max_number\
    \ - min_number);\n        rescaled_numbers.push_back(rescaled_number);\n    }\n\
    \    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        }\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min_number) / (max_number - min_number));\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> rescaled;\n    for\
    \ (float number : numbers) {\n        rescaled.push_back((number - min) / range);\n\
    \    }\n    return rescaled;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / diff);\n    }\n    return result;", "    assert(numbers.size() > 1);\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float max_number\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float min_number =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled_numbers;\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min_number) / (max_number - min_number));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number)\
    \ {\n            min_number = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_number) {\n            max_number = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / (max_number - min_number));\n    }\n    return result;", " \
    \   assert(numbers.size() >= 2);\n    float min_number = numbers[0];\n    float\
    \ max_number = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        }\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    std::vector<float> rescaled_numbers;\n    for (int i =\
    \ 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back((numbers[i]\
    \ - min_number) / (max_number - min_number));\n    }\n    return rescaled_numbers;",
  "    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    std::vector<float> result;\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min_number) / (max_number - min_number));\n    }\n    return result;", " \
    \   assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> rescaled;\n    for (auto\
    \ number : numbers) {\n        rescaled.push_back((number - min) / range);\n \
    \   }\n    return rescaled;", "    assert(numbers.size() > 1);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (auto number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (auto &number : numbers) {\n\
    \        if (number < min) {\n            min = number;\n        }\n        if\
    \ (number > max) {\n            max = number;\n        }\n    }\n    float diff\
    \ = max - min;\n    std::vector<float> result;\n    for (auto &number : numbers)\
    \ {\n        result.push_back((number - min) / diff);\n    }\n    return result;",
  "    assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled;\n    for (auto number : numbers) {\n        rescaled.push_back((number\
    \ - min) / (max - min));\n    }\n    return rescaled;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    // find the smallest and\
    \ largest numbers\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    // apply the linear transform\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    float diff = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / diff);\n    }\n    return result;", "    assert(numbers.size() > 1);\n   \
    \ float min_number = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max_number = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled_numbers;\n    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min_number) / (max_number - min_number));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    float min_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> rescaled_numbers;\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back((number - min_number) / (max_number - min_number));\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float range = max - min;\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float n :\
    \ numbers) {\n        if (n < min) {\n            min = n;\n        }\n      \
    \  if (n > max) {\n            max = n;\n        }\n    }\n    float range = max\
    \ - min;\n    std::vector<float> result;\n    for (float n : numbers) {\n    \
    \    result.push_back((n - min) / range);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number)\
    \ {\n            min_number = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_number) {\n            max_number = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / (max_number - min_number));\n    }\n    return result;", " \
    \   assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float range = max\
    \ - min;\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    // find min and max\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    // apply linear transform\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;"]
stop_tokens:
- "\n}"
