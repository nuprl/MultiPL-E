name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  std::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "\tstd::string result;\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 'a' + 'A';\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += message[i] - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\treturn result;", "    std::string result;\n    std::map<char, char>\
    \ m;\n    m['a'] = 'c';\n    m['e'] = 'g';\n    m['i'] = 'k';\n    m['o'] = 'q';\n\
    \    m['u'] = 'y';\n    m['A'] = 'C';\n    m['E'] = 'G';\n    m['I'] = 'K';\n\
    \    m['O'] = 'Q';\n    m['U'] = 'Y';\n    for (char c : message) {\n        if\
    \ (m.find(c) != m.end()) {\n            result += m[c];\n        } else if (c\
    \ >= 'a' && c <= 'z') {\n            result += c - 32;\n        } else if (c >=\
    \ 'A' && c <= 'Z') {\n            result += c + 32;\n        } else {\n      \
    \      result += c;\n        }\n    }\n    return result;", "\tstd::string result;\n\
    \tfor (char c : message) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tresult += c\
    \ - 'a' + 'A';\n\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tresult += c - 'A'\
    \ + 'a';\n\t\t} else {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;", " \
    \   std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded_message += (char)(message[i] - 'A'\
    \ + 'a');\n        } else {\n            encoded_message += message[i];\n    \
    \    }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n    \
    \    if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            index = (index + 2)\
    \ % vowels.length();\n            c = vowels[index];\n        }\n        result\
    \ += c;\n    }\n    return result;", "    std::string encoded = \"\";\n    for\
    \ (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n            encoded\
    \ += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded\
    \ += c - 'A' + 'a';\n        } else {\n            encoded += c;\n        }\n\
    \    }\n    return encoded;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(message[i]) != std::string::npos) {\n            result += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message = \"\"\
    ;\n    std::map<char, char> mapping;\n    mapping['a'] = 'c';\n    mapping['e']\
    \ = 'g';\n    mapping['i'] = 'k';\n    mapping['o'] = 'q';\n    mapping['u'] =\
    \ 'y';\n    mapping['A'] = 'C';\n    mapping['E'] = 'G';\n    mapping['I'] = 'K';\n\
    \    mapping['O'] = 'Q';\n    mapping['U'] = 'Y';\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (mapping.find(message[i]) != mapping.end()) {\n         \
    \   encoded_message += mapping[message[i]];\n        } else if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       encoded_message += (char)(message[i] + 32);\n        } else {\n      \
    \      encoded_message += message[i];\n        }\n    }\n    return encoded_message;",
  "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(message[i]) !=\
    \ std::string::npos) {\n            encoded += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "\tstd::string encoded_message;\n\tfor\
    \ (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n\t\t\tencoded_message += (message[i] - 'a' + 2) % 26 + 'A';\n\t\t\
    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message +=\
    \ (message[i] - 'A' + 2) % 26 + 'a';\n\t\t} else {\n\t\t\tencoded_message += message[i];\n\
    \t\t}\n\t}\n\treturn encoded_message;", "    std::string encodedMessage = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encodedMessage += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage\
    \ += tolower(message[i]);\n        } else {\n            encodedMessage += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encodedMessage.length(); i++) {\n \
    \       if (encodedMessage[i] == 'a') {\n            encodedMessage[i] = 'c';\n\
    \        } else if (encodedMessage[i] == 'e') {\n            encodedMessage[i]\
    \ = 'g';\n        } else if (encodedMessage[i] == 'i') {\n            encodedMessage[i]\
    \ = 'k';\n        } else if (encodedMessage[i] == 'o') {\n            encodedMessage[i]\
    \ = 'q';\n        } else if (encodedMessage[i] == 'u') {\n            encodedMessage[i]\
    \ = 'w';\n        } else if (encodedMessage[i] == 'A') {\n            encodedMessage[i]\
    \ = 'C';\n        } else if (encodedMessage[i] == 'E') {\n            encodedMessage[i]\
    \ = 'G';\n        } else if (encodedMessage[i] == 'I') {\n            encodedMessage[i]\
    \ = 'K';\n        } else if (encodedMessage[i] == 'O') {\n            encodedMessage[i]\
    \ = 'Q';\n        } else if (encodedMessage[i] == 'U') {\n            encodedMessage[i]\
    \ = 'W';\n        }\n    }\n    return encodedMessage;", "    std::string encodedMessage\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encodedMessage += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       encodedMessage += (char)(message[i] + 32);\n        } else {\n       \
    \     encodedMessage += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encodedMessage.length(); i++) {\n        if (encodedMessage[i] == 'a') {\n \
    \           encodedMessage[i] = 'c';\n        } else if (encodedMessage[i] ==\
    \ 'e') {\n            encodedMessage[i] = 'g';\n        } else if (encodedMessage[i]\
    \ == 'i') {\n            encodedMessage[i] = 'k';\n        } else if (encodedMessage[i]\
    \ == 'o') {\n            encodedMessage[i] = 'q';\n        } else if (encodedMessage[i]\
    \ == 'u') {\n            encodedMessage[i] = 'w';\n        } else if (encodedMessage[i]\
    \ == 'A') {\n            encodedMessage[i] = 'C';\n        } else if (encodedMessage[i]\
    \ == 'E') {\n            encodedMessage[i] = 'G';\n        } else if (encodedMessage[i]\
    \ == 'I') {\n            encodedMessage[i] = 'K';\n        } else if (encodedMessage[i]\
    \ == 'O') {\n            encodedMessage[i] = 'Q';\n        } else if (encodedMessage[i]\
    \ == 'U') {\n            encodedMessage[i] = 'W';\n        }\n    }\n    return\
    \ encodedMessage;", "    std::string encoded;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            encoded += c - 'a' + 'A';\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c - 'A' +\
    \ 'a';\n        } else {\n            encoded += c;\n        }\n    }\n    for\
    \ (char &c : encoded) {\n        if (c == 'a') {\n            c = 'c';\n     \
    \   } else if (c == 'e') {\n            c = 'g';\n        } else if (c == 'i')\
    \ {\n            c = 'k';\n        } else if (c == 'o') {\n            c = 'q';\n\
    \        } else if (c == 'u') {\n            c = 'w';\n        } else if (c ==\
    \ 'A') {\n            c = 'C';\n        } else if (c == 'E') {\n            c\
    \ = 'G';\n        } else if (c == 'I') {\n            c = 'K';\n        } else\
    \ if (c == 'O') {\n            c = 'Q';\n        } else if (c == 'U') {\n    \
    \        c = 'W';\n        }\n    }\n    return encoded;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      encoded += (char)((message[i] - 'a' + 2) % 26 + 'a');\n        } else {\n\
    \            encoded += (char)((message[i] - 'A' + 2) % 26 + 'A');\n        }\n\
    \    }\n    return encoded;", "\tstd::string result = \"\";\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tresult += (char)(message[i] - 'a' + 'A');\n\t\t} else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i] - 'A' + 'a');\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\treturn result;", "  \
    \  std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else {\n          \
    \  result += toupper(message[i]);\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    for (char c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            c = (c - 'a' + 2) % 26 + 'A';\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            c = (c - 'A' + 2) % 26 + 'a';\n        }\n\
    \        result += c;\n    }\n    return result;", "    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2)\
    \ % 26;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = 'A'\
    \ + (result[i] - 'A' + 2) % 26;\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += message[i] - 'A' + 'a';\n        }\
    \ else {\n            encoded_message += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n  \
    \          result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (vowels.find(message[i]) != std::string::npos)\
    \ {\n            encoded += (char)((message[i] - 'a' + 2) % 26 + 'a');\n     \
    \   } else {\n            encoded += (char)((message[i] - 'A' + 2) % 26 + 'A');\n\
    \        }\n    }\n    return encoded;", "    std::string result = \"\";\n   \
    \ for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2)\
    \ % 26;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = 'A'\
    \ + (result[i] - 'A' + 2) % 26;\n        }\n    }\n    return result;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded += message[i] - 'A' + 'a';\n        } else {\n          \
    \  encoded += message[i];\n        }\n    }\n    std::cout << encoded << std::endl;\n\
    \    std::string vowels = \"aeiou\";\n    std::string new_vowels = \"cdfhjlnprtvxz\"\
    ;\n    for (int i = 0; i < vowels.length(); i++) {\n        int pos = encoded.find(vowels[i]);\n\
    \        while (pos != std::string::npos) {\n            encoded[pos] = new_vowels[i];\n\
    \            pos = encoded.find(vowels[i], pos + 1);\n        }\n    }\n    return\
    \ encoded;", "    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (char c : message) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else if (islower(c)) {\n            result += toupper(c);\n\
    \        } else {\n            result += c;\n        }\n        if (vowels.find(tolower(c))\
    \ != std::string::npos) {\n            result.back() = vowels[(vowels.find(tolower(c))\
    \ + 2) % vowels.size()];\n        }\n    }\n    return result;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string result = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = 'A' + (c - 'a');\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = 'a' + (c - 'A');\n        }\n    \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     c = 'a' + (c - 'a' + 2) % 26;\n        } else if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n            c = 'A' + (c - 'A' + 2) % 26;\n\
    \        }\n        result += c;\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = c + 2;\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c + 2;\n       \
    \ }\n        result += c;\n    }\n    return result;", "    std::string encoded\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        encoded += c;\n    }\n   \
    \ for (int i = 0; i < vowels.length(); i++) {\n        char c = vowels[i];\n \
    \       char next = vowels[(i + 2) % vowels.length()];\n        std::replace(encoded.begin(),\
    \ encoded.end(), c, next);\n        std::replace(encoded.begin(), encoded.end(),\
    \ c - 'a' + 'A', next - 'a' + 'A');\n    }\n    return encoded;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (vowels.find(message[i]) != std::string::npos)\
    \ {\n            result += (char)((message[i] - 'a' + 2) % 26 + 'a');\n      \
    \  } else {\n            result += (char)((message[i] - 'A' + 2) % 26 + 'A');\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  switch (c) {\n            case 'A':\n                c = 'C';\n           \
    \     break;\n            case 'E':\n                c = 'G';\n              \
    \  break;\n            case 'I':\n                c = 'K';\n                break;\n\
    \            case 'O':\n                c = 'Q';\n                break;\n   \
    \         case 'U':\n                c = 'Y';\n                break;\n      \
    \      case 'a':\n                c = 'c';\n                break;\n         \
    \   case 'e':\n                c = 'g';\n                break;\n            case\
    \ 'i':\n                c = 'k';\n                break;\n            case 'o':\n\
    \                c = 'q';\n                break;\n            case 'u':\n   \
    \             c = 'y';\n                break;\n        }\n        result += c;\n\
    \    }\n    return result;", "    std::string encoded = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c\
    \ = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c\
    \ = c - 'A' + 'a';\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            index = (index + 2)\
    \ % vowels.length();\n            c = vowels[index];\n        }\n        encoded\
    \ += c;\n    }\n    return encoded;", "    std::string vowels = \"aeiou\";\n \
    \   std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (vowels.find(message[i]) != std::string::npos) {\n           \
    \ encoded += (char)(message[i] + 2);\n        } else {\n            encoded +=\
    \ (char)(message[i] - 2);\n        }\n    }\n    return encoded;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += message[i] - 32;\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += message[i] + 32;\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = 'a' + ((result[i] - 'a' + 2)\
    \ % 26);\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = 'A'\
    \ + ((result[i] - 'A' + 2) % 26);\n        }\n    }\n    return result;", "  \
    \  std::string result = \"\";\n    std::map<char, char> map;\n    map['a'] = 'c';\n\
    \    map['e'] = 'g';\n    map['i'] = 'k';\n    map['o'] = 'q';\n    map['u'] =\
    \ 'y';\n    map['A'] = 'C';\n    map['E'] = 'G';\n    map['I'] = 'K';\n    map['O']\
    \ = 'Q';\n    map['U'] = 'Y';\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (map.find(message[i]) != map.end()) {\n            result += map[message[i]];\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + (result[i] - 'a' + 2) % 26;\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + (result[i] - 'A' + 2) % 26;\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    std::string encoded\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       encoded += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     encoded += message[i];\n        }\n    }\n    for(int i = 0; i < encoded.length();\
    \ i++) {\n        if(encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] == 'i'\
    \ || encoded[i] == 'o' || encoded[i] == 'u') {\n            encoded[i] = (char)(encoded[i]\
    \ + 2);\n        } else if(encoded[i] == 'y') {\n            encoded[i] = 'a';\n\
    \        } else if(encoded[i] == 'z') {\n            encoded[i] = 'b';\n     \
    \   }\n    }\n    return encoded;", "    std::string encoded_message = \"\";\n\
    \    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encoded_message[i] == vowels[j]) {\n               \
    \ encoded_message[i] = vowels[(j + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result;\n    for\
    \ (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result\
    \ += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            result\
    \ += c - 'A' + 'a';\n        } else {\n            result += c;\n        }\n \
    \   }\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i] ==\
    \ 'a') {\n            result[i] = 'c';\n        } else if (result[i] == 'e') {\n\
    \            result[i] = 'g';\n        } else if (result[i] == 'i') {\n      \
    \      result[i] = 'k';\n        } else if (result[i] == 'o') {\n            result[i]\
    \ = 'q';\n        } else if (result[i] == 'u') {\n            result[i] = 'w';\n\
    \        } else if (result[i] == 'A') {\n            result[i] = 'C';\n      \
    \  } else if (result[i] == 'E') {\n            result[i] = 'G';\n        } else\
    \ if (result[i] == 'I') {\n            result[i] = 'K';\n        } else if (result[i]\
    \ == 'O') {\n            result[i] = 'Q';\n        } else if (result[i] == 'U')\
    \ {\n            result[i] = 'W';\n        }\n    }\n    return result;", "  \
    \  std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;", "    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string encoded = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (vowels.find(message[i]) != std::string::npos) {\n            encoded\
    \ += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += (char)(message[i]\
    \ + 32);\n        } else if (message[i] >= 'a' && message[i] <= 'z') {\n     \
    \       encoded += (char)(message[i] - 32);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (isupper(c)) {\n          \
    \  c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n\
    \        }\n        if (vowels.find(c) != std::string::npos) {\n            c\
    \ = vowels[(vowels.find(c) + 2) % vowels.length()];\n        }\n        encoded\
    \ += c;\n    }\n    return encoded;", "    std::string result;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += (message[i] - 'a' + 'A');\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = 'a' + ((result[i] - 'a' + 2) % 26);\n   \
    \     } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = 'A' + ((result[i] - 'A'\
    \ + 2) % 26);\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   c = c - 'A' + 'a';\n        }\n        if (c == 'a') {\n            c = 'c';\n\
    \        } else if (c == 'e') {\n            c = 'g';\n        } else if (c ==\
    \ 'i') {\n            c = 'k';\n        } else if (c == 'o') {\n            c\
    \ = 'q';\n        } else if (c == 'u') {\n            c = 'w';\n        }\n  \
    \      result.push_back(c);\n    }\n    return result;", "\tstd::string vowels\
    \ = \"aeiou\";\n\tstd::string encoded = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tencoded +=\
    \ message[i] - 'a' + 'A';\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n\t\t\tencoded += message[i] - 'A' + 'a';\n\t\t} else {\n\t\t\tencoded +=\
    \ message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < encoded.length(); i++) {\n\t\t\
    for (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (encoded[i] == vowels[j])\
    \ {\n\t\t\t\tencoded[i] = vowels[(j + 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn encoded;", "    // Write your code here\n    std::string vowels\
    \ = \"aeiou\";\n    std::string encoded;\n    for (auto c : message) {\n     \
    \   if (vowels.find(tolower(c)) != std::string::npos) {\n            encoded +=\
    \ (c + 2);\n        } else {\n            encoded += c;\n        }\n    }\n  \
    \  return encoded;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'C' || result[i] == 'D' || result[i] ==\
    \ 'F' || result[i] == 'G' || result[", "\tstd::string result;\n\tstd::string vowels\
    \ = \"aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar c = message[i];\n\
    \t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc = c - 'a' + 'A';\n\t\t}\n\t\telse if\
    \ (c >= 'A' && c <= 'Z') {\n\t\t\tc = c - 'A' + 'a';\n\t\t}\n\t\telse {\n\t\t\t\
    result += c;\n\t\t\tcontinue;\n\t\t}\n\t\tif (vowels.find(c) != std::string::npos)\
    \ {\n\t\t\tint index = vowels.find(c);\n\t\t\tindex = (index + 2) % vowels.length();\n\
    \t\t\tc = vowels[index];\n\t\t}\n\t\tresult += c;\n\t}\n\treturn result;", " \
    \   std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = (char)(result[i] + 2);\n  \
    \      }\n    }\n    return result;", "\tstd::string result;\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t} else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n\t\t\tresult += message[i] - 'A' + 'a';\n\t\t} else\
    \ {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += message[i] - 'A' + 'a';\n        }\
    \ else {\n            encoded_message += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            encoded_message[i] = 'a'\
    \ + ((encoded_message[i] - 'a' + 2) % 26);\n        } else if (encoded_message[i]\
    \ == 'A' || encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i]\
    \ == 'O' || encoded_message[i] == 'U') {\n            encoded_message[i] = 'A'\
    \ + ((encoded_message[i] - 'A' + 2) % 26);\n        }\n    }\n    return encoded_message;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;", "    std::string result;\n \
    \   for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            c = (c - 'a' + 2) % 26 + 'a';\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = (c - 'A' + 2) %\
    \ 26 + 'A';\n        }\n        result += c;\n    }\n    return result;", "  \
    \  std::string result;\n    for (char c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c - 'a' + 'A';\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += c - 'A' + 'a';\n        } else {\n   \
    \         result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] ==\
    \ 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'A' || result[i]\
    \ == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + (result[i] - 'a' + 2) % 26;\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + (result[i] - 'A' + 2) % 26;\n        }\n  \
    \  }\n    return result;", "    std::string encoded_message;\n    std::map<char,\
    \ char> map_of_vowels;\n    map_of_vowels['a'] = 'c';\n    map_of_vowels['e']\
    \ = 'i';\n    map_of_vowels['i'] = 'k';\n    map_of_vowels['o'] = 'q';\n    map_of_vowels['u']\
    \ = 'y';\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            message[i] = message[i] - 'a' +\
    \ 'A';\n        }\n        if (map_of_vowels.find(message[i]) != map_of_vowels.end())\
    \ {\n            encoded_message += map_of_vowels[message[i]];\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n        }\
    \ else {\n            result += c;\n        }\n    }\n    return result;", " \
    \ std::string encoded_message = \"\";\n  std::string vowels = \"aeiou\";\n  for\
    \ (int i = 0; i < message.length(); i++) {\n    if (isupper(message[i])) {\n \
    \     encoded_message += tolower(message[i]);\n    } else if (islower(message[i]))\
    \ {\n      encoded_message += toupper(message[i]);\n    } else {\n      encoded_message\
    \ += message[i];\n    }\n  }\n  for (int i = 0; i < encoded_message.length();\
    \ i++) {\n    for (int j = 0; j < vowels.length(); j++) {\n      if (encoded_message[i]\
    \ == vowels[j]) {\n        encoded_message[i] = vowels[(j + 2) % vowels.length()];\n\
    \      }\n    }\n  }\n  return encoded_message;", "    std::string result;\n \
    \   for (auto c : message) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else if (islower(c)) {\n            result += toupper(c);\n\
    \        } else {\n            result += c;\n        }\n    }\n    for (auto &c\
    \ : result) {\n        switch (c) {\n            case 'a':\n                c\
    \ = 'c';\n                break;\n            case 'e':\n                c = 'g';\n\
    \                break;\n            case 'i':\n                c = 'k';\n   \
    \             break;\n            case 'o':\n                c = 'q';\n      \
    \          break;\n            case 'u':\n                c = 'y';\n         \
    \       break;\n            case 'A':\n                c = 'C';\n            \
    \    break;\n            case 'E':\n                c = 'G';\n               \
    \ break;\n            case 'I':\n                c = 'K';\n                break;\n\
    \            case 'O':\n                c = 'Q';\n                break;\n   \
    \         case 'U':\n                c = 'Y';\n                break;\n      \
    \  }\n    }\n    return result;", "    std::string encoded_message = \"\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (char)(message[i] -\
    \ 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded_message += (char)(message[i] - 'A' + 'a');\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "  std::string encoded_message\
    \ = \"\";\n  for (int i = 0; i < message.length(); i++) {\n    if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n      encoded_message += message[i] - 32;\n\
    \    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      encoded_message\
    \ += message[i] + 32;\n    } else {\n      encoded_message += message[i];\n  \
    \  }\n  }\n  for (int i = 0; i < encoded_message.length(); i++) {\n    if (encoded_message[i]\
    \ == 'A') {\n      encoded_message[i] = 'C';\n    } else if (encoded_message[i]\
    \ == 'E') {\n      encoded_message[i] = 'G';\n    } else if (encoded_message[i]\
    \ == 'I') {\n      encoded_message[i] = 'K';\n    } else if (encoded_message[i]\
    \ == 'O') {\n      encoded_message[i] = 'Q';\n    } else if (encoded_message[i]\
    \ == 'U') {\n      encoded_message[i] = 'W';\n    } else if (encoded_message[i]\
    \ == 'a') {\n      encoded_message[i] = 'c';\n    } else if (encoded_message[i]\
    \ == 'e') {\n      encoded_message[i] = 'g';\n    } else if (encoded_message[i]\
    \ == 'i') {\n      encoded_message[i] = 'k';\n    } else if (encoded_message[i]\
    \ == 'o') {\n      encoded_message[i] = 'q';\n    } else if (encoded_message[i]\
    \ == 'u') {\n      encoded_message[i] = 'w';\n    }\n  }\n  return encoded_message;",
  "    std::string encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (char)(message[i] -\
    \ 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n       \
    \     encoded_message += (char)(message[i] + 32);\n        } else {\n        \
    \    encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "\tstd::string encoded_message =\
    \ \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n\t\t\tencoded_message += message[i] - 'a' + 'A';\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message\
    \ += message[i] - 'A' + 'a';\n\t\t} else {\n\t\t\tencoded_message += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < encoded_message.length(); i++) {\n\t\tif (encoded_message[i]\
    \ == 'a') {\n\t\t\tencoded_message[i] = 'c';\n\t\t} else if (encoded_message[i]\
    \ == 'e') {\n\t\t\tencoded_message[i] = 'g';\n\t\t} else if (encoded_message[i]\
    \ == 'i') {\n\t\t\tencoded_message[i] = 'k';\n\t\t} else if (encoded_message[i]\
    \ == 'o') {\n\t\t\tencoded_message[i] = 'q';\n\t\t} else if (encoded_message[i]\
    \ == 'u') {\n\t\t\tencoded_message[i] = 'w';\n\t\t} else if (encoded_message[i]\
    \ == 'A') {\n\t\t\tencoded_message[i] = 'C';\n\t\t} else if (encoded_message[i]\
    \ == 'E') {\n\t\t\tencoded_message[i] = 'G';\n\t\t} else if (encoded_message[i]\
    \ == 'I') {\n\t\t\tencoded_message[i] = 'K';\n\t\t} else if (encoded_message[i]\
    \ == 'O') {\n\t\t\tencoded_message[i] = 'Q';\n\t\t} else if (encoded_message[i]\
    \ == 'U') {\n\t\t\tencoded_message[i] = 'W';\n\t\t}\n\t}\n\t", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "\tstd::string result;\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t} else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n\t\t\tresult += message[i] - 'A' + 'a';\n\t\t} else\
    \ {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' ||\
    \ result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i] = result[i] + 2;\n\t\
    \t} else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\
    \treturn result;", "    std::string result;\n    for (char c : message) {\n  \
    \      if (c >= 'a' && c <= 'z') {\n            result += 'A' + (c - 'a');\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result += 'a' + (c - 'A');\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "\tstd::string encoded = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (int i\
    \ = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n\t\t\tencoded += message[i] - 32;\n\t\t} else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n\t\t\tencoded += message[i] + 32;\n\t\t} else {\n\t\
    \t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < encoded.length();\
    \ i++) {\n\t\tif (encoded[i] >= 'a' && encoded[i] <= 'z') {\n\t\t\tfor (int j\
    \ = 0; j < vowels.length(); j++) {\n\t\t\t\tif (encoded[i] == vowels[j]) {\n\t\
    \t\t\t\tif (j == vowels.length() - 1) {\n\t\t\t\t\t\tencoded[i] = vowels[0];\n\
    \t\t\t\t\t} else {\n\t\t\t\t\t\tencoded[i] = vowels[j + 1];\n\t\t\t\t\t}\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded;", "    std::string encoded_message\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encoded_message[i] == vowels[j]) {\n               \
    \ encoded_message[i] = vowels[(j + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a'\
    \ || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] ==\
    \ 'u') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n            result[i] = result[i] + 2;\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'A' || result[i] == 'E' ||\
    \ result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'Y') {\n            result[i]\
    \ = 'A';\n        } else if (result[i] == 'Z') {\n            result[i] = 'B';\n\
    \        }\n    }\n    return result;", "    std::string encoded = \"\";\n   \
    \ for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ + 32;\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "\tstd::string result = \"\";\n\tstd::string vowels\
    \ = \"aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar c = message[i];\n\
    \t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc = c - 'a' + 'A';\n\t\t}\n\t\telse if\
    \ (c >= 'A' && c <= 'Z') {\n\t\t\tc = c - 'A' + 'a';\n\t\t}\n\t\tif (vowels.find(c)\
    \ != std::string::npos) {\n\t\t\tc = vowels[(vowels.find(c) + 2) % vowels.length()];\n\
    \t\t}\n\t\tresult += c;\n\t}\n\treturn result;", "\tstd::string encoded = \"\"\
    ;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n\t\t\tencoded += message[i] - 'a' + 'A';\n\t\t} else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded += message[i] - 'A'\
    \ + 'a';\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i\
    \ = 0; i < encoded.length(); i++) {\n\t\tif (encoded[i] == 'a') {\n\t\t\tencoded[i]\
    \ = 'c';\n\t\t} else if (encoded[i] == 'e') {\n\t\t\tencoded[i] = 'g';\n\t\t}\
    \ else if (encoded[i] == 'i') {\n\t\t\tencoded[i] = 'k';\n\t\t} else if (encoded[i]\
    \ == 'o') {\n\t\t\tencoded[i] = 'q';\n\t\t} else if (encoded[i] == 'u') {\n\t\t\
    \tencoded[i] = 'w';\n\t\t} else if (encoded[i] == 'A') {\n\t\t\tencoded[i] = 'C';\n\
    \t\t} else if (encoded[i] == 'E') {\n\t\t\tencoded[i] = 'G';\n\t\t} else if (encoded[i]\
    \ == 'I') {\n\t\t\tencoded[i] = 'K';\n\t\t} else if (encoded[i] == 'O') {\n\t\t\
    \tencoded[i] = 'Q';\n\t\t} else if (encoded[i] == 'U') {\n\t\t\tencoded[i] = 'W';\n\
    \t\t}\n\t}\n\treturn encoded;", "    std::string result;\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded;\n    for (char\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a') {\n            c = 'c';\n        }\
    \ else if (c == 'e') {\n            c = 'g';\n        } else if (c == 'i') {\n\
    \            c = 'k';\n        } else if (c == 'o') {\n            c = 'q';\n\
    \        } else if (c == 'u') {\n            c = 'w';\n        } else if (c ==\
    \ 'A') {\n            c = 'C';\n        } else if (c == 'E') {\n            c\
    \ = 'G';\n        } else if (c == 'I') {\n            c = 'K';\n        } else\
    \ if (c == 'O') {\n            c = 'Q';\n        } else if (c == 'U') {\n    \
    \        c = 'W';\n        }\n        encoded += c;\n    }\n    return encoded;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' ||\
    \ result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i]\
    \ = result[i] + 2;\n        }\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] ==\
    \ 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n   \
    \     } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n   \
    \     } else if (c == 'a') {\n            c = 'c';\n        } else if (c == 'e')\
    \ {\n            c = 'g';\n        } else if (c == 'i') {\n            c = 'k';\n\
    \        } else if (c == 'o') {\n            c = 'q';\n        } else if (c ==\
    \ 'u') {\n            c = 'w';\n        } else if (c == 'A') {\n            c\
    \ = 'C';\n        } else if (c == 'E') {\n            c = 'G';\n        } else\
    \ if (c == 'I') {\n            c = 'K';\n        } else if (c == 'O') {\n    \
    \        c = 'Q';\n        } else if (c == 'U') {\n            c = 'W';\n    \
    \    }\n        result += c;\n    }\n    return result;", "    std::string encoded\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      encoded += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;", "    std::string encoded_message = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (vowels.find(message[i]) != std::string::npos) {\n            encoded_message\
    \ += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = (result[i] - 'a' + 2) % 26 +\
    \ 'a';\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = (result[i]\
    \ - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return result;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t\
    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i]\
    \ - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\treturn\
    \ result;", "  std::string vowels = \"aeiou\";\n  std::string encoded = \"\";\n\
    \  for (int i = 0; i < message.length(); i++) {\n    if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n      encoded += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n    } else {\n      encoded += message[i];\n    }\n  }\n  return\
    \ encoded;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' ||\
    \ result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i]\
    \ = result[i] + 2;\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (vowels.find(message[i]) != std::string::npos) {\n            result +=\
    \ (char)(message[i] + 2);\n        } else {\n            result += (char)(message[i]\
    \ - 2);\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            c\
    \ = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c\
    \ = c - 'A' + 'a';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            c = c + 2;\n        } else if (c == 'Y')\
    \ {\n            c = 'A';\n        } else if (c == 'Z') {\n            c = 'B';\n\
    \        }\n        result.push_back(c);\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + (result[i] - 'a' + 2) % 26;\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + (result[i] - 'A' + 2) % 26;\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (char c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c - 'a' + 'A';\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += c - 'A' + 'a';\n        } else {\n   \
    \         result += c;\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + (result[i] - 'a' + 2) % 26;\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + (result[i] - 'A' + 2) % 26;\n        }\n  \
    \  }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(message[i]) != std::string::npos) {\n            result += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (vowels.find(tolower(message[i])) != std::string::npos) {\n  \
    \          int index = vowels.find(tolower(message[i]));\n            encoded\
    \ += vowels[(index + 2) % 5];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded = \"\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ + 32;\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "    std::string encoded;\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            encoded += c - 'a' + 'A';\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c - 'A' +\
    \ 'a';\n        } else {\n            encoded += c;\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.size(); i++) {\n        if (encoded[i] == 'a') {\n \
    \           encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n     \
    \       encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n         \
    \   encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i]\
    \ = 'q';\n        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n\
    \        } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n    \
    \    } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        }\
    \ else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else\
    \ if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i]\
    \ == 'U') {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] ==\
    \ 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 'a' + 'A';\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += message[i] - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (vowels.find(c) != std::string::npos) {\n    \
    \        int index = vowels.find(c);\n            index = (index + 2) % vowels.length();\n\
    \            c = vowels[index];\n        }\n        encoded += c;\n    }\n   \
    \ return encoded;", "    std::string encoded = \"\";\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            encoded += (char)(c - 'a'\
    \ + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded +=\
    \ (char)(c - 'A' + 'a');\n        } else {\n            encoded += c;\n      \
    \  }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'y';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'Y';\n        }\n  \
    \  }\n    return encoded;", "\tstd::string result = \"\";\n\tfor (int i = 0; i\
    \ < message.length(); i++) {\n\t\tchar c = message[i];\n\t\tif (c >= 'a' && c\
    \ <= 'z') {\n\t\t\tc = c - 'a' + 'A';\n\t\t} else if (c >= 'A' && c <= 'Z') {\n\
    \t\t\tc = c - 'A' + 'a';\n\t\t}\n\t\tif (c == 'a') {\n\t\t\tc = 'c';\n\t\t} else\
    \ if (c == 'e') {\n\t\t\tc = 'g';\n\t\t} else if (c == 'i') {\n\t\t\tc = 'k';\n\
    \t\t} else if (c == 'o') {\n\t\t\tc = 'q';\n\t\t} else if (c == 'u') {\n\t\t\t\
    c = 'w';\n\t\t} else if (c == 'A') {\n\t\t\tc = 'C';\n\t\t} else if (c == 'E')\
    \ {\n\t\t\tc = 'G';\n\t\t} else if (c == 'I') {\n\t\t\tc = 'K';\n\t\t} else if\
    \ (c == 'O') {\n\t\t\tc = 'Q';\n\t\t} else if (c == 'U') {\n\t\t\tc = 'W';\n\t\
    \t}\n\t\tresult += c;\n\t}\n\treturn result;", "    std::string vowels = \"aeiou\"\
    ;\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      int index = vowels.find(message[i]);\n            encoded += vowels[(index\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded = \"\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += (char)(message[i] - 'a' + 'A');\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length(); i++)\
    \ {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n       \
    \ } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n        } else\
    \ if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else if (encoded[i]\
    \ == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i] == 'u')\
    \ {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n\
    \            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n    \
    \        encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n        \
    \    encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n            encoded[i]\
    \ = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n\
    \        }\n    }\n    return encoded;", "\tstd::string result;\n\tfor (int i\
    \ = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t} else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i] - 'A' + 'a';\n\t\t}\
    \ else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded += (char)(message[i] - 'A' + 'a');\n        } else {\n  \
    \          encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;", "    std::string result;\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n     \
    \   } else {\n            encoded += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n    \
    \        encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n        \
    \    encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n            encoded[i]\
    \ = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n\
    \        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n    \
    \    } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        }\
    \ else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        } else\
    \ if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else if (encoded[i]\
    \ == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U')\
    \ {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;", " \
    \   std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (isupper(message[i])) {\n            encoded += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded += toupper(message[i]);\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n\
    \            encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n    \
    \        encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n        \
    \    encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i]\
    \ = 'q';\n        } else if (encoded[i] == 'u') {\n            encoded[i] = 'y';\n\
    \        }\n    }\n    return encoded;", "    std::string vowels = \"aeiou\";\n\
    \    std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      encoded_message += (char)(message[i] + 2);\n        } else {\n        \
    \    encoded_message += (char)(message[i] - 2);\n        }\n    }\n    return\
    \ encoded_message;", "\tstd::string result = \"\";\n\tstd::string vowels = \"\
    aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\t// if the character\
    \ is a vowel, encode it\n\t\tif (vowels.find(tolower(message[i])) != std::string::npos)\
    \ {\n\t\t\t// if the character is a lowercase vowel\n\t\t\tif (islower(message[i]))\
    \ {\n\t\t\t\t// if the character is a lowercase vowel\n\t\t\t\tif (message[i]\
    \ == 'u') {\n\t\t\t\t\tresult += 'a';\n\t\t\t\t} else {\n\t\t\t\t\tresult += message[i]\
    \ + 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the character is an uppercase\
    \ vowel\n\t\t\t\tif (message[i] == 'U') {\n\t\t\t\t\tresult += 'A';\n\t\t\t\t\
    } else {\n\t\t\t\t\tresult += message[i] + 2;\n\t\t\t\t}\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\t// if the character is not a vowel, swap case\n\t\t\tif (islower(message[i]))\
    \ {\n\t\t\t\tresult += toupper(message[i]);\n\t\t\t} else {\n\t\t\t\tresult +=\
    \ tolower(message[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i]\
    \ + 2;\n        }\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] -\
    \ 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    encoded_message += message[i] + 32;\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] ==\
    \ 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n       \
    \ }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(message[i]) != std::string::npos) {\n            int index = vowels.find(message[i]);\n\
    \            index = (index + 2) % vowels.length();\n            encoded += vowels[index];\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i]\
    \ == 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 1;\n        } else if (result[i]\
    \ == 'b') {\n            result[i] = 'd';\n        } else if (result[i] == 'z')\
    \ {\n            result[i] = 'b';\n        }\n    }\n    return result;", "  \
    \  std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n  \
    \          result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "\tstd::string\
    \ encoded = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (isupper(message[i])) {\n\t\t\tencoded += tolower(message[i]);\n\
    \t\t} else if (islower(message[i])) {\n\t\t\tencoded += toupper(message[i]);\n\
    \t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i <\
    \ encoded.length(); i++) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\
    \t\tif (encoded[i] == vowels[j]) {\n\t\t\t\tencoded[i] = vowels[(j + 2) % vowels.length()];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn encoded;", "    std::string result = \"\";\n   \
    \ for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a'\
    \ || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] ==\
    \ 'u') {\n            result[i] = result[i] + 2;\n        }\n    }\n    return\
    \ result;", "    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'A' || encoded[i] == 'E' || encoded[i] ==\
    \ 'I' || encoded[i] == 'O' || encoded[i] == 'U') {\n            encoded[i] = encoded[i]\
    \ + 2;\n        } else if (encoded[i] == 'Y') {\n            encoded[i] = 'A';\n\
    \        } else if (encoded[i] == 'Z') {\n            encoded[i] = 'B';\n    \
    \    }\n    }\n    return encoded;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n   \
    \     if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            c = c + 2;\n        }\n        result += c;\n\
    \    }\n    return result;", "    std::string encoded = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ - 'A' + 'a';\n        } else {\n            encoded += message[i];\n       \
    \ }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (encoded[i] == vowels[j]) {\n                encoded[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos) {\n\
    \            encoded += (char)((message[i] - 'a' + 2) % 26 + 'a');\n        }\
    \ else {\n            encoded += (char)((message[i] - 'A' + 2) % 26 + 'A');\n\
    \        }\n    }\n    return encoded;", "    std::string encoded = \"\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ + 32;\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "    std::string result;\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (isupper(c))\
    \ {\n            result += tolower(c);\n        } else if (islower(c)) {\n   \
    \         result += toupper(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2) % 26;\n     \
    \   } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = 'A' + (result[i] - 'A'\
    \ + 2) % 26;\n        }\n    }\n    return result;", "\tstd::string result;\n\t\
    for (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t} else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i] - 'A' + 'a';\n\t\t\
    } else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' ||\
    \ result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i] = (result[i] - 'a'\
    \ + 2) % 26 + 'a';\n\t\t} else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\tresult[i] = (result[i]\
    \ - 'A' + 2) % 26 + 'A';\n\t\t}\n\t}\n\treturn result;", "    std::string encoded;\n\
    \    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   c = c - 'A' + 'a';\n        }\n        if (c == 'a') {\n            c = 'c';\n\
    \        } else if (c == 'e') {\n            c = 'g';\n        } else if (c ==\
    \ 'i') {\n            c = 'k';\n        } else if (c == 'o') {\n            c\
    \ = 'q';\n        } else if (c == 'u') {\n            c = 'w';\n        } else\
    \ if (c == 'A') {\n            c = 'C';\n        } else if (c == 'E') {\n    \
    \        c = 'G';\n        } else if (c == 'I') {\n            c = 'K';\n    \
    \    } else if (c == 'O') {\n            c = 'Q';\n        } else if (c == 'U')\
    \ {\n            c = 'W';\n        }\n        encoded += c;\n    }\n    return\
    \ encoded;", "    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n        }\
    \ else {\n            result += c;\n        }\n    }\n    return result;", " \
    \   std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (message[i] - 'A' + 'a');\n      \
    \  } else {\n            encoded_message += message[i];\n        }\n    }\n  \
    \  for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            encoded_message[i] = (encoded_message[i]\
    \ - 'a' + 2) % 26 + 'a';\n        } else if (encoded_message[i] == 'A' || encoded_message[i]\
    \ == 'E' || encoded_message[i] == 'I' || encoded_message[i] == 'O' || encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = (encoded_message[i] - 'A' + 2) %\
    \ 26 + 'A';\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "  std::string vowels = \"aeiou\";\n  std::string encoded\
    \ = \"\";\n  for (int i = 0; i < message.length(); i++) {\n    if (vowels.find(message[i])\
    \ != std::string::npos) {\n      encoded += vowels[(vowels.find(message[i]) +\
    \ 2) % vowels.length()];\n    } else {\n      encoded += message[i];\n    }\n\
    \  }\n  return encoded;", "    std::string result;\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += 'A' + (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += 'a' + (message[i] - 'A');\n      \
    \  } else {\n            encoded_message += message[i];\n        }\n    }\n  \
    \  for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded_message += (char)(message[i] - 'A'\
    \ + 'a');\n        } else {\n            encoded_message += message[i];\n    \
    \    }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n    \
    \    if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (message[i] - 'a' +\
    \ 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded_message += (message[i] - 'A' + 'a');\n        } else {\n      \
    \      encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i\
    \ < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A' ||\
    \ encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i]\
    \ == 'O' || encoded_message[i] == 'U') {\n            encoded_message[i] = (encoded_message[i]\
    \ - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return encoded_message;", "  \
    \  std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        encoded_message += c;\n    }\n    return encoded_message;",
  "  std::string result = \"\";\n  for (int i = 0; i < message.length(); i++) {\n\
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n      result += message[i]\
    \ - 'a' + 'A';\n    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n   \
    \   result += message[i] - 'A' + 'a';\n    } else {\n      result += message[i];\n\
    \    }\n  }\n  for (int i = 0; i < result.length(); i++) {\n    if (result[i]\
    \ == 'a') {\n      result[i] = 'c';\n    } else if (result[i] == 'e') {\n    \
    \  result[i] = 'g';\n    } else if (result[i] == 'i') {\n      result[i] = 'k';\n\
    \    } else if (result[i] == 'o') {\n      result[i] = 'q';\n    } else if (result[i]\
    \ == 'u') {\n      result[i] = 'w';\n    } else if (result[i] == 'A') {\n    \
    \  result[i] = 'C';\n    } else if (result[i] == 'E') {\n      result[i] = 'G';\n\
    \    } else if (result[i] == 'I') {\n      result[i] = 'K';\n    } else if (result[i]\
    \ == 'O') {\n      result[i] = 'Q';\n    } else if (result[i] == 'U') {\n    \
    \  result[i] = 'W';\n    }\n  }\n  return result;", "\tstd::string vowels = \"\
    aeiou\";\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tchar c = message[i];\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc =\
    \ c - 'a' + 'A';\n\t\t}\n\t\telse if (c >= 'A' && c <= 'Z') {\n\t\t\tc = c - 'A'\
    \ + 'a';\n\t\t}\n\t\tif (vowels.find(c) != std::string::npos) {\n\t\t\tint index\
    \ = vowels.find(c);\n\t\t\tindex = (index + 2) % vowels.length();\n\t\t\tc = vowels[index];\n\
    \t\t}\n\t\tresult += c;\n\t}\n\treturn result;", "    std::string result;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += (message[i] - 'a' + 'A');\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (message[i] - 'A' + 'a');\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = c + 2;\n        }\n        result += c;\n  \
    \  }\n    return result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + ((result[i] - 'a' + 2) % 26);\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + ((result[i] - 'A' + 2) % 26);\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "\tstd::string\
    \ result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t\
    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i]\
    \ - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a' || result[i] ==\
    \ 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i]\
    \ = result[i] + 2;\n\t\t} else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\tresult[i] = result[i]\
    \ + 2;\n\t\t}\n\t}\n\treturn result;", "    std::string encoded = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ - 'A' + 'a';\n        } else {\n            encoded += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "    std::string result;\n    for (char c : message)\
    \ {\n        if (isalpha(c)) {\n            if (islower(c)) {\n              \
    \  result += toupper(c);\n            } else {\n                result += tolower(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "  std::string encoded_message = \"\";\n  for (int i = 0;\
    \ i < message.length(); i++) {\n    if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n      encoded_message += (char)(message[i] - 'a' + 'A');\n    } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n      encoded_message += (char)(message[i] -\
    \ 'A' + 'a');\n    } else {\n      encoded_message += message[i];\n    }\n  }\n\
    \  for (int i = 0; i < encoded_message.length(); i++) {\n    if (encoded_message[i]\
    \ == 'a') {\n      encoded_message[i] = 'c';\n    } else if (encoded_message[i]\
    \ == 'e') {\n      encoded_message[i] = 'g';\n    } else if (encoded_message[i]\
    \ == 'i') {\n      encoded_message[i] = 'k';\n    } else if (encoded_message[i]\
    \ == 'o') {\n      encoded_message[i] = 'q';\n    } else if (encoded_message[i]\
    \ == 'u') {\n      encoded_message[i] = 'w';\n    } else if (encoded_message[i]\
    \ == 'A') {\n      encoded_message[i] = 'C';\n    } else if (encoded_message[i]\
    \ == 'E') {\n      encoded_message[i] = 'G';\n    } else if (encoded_message[i]\
    \ == 'I') {\n      encoded_message[i] = 'K';\n    } else if (encoded_message[i]\
    \ == 'O') {\n      encoded_message[i] = 'Q';\n    } else if (encoded_message[i]\
    \ == 'U') {\n      encoded_message[i] = 'W';\n    }\n  }\n  return encoded_message;",
  "    std::string result;\n    std::string vowels = \"aeiou\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if (c\
    \ >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.length()];\n        }\n        result += c;\n    }\n    return\
    \ result;", "    std::string encoded_message;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char ch = message[i];\n        if (ch >= 'a' && ch <= 'z') {\n\
    \            ch = ch - 'a' + 'A';\n        } else if (ch >= 'A' && ch <= 'Z')\
    \ {\n            ch = ch - 'A' + 'a';\n        }\n        if (ch == 'A' || ch\
    \ == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            ch = ch + 2;\n\
    \        } else if (ch == 'Y') {\n            ch = 'A';\n        } else if (ch\
    \ == 'Z') {\n            ch = 'B';\n        }\n        encoded_message += ch;\n\
    \    }\n    return encoded_message;", "    std::string encoded_message = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded_message += (char)(message[i] - 'A' + 'a');\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded_message = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] -\
    \ 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    encoded_message += message[i] + 32;\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(message[i])\
    \ != std::string::npos) {\n            result += alphabet[(alphabet.find(message[i])\
    \ + 2) % 26];\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;", "    std::string encoded_message = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encoded_message[i] == vowels[j]) {\n               \
    \ encoded_message[i] = vowels[(j + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result = \"\";\n\
    \    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   c = c - 'A' + 'a';\n        }\n        if (c == 'a') {\n            c = 'c';\n\
    \        } else if (c == 'e') {\n            c = 'g';\n        } else if (c ==\
    \ 'i') {\n            c = 'k';\n        } else if (c == 'o') {\n            c\
    \ = 'q';\n        } else if (c == 'u') {\n            c = 'w';\n        } else\
    \ if (c == 'A') {\n            c = 'C';\n        } else if (c == 'E') {\n    \
    \        c = 'G';\n        } else if (c == 'I') {\n            c = 'K';\n    \
    \    } else if (c == 'O') {\n            c = 'Q';\n        } else if (c == 'U')\
    \ {\n            c = 'W';\n        }\n        result += c;\n    }\n    return\
    \ result;", "    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "\tstd::string result;\n\
    \tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n\t\t\tresult += message[i] - 32;\n\t\t} else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n\t\t\tresult += message[i] + 32;\n\t\t} else {\n\t\t\
    \tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++)\
    \ {\n\t\tif (result[i] == 'A') {\n\t\t\tresult[i] = 'C';\n\t\t} else if (result[i]\
    \ == 'E') {\n\t\t\tresult[i] = 'G';\n\t\t} else if (result[i] == 'I') {\n\t\t\t\
    result[i] = 'K';\n\t\t} else if (result[i] == 'O') {\n\t\t\tresult[i] = 'Q';\n\
    \t\t} else if (result[i] == 'U') {\n\t\t\tresult[i] = 'Y';\n\t\t} else if (result[i]\
    \ == 'a') {\n\t\t\tresult[i] = 'c';\n\t\t} else if (result[i] == 'e') {\n\t\t\t\
    result[i] = 'g';\n\t\t} else if (result[i] == 'i') {\n\t\t\tresult[i] = 'k';\n\
    \t\t} else if (result[i] == 'o') {\n\t\t\tresult[i] = 'q';\n\t\t} else if (result[i]\
    \ == 'u') {\n\t\t\tresult[i] = 'y';\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2)\
    \ % 26;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i]\
    \ == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = 'A'\
    \ + (result[i] - 'A' + 2) % 26;\n        }\n    }\n    return result;", "    std::string\
    \ encoded;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            encoded += c - 'A' + 'a';\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    for (char &c : encoded) {\n        if (c == 'a')\
    \ {\n            c = 'c';\n        } else if (c == 'e') {\n            c = 'g';\n\
    \        } else if (c == 'i') {\n            c = 'k';\n        } else if (c ==\
    \ 'o') {\n            c = 'q';\n        } else if (c == 'u') {\n            c\
    \ = 'w';\n        } else if (c == 'A') {\n            c = 'C';\n        } else\
    \ if (c == 'E') {\n            c = 'G';\n        } else if (c == 'I') {\n    \
    \        c = 'K';\n        } else if (c == 'O') {\n            c = 'Q';\n    \
    \    } else if (c == 'U') {\n            c = 'W';\n        }\n    }\n    return\
    \ encoded;", "    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c -= 32;\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            c += 32;\n        }\n        switch (c) {\n    \
    \        case 'A':\n                c = 'C';\n                break;\n       \
    \     case 'E':\n                c = 'G';\n                break;\n          \
    \  case 'I':\n                c = 'K';\n                break;\n            case\
    \ 'O':\n                c = 'Q';\n                break;\n            case 'U':\n\
    \                c = 'Y';\n                break;\n            case 'a':\n   \
    \             c = 'c';\n                break;\n            case 'e':\n      \
    \          c = 'g';\n                break;\n            case 'i':\n         \
    \       c = 'k';\n                break;\n            case 'o':\n            \
    \    c = 'q';\n                break;\n            case 'u':\n               \
    \ c = 'y';\n                break;\n        }\n        result += c;\n    }\n \
    \   return result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = 'a' + ((result[i] - 'a' + 2) % 26);\n        } else if (result[i] == 'A' ||\
    \ result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U')\
    \ {\n            result[i] = 'A' + ((result[i] - 'A' + 2) % 26);\n        }\n\
    \    }\n    return result;", "    std::string encoded = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ - 'A' + 'a';\n        } else {\n            encoded += message[i];\n       \
    \ }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (vowels.find(encoded[i]) != std::string::npos) {\n      \
    \      encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.length()];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded_message = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string encoded = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 'a' + 'A';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] - 'A' + 'a';\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n\
    \            encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n    \
    \        encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n        \
    \    encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i]\
    \ = 'q';\n        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n\
    \        } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n    \
    \    } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        }\
    \ else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else\
    \ if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i]\
    \ == 'U') {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;",
  "\tstd::string vowels = \"aeiou\";\n\tstd::string encoded = \"\";\n\tfor (int i\
    \ = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n\t\t\tencoded += message[i] - 'a' + 'A';\n\t\t} else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded += message[i] - 'A' + 'a';\n\t\
    \t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < vowels.length();\
    \ i++) {\n\t\tint pos = encoded.find(vowels[i]);\n\t\twhile (pos != std::string::npos)\
    \ {\n\t\t\tencoded[pos] = vowels[(i + 2) % vowels.length()];\n\t\t\tpos = encoded.find(vowels[i],\
    \ pos + 1);\n\t\t}\n\t\tpos = encoded.find(vowels[i] - 'a' + 'A');\n\t\twhile\
    \ (pos != std::string::npos) {\n\t\t\tencoded[pos] = vowels[(i + 2) % vowels.length()]\
    \ - 'a' + 'A';\n\t\t\tpos = encoded.find(vowels[i] - 'a' + 'A', pos + 1);\n\t\t\
    }\n\t}\n\treturn encoded;", "    std::string result = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;", "\tstd::string vowels =\
    \ \"aeiou\";\n\tstd::string encoded_message = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (vowels.find(message[i]) != std::string::npos) {\n\t\t\tencoded_message\
    \ += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n\t\t} else {\n\t\
    \t\tencoded_message += message[i];\n\t\t}\n\t}\n\treturn encoded_message;", " \
    \   std::string result;\n    for (char c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c - 'a' + 'A';\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += c - 'A' + 'a';\n        } else {\n   \
    \         result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 'a' + 'A';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] - 'A' + 'a';\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < vowels.length(); i++) {\n        int pos = encoded.find(vowels[i]);\n\
    \        while (pos != std::string::npos) {\n            encoded[pos] = vowels[(i\
    \ + 2) % vowels.length()];\n            pos = encoded.find(vowels[i], pos + 1);\n\
    \        }\n    }\n    return encoded;", "    std::string encoded;\n    for (char\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            encoded +=\
    \ c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded\
    \ += c - 'A' + 'a';\n        } else {\n            encoded += c;\n        }\n\
    \    }\n    return encoded;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 32;\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i]\
    \ + 32;\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n      \
    \  if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n \
    \       } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       encoded_message += (char)(message[i] + 32);\n        } else {\n      \
    \      encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i\
    \ < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a') {\n\
    \            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 'a' + 'A';\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += message[i] - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\treturn result;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            int index = vowels.find(encoded_message[i]);\n\
    \            index = (index + 2) % 5;\n            encoded_message[i] = vowels[index];\n\
    \        }\n    }\n    return encoded_message;", "    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        encoded += (char)(message[i] - 'A' + 'a');\n        } else {\n      \
    \      encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;", "    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char)(c - 'a' + 'A');\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c -\
    \ 'A' + 'a');\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (c - 'a' + 2) % 26\
    \ + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            result += (c\
    \ - 'A' + 2) % 26 + 'A';\n        } else {\n            result += c;\n       \
    \ }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2) % 26;\n     \
    \   } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = 'A' + (result[i] - 'A'\
    \ + 2) % 26;\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
