language: cpp
name: HumanEval_111_histogram
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,token,'\
    \ ')){\n        it = result.find(token);\n        if(it == result.end()){\n  \
    \          result.insert(std::pair<std::string,long>(token,1));\n        }\n \
    \       else{\n            it->second++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi12i2zwi: /tmp/tmpi12i2zwi.cpp:26: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int\
    \ i=0;i<test.length();i++){\n        std::string temp(1,test[i]);\n        hist[temp]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwv4l03sa: /tmp/tmpwv4l03sa.cpp:17: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnfji4tmw: /tmp/tmpnfji4tmw.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   if(result.find(token) == result.end()) {\n      result[token] = 1;\n    }\
    \ else {\n      result[token]++;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpntdx8sbh: /tmp/tmpntdx8sbh.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(getline(ss,item,' ')) {\n    if(hist.find(item)\
    \ == hist.end()) {\n      hist[item] = 1;\n    } else {\n      hist[item] += 1;\n\
    \    }\n  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq7kqju6v: /tmp/tmpq7kqju6v.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >>\
    \ word) {\n        it = result.find(word);\n        if(it != result.end()) {\n\
    \            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(word,1));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpermmzwi3: /tmp/tmpermmzwi3.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> dict;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   if(dict.find(token) == dict.end()) {\n      dict[token] = 1;\n    } else {\n\
    \      dict[token] += 1;\n    }\n  }\n  return dict;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2tlkfkat: /tmp/tmp2tlkfkat.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')){\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptp5q1wc_: /tmp/tmptp5q1wc_.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   hist[token]++;\n  }\n  return hist;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyzhz_oa3: /tmp/tmpyzhz_oa3.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> dict;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        dict[token]++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptsrectx4: /tmp/tmptsrectx4.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int\
    \ i = 0; i < test.length(); i++) {\n        std::string letter = test.substr(i,1);\n\
    \        if(result.find(letter) == result.end()) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbrmtr18i: /tmp/tmpbrmtr18i.cpp:21: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnfji4tmw: /tmp/tmpnfji4tmw.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> mymap;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word)\n        mymap[word]++;\n\
    \    return mymap;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ikaekcs: /tmp/tmp7ikaekcs.cpp:18: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::string::iterator it2;\n    for(it2 = test.begin(); it2 != test.end();\
    \ it2++) {\n        std::string temp = *it2;\n        it = result.find(temp);\n\
    \        if(it != result.end()) {\n            it->second++;\n        } else {\n\
    \            result.insert(std::pair<std::string,long>(temp,1));\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cb99m1f.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp0cb99m1f.cpp:12:28: error:\
    \ conversion from \u2018char\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   12 |      \
    \   std::string temp = *it2;\n      |                            ^~~~\n"
  stdout: ''
  timestamp: 1660081717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    m[word]++;\n  }\n\
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2wsk60s9: /tmp/tmp2wsk60s9.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    long\
    \ max = 0;\n    std::string max_letter;\n    for(int i = 0; i < test.length();\
    \ i++) {\n        std::string letter = test.substr(i,1);\n        if(hist.find(letter)\
    \ == hist.end()) {\n            hist[letter] = 1;\n        } else {\n        \
    \    hist[letter]++;\n        }\n        if(hist[letter] > max) {\n          \
    \  max = hist[letter];\n            max_letter = letter;\n        }\n    }\n \
    \   std::map<std::string,long> result;\n    result[max_letter] = max;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8pvd9c7d: /tmp/tmp8pvd9c7d.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string token;\n  while(std::getline(ss,\
    \ token, ' ')) {\n    it = result.find(token);\n    if(it != result.end()) {\n\
    \      it->second += 1;\n    } else {\n      result.insert(std::pair<std::string,long>(token,1));\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv6bt5cg_: /tmp/tmpv6bt5cg_.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  for(int\
    \ i = 0; i < test.length(); i++) {\n    std::string letter = test.substr(i,1);\n\
    \    if(hist.find(letter) == hist.end()) {\n      hist[letter] = 1;\n    } else\
    \ {\n      hist[letter]++;\n    }\n  }\n  return hist;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6v9botz1: /tmp/tmp6v9botz1.cpp:21: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string token;\n  while(std::getline(ss,\
    \ token, ' ')) {\n    it = result.find(token);\n    if(it == result.end()) {\n\
    \      result.insert(std::pair<std::string,long>(token,1));\n    } else {\n  \
    \    it->second++;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp66tu567m: /tmp/tmp66tu567m.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4_uwi_ym: /tmp/tmp4_uwi_ym.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  result[item]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo54zqst9: /tmp/tmpo54zqst9.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> dict;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    dict[word]++;\n \
    \ }\n  return dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp134wupb5: /tmp/tmp134wupb5.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk63j4ycv: /tmp/tmpk63j4ycv.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) != result.end()) {\n      result[item]++;\n    } else\
    \ {\n      result[item] = 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzunc1x_v: /tmp/tmpzunc1x_v.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  for(int\
    \ i = 0; i < test.length(); i++) {\n    std::string letter = std::string(1, test[i]);\n\
    \    if(hist.find(letter) == hist.end()) {\n      hist[letter] = 1;\n    } else\
    \ {\n      hist[letter] += 1;\n    }\n  }\n  return hist;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptix63ai3: /tmp/tmptix63ai3.cpp:21: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item] += 1;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdafi_cii: /tmp/tmpdafi_cii.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnfji4tmw: /tmp/tmpnfji4tmw.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4h767t9x: /tmp/tmp4h767t9x.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >>\
    \ word) {\n        it = result.find(word);\n        if(it != result.end()) {\n\
    \            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(word,1));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpermmzwi3: /tmp/tmpermmzwi3.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int\
    \ i = 0; i < test.length(); i++) {\n        std::string letter = test.substr(i,1);\n\
    \        if(hist.find(letter) == hist.end()) {\n            hist[letter] = 1;\n\
    \        } else {\n            hist[letter] += 1;\n        }\n    }\n    return\
    \ hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3a2kxtm7: /tmp/tmp3a2kxtm7.cpp:21: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss >>\
    \ temp) {\n        it = result.find(temp);\n        if(it != result.end()) {\n\
    \            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(temp,1));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpaxi0r_6c: /tmp/tmpaxi0r_6c.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4_uwi_ym: /tmp/tmp4_uwi_ym.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdngfq2q: /tmp/tmpmdngfq2q.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) != result.end()) {\n            result[token]++;\n\
    \        } else {\n            result[token] = 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp499k2sht: /tmp/tmp499k2sht.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) != result.end()) {\n            result[token]++;\n\
    \        } else {\n            result[token] = 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp499k2sht: /tmp/tmp499k2sht.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while(std::getline(ss,item,' ')) {\n    hist[item]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot38b5wy: /tmp/tmpot38b5wy.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvuvcdopc: /tmp/tmpvuvcdopc.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   hist[token]++;\n  }\n  return hist;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyzhz_oa3: /tmp/tmpyzhz_oa3.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> dict;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    dict[word]++;\n \
    \ }\n  return dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp134wupb5: /tmp/tmp134wupb5.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgfum9hi0: /tmp/tmpgfum9hi0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp18fy0ink: /tmp/tmp18fy0ink.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto\
    \ c: test) {\n        std::string s(1,c);\n        hist[s]++;\n    }\n    return\
    \ hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5niuog5j: /tmp/tmp5niuog5j.cpp:17: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptkdeka9t: /tmp/tmptkdeka9t.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8nz_oexh: /tmp/tmp8nz_oexh.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpty71apco: /tmp/tmpty71apco.cpp:19: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660081718
