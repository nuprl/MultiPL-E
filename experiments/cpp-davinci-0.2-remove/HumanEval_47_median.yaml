name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the list l.\nfloat median(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
  \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
  \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
  \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
  }\n"
completions: ["    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 ==\
    \ 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    assert(n > 0);\n\
    \    if (n == 1) return l[0];\n    if (n % 2 == 0) {\n        return (l[n/2] +\
    \ l[n/2 - 1]) / 2.0;\n    } else {\n        return l[n/2];\n    }", "    int n\
    \ = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int size = l.size();\n    if (size == 0) {\n        return\
    \ -1;\n    }\n    if (size % 2 == 0) {\n        return (l[size / 2 - 1] + l[size\
    \ / 2]) / 2.0;\n    }\n    else {\n        return l[size / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 == 0) {\n \
    \       return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n     \
    \   return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int size = l.size();\n  \
    \  if (size == 0) {\n        return 0;\n    }\n    if (size % 2 == 0) {\n    \
    \    return (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    }\n    return l[size /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n   \
    \     return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ assert(n > 0);\n    if (n == 1) return l[0];\n    if (n % 2 == 0) return (l[n/2]\
    \ + l[n/2-1]) / 2.0;\n    return l[n/2];", "    int n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n\
    \    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n\
    \ = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n       \
    \ return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];",
  "    int n = l.size();\n    if (n%2 == 0) {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    } else {\n        return l[n/2];\n    }", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \ return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "  int n = l.size();\n  if (n == 0) return\
    \ 0;\n  if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  } else\
    \ {\n    return l[n / 2];\n  }", "    int n = l.size();\n    if (n == 0) {\n \
    \       return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\n\
    \        return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n  \
    \  if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int size = l.size();\n    if (size == 0) return 0;\n    if (size\
    \ % 2 == 0) {\n        return (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    } else\
    \ {\n        return l[size / 2];\n    }", "    int n = l.size();\n    if (n ==\
    \ 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0)\n        return 0;\n    if (n\
    \ % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n     \
    \   return l[n / 2];", "    int n = l.size();\n    if (n == 0)\n        return\
    \ 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n \
    \   else\n        return l[n / 2];", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n   \
    \     return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "\tint n = l.size();\n\tif (n % 2 == 0)\
    \ {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n\
    \ / 2];\n\t}", "    if(l.size() == 0)\n        return 0;\n    if(l.size() == 1)\n\
    \        return l[0];\n    std::sort(l.begin(), l.end());\n    if(l.size() % 2\
    \ == 0)\n        return (l[l.size()/2] + l[l.size()/2 - 1])/2.0;\n    else\n \
    \       return l[l.size()/2];", "    int n = l.size();\n    if (n == 0)\n    \
    \    return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    else\n        return l[n / 2];", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n     \
    \   return 0;\n    }\n    else if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    else {\n        return l[n / 2];\n    }", "   \
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n\
    \    if (n % 2 == 0) return (l[n/2] + l[n/2 - 1]) / 2.0;\n    return l[n/2];",
  "    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 ==\
    \ 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n       \
    \ return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];",
  "    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n   \
    \     return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", " \
    \   int n = l.size();\n    if (n%2 == 0) {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    } else {\n        return l[n/2];\n    }", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int n = l.size();\n    if (n == 0)\n        return 0;\n  \
    \  if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n\
    \        return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n \
    \       return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    if (l.size()\
    \ == 0) {\n        return 0;\n    }\n    if (l.size() == 1) {\n        return\
    \ l[0];\n    }\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2]\
    \ + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  int n\
    \ = l.size();\n  if (n == 0) return 0;\n  if (n % 2 == 0) return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n  return l[n / 2];", "    int n = l.size();\n    if (n % 2\
    \ == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n   \
    \     return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];"]
stop_tokens:
- "\n}"
