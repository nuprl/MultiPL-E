name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the list l.\nfloat median(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 == 0) {\n \
    \       return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n   \
    \     return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n  \
    \      return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n\
    \ = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "  \
    \  int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n     \
    \   return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n\
    \ % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", " \
    \   int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n    \
    \    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n\
    \ % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", " \
    \   int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "\tint n = l.size();\n\t\
    if (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\
    \t\treturn l[n / 2];\n\t}", "    int n = l.size();\n    if (n == 0) {\n      \
    \  return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ l[0];\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2\
    \ == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n   \
    \     return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n  \
    \      return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "  \
    \  int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n     \
    \   return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1]\
    \ + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\n\
    \        return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n  \
    \  if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int size = l.size();\n\
    \    if (size == 0) {\n        return 0;\n    }\n    else if (size % 2 == 0) {\n\
    \        return (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    }\n    else {\n  \
    \      return l[size / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n\
    \        return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n      \
    \  return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\n        return\
    \ 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n \
    \   else\n        return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n   \
    \     return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n      \
    \  return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \ return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "  int n = l.size();\n\
    \  if (n == 0) {\n    return 0;\n  }\n  if (n % 2 == 0) {\n    return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n  }\n  return l[n / 2];", "    int n = l.size();\n \
    \   if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n       \
    \ return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return -1;\n    if (n %\
    \ 2 == 0) return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    return l[n / 2];", "  \
    \  assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n /\
    \ 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n      \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n\
    \        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "  int n = l.size();\n\
    \  if (n == 0) return 0;\n  if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0;\n  } else {\n    return l[n / 2];\n  }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \ return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n     \
    \   return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n\
    \ / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n\
    \    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n   \
    \     return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "\tint n = l.size();\n\
    \tif (n == 0) return 0;\n\tif (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n\treturn l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n \
    \       // If n is even, return average of middle two elements.\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        // Else return middle\
    \ element.\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ == 0) return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\n\
    \        return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n = l.size();\n  \
    \  if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n       \
    \ return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return\
    \ l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2\
    \ == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n     \
    \   return l[n / 2];", "    int n = l.size();\n    if (n % 2 == 0) {\n       \
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n /\
    \ 2];\n    }", "    assert(l.size() > 0);\n    sort(l.begin(), l.end());\n   \
    \ if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() /\
    \ 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0;\n    return l[n / 2];", "    int n = l.size();\n \
    \   if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n =\
    \ l.size();\n    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \ return l[n / 2];", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    int n = l.size();\n\
    \    if (n == 0)\n        return 0;\n    if (n % 2 == 0)\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int n\
    \ = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\n       \
    \ return 0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\
    \    else\n        return l[n / 2];", "    int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n     \
    \   return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[n / 2];", "    int n = l.size();\n    if\
    \ (n == 0) return 0;\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n =\
    \ l.size();\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    else\n        return l[n / 2];", "\tint n = l.size();\n\tif (n == 0) return\
    \ -1;\n\tif (n % 2 == 0) return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\treturn l[n\
    \ / 2];", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ return 0;\n    if (n % 2 == 0) return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \ return l[n / 2];", "    int n = l.size();\n    if (n == 0) return 0;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }"]
stop_tokens:
- "\n}"
