name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    std::set<char> set;\n    for (char c : string) {\n        set.insert(std::tolower(c));\n\
    \    }\n    return set.size();", "    std::set<char> distinct_characters;\n  \
    \  for (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(string[i]);\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        if (distinct_characters.find(character) == distinct_characters.end())\
    \ {\n            distinct_characters.insert(character);\n            count++;\n\
    \        }\n    }\n    return count;", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();", "\tstd::set<char> distinct_characters;\n\
    \tfor (char c : string) {\n\t\tdistinct_characters.insert(std::tolower(c));\n\t\
    }\n\treturn distinct_characters.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "  std::set<char> distinct_characters;\n  for (char character\
    \ : string) {\n    distinct_characters.insert(std::tolower(character));\n  }\n\
    \  return distinct_characters.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    // Write your code here\n\
    \    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n      \
    \  s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ distinct_characters;\n    for (auto character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "\tlong count = 0;\n\tstd::set<char> s;\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (s.find(string[i]) == s.end()) {\n\t\t\t\
    s.insert(string[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::vector<int>\
    \ v(26, 0);\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            if (v[string[i] - 'a'] == 0) {\n\
    \                count++;\n                v[string[i] - 'a'] = 1;\n         \
    \   }\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n          \
    \  if (v[string[i] - 'A'] == 0) {\n                count++;\n                v[string[i]\
    \ - 'A'] = 1;\n            }\n        }\n    }\n    return count;", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    // Write your code here\n    long count = 0;\n    std::unordered_set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count=0;\n\
    \    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n      \
    \  s.insert(tolower(string[i]));\n    }\n    count=s.size();\n    return count;",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count=0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::sort(string.begin(), string.end());\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]!=string[i+1])\n        {\n            count++;\n\
    \        }\n    }\n    return count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(char c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i] >= 'A'\
    \ && string[i] <= 'Z'){\n            string[i] = string[i] + 32;\n        }\n\
    \    }\n    std::sort(string.begin(), string.end());\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] != string[i+1]){\n            count++;\n       \
    \ }\n    }\n    return count;", "    long count = 0;\n    std::set<char> s;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();",
  "    long count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::sort(string.begin(), string.end());\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        if (string[i] != string[i + 1]) {\n\
    \            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    // Write your code here\n\
    \    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(s.find(tolower(string[i])) == s.end()){\n            s.insert(tolower(string[i]));\n\
    \            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (auto character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    // Write your code here\n    std::set<char> s;\n   \
    \ for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (auto character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> set;\n  \
    \  for (auto c : string) {\n        set.insert(tolower(c));\n    }\n    return\
    \ set.size();", "    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n \
    \       if(s.find(tolower(string[i])) == s.end()){\n            s.insert(tolower(string[i]));\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ characters;\n    for (int i = 0; i < string.length(); i++) {\n        characters.insert(tolower(string[i]));\n\
    \    }\n    return characters.size();", "    // Write your code here\n    long\
    \ count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::sort(string.begin(), string.end());\n    for(int i = 0;\
    \ i < string.length(); i++){\n        if(string[i] != string[i+1]){\n        \
    \    count++;\n        }\n    }\n    return count;", "    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> characters;\n    for (char\
    \ c : string) {\n        characters.insert(tolower(c));\n    }\n    return characters.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n \
    \       s.insert(tolower(string[i]));\n    }\n    count = s.size();\n    return\
    \ count;", "    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();", "    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != string[i\
    \ + 1]) {\n            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(char c : string)\
    \ {\n        s.insert(tolower(c));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != string[i\
    \ + 1]) {\n            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    std::set<char> characters;\n    for (char c : string)\
    \ {\n        characters.insert(tolower(c));\n    }\n    return characters.size();",
  "    // Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", " \
    \   // Write your code here\n    long count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(long i=0;i<string.length();i++)\n    {\n        if(string[i]!=string[i+1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n \
    \   }\n    return s.size();", "    std::set<char> char_set;\n    for (char c :\
    \ string) {\n        char_set.insert(tolower(c));\n    }\n    return char_set.size();",
  "    std::set<char> distinct_characters;\n    for (char character : string) {\n\
    \        distinct_characters.insert(tolower(character));\n    }\n    return distinct_characters.size();",
  "    // Write your code here\n    long count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]!=string[i+1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> set;\n  \
    \  for (auto c : string) {\n        set.insert(tolower(c));\n    }\n    return\
    \ set.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::string lower_string = string;\n    std::transform(lower_string.begin(),\
    \ lower_string.end(), lower_string.begin(), ::tolower);\n    std::set<char> distinct_chars;\n\
    \    for (int i = 0; i < lower_string.length(); i++) {\n        distinct_chars.insert(lower_string[i]);\n\
    \    }\n    return distinct_chars.size();", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> characters;\n    for (char\
    \ c : string) {\n        characters.insert(tolower(c));\n    }\n    return characters.size();",
  "    std::set<char> s;\n    for(char c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(character);\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(character);\n    }\n    return\
    \ distinct_characters.size();", "    std::set<char> char_set;\n    for (char c\
    \ : string) {\n        char_set.insert(tolower(c));\n    }\n    return char_set.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (auto character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> char_set;\n    for (char c : string)\
    \ {\n        char_set.insert(std::tolower(c));\n    }\n    return char_set.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n \
    \       s.insert(tolower(string[i]));\n    }\n    count = s.size();\n    return\
    \ count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n  \
    \  {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    std::set<char> distinct_characters;\n    for (char\
    \ character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(string[i]);\n    }\n  \
    \  return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::string::iterator it;\n    std::set<char> s;\n    for(it\
    \ = string.begin(); it != string.end(); it++) {\n        s.insert(tolower(*it));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != string[i\
    \ + 1]) {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> set;\n    for (int i = 0; i < string.length(); i++) {\n    \
    \    set.insert(tolower(string[i]));\n    }\n    return set.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    long count = 0;\n    std::set<char> set;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    std::set<char> distinct_characters;\n  \
    \  for (char c : string) {\n        distinct_characters.insert(tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> set;\n  \
    \  for (int i = 0; i < string.length(); i++) {\n        set.insert(string[i]);\n\
    \    }\n    return set.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    //\
    \ Write your code here\n    long count = 0;\n    std::string::iterator it;\n \
    \   std::set<char> s;\n    for(it = string.begin(); it != string.end(); it++)\n\
    \    {\n        s.insert(tolower(*it));\n    }\n    count = s.size();\n    return\
    \ count;", "    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();",
  "    std::set<char> chars;\n    for (char c : string) {\n        chars.insert(std::tolower(c));\n\
    \    }\n    return chars.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    // Write\
    \ your code here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    // Write\
    \ your code here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return\
    \ s.size();", "    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    long count = 0;\n    std::set<char>\
    \ distinct_characters;\n    for (char c : string) {\n        distinct_characters.insert(tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // Write your code here\n    long count=0;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]!=' ')\n \
    \       {\n            count++;\n            for(int j=i+1;j<string.length();j++)\n\
    \            {\n                if(string[i]==string[j])\n                {\n\
    \                    string[j]=' ';\n                }\n            }\n      \
    \  }\n    }\n    return count;", "    std::set<char> set;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    // Write your code here\n    long count=0;\n  \
    \  std::string s;\n    for(int i=0;i<string.length();i++)\n    {\n        if(s.find(string[i])==std::string::npos)\n\
    \        {\n            s.push_back(string[i]);\n            count++;\n      \
    \  }\n    }\n    return count;", "    // Write your code here\n    std::set<char>\
    \ set;\n    for(int i=0;i<string.length();i++){\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> char_set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n  \
    \  }\n    return char_set.size();", "    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(char\
    \ c : string)\n        s.insert(tolower(c));\n    return s.size();", "    // Write\
    \ your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", " \
    \   std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();", "    std::set<char> distinct_characters;\n  \
    \  for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();",
  "    std::set<char> distinct_characters;\n    for (char character : string) {\n\
    \        distinct_characters.insert(std::tolower(character));\n    }\n    return\
    \ distinct_characters.size();", "  std::unordered_set<char> distinct_characters;\n\
    \  for (char character : string) {\n    distinct_characters.insert(tolower(character));\n\
    \  }\n  return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::map<char, int> m;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(m.find(string[i]) == m.end()) {\n            m[string[i]]\
    \ = 1;\n            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    std::set<char> distinct_characters;\n  \
    \  for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> distinct_characters;\n\
    \    for (char c : string) {\n        distinct_characters.insert(tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (auto c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();"]
stop_tokens:
- "\n}"
