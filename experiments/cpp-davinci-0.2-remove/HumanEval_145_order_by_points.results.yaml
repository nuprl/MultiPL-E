language: cpp
name: HumanEval_145_order_by_points
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long temp = nums[i];\n        while (temp\
    \ != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp4yzms874: /tmp/tmp4yzms874.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_of_digits=0;\n        while(temp!=0){\n\
    \            sum_of_digits+=temp%10;\n            temp/=10;\n        }\n     \
    \   sum.push_back(sum_of_digits);\n    }\n    std::vector<long> sorted_sum=sum;\n\
    \    std::sort(sorted_sum.begin(),sorted_sum.end());\n    for(int i=0;i<sorted_sum.size();i++){\n\
    \        for(int j=0;j<sum.size();j++){\n            if(sorted_sum[i]==sum[j]){\n\
    \                result.push_back(nums[j]);\n                sum[j]=-1;\n    \
    \            break;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_p6fpvt5: /tmp/tmp_p6fpvt5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ = 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n \
    \       index.push_back(i);\n    }\n    for (long i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (long j = i + 1; j < sum_of_digits.size(); j++) {\n    \
    \        if (sum_of_digits[i] > sum_of_digits[j]) {\n                long temp\
    \ = sum_of_digits[i];\n                sum_of_digits[i] = sum_of_digits[j];\n\
    \                sum_of_digits[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n        }\n    }\n    for (long i = 0; i < index.size(); i++) {\n\
    \        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpwjnjeewv: /tmp/tmpwjnjeewv.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    std::vector<int> indices;\n    int\
    \ sum = 0;\n    int index = 0;\n    for (auto i : nums) {\n        while (i >\
    \ 0) {\n            sum += i % 10;\n            i /= 10;\n        }\n        sums.push_back(sum);\n\
    \        indices.push_back(index);\n        index++;\n        sum = 0;\n    }\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i + 1; j <\
    \ nums.size(); j++) {\n            if (sums[i] > sums[j]) {\n                std::swap(sums[i],\
    \ sums[j]);\n                std::swap(indices[i], indices[j]);\n            }\n\
    \        }\n    }\n    for (auto i : indices) {\n        result.push_back(nums[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvv1kq82_: /tmp/tmpvv1kq82_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    std::vector<long> sorted = sums;\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    for (int i = 0; i < sorted.size(); i++) {\n        for (int\
    \ j = 0; j < sums.size(); j++) {\n            if (sorted[i] == sums[j]) {\n  \
    \              result.push_back(nums[j]);\n                sums[j] = -1;\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp283jwi0b: /tmp/tmp283jwi0b.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       int temp=nums[i];\n        int sum_temp=0;\n        while(temp!=0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int min_index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                min_index=j;\n            }\n  \
    \      }\n        int temp=sum[i];\n        sum[i]=sum[min_index];\n        sum[min_index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[min_index];\n        nums[min_index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvaei90mq: /tmp/tmpvaei90mq.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    int sum_of_digits = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum_of_digits += num % 10;\n            num /= 10;\n   \
    \     }\n        sum.push_back(sum_of_digits);\n        sum_of_digits = 0;\n \
    \   }\n    for (int i = 0; i < sum.size(); i++) {\n        int min = sum[i];\n\
    \        int index = i;\n        for (int j = i + 1; j < sum.size(); j++) {\n\
    \            if (sum[j] < min) {\n                min = sum[j];\n            \
    \    index = j;\n            }\n        }\n        int temp = sum[i];\n      \
    \  sum[i] = sum[index];\n        sum[index] = temp;\n        temp = nums[i];\n\
    \        nums[i] = nums[index];\n        nums[index] = temp;\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpw18ymo8u: /tmp/tmpw18ymo8u.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum_of_digits;\n  std::vector<long> index;\n  for\
    \ (int i = 0; i < nums.size(); i++) {\n    long sum = 0;\n    long temp = nums[i];\n\
    \    while (temp > 0) {\n      sum += temp % 10;\n      temp /= 10;\n    }\n \
    \   sum_of_digits.push_back(sum);\n    index.push_back(i);\n  }\n  for (int i\
    \ = 0; i < nums.size(); i++) {\n    for (int j = i + 1; j < nums.size(); j++)\
    \ {\n      if (sum_of_digits[i] > sum_of_digits[j]) {\n        long temp = sum_of_digits[i];\n\
    \        sum_of_digits[i] = sum_of_digits[j];\n        sum_of_digits[j] = temp;\n\
    \        temp = index[i];\n        index[i] = index[j];\n        index[j] = temp;\n\
    \      }\n    }\n  }\n  for (int i = 0; i < nums.size(); i++) {\n    result.push_back(nums[index[i]]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpwlp1j3k2: /tmp/tmpwlp1j3k2.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        long temp = nums[i];\n        long sum_temp\
    \ = 0;\n        while(temp!=0){\n            sum_temp += temp%10;\n          \
    \  temp /= 10;\n        }\n        sum.push_back(sum_temp);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                long temp = sum[i];\n       \
    \         sum[i] = sum[j];\n                sum[j] = temp;\n                temp\
    \ = index[i];\n                index[i] = index[j];\n                index[j]\
    \ = temp;\n            }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n\
    \        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpssrmn39c: /tmp/tmpssrmn39c.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long temp = nums[i];\n        while (temp\
    \ > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp8jloog1h: /tmp/tmp8jloog1h.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n\
    \    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i\
    \ < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++)\
    \ {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(nums[j]);\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvq02vl31: /tmp/tmpvq02vl31.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpc5_ntatu: /tmp/tmpc5_ntatu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // your code\
    \ here\n    std::vector<long> result;\n    std::vector<long> sum_of_digits;\n\
    \    std::vector<long> index_of_digits;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        sum = 0;\n        while(nums[i] > 0){\n    \
    \        sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n       \
    \ sum_of_digits.push_back(sum);\n        index_of_digits.push_back(i);\n    }\n\
    \    for(int i = 0; i < sum_of_digits.size(); i++){\n        for(int j = i + 1;\
    \ j < sum_of_digits.size(); j++){\n            if(sum_of_digits[i] > sum_of_digits[j]){\n\
    \                std::swap(sum_of_digits[i], sum_of_digits[j]);\n            \
    \    std::swap(index_of_digits[i], index_of_digits[j]);\n            }\n     \
    \   }\n    }\n    for(int i = 0; i < index_of_digits.size(); i++){\n        result.push_back(nums[index_of_digits[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpcbwerw8b: /tmp/tmpcbwerw8b.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long sum_of_digits=0;\n        long temp=nums[i];\n        while(temp!=0){\n\
    \            sum_of_digits+=temp%10;\n            temp/=10;\n        }\n     \
    \   sum.push_back(sum_of_digits);\n    }\n    std::vector<long> sorted_sum=sum;\n\
    \    std::sort(sorted_sum.begin(),sorted_sum.end());\n    for(int i=0;i<sorted_sum.size();i++){\n\
    \        for(int j=0;j<sum.size();j++){\n            if(sorted_sum[i]==sum[j]){\n\
    \                result.push_back(nums[j]);\n                sum[j]=0;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmphlmztnba: /tmp/tmphlmztnba.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum_of_digits;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    long sum = 0;\n    long num = nums[i];\n    while (num > 0) {\n\
    \      sum += num % 10;\n      num /= 10;\n    }\n    sum_of_digits.push_back(sum);\n\
    \  }\n  std::vector<long> sorted_sum_of_digits = sum_of_digits;\n  std::sort(sorted_sum_of_digits.begin(),\
    \ sorted_sum_of_digits.end());\n  for (int i = 0; i < sorted_sum_of_digits.size();\
    \ i++) {\n    for (int j = 0; j < sum_of_digits.size(); j++) {\n      if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n        result.push_back(nums[j]);\n        sum_of_digits[j]\
    \ = -1;\n        break;\n      }\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvj8yt2rs: /tmp/tmpvj8yt2rs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmplqy0vde5: /tmp/tmplqy0vde5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    int sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum = 0;\n        while (nums[i] !=\
    \ 0) {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n       \
    \ }\n        sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int min = sum_of_digits[i];\n        int min_index = i;\n  \
    \      for (int j = i; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                min_index\
    \ = j;\n            }\n        }\n        std::swap(sum_of_digits[i], sum_of_digits[min_index]);\n\
    \        std::swap(nums[i], nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpkw55bkzh: /tmp/tmpkw55bkzh.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    std::vector<int> index;\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvveb6yfy: /tmp/tmpvveb6yfy.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<int> sums;\n  int sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum = 0;\n    while (nums[i] > 0) {\n      sum += nums[i] % 10;\n\
    \      nums[i] /= 10;\n    }\n    sums.push_back(sum);\n  }\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    int min = sums[i];\n    int min_index = i;\n  \
    \  for (int j = i + 1; j < nums.size(); j++) {\n      if (sums[j] < min) {\n \
    \       min = sums[j];\n        min_index = j;\n      }\n    }\n    sums[min_index]\
    \ = sums[i];\n    sums[i] = min;\n    long temp = nums[min_index];\n    nums[min_index]\
    \ = nums[i];\n    nums[i] = temp;\n  }\n  return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmply36nt2l: /tmp/tmply36nt2l.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> temp;\n    std::vector<long> temp_sum;\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        while(nums[i] !=\
    \ 0){\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n\
    \        temp_sum.push_back(sum);\n        sum = 0;\n    }\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        for(int j = 0; j < nums.size(); j++){\n    \
    \        if(temp_sum[i] < temp_sum[j]){\n                std::swap(temp_sum[i],\
    \ temp_sum[j]);\n                std::swap(nums[i], nums[j]);\n            }\n\
    \        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpd1hh0kmd: /tmp/tmpd1hh0kmd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7fezdfjg: /tmp/tmp7fezdfjg.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long s=0;\n        while(temp!=0){\n     \
    \       s+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(s);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpx23m1qcq: /tmp/tmpx23m1qcq.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int sum = 0;\n        long temp = nums[i];\n        while (temp >\
    \ 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n  \
    \      sums.push_back(sum);\n    }\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int min = sums[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.size(); j++) {\n            if (sums[j] < min) {\n         \
    \       min = sums[j];\n                min_index = j;\n            }\n      \
    \  }\n        std::swap(sums[i], sums[min_index]);\n        std::swap(nums[i],\
    \ nums[min_index]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp0htiaecp: /tmp/tmp0htiaecp.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int sum = 0;\n        int num = nums[i];\n        while (num > 0)\
    \ {\n            sum += num % 10;\n            num /= 10;\n        }\n       \
    \ sums.push_back(sum);\n    }\n    std::vector<int> sorted_sums = sums;\n    std::sort(sorted_sums.begin(),\
    \ sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n  \
    \      for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i]\
    \ == sums[j]) {\n                result.push_back(nums[j]);\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpehwwc9hp: /tmp/tmpehwwc9hp.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpc5_ntatu: /tmp/tmpc5_ntatu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        int temp = nums[i];\n   \
    \     while (temp != 0) {\n            sum += temp % 10;\n            temp /=\
    \ 10;\n        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n        for (int i = 0; i < it->second.size();\
    \ i++) {\n            result.push_back(it->second[i]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpi837ttn8: /tmp/tmpi837ttn8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp=nums[i];\n        int sum_temp=0;\n        while(temp>0){\n  \
    \          sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    std::vector<int> sorted_sum=sum;\n    std::sort(sorted_sum.begin(),sorted_sum.end());\n\
    \    for(int i=0;i<sorted_sum.size();i++){\n        for(int j=0;j<sum.size();j++){\n\
    \            if(sorted_sum[i]==sum[j]){\n                result.push_back(nums[j]);\n\
    \                sum[j]=-1;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpeqcfcwyj: /tmp/tmpeqcfcwyj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmprof9ijjo: /tmp/tmprof9ijjo.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long sum_of_digits=0;\n        long temp=nums[i];\n        while(temp>0){\n\
    \            sum_of_digits+=temp%10;\n            temp/=10;\n        }\n     \
    \   sum.push_back(sum_of_digits);\n    }\n    for(int i=0;i<nums.size();i++){\n\
    \        int min=sum[i];\n        int index=i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min){\n                min=sum[j];\n                index=j;\n\
    \            }\n        }\n        long temp=sum[i];\n        sum[i]=sum[index];\n\
    \        sum[index]=temp;\n        temp=nums[i];\n        nums[i]=nums[index];\n\
    \        nums[index]=temp;\n    }\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpb0ozf4cw: /tmp/tmpb0ozf4cw.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    long temp = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        while(nums[i] > 0){\n            temp += nums[i]\
    \ % 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(temp);\n\
    \        temp = 0;\n    }\n    for(int i = 0; i < sum.size(); i++){\n        for(int\
    \ j = 0; j < sum.size() - 1; j++){\n            if(sum[j] > sum[j + 1]){\n   \
    \             temp = sum[j];\n                sum[j] = sum[j + 1];\n         \
    \       sum[j + 1] = temp;\n                temp = nums[j];\n                nums[j]\
    \ = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n       \
    \ }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5w5n9til: /tmp/tmp5w5n9til.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       int temp=nums[i];\n        int sum_temp=0;\n        while(temp>0){\n \
    \           sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=i;\n        for(int\
    \ j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min]){\n              \
    \  min=j;\n            }\n        }\n        if(min!=i){\n            long temp=sum[i];\n\
    \            sum[i]=sum[min];\n            sum[min]=temp;\n            temp=nums[i];\n\
    \            nums[i]=nums[min];\n            nums[min]=temp;\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvugrfwdv: /tmp/tmpvugrfwdv.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    long\
    \ sum_of_digits = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        long\
    \ num = nums[i];\n        while (num != 0) {\n            sum_of_digits += num\
    \ % 10;\n            num /= 10;\n        }\n        sum.push_back(sum_of_digits);\n\
    \        sum_of_digits = 0;\n        index.push_back(i);\n    }\n    for (long\
    \ i = 0; i < sum.size(); i++) {\n        for (long j = i + 1; j < sum.size();\
    \ j++) {\n            if (sum[i] > sum[j]) {\n                std::swap(sum[i],\
    \ sum[j]);\n                std::swap(index[i], index[j]);\n            }\n  \
    \      }\n    }\n    for (long i = 0; i < index.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp0rxlvmi8: /tmp/tmp0rxlvmi8.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        long min = sums[i];\n        int index = i;\n        for (int j = i +\
    \ 1; j < nums.size(); j++) {\n            if (sums[j] < min) {\n             \
    \   min = sums[j];\n                index = j;\n            }\n        }\n   \
    \     std::swap(sums[i], sums[index]);\n        std::swap(nums[i], nums[index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpne3omhk6: /tmp/tmpne3omhk6.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long min = sum_of_digits[i];\n        int min_index = i;\n \
    \       for (int j = i + 1; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                min_index\
    \ = j;\n            }\n        }\n        std::swap(sum_of_digits[i], sum_of_digits[min_index]);\n\
    \        std::swap(nums[i], nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_8v91l3f: /tmp/tmp_8v91l3f.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       int temp=nums[i];\n        int sum_temp=0;\n        while(temp>0){\n \
    \           sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        std::swap(sum[i],sum[index]);\n        std::swap(nums[i],nums[index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpskb_eko6: /tmp/tmpskb_eko6.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp!=0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        long min=sum[i];\n      \
    \  int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpny434pfq: /tmp/tmpny434pfq.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> temp;\n    std::vector<long> temp_sum;\n    std::vector<long>\
    \ temp_index;\n    long sum = 0;\n    long index = 0;\n    for(auto i : nums){\n\
    \        while(i > 0){\n            sum += i % 10;\n            i /= 10;\n   \
    \     }\n        temp_sum.push_back(sum);\n        sum = 0;\n    }\n    for(int\
    \ i = 0; i < nums.size(); i++){\n        temp_index.push_back(i);\n    }\n   \
    \ for(int i = 0; i < nums.size(); i++){\n        for(int j = 0; j < nums.size()\
    \ - 1; j++){\n            if(temp_sum[j] > temp_sum[j + 1]){\n               \
    \ std::swap(temp_sum[j], temp_sum[j + 1]);\n                std::swap(temp_index[j],\
    \ temp_index[j + 1]);\n            }\n        }\n    }\n    for(int i = 0; i <\
    \ nums.size(); i++){\n        result.push_back(nums[temp_index[i]]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmphb4dyvck: /tmp/tmphb4dyvck.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<std::pair<long,\
    \ long>> v;\n    for (int i = 0; i < nums.size(); i++) {\n        v.push_back(std::make_pair(nums[i],\
    \ i));\n    }\n    std::sort(v.begin(), v.end(), [](const std::pair<long, long>\
    \ &a, const std::pair<long, long> &b) {\n        long sum_a = 0, sum_b = 0;\n\
    \        long a_copy = a.first, b_copy = b.first;\n        while (a_copy) {\n\
    \            sum_a += a_copy % 10;\n            a_copy /= 10;\n        }\n   \
    \     while (b_copy) {\n            sum_b += b_copy % 10;\n            b_copy\
    \ /= 10;\n        }\n        if (sum_a == sum_b) {\n            return a.second\
    \ < b.second;\n        }\n        return sum_a < sum_b;\n    });\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < v.size(); i++) {\n        res.push_back(v[i].first);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpod99485j: /tmp/tmpod99485j.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long s=0;\n        long n=nums[i];\n        while(n>0){\n            s+=n%10;\n\
    \            n/=10;\n        }\n        sum.push_back(s);\n    }\n    for(int\
    \ i=0;i<nums.size();i++){\n        long min=sum[i];\n        int index=i;\n  \
    \      for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n      \
    \          min=sum[j];\n                index=j;\n            }\n        }\n \
    \       long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpikt1h0_0: /tmp/tmpikt1h0_0.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp!=0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        long min=sum[i];\n      \
    \  int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpny434pfq: /tmp/tmpny434pfq.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n\tstd::vector<long>\
    \ result;\n\tstd::vector<long> sum;\n\tstd::vector<long> index;\n\tlong temp =\
    \ 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\ttemp = 0;\n\t\twhile (nums[i]\
    \ > 0) {\n\t\t\ttemp += nums[i] % 10;\n\t\t\tnums[i] /= 10;\n\t\t}\n\t\tsum.push_back(temp);\n\
    \t\tindex.push_back(i);\n\t}\n\tfor (int i = 0; i < sum.size(); i++) {\n\t\tfor\
    \ (int j = i + 1; j < sum.size(); j++) {\n\t\t\tif (sum[i] > sum[j]) {\n\t\t\t\
    \tstd::swap(sum[i], sum[j]);\n\t\t\t\tstd::swap(index[i], index[j]);\n\t\t\t}\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < index.size(); i++) {\n\t\tresult.push_back(nums[index[i]]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7xexi5s8: /tmp/tmp7xexi5s8.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       int temp=nums[i];\n        int sum_=0;\n        while(temp>0){\n     \
    \       sum_+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=i;\n        for(int\
    \ j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min]){\n              \
    \  min=j;\n            }\n        }\n        if(min!=i){\n            int temp=sum[i];\n\
    \            sum[i]=sum[min];\n            sum[min]=temp;\n            temp=nums[i];\n\
    \            nums[i]=nums[min];\n            nums[min]=temp;\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpzx9ckkkm: /tmp/tmpzx9ckkkm.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        int min_index = 0;\n        for (int j = 0; j < sums.size(); j++) {\n\
    \            if (sums[j] < sums[min_index]) {\n                min_index = j;\n\
    \            }\n        }\n        result.push_back(nums[min_index]);\n      \
    \  sums.erase(sums.begin() + min_index);\n        nums.erase(nums.begin() + min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpmx6k1gci: /tmp/tmpmx6k1gci.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    long sum_of_digits = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum_of_digits = 0;\n        while (nums[i]\
    \ > 0) {\n            sum_of_digits += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        sum.push_back(sum_of_digits);\n    }\n    for (int i = 0;\
    \ i < sum.size(); i++) {\n        for (int j = 0; j < sum.size() - 1; j++) {\n\
    \            if (sum[j] > sum[j + 1]) {\n                long temp = sum[j];\n\
    \                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n  \
    \              temp = nums[j];\n                nums[j] = nums[j + 1];\n     \
    \           nums[j + 1] = temp;\n            }\n        }\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpjbmmev58: /tmp/tmpjbmmev58.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    std::vector<int> index;\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvveb6yfy: /tmp/tmpvveb6yfy.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          res.push_back(it->second[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpsjfnisg3: /tmp/tmpsjfnisg3.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp = 0;\n        while(nums[i]>0){\n            temp += nums[i]%10;\n\
    \            nums[i] /= 10;\n        }\n        sum.push_back(temp);\n    }\n\
    \    for(int i=0;i<sum.size();i++){\n        int min = i;\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[j]<sum[min]){\n                min = j;\n            }\n \
    \       }\n        if(min!=i){\n            std::swap(sum[i],sum[min]);\n    \
    \        std::swap(nums[i],nums[min]);\n        }\n    }\n    return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpxn90ux8c: /tmp/tmpxn90ux8c.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    for(int i=0;i<nums.size();i++){\n        long sum=0;\n        long num=nums[i];\n\
    \        while(num>0){\n            sum+=num%10;\n            num/=10;\n     \
    \   }\n        sum_of_digits.push_back(sum);\n        index.push_back(i);\n  \
    \  }\n    for(int i=0;i<nums.size();i++){\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum_of_digits[i]>sum_of_digits[j]){\n                long temp=sum_of_digits[i];\n\
    \                sum_of_digits[i]=sum_of_digits[j];\n                sum_of_digits[j]=temp;\n\
    \                temp=index[i];\n                index[i]=index[j];\n        \
    \        index[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<nums.size();i++){\n\
    \        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvoti_gzs: /tmp/tmpvoti_gzs.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp>0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        long min=sum[i];\n      \
    \  int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5pg98mcc: /tmp/tmp5pg98mcc.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp = nums[i];\n        long sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    long min = sum[i];\n        int index = i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min){\n                min = sum[j];\n                index\
    \ = j;\n            }\n        }\n        std::swap(sum[i],sum[index]);\n    \
    \    std::swap(nums[i],nums[index]);\n    }\n    return nums;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmps4r5gpos: /tmp/tmps4r5gpos.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        long temp=nums[i];\n        long sum_temp=0;\n\
    \        while(temp>0){\n            sum_temp+=temp%10;\n            temp/=10;\n\
    \        }\n        sum.push_back(sum_temp);\n        index.push_back(i);\n  \
    \  }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                long temp=sum[i];\n         \
    \       sum[i]=sum[j];\n                sum[j]=temp;\n                temp=index[i];\n\
    \                index[i]=index[j];\n                index[j]=temp;\n        \
    \    }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpccr9j016: /tmp/tmpccr9j016.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long s=0;\n        while(temp!=0){\n     \
    \       s+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(s);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=i;\n        for(int\
    \ j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min]){\n              \
    \  min=j;\n            }\n        }\n        std::swap(sum[i],sum[min]);\n   \
    \     std::swap(nums[i],nums[min]);\n    }\n    return nums;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5ro0cqzr: /tmp/tmp5ro0cqzr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp0ra4fjbd: /tmp/tmp0ra4fjbd.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpyf5vhd19: /tmp/tmpyf5vhd19.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum;\n  for (int i = 0; i < nums.size(); i++) {\n\
    \    long temp = 0;\n    while (nums[i] > 0) {\n      temp += nums[i] % 10;\n\
    \      nums[i] /= 10;\n    }\n    sum.push_back(temp);\n  }\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    int min = i;\n    for (int j = i + 1; j < nums.size();\
    \ j++) {\n      if (sum[j] < sum[min]) {\n        min = j;\n      }\n    }\n \
    \   if (min != i) {\n      std::swap(sum[i], sum[min]);\n      std::swap(nums[i],\
    \ nums[min]);\n    }\n  }\n  return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp1pltwplt: /tmp/tmp1pltwplt.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (long num : nums) {\n        int\
    \ sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n        \
    \    num /= 10;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int>\
    \ indices = sort_indices(sums);\n    for (int i : indices) {\n        result.push_back(nums[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4kgc764.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo4kgc764.cpp:19:32: error: \u2018sort_indices\u2019 was\
    \ not declared in this scope\n   19 |     std::vector<int> indices = sort_indices(sums);\n\
    \      |                                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660085346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int min = sum_of_digits[i];\n        int index = i;\n      \
    \  for (int j = i; j < nums.size(); j++) {\n            if (sum_of_digits[j] <\
    \ min) {\n                min = sum_of_digits[j];\n                index = j;\n\
    \            }\n        }\n        long temp = sum_of_digits[i];\n        sum_of_digits[i]\
    \ = sum_of_digits[index];\n        sum_of_digits[index] = temp;\n        temp\
    \ = nums[i];\n        nums[i] = nums[index];\n        nums[index] = temp;\n  \
    \  }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpkazlbd1n: /tmp/tmpkazlbd1n.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpyf5vhd19: /tmp/tmpyf5vhd19.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpc5_ntatu: /tmp/tmpc5_ntatu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        int num = nums[i];\n    \
    \    while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpnhf4vyb6: /tmp/tmpnhf4vyb6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp>0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=i;\n        for(int\
    \ j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min]){\n              \
    \  min=j;\n            }\n        }\n        long temp=sum[i];\n        sum[i]=sum[min];\n\
    \        sum[min]=temp;\n        temp=nums[i];\n        nums[i]=nums[min];\n \
    \       nums[min]=temp;\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_wntqqju: /tmp/tmp_wntqqju.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7fezdfjg: /tmp/tmp7fezdfjg.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long min = sum_of_digits[i];\n        int min_index = i;\n \
    \       for (int j = i; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                min_index\
    \ = j;\n            }\n        }\n        long temp = sum_of_digits[i];\n    \
    \    sum_of_digits[i] = sum_of_digits[min_index];\n        sum_of_digits[min_index]\
    \ = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n     \
    \   nums[min_index] = temp;\n    }\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp3ifi3s71: /tmp/tmp3ifi3s71.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp>0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        std::swap(sum[i],sum[index]);\n        std::swap(nums[i],nums[index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmppfs704gq: /tmp/tmppfs704gq.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpyf5vhd19: /tmp/tmpyf5vhd19.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmprwq6t1jc: /tmp/tmprwq6t1jc.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp = nums[i];\n        long sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    int min_index = i;\n        for(int j=i+1;j<nums.size();j++){\n         \
    \   if(sum[j]<sum[min_index]){\n                min_index = j;\n            }\n\
    \        }\n        long temp = sum[i];\n        sum[i] = sum[min_index];\n  \
    \      sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpuosdyqtf: /tmp/tmpuosdyqtf.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum;\n  std::vector<long> index;\n  long sum_of_digits\
    \ = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum_of_digits = 0;\n  \
    \  while (nums[i] > 0) {\n      sum_of_digits += nums[i] % 10;\n      nums[i]\
    \ /= 10;\n    }\n    sum.push_back(sum_of_digits);\n    index.push_back(i);\n\
    \  }\n  for (int i = 0; i < sum.size(); i++) {\n    for (int j = i + 1; j < sum.size();\
    \ j++) {\n      if (sum[i] > sum[j]) {\n        std::swap(sum[i], sum[j]);\n \
    \       std::swap(index[i], index[j]);\n      }\n    }\n  }\n  for (int i = 0;\
    \ i < sum.size(); i++) {\n    result.push_back(nums[index[i]]);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpfn_bb8lw: /tmp/tmpfn_bb8lw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp!=0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        long min=sum[i];\n      \
    \  int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        std::swap(sum[i],sum[index]);\n        std::swap(nums[i],nums[index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpqw5u5yoy: /tmp/tmpqw5u5yoy.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int temp = nums[i];\n        while (temp\
    \ > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          res.push_back(it->second[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpl4i09ui5: /tmp/tmpl4i09ui5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    std::vector<long> index_of_result;\n    long sum = 0;\n    for (long i =\
    \ 0; i < nums.size(); i++) {\n        sum = 0;\n        while (nums[i] > 0) {\n\
    \            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n   \
    \     sum_of_digits.push_back(sum);\n        index.push_back(i);\n    }\n    for\
    \ (long i = 0; i < sum_of_digits.size(); i++) {\n        for (long j = i + 1;\
    \ j < sum_of_digits.size(); j++) {\n            if (sum_of_digits[i] > sum_of_digits[j])\
    \ {\n                std::swap(sum_of_digits[i], sum_of_digits[j]);\n        \
    \        std::swap(index[i], index[j]);\n            }\n        }\n    }\n   \
    \ for (long i = 0; i < index.size(); i++) {\n        index_of_result.push_back(index[i]);\n\
    \    }\n    for (long i = 0; i < index_of_result.size(); i++) {\n        for (long\
    \ j = i + 1; j < index_of_result.size(); j++) {\n            if (index_of_result[i]\
    \ > index_of_result[j]) {\n                std::swap(index_of_result[i], index_of_result[j]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < index_of_result.size();\
    \ i++) {\n        result.push_back(nums[index_of_result[i]]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpeynusiop: /tmp/tmpeynusiop.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (long i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpu3crm85x: /tmp/tmpu3crm85x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (long i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpu3crm85x: /tmp/tmpu3crm85x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        while (nums[i] > 0) {\n            sum\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        int min_index = i;\n\
    \        for (int j = i + 1; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < sum_of_digits[min_index]) {\n                min_index = j;\n            }\n\
    \        }\n        std::swap(sum_of_digits[min_index], sum_of_digits[i]);\n \
    \       std::swap(nums[min_index], nums[i]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpviylhjgt: /tmp/tmpviylhjgt.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int sum = 0;\n        int num = nums[i];\n        while (num > 0)\
    \ {\n            sum += num % 10;\n            num /= 10;\n        }\n       \
    \ sums.push_back(sum);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       int min = sums[i];\n        int minIndex = i;\n        for (int j = i;\
    \ j < nums.size(); j++) {\n            if (sums[j] < min) {\n                min\
    \ = sums[j];\n                minIndex = j;\n            }\n        }\n      \
    \  int temp = sums[i];\n        sums[i] = sums[minIndex];\n        sums[minIndex]\
    \ = temp;\n        temp = nums[i];\n        nums[i] = nums[minIndex];\n      \
    \  nums[minIndex] = temp;\n    }\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpe21enk5f: /tmp/tmpe21enk5f.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n\
    \    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i\
    \ < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++)\
    \ {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(nums[j]);\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvq02vl31: /tmp/tmpvq02vl31.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    std::vector<int> indexes;\n    int\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum = 0;\n  \
    \      while (nums[i] > 0) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        sums.push_back(sum);\n        indexes.push_back(i);\n\
    \    }\n    for (int i = 0; i < sums.size(); i++) {\n        for (int j = i +\
    \ 1; j < sums.size(); j++) {\n            if (sums[i] > sums[j]) {\n         \
    \       std::swap(sums[i], sums[j]);\n                std::swap(indexes[i], indexes[j]);\n\
    \            }\n        }\n    }\n    for (int i = 0; i < indexes.size(); i++)\
    \ {\n        result.push_back(nums[indexes[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpi6n0ljib: /tmp/tmpi6n0ljib.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        long temp=nums[i];\n        long sum_temp=0;\n\
    \        while(temp>0){\n            sum_temp+=temp%10;\n            temp/=10;\n\
    \        }\n        sum.push_back(sum_temp);\n        index.push_back(i);\n  \
    \  }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                long temp=sum[i];\n         \
    \       sum[i]=sum[j];\n                sum[j]=temp;\n                temp=index[i];\n\
    \                index[i]=index[j];\n                index[j]=temp;\n        \
    \    }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpccr9j016: /tmp/tmpccr9j016.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long min = sum_of_digits[i];\n        int min_index = i;\n \
    \       for (int j = i; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                min_index\
    \ = j;\n            }\n        }\n        std::swap(sum_of_digits[i], sum_of_digits[min_index]);\n\
    \        std::swap(nums[i], nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpnst__3bd: /tmp/tmpnst__3bd.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    long sum_of_digits = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum_of_digits = 0;\n        while (nums[i]\
    \ != 0) {\n            sum_of_digits += nums[i] % 10;\n            nums[i] /=\
    \ 10;\n        }\n        sum.push_back(sum_of_digits);\n    }\n    for (long\
    \ i = 0; i < sum.size(); i++) {\n        for (long j = 0; j < sum.size() - 1;\
    \ j++) {\n            if (sum[j] > sum[j + 1]) {\n                long temp =\
    \ sum[j];\n                sum[j] = sum[j + 1];\n                sum[j + 1] =\
    \ temp;\n                temp = nums[j];\n                nums[j] = nums[j + 1];\n\
    \                nums[j + 1] = temp;\n            }\n        }\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpysov00sx: /tmp/tmpysov00sx.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::vector<std::pair<long, long>> sums;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long n = nums[i];\n    \
    \    while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(),\
    \ sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        res.push_back(nums[sums[i].second]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp1jd8vfx7: /tmp/tmp1jd8vfx7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7fezdfjg: /tmp/tmp7fezdfjg.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index_of_nums;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index_of_nums.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index_of_nums[i], index_of_nums[j]);\n\
    \            }\n        }\n    }\n    for (int i = 0; i < index_of_nums.size();\
    \ i++) {\n        result.push_back(nums[index_of_nums[i]]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpnhehvl6u: /tmp/tmpnhehvl6u.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n\tstd::vector<long>\
    \ result;\n\tstd::map<long, std::vector<long>> map;\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tlong sum = 0;\n\t\tlong num = nums[i];\n\t\twhile (num > 0) {\n\t\
    \t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tmap[sum].push_back(nums[i]);\n\
    \t}\n\tfor (auto it = map.begin(); it != map.end(); it++) {\n\t\tfor (int i =\
    \ 0; i < it->second.size(); i++) {\n\t\t\tresult.push_back(it->second[i]);\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_xb4ial4: /tmp/tmp_xb4ial4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (auto n : nums) {\n\
    \        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n \
    \           n /= 10;\n        }\n        m[sum].push_back(n);\n    }\n    for\
    \ (auto it = m.begin(); it != m.end(); ++it) {\n        for (auto n : it->second)\
    \ {\n            result.push_back(n);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmputhhongq: /tmp/tmputhhongq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    std::vector<int> sorted_sum_of_digits\
    \ = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(), sorted_sum_of_digits.end());\n\
    \    for (int i = 0; i < sorted_sum_of_digits.size(); i++) {\n        for (int\
    \ j = 0; j < sum_of_digits.size(); j++) {\n            if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n       \
    \         sum_of_digits[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpjelds1uc: /tmp/tmpjelds1uc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp = nums[i];\n        int sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    int min = sum[i];\n        int min_index = i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min){\n                min = sum[j];\n                min_index\
    \ = j;\n            }\n        }\n        std::swap(sum[i],sum[min_index]);\n\
    \        std::swap(nums[i],nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpae152fnu: /tmp/tmpae152fnu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i],\
    \ sum_of_digits[j]);\n                std::swap(index[i], index[j]);\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n    \
    \    result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpyf5vhd19: /tmp/tmpyf5vhd19.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    std::vector<long> indexes;\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum = 0;\n  \
    \      while (nums[i] > 0) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        sums.push_back(sum);\n        indexes.push_back(i);\n\
    \    }\n    for (int i = 0; i < sums.size(); i++) {\n        for (int j = i +\
    \ 1; j < sums.size(); j++) {\n            if (sums[i] > sums[j]) {\n         \
    \       std::swap(sums[i], sums[j]);\n                std::swap(indexes[i], indexes[j]);\n\
    \            }\n        }\n    }\n    for (int i = 0; i < indexes.size(); i++)\
    \ {\n        result.push_back(nums[indexes[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpmitmc43v: /tmp/tmpmitmc43v.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long min = sum_of_digits[i];\n        long index = i;\n    \
    \    for (long j = i + 1; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                index = j;\n\
    \            }\n        }\n        std::swap(sum_of_digits[i], sum_of_digits[index]);\n\
    \        std::swap(nums[i], nums[index]);\n    }\n    return nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp932pfdl9: /tmp/tmp932pfdl9.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_digits=0;\n        while(temp>0){\n\
    \            sum_digits+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_digits);\n\
    \    }\n    std::vector<long> temp=nums;\n    std::sort(sum.begin(),sum.end());\n\
    \    for(int i=0;i<sum.size();i++){\n        for(int j=0;j<nums.size();j++){\n\
    \            if(sum[i]==temp[j]){\n                result.push_back(nums[j]);\n\
    \                temp[j]=0;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpp8r1hbgu: /tmp/tmpp8r1hbgu.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long n = nums[i];\n        while (n >\
    \ 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        m[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        for (int\
    \ i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5ubeo4d8: /tmp/tmp5ubeo4d8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index_of_digits;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ = 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n \
    \       index_of_digits.push_back(i);\n    }\n    for (long i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (long j = i + 1; j < sum_of_digits.size(); j++) {\n    \
    \        if (sum_of_digits[i] > sum_of_digits[j]) {\n                long temp\
    \ = sum_of_digits[i];\n                sum_of_digits[i] = sum_of_digits[j];\n\
    \                sum_of_digits[j] = temp;\n                temp = index_of_digits[i];\n\
    \                index_of_digits[i] = index_of_digits[j];\n                index_of_digits[j]\
    \ = temp;\n            }\n        }\n    }\n    for (long i = 0; i < index_of_digits.size();\
    \ i++) {\n        result.push_back(nums[index_of_digits[i]]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpkrqk_chi: /tmp/tmpkrqk_chi.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> sum_map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_map[sum] = nums[i];\n    }\n    for (auto it = sum_map.begin(); it\
    \ != sum_map.end(); it++) {\n        result.push_back(it->second);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpbu0ankmi: /tmp/tmpbu0ankmi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum;\n  std::vector<long> index;\n  long sum_of_digits\
    \ = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    sum_of_digits = 0;\n \
    \   while (nums[i] > 0) {\n      sum_of_digits += nums[i] % 10;\n      nums[i]\
    \ /= 10;\n    }\n    sum.push_back(sum_of_digits);\n    index.push_back(i);\n\
    \  }\n  for (long i = 0; i < sum.size(); i++) {\n    for (long j = i + 1; j <\
    \ sum.size(); j++) {\n      if (sum[i] > sum[j]) {\n        long temp = sum[i];\n\
    \        sum[i] = sum[j];\n        sum[j] = temp;\n        temp = index[i];\n\
    \        index[i] = index[j];\n        index[j] = temp;\n      }\n    }\n  }\n\
    \  for (long i = 0; i < index.size(); i++) {\n    result.push_back(nums[index[i]]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpd9otmdft: /tmp/tmpd9otmdft.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n != 0) {\n            sum += n % 10;\n       \
    \     n /= 10;\n        }\n        sum_of_digits.push_back(sum);\n        index.push_back(i);\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j\
    \ < nums.size() - i - 1; j++) {\n            if (sum_of_digits[j] > sum_of_digits[j\
    \ + 1]) {\n                std::swap(sum_of_digits[j], sum_of_digits[j + 1]);\n\
    \                std::swap(index[j], index[j + 1]);\n            }\n        }\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpod8np_hj: /tmp/tmpod8np_hj.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (long i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpu3crm85x: /tmp/tmpu3crm85x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int sum = 0;\n        long temp = nums[i];\n        while (temp >\
    \ 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n  \
    \      sums.push_back(sum);\n    }\n    std::vector<int> sorted_sums = sums;\n\
    \    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i\
    \ < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++)\
    \ {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(nums[j]);\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpn1mhtyk3: /tmp/tmpn1mhtyk3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long\
    \ temp = nums[i];\n        while (temp > 0) {\n            sum += temp % 10;\n\
    \            temp /= 10;\n        }\n        sum_of_digits.push_back(sum);\n \
    \       index.push_back(i);\n    }\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (sum_of_digits[i]\
    \ > sum_of_digits[j]) {\n                long temp = sum_of_digits[i];\n     \
    \           sum_of_digits[i] = sum_of_digits[j];\n                sum_of_digits[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n        }\n    }\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpyoht1pyk: /tmp/tmpyoht1pyk.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum_of_digits;\n  std::vector<long> index;\n  for\
    \ (int i = 0; i < nums.size(); i++) {\n    long sum = 0;\n    long num = nums[i];\n\
    \    while (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    sum_of_digits.push_back(sum);\n\
    \    index.push_back(i);\n  }\n  for (int i = 0; i < nums.size(); i++) {\n   \
    \ for (int j = 0; j < nums.size() - 1; j++) {\n      if (sum_of_digits[j] > sum_of_digits[j\
    \ + 1]) {\n        long temp = sum_of_digits[j];\n        sum_of_digits[j] = sum_of_digits[j\
    \ + 1];\n        sum_of_digits[j + 1] = temp;\n        temp = index[j];\n    \
    \    index[j] = index[j + 1];\n        index[j + 1] = temp;\n      }\n    }\n\
    \  }\n  for (int i = 0; i < nums.size(); i++) {\n    result.push_back(nums[index[i]]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpubr1kg_m: /tmp/tmpubr1kg_m.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        while\
    \ (nums[i] > 0) {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        sum_of_digits.push_back(sum);\n        index.push_back(i);\n\
    \    }\n    for (int i = 0; i < sum_of_digits.size(); i++) {\n        for (int\
    \ j = i + 1; j < sum_of_digits.size(); j++) {\n            if (sum_of_digits[i]\
    \ > sum_of_digits[j]) {\n                long temp = sum_of_digits[i];\n     \
    \           sum_of_digits[i] = sum_of_digits[j];\n                sum_of_digits[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n        }\n    }\n    for (int\
    \ i = 0; i < index.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp37qt09xr: /tmp/tmp37qt09xr.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    long\
    \ sum_of_digits = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum_of_digits\
    \ = 0;\n        while (nums[i] > 0) {\n            sum_of_digits += nums[i] %\
    \ 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(sum_of_digits);\n\
    \        index.push_back(i);\n    }\n    for (int i = 0; i < sum.size(); i++)\
    \ {\n        for (int j = i + 1; j < sum.size(); j++) {\n            if (sum[i]\
    \ > sum[j]) {\n                std::swap(sum[i], sum[j]);\n                std::swap(index[i],\
    \ index[j]);\n            }\n        }\n    }\n    for (int i = 0; i < index.size();\
    \ i++) {\n        result.push_back(nums[index[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmps5p9nfuw: /tmp/tmps5p9nfuw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7fezdfjg: /tmp/tmp7fezdfjg.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n\tstd::vector<long>\
    \ result;\n\tstd::vector<long> sum;\n\tstd::vector<long> index;\n\tlong sum_of_digits\
    \ = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tsum_of_digits = 0;\n\t\t\
    while (nums[i] > 0) {\n\t\t\tsum_of_digits += nums[i] % 10;\n\t\t\tnums[i] /=\
    \ 10;\n\t\t}\n\t\tsum.push_back(sum_of_digits);\n\t\tindex.push_back(i);\n\t}\n\
    \tfor (int i = 0; i < sum.size(); i++) {\n\t\tfor (int j = i + 1; j < sum.size();\
    \ j++) {\n\t\t\tif (sum[i] > sum[j]) {\n\t\t\t\tstd::swap(sum[i], sum[j]);\n\t\
    \t\t\tstd::swap(index[i], index[j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i\
    \ < index.size(); i++) {\n\t\tresult.push_back(nums[index[i]]);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpd8oggk2f: /tmp/tmpd8oggk2f.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp>0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=i;\n        for(int\
    \ j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min]){\n              \
    \  min=j;\n            }\n        }\n        if(min!=i){\n            std::swap(sum[i],sum[min]);\n\
    \            std::swap(nums[i],nums[min]);\n        }\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpfq3dxaap: /tmp/tmpfq3dxaap.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num != 0) {\n            sum += num % 10;\n            num /=\
    \ 10;\n        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n        for (long i = 0; i < it->second.size();\
    \ i++) {\n            result.push_back(it->second[i]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp90zw_v3k: /tmp/tmp90zw_v3k.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpny6_rg5d: /tmp/tmpny6_rg5d.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    std::vector<int> sorted_sum_of_digits\
    \ = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(), sorted_sum_of_digits.end());\n\
    \    for (int i = 0; i < sorted_sum_of_digits.size(); i++) {\n        for (int\
    \ j = 0; j < sum_of_digits.size(); j++) {\n            if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n       \
    \         sum_of_digits[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpjelds1uc: /tmp/tmpjelds1uc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (auto num : nums)\
    \ {\n        int sum = 0;\n        while (num > 0) {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        map[sum].push_back(num);\n \
    \   }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for (auto\
    \ num : it->second) {\n            result.push_back(num);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpc4_s79i_: /tmp/tmpc4_s79i_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n  std::vector<long>\
    \ result;\n  std::vector<long> sum;\n  for (int i = 0; i < nums.size(); i++) {\n\
    \    long sum_of_digits = 0;\n    long num = nums[i];\n    while (num != 0) {\n\
    \      sum_of_digits += num % 10;\n      num /= 10;\n    }\n    sum.push_back(sum_of_digits);\n\
    \  }\n  for (int i = 0; i < nums.size(); i++) {\n    long min = sum[i];\n    int\
    \ min_index = i;\n    for (int j = i; j < nums.size(); j++) {\n      if (sum[j]\
    \ < min) {\n        min = sum[j];\n        min_index = j;\n      }\n    }\n  \
    \  long temp = sum[i];\n    sum[i] = sum[min_index];\n    sum[min_index] = temp;\n\
    \    temp = nums[i];\n    nums[i] = nums[min_index];\n    nums[min_index] = temp;\n\
    \  }\n  return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpzls9ou5z: /tmp/tmpzls9ou5z.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        long sum = 0;\n        long num = nums[i];\n        while (num >\
    \ 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n    \
    \    sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n\
    \    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i\
    \ < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++)\
    \ {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(nums[j]);\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvq02vl31: /tmp/tmpvq02vl31.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int sum_of_digits=0;\n        int num=nums[i];\n        while(num>0){\n\
    \            sum_of_digits+=num%10;\n            num/=10;\n        }\n       \
    \ sum.push_back(sum_of_digits);\n    }\n    std::vector<int> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        index.push_back(i);\n    }\n    for(int i=0;i<nums.size();i++){\n\
    \        for(int j=i+1;j<nums.size();j++){\n            if(sum[i]>sum[j]){\n \
    \               int temp=sum[i];\n                sum[i]=sum[j];\n           \
    \     sum[j]=temp;\n                temp=nums[i];\n                nums[i]=nums[j];\n\
    \                nums[j]=temp;\n                temp=index[i];\n             \
    \   index[i]=index[j];\n                index[j]=temp;\n            }\n      \
    \      else if(sum[i]==sum[j]){\n                if(index[i]>index[j]){\n    \
    \                int temp=sum[i];\n                    sum[i]=sum[j];\n      \
    \              sum[j]=temp;\n                    temp=nums[i];\n             \
    \       nums[i]=nums[j];\n                    nums[j]=temp;\n                \
    \    temp=index[i];\n                    index[i]=index[j];\n                \
    \    index[j]=temp;\n                }\n            }\n        }\n    }\n    for(int\
    \ i=0;i<nums.size();i++){\n        result.push_back(nums[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp054js2jf: /tmp/tmp054js2jf.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    long\
    \ sum_of_digits = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum_of_digits\
    \ = 0;\n        while (nums[i] > 0) {\n            sum_of_digits += nums[i] %\
    \ 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(sum_of_digits);\n\
    \        index.push_back(i);\n    }\n    for (int i = 0; i < sum.size(); i++)\
    \ {\n        for (int j = i + 1; j < sum.size(); j++) {\n            if (sum[i]\
    \ > sum[j]) {\n                std::swap(sum[i], sum[j]);\n                std::swap(index[i],\
    \ index[j]);\n            }\n        }\n    }\n    for (int i = 0; i < index.size();\
    \ i++) {\n        result.push_back(nums[index[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmps5p9nfuw: /tmp/tmps5p9nfuw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085349
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sums;\n    for (auto num : nums) {\n        int\
    \ sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n        \
    \    num /= 10;\n        }\n        sums.push_back(sum);\n    }\n    std::sort(sums.begin(),\
    \ sums.end());\n    for (auto sum : sums) {\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum2 = 0;\n            while (nums[i] > 0) {\n     \
    \           sum2 += nums[i] % 10;\n                nums[i] /= 10;\n          \
    \  }\n            if (sum2 == sum) {\n                result.push_back(nums[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmplqlg8zoz: /tmp/tmplqlg8zoz.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long n = nums[i];\n    \
    \    while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmplul1k6_f: /tmp/tmplul1k6_f.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpny6_rg5d: /tmp/tmpny6_rg5d.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n\tstd::vector<long>\
    \ result;\n\tstd::vector<long> sum;\n\tstd::vector<long> index;\n\tlong sum_of_digits\
    \ = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tsum_of_digits = 0;\n\t\t\
    while (nums[i] != 0) {\n\t\t\tsum_of_digits += nums[i] % 10;\n\t\t\tnums[i] /=\
    \ 10;\n\t\t}\n\t\tsum.push_back(sum_of_digits);\n\t\tindex.push_back(i);\n\t}\n\
    \tfor (int i = 0; i < sum.size(); i++) {\n\t\tfor (int j = i + 1; j < sum.size();\
    \ j++) {\n\t\t\tif (sum[i] > sum[j]) {\n\t\t\t\tstd::swap(sum[i], sum[j]);\n\t\
    \t\t\tstd::swap(index[i], index[j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i\
    \ < index.size(); i++) {\n\t\tresult.push_back(nums[index[i]]);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpze7cysim: /tmp/tmpze7cysim.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    std::vector<long> sorted_sum_of_digits\
    \ = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(), sorted_sum_of_digits.end());\n\
    \    for (int i = 0; i < sorted_sum_of_digits.size(); i++) {\n        for (int\
    \ j = 0; j < sum_of_digits.size(); j++) {\n            if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n       \
    \         sum_of_digits[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_t0o0q6_: /tmp/tmp_t0o0q6_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (auto i : nums)\
    \ {\n        long sum = 0;\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        map[sum].push_back(i);\n    }\n    for\
    \ (auto i : map) {\n        for (auto j : i.second) {\n            result.push_back(j);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpsvy44sop: /tmp/tmpsvy44sop.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (long i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp36xb0wqh: /tmp/tmp36xb0wqh.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum = 0;\n        while (nums[i] > 0)\
    \ {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n\
    \        sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int min_index = i;\n        for (int j = i + 1; j < nums.size();\
    \ j++) {\n            if (sum_of_digits[j] < sum_of_digits[min_index]) {\n   \
    \             min_index = j;\n            }\n        }\n        std::swap(sum_of_digits[min_index],\
    \ sum_of_digits[i]);\n        std::swap(nums[min_index], nums[i]);\n    }\n  \
    \  return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpferldpej: /tmp/tmpferldpej.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085351
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ sorted_nums;\n    std::vector<int> sums;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sums.push_back(sum);\n    }\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int min_sum = INT_MAX;\n        int min_index = 0;\n        for (int\
    \ j = 0; j < sums.size(); j++) {\n            if (sums[j] < min_sum) {\n     \
    \           min_sum = sums[j];\n                min_index = j;\n            }\n\
    \        }\n        sorted_nums.push_back(nums[min_index]);\n        sums[min_index]\
    \ = INT_MAX;\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpuqgd378_: /tmp/tmpuqgd378_.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long min = sum_of_digits[i];\n        int index = i;\n     \
    \   for (int j = i; j < nums.size(); j++) {\n            if (sum_of_digits[j]\
    \ < min) {\n                min = sum_of_digits[j];\n                index = j;\n\
    \            }\n        }\n        long temp = sum_of_digits[i];\n        sum_of_digits[i]\
    \ = sum_of_digits[index];\n        sum_of_digits[index] = temp;\n        temp\
    \ = nums[i];\n        nums[i] = nums[index];\n        nums[index] = temp;\n  \
    \  }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7yt5mvm1: /tmp/tmp7yt5mvm1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp = nums[i];\n        int sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    int min_index = i;\n        for(int j=i+1;j<nums.size();j++){\n         \
    \   if(sum[j]<sum[min_index]){\n                min_index = j;\n            }\n\
    \        }\n        std::swap(sum[i],sum[min_index]);\n        std::swap(nums[i],nums[min_index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp79_bvaph: /tmp/tmp79_bvaph.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (long i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpu3crm85x: /tmp/tmpu3crm85x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n    \
    \    long temp = nums[i];\n        long sum_temp = 0;\n        while(temp){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    int min_index = i;\n        for(int j=i+1;j<nums.size();j++){\n         \
    \   if(sum[j] < sum[min_index]){\n                min_index = j;\n           \
    \ }\n        }\n        std::swap(sum[i],sum[min_index]);\n        std::swap(nums[i],nums[min_index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpaekskaok: /tmp/tmpaekskaok.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int temp = nums[i];\n        while (temp\
    \ > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptrudf9ks: /tmp/tmptrudf9ks.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long temp = nums[i];\n        while (temp\
    \ > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int min = i;\n        for (int j = i + 1; j < nums.size(); j++)\
    \ {\n            if (sum_of_digits[j] < sum_of_digits[min]) {\n              \
    \  min = j;\n            }\n        }\n        if (min != i) {\n            long\
    \ temp = sum_of_digits[i];\n            sum_of_digits[i] = sum_of_digits[min];\n\
    \            sum_of_digits[min] = temp;\n            temp = nums[i];\n       \
    \     nums[i] = nums[min];\n            nums[min] = temp;\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmppjxc8d2i: /tmp/tmppjxc8d2i.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    long\
    \ sum_of_digits = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum_of_digits\
    \ = 0;\n        while (nums[i] != 0) {\n            sum_of_digits += nums[i] %\
    \ 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(sum_of_digits);\n\
    \        index.push_back(i);\n    }\n    for (int i = 0; i < sum.size(); i++)\
    \ {\n        for (int j = i + 1; j < sum.size(); j++) {\n            if (sum[i]\
    \ > sum[j]) {\n                long temp = sum[i];\n                sum[i] = sum[j];\n\
    \                sum[j] = temp;\n                temp = index[i];\n          \
    \      index[i] = index[j];\n                index[j] = temp;\n            }\n\
    \        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpon7a_l_7: /tmp/tmpon7a_l_7.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp=nums[i];\n        int sum_temp=0;\n        while(temp>0){\n  \
    \          sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    std::vector<int> sorted_sum=sum;\n    std::sort(sorted_sum.begin(),sorted_sum.end());\n\
    \    for(int i=0;i<sorted_sum.size();i++){\n        for(int j=0;j<sum.size();j++){\n\
    \            if(sorted_sum[i]==sum[j]){\n                result.push_back(nums[j]);\n\
    \                sum[j]=-1;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpeqcfcwyj: /tmp/tmpeqcfcwyj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    long sum_of_digits = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        long temp = nums[i];\n        while\
    \ (temp != 0) {\n            sum_of_digits += temp % 10;\n            temp /=\
    \ 10;\n        }\n        sum.push_back(sum_of_digits);\n        sum_of_digits\
    \ = 0;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        long min =\
    \ sum[i];\n        int min_index = i;\n        for (int j = i + 1; j < nums.size();\
    \ j++) {\n            if (sum[j] < min) {\n                min = sum[j];\n   \
    \             min_index = j;\n            }\n        }\n        long temp = sum[i];\n\
    \        sum[i] = sum[min_index];\n        sum[min_index] = temp;\n        temp\
    \ = nums[i];\n        nums[i] = nums[min_index];\n        nums[min_index] = temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpt0qeyr_e: /tmp/tmpt0qeyr_e.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::vector<std::pair<long, long>> v;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      v.push_back(std::make_pair(sum, i));\n    }\n    std::sort(v.begin(), v.end());\n\
    \    for (int i = 0; i < v.size(); i++) {\n        res.push_back(nums[v[i].second]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpijrl1r22: /tmp/tmpijrl1r22.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    std::vector<long> sorted_sum_of_digits\
    \ = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(), sorted_sum_of_digits.end());\n\
    \    for (int i = 0; i < sorted_sum_of_digits.size(); i++) {\n        for (int\
    \ j = 0; j < sum_of_digits.size(); j++) {\n            if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n       \
    \         sum_of_digits[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_t0o0q6_: /tmp/tmp_t0o0q6_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sums;\n    std::vector<long> indices;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long num\
    \ = nums[i];\n        while (num > 0) {\n            sum += num % 10;\n      \
    \      num /= 10;\n        }\n        sums.push_back(sum);\n        indices.push_back(i);\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i +\
    \ 1; j < nums.size(); j++) {\n            if (sums[i] > sums[j]) {\n         \
    \       long temp = sums[i];\n                sums[i] = sums[j];\n           \
    \     sums[j] = temp;\n                temp = indices[i];\n                indices[i]\
    \ = indices[j];\n                indices[j] = temp;\n            }\n        }\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(nums[indices[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpmbxq0kid: /tmp/tmpmbxq0kid.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        std::sort(it->second.begin(), it->second.end());\n\
    \        for (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpmhlwlyw6: /tmp/tmpmhlwlyw6.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085353
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp = nums[i];\n        long sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    long min = sum[i];\n        int index = i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min){\n                min = sum[j];\n                index\
    \ = j;\n            }\n        }\n        long temp = sum[i];\n        sum[i]\
    \ = sum[index];\n        sum[index] = temp;\n        temp = nums[i];\n       \
    \ nums[i] = nums[index];\n        nums[index] = temp;\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpautpydam: /tmp/tmpautpydam.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long n = nums[i];\n        while (n !=\
    \ 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        map[sum]\
    \ = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n\
    \        result.push_back(it->second);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmprofq023z: /tmp/tmprofq023z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (auto i : nums) {\n\
    \        int sum = 0;\n        int temp = i;\n        while (temp > 0) {\n   \
    \         sum += temp % 10;\n            temp /= 10;\n        }\n        m[sum].push_back(i);\n\
    \    }\n    for (auto i : m) {\n        for (auto j : i.second) {\n          \
    \  result.push_back(j);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpikh1cetu: /tmp/tmpikh1cetu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long temp = nums[i];\n        while (temp\
    \ != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp4yzms874: /tmp/tmp4yzms874.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        long sum_of_digits=0;\n        long temp=nums[i];\n\
    \        while(temp!=0){\n            sum_of_digits+=temp%10;\n            temp/=10;\n\
    \        }\n        sum.push_back(sum_of_digits);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                std::swap(sum[i],sum[j]);\n \
    \               std::swap(index[i],index[j]);\n            }\n        }\n    }\n\
    \    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpouc5hvi9: /tmp/tmpouc5hvi9.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (auto num : nums)\
    \ {\n        long sum = 0;\n        while (num > 0) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        map[sum].push_back(num);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (auto num : it->second) {\n            result.push_back(num);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp0hej5suu: /tmp/tmp0hej5suu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long sum_temp=0;\n        while(temp>0){\n\
    \            sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min_index=i;\n      \
    \  for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<sum[min_index]){\n\
    \                min_index=j;\n            }\n        }\n        std::swap(sum[i],sum[min_index]);\n\
    \        std::swap(nums[i],nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_9667s_x: /tmp/tmp_9667s_x.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    for(int i=0;i<nums.size();i++){\n        long sum=0;\n        long temp=nums[i];\n\
    \        while(temp!=0){\n            sum+=temp%10;\n            temp/=10;\n \
    \       }\n        sum_of_digits.push_back(sum);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum_of_digits[i]>sum_of_digits[j]){\n                long temp=sum_of_digits[i];\n\
    \                sum_of_digits[i]=sum_of_digits[j];\n                sum_of_digits[j]=temp;\n\
    \                temp=index[i];\n                index[i]=index[j];\n        \
    \        index[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<nums.size();i++){\n\
    \        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpxgefr1a7: /tmp/tmpxgefr1a7.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp=nums[i];\n        int sum_temp=0;\n        while(temp>0){\n  \
    \          sum_temp+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                index=j;\n            }\n      \
    \  }\n        std::swap(sum[i],sum[index]);\n        std::swap(nums[i],nums[index]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmplmc0tbb3: /tmp/tmplmc0tbb3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> temp;\n    std::vector<long> temp2;\n    std::vector<long>\
    \ temp3;\n    int sum = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n   \
    \ int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dd2kggg.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1dd2kggg.cpp:76:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmp1dd2kggg.cpp:76:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> sum_map;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sum_map[sum].push_back(nums[i]);\n    }\n    for (auto it\
    \ = sum_map.begin(); it != sum_map.end(); it++) {\n        std::sort(it->second.begin(),\
    \ it->second.end());\n        for (long i = 0; i < it->second.size(); i++) {\n\
    \            result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpsquyqk_p: /tmp/tmpsquyqk_p.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long s=0;\n        long n=nums[i];\n        while(n>0){\n            s+=n%10;\n\
    \            n/=10;\n        }\n        sum.push_back(s);\n    }\n    for(int\
    \ i=0;i<nums.size();i++){\n        long min=sum[i];\n        int index=i;\n  \
    \      for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n      \
    \          min=sum[j];\n                index=j;\n            }\n        }\n \
    \       long temp=sum[i];\n        sum[i]=sum[index];\n        sum[index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[index];\n        nums[index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpikt1h0_0: /tmp/tmpikt1h0_0.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp = nums[i];\n        long sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    long min_sum = sum[i];\n        long min_index = i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min_sum){\n                min_sum = sum[j];\n        \
    \        min_index = j;\n            }\n        }\n        std::swap(sum[i],sum[min_index]);\n\
    \        std::swap(nums[i],nums[min_index]);\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpg8ntzvx1: /tmp/tmpg8ntzvx1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    std::vector<long> index;\n    for(int\
    \ i=0;i<nums.size();i++){\n        long sum_of_digits=0;\n        long num=nums[i];\n\
    \        while(num!=0){\n            sum_of_digits+=num%10;\n            num=num/10;\n\
    \        }\n        sum.push_back(sum_of_digits);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                long temp=sum[i];\n         \
    \       sum[i]=sum[j];\n                sum[j]=temp;\n                temp=index[i];\n\
    \                index[i]=index[j];\n                index[j]=temp;\n        \
    \    }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpk4y0lxty: /tmp/tmpk4y0lxty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long temp = nums[i];\n \
    \       while (temp > 0) {\n            sum += temp % 10;\n            temp /=\
    \ 10;\n        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n        for (int i = 0; i < it->second.size();\
    \ i++) {\n            result.push_back(it->second[i]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpsxzmuhh4: /tmp/tmpsxzmuhh4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        while (nums[i] > 0) {\n            sum\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n\
    \    }\n    std::vector<int> sorted_sum_of_digits = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(),\
    \ sorted_sum_of_digits.end());\n    for (int i = 0; i < sorted_sum_of_digits.size();\
    \ i++) {\n        for (int j = 0; j < sum_of_digits.size(); j++) {\n         \
    \   if (sorted_sum_of_digits[i] == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n\
    \                sum_of_digits[j] = -1;\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpbvrqai1w: /tmp/tmpbvrqai1w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    int s=0;\n    for(int i=0;i<nums.size();i++)\n\
    \    {\n        int temp=nums[i];\n        while(temp!=0)\n        {\n       \
    \     s=s+temp%10;\n            temp=temp/10;\n        }\n        sum.push_back(s);\n\
    \        s=0;\n    }\n    std::vector<int>::iterator it;\n    it=std::min_element(sum.begin(),sum.end());\n\
    \    int min=*it;\n    int index=std::distance(sum.begin(),it);\n    result.push_back(nums[index]);\n\
    \    sum[index]=INT_MAX;\n    for(int i=1;i<nums.size();i++)\n    {\n        it=std::min_element(sum.begin(),sum.end());\n\
    \        min=*it;\n        index=std::distance(sum.begin(),it);\n        result.push_back(nums[index]);\n\
    \        sum[index]=INT_MAX;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpoh6ehmit: /tmp/tmpoh6ehmit.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ res;\n    std::map<int, std::vector<long>> m;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n  \
    \          res.push_back(it->second[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpsjfnisg3: /tmp/tmpsjfnisg3.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long temp_sum=0;\n        while(temp!=0){\n\
    \            temp_sum+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(temp_sum);\n\
    \    }\n    for(int i=0;i<nums.size();i++){\n        int min=sum[i];\n       \
    \ int min_index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(sum[j]<min){\n\
    \                min=sum[j];\n                min_index=j;\n            }\n  \
    \      }\n        long temp=sum[i];\n        sum[i]=sum[min_index];\n        sum[min_index]=temp;\n\
    \        temp=nums[i];\n        nums[i]=nums[min_index];\n        nums[min_index]=temp;\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpfmb8_p0d: /tmp/tmpfmb8_p0d.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int min = i;\n        for (int j = i + 1; j < nums.size(); j++)\
    \ {\n            if (sum_of_digits[j] < sum_of_digits[min]) {\n              \
    \  min = j;\n            }\n        }\n        if (min != i) {\n            std::swap(sum_of_digits[i],\
    \ sum_of_digits[min]);\n            std::swap(nums[i], nums[min]);\n        }\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp7kj5otma: /tmp/tmp7kj5otma.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum_of_digits.push_back(sum);\n    }\n    std::vector<long> sorted_sum_of_digits\
    \ = sum_of_digits;\n    std::sort(sorted_sum_of_digits.begin(), sorted_sum_of_digits.end());\n\
    \    for (int i = 0; i < sorted_sum_of_digits.size(); i++) {\n        for (int\
    \ j = 0; j < sum_of_digits.size(); j++) {\n            if (sorted_sum_of_digits[i]\
    \ == sum_of_digits[j]) {\n                result.push_back(nums[j]);\n       \
    \         sum_of_digits[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp_t0o0q6_: /tmp/tmp_t0o0q6_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    int temp = 0;\n    for(int i = 0; i\
    \ < nums.size(); i++){\n        temp = 0;\n        while(nums[i] > 0){\n     \
    \       temp += nums[i] % 10;\n            nums[i] /= 10;\n        }\n       \
    \ sum.push_back(temp);\n    }\n    for(int i = 0; i < nums.size(); i++){\n   \
    \     int min = i;\n        for(int j = i + 1; j < nums.size(); j++){\n      \
    \      if(sum[j] < sum[min]){\n                min = j;\n            }\n     \
    \   }\n        std::swap(sum[i], sum[min]);\n        std::swap(nums[i], nums[min]);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp2stdd7h1: /tmp/tmp2stdd7h1.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp5mm9ncbg: /tmp/tmp5mm9ncbg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = i;\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpm9vse8p6: /tmp/tmpm9vse8p6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum =\
    \ 0;\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sum_of_digits.push_back(sum);\n   \
    \     index.push_back(i);\n    }\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        for (int j = i + 1; j < sum_of_digits.size(); j++) {\n     \
    \       if (sum_of_digits[i] > sum_of_digits[j]) {\n                long temp\
    \ = sum_of_digits[i];\n                sum_of_digits[i] = sum_of_digits[j];\n\
    \                sum_of_digits[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n        }\n    }\n    for (int i = 0; i < index.size(); i++) {\n \
    \       result.push_back(nums[index[i]]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpvkhhjhga: /tmp/tmpvkhhjhga.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> sum_to_nums;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sum_to_nums[sum].push_back(nums[i]);\n    }\n    for (auto\
    \ it = sum_to_nums.begin(); it != sum_to_nums.end(); it++) {\n        for (int\
    \ i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpr2j50fb1: /tmp/tmpr2j50fb1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, long> map;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      map[sum] = nums[i];\n    }\n    for (auto it = map.begin(); it != map.end();\
    \ it++) {\n        result.push_back(it->second);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpc5_ntatu: /tmp/tmpc5_ntatu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sum;\n    for(int i=0;i<nums.size();i++){\n \
    \       long temp=nums[i];\n        long s=0;\n        while(temp>0){\n      \
    \      s+=temp%10;\n            temp/=10;\n        }\n        sum.push_back(s);\n\
    \    }\n    std::vector<long> temp;\n    for(int i=0;i<sum.size();i++){\n    \
    \    temp.push_back(sum[i]);\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    for(int i=0;i<temp.size();i++){\n        for(int j=0;j<sum.size();j++){\n\
    \            if(temp[i]==sum[j]){\n                result.push_back(nums[j]);\n\
    \                sum[j]=0;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp2q65gh1e: /tmp/tmp2q65gh1e.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085354
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n  \
    \      int temp = nums[i];\n        int sum_temp = 0;\n        while(temp>0){\n\
    \            sum_temp += temp%10;\n            temp /= 10;\n        }\n      \
    \  sum.push_back(sum_temp);\n    }\n    for(int i=0;i<nums.size();i++){\n    \
    \    int min = sum[i];\n        int index = i;\n        for(int j=i+1;j<nums.size();j++){\n\
    \            if(sum[j]<min){\n                min = sum[j];\n                index\
    \ = j;\n            }\n        }\n        int temp = sum[i];\n        sum[i] =\
    \ sum[index];\n        sum[index] = temp;\n        temp = nums[i];\n        nums[i]\
    \ = nums[index];\n        nums[index] = temp;\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmp9upgy6y5: /tmp/tmp9upgy6y5.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long n = nums[i];\n    \
    \    while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmplul1k6_f: /tmp/tmplul1k6_f.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085352
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (long i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpu3crm85x: /tmp/tmpu3crm85x.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        long num = nums[i];\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmptdnhxz9q: /tmp/tmptdnhxz9q.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    std::map<long, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n  \
    \      while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: Exception
  stderr: 'tmpezaj4ggv: /tmp/tmpezaj4ggv.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,
    (long)-11, (long)1, (long)-12, (long)11}))'' failed.

    '
  stdout: ''
  timestamp: 1660085355
