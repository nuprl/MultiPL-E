language: cpp
name: HumanEval_80_is_happy
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    int len = s.length();\n \
    \   if(len < 3) return false;\n    for(int i = 0; i < len - 2; i++) {\n      \
    \  if(s[i] == s[i+1] && s[i] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpblfe0drm: /tmp/tmpblfe0drm.cpp:20: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\t\
    return false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i]\
    \ == s[i + 1] && s[i] == s[i + 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwagnaa3j: /tmp/tmpwagnaa3j.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp00jjennd: /tmp/tmp00jjennd.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppo634m0j: /tmp/tmppo634m0j.cpp:19: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    int n = s.length();\n   \
    \ if(n < 3) return false;\n    for(int i = 0; i < n-2; i++) {\n        if(s[i]\
    \ == s[i+1] && s[i] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpn34n6qmd: /tmp/tmpn34n6qmd.cpp:20: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    else{\n        for(int i=0;i<s.length()-2;i++){\n      \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n                return false;\n   \
    \     }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0tn4xd0i: /tmp/tmp0tn4xd0i.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()<3)\n\
    \    return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj6jvxtuy: /tmp/tmpj6jvxtuy.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n\
    \        return false;\n    }\n    for(int i=0;i<s.length()-2;i++)\n    {\n  \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6qh_g81a: /tmp/tmp6qh_g81a.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()<3)\n\
    \        return false;\n    else{\n        for(int i=0;i<s.length()-2;i++){\n\
    \            if(s[i]==s[i+1] && s[i+1]==s[i+2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqkmk7xfc: /tmp/tmpqkmk7xfc.cpp:24: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n\
    \        return false;\n    }\n    for(int i=0;i<s.length()-2;i++)\n    {\n  \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6qh_g81a: /tmp/tmp6qh_g81a.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    int n = s.length();\n   \
    \ if(n<3)\n        return false;\n    for(int i=0;i<n-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu0cui2gz: /tmp/tmpu0cui2gz.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    else{\n        for(int i=0;i<s.length()-2;i++){\n      \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n                return false;\n   \
    \     }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0tn4xd0i: /tmp/tmp0tn4xd0i.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n\
    \        return false;\n    }\n    for(int i=0;i<s.length()-2;i++)\n    {\n  \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6qh_g81a: /tmp/tmp6qh_g81a.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppo634m0j: /tmp/tmppo634m0j.cpp:19: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    int n = s.length();\n   \
    \ if(n < 3)\n        return false;\n    for(int i = 0; i < n - 2; i++) {\n   \
    \     if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n     \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    for(int i=0;i<s.length()-2;i++){\n\
    \        if(s[i]==s[i+1] && s[i+1]==s[i+2]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5zeuk3tj: /tmp/tmp5zeuk3tj.cpp:18: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n  int n = s.size();\n  if (n\
    \ < 3) {\n    return false;\n  }\n  for (int i = 0; i < n - 2; i++) {\n    if\
    \ (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3bkmob0e: /tmp/tmp3bkmob0e.cpp:24: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    std::set<char> st;\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(st.find(s[i]) != st.end()) return false;\n        st.insert(s[i]);\n\
    \        if(st.size() == 3) st.clear();\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpk8oir7nl: /tmp/tmpk8oir7nl.cpp:26: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]&&s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa_xk1mah: /tmp/tmpa_xk1mah.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n\
    \        return false;\n    }\n    for(int i=0;i<s.length()-2;i++)\n    {\n  \
    \      if(s[i]==s[i+1] && s[i+1]==s[i+2])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6qh_g81a: /tmp/tmp6qh_g81a.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    int n = s.length();\n   \
    \ if(n < 3) return false;\n    for(int i = 0; i < n - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    for(int i=0;i<s.length()-2;i++){\n\
    \        if(s[i]==s[i+1] && s[i+1]==s[i+2]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5zeuk3tj: /tmp/tmp5zeuk3tj.cpp:18: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    // Write your code here\n\
    \    if(s.length()<3)\n        return false;\n    for(int i=0;i<s.length()-2;i++)\n\
    \    {\n        if(s[i]==s[i+1] && s[i+1]==s[i+2])\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm17p9_ro: /tmp/tmpm17p9_ro.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]&&s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa_xk1mah: /tmp/tmpa_xk1mah.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085989
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ && s[i] == s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp87v84x6u: /tmp/tmp87v84x6u.cpp:19: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085989
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    \
    \    return false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        for(int i=0;i<s.length()-2;i++)\n\
    \        {\n            if(s[i]==s[i+1]&&s[i+1]==s[i+2])\n            {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpst584dah: /tmp/tmpst584dah.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085989
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\nbool is_happy(std::string s) {\n    if(s.length()<3)\n      \
    \  return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpx8m2cp: /tmp/tmpcpx8m2cp.cpp:22: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660085987
