language: cpp
name: HumanEval_132_is_nested
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int open = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            open++;\n        } else if (string[i]\
    \ == ']') {\n            if (open == 0) {\n                return false;\n   \
    \         }\n            open--;\n        }\n    }\n    return open == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjtkwnm4j: /tmp/tmpjtkwnm4j.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]=='}' && st.top()=='{'){\n\
    \                st.pop();\n            }\n            else if(string[i]==']'\
    \ && st.top()=='['){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph0yz_3tx: /tmp/tmph0yz_3tx.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            st.pop();\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptb_09h9u: /tmp/tmptb_09h9u.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            if(string[i]==')' && st.top()=='('){\n           \
    \     st.pop();\n            }\n            else if(string[i]=='}' && st.top()=='{'){\n\
    \                st.pop();\n            }\n            else if(string[i]==']'\
    \ && st.top()=='['){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpsl6maxfx: /tmp/tmpsl6maxfx.cpp:39: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='[' || string[i]=='{'){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]==']'\
    \ || string[i]=='}'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]==']' && st.top()=='['){\n\
    \                st.pop();\n            }\n            else if(string[i]=='}'\
    \ && st.top()=='{'){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkiolprg4: /tmp/tmpkiolprg4.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    // Write your code here\n    std::stack<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]=='('){\n            s.push(string[i]);\n\
    \        }\n        else if(string[i]==')'){\n            if(s.empty()){\n   \
    \             return false;\n            }\n            else{\n              \
    \  s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n   \
    \ auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps3n4bs96: /tmp/tmps3n4bs96.cpp:32: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            if(string[i]==')' && s.top()=='('){\n            \
    \    s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7kc4gjv4: /tmp/tmp7kc4gjv4.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]=='}' && st.top()=='{'){\n\
    \                st.pop();\n            }\n            else if(string[i]==']'\
    \ && st.top()=='['){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph0yz_3tx: /tmp/tmph0yz_3tx.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (auto c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyeiqz67s: /tmp/tmpyeiqz67s.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (auto c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyeiqz67s: /tmp/tmpyeiqz67s.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (auto c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyeiqz67s: /tmp/tmpyeiqz67s.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(char c : string) {\n        if(c\
    \ == '(' || c == '[' || c == '{') {\n            st.push(c);\n        } else if(c\
    \ == ')' || c == ']' || c == '}') {\n            if(st.empty()) {\n          \
    \      return false;\n            }\n            char top = st.top();\n      \
    \      if(c == ')' && top == '(') {\n                st.pop();\n            }\
    \ else if(c == ']' && top == '[') {\n                st.pop();\n            }\
    \ else if(c == '}' && top == '{') {\n                st.pop();\n            }\
    \ else {\n                return false;\n            }\n        }\n    }\n   \
    \ return st.empty();\n}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"\
    [[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\"))\
    \ == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu9u_fyzh: /tmp/tmpu9u_fyzh.cpp:33: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            if(string[i]==')' && s.top()=='('){\n            \
    \    s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7kc4gjv4: /tmp/tmp7kc4gjv4.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    // Write your code here\n    int n = string.length();\n    std::stack<char>\
    \ s;\n    for(int i=0;i<n;i++){\n        if(string[i]=='(' || string[i]=='{' ||\
    \ string[i]=='['){\n            s.push(string[i]);\n        }\n        else if(string[i]==')'\
    \ || string[i]=='}' || string[i]==']'){\n            if(s.empty()){\n        \
    \        return false;\n            }\n            else if(string[i]==')' && s.top()=='('){\n\
    \                s.pop();\n            }\n            else if(string[i]=='}' &&\
    \ s.top()=='{'){\n                s.pop();\n            }\n            else if(string[i]==']'\
    \ && s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6sijcco9: /tmp/tmp6sijcco9.cpp:43: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(char c : string) {\n        if(c\
    \ == '(') {\n            s.push(c);\n        } else if(c == ')') {\n         \
    \   if(s.empty()) {\n                return false;\n            } else {\n   \
    \             s.pop();\n            }\n        }\n    }\n    return s.empty();\n\
    }\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvtrd2tru: /tmp/tmpvtrd2tru.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (char c : string) {\n        if (c ==\
    \ '[') {\n            count++;\n        } else if (c == ']') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5onq3b28: /tmp/tmp5onq3b28.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(' || string[i] == '{' || string[i] == '[')\
    \ {\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ')' || string[i] == '}' || string[i] == ']') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else if(string[i]\
    \ == ')' && stack.top() == '(') {\n                stack.pop();\n            }\n\
    \            else if(string[i] == '}' && stack.top() == '{') {\n             \
    \   stack.pop();\n            }\n            else if(string[i] == ']' && stack.top()\
    \ == '[') {\n                stack.pop();\n            }\n            else {\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.empty())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy29hw6bg: /tmp/tmpy29hw6bg.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='[' || string[i]=='{'){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]==']'\
    \ || string[i]=='}'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]==']' && st.top()=='['){\n\
    \                st.pop();\n            }\n            else if(string[i]=='}'\
    \ && st.top()=='{'){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkiolprg4: /tmp/tmpkiolprg4.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(' || string[i] == '[' || string[i] == '{')\
    \ {\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ')' || string[i] == ']' || string[i] == '}') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else if(string[i]\
    \ == ')' && stack.top() == '(') {\n                stack.pop();\n            }\n\
    \            else if(string[i] == ']' && stack.top() == '[') {\n             \
    \   stack.pop();\n            }\n            else if(string[i] == '}' && stack.top()\
    \ == '{') {\n                stack.pop();\n            }\n            else {\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.empty())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24sk7f7r: /tmp/tmp24sk7f7r.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]=='}' && st.top()=='{'){\n\
    \                st.pop();\n            }\n            else if(string[i]==']'\
    \ && st.top()=='['){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph0yz_3tx: /tmp/tmph0yz_3tx.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(auto c : string) {\n       \
    \ if(c == '(' || c == '[' || c == '{') {\n            stack.push(c);\n       \
    \ } else if(c == ')' || c == ']' || c == '}') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            char top = stack.top();\n\
    \            if(top == '(' && c == ')') {\n                stack.pop();\n    \
    \        } else if(top == '[' && c == ']') {\n                stack.pop();\n \
    \           } else if(top == '{' && c == '}') {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.empty();\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplaj50_8i: /tmp/tmplaj50_8i.cpp:33: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(auto c : string) {\n       \
    \ if(c == '(' || c == '[' || c == '{') {\n            stack.push(c);\n       \
    \ } else if(c == ')' || c == ']' || c == '}') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            char top = stack.top();\n\
    \            if(c == ')' && top == '(') {\n                stack.pop();\n    \
    \        } else if(c == ']' && top == '[') {\n                stack.pop();\n \
    \           } else if(c == '}' && top == '{') {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.empty();\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp20pdm2n2: /tmp/tmp20pdm2n2.cpp:33: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if(string[i] == ')') {\n            if(stack.empty()) {\n    \
    \            return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpod6fsvpb: /tmp/tmpod6fsvpb.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(') {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ')') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.empty();\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp114gn7yw: /tmp/tmp114gn7yw.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(')\n            s.push(string[i]);\n        else if(string[i]==')'){\n\
    \            if(s.empty())\n                return false;\n            else\n\
    \                s.pop();\n        }\n    }\n    if(s.empty())\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppdlxtdnl: /tmp/tmppdlxtdnl.cpp:26: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(') {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ')') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else {\n      \
    \          stack.pop();\n            }\n        }\n    }\n    return stack.empty();\n\
    }\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9jl7q6ak: /tmp/tmp9jl7q6ak.cpp:26: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(' || string[i] == '[' || string[i] == '{')\
    \ {\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ')' || string[i] == ']' || string[i] == '}') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else if(string[i]\
    \ == ')' && stack.top() == '(') {\n                stack.pop();\n            }\n\
    \            else if(string[i] == ']' && stack.top() == '[') {\n             \
    \   stack.pop();\n            }\n            else if(string[i] == '}' && stack.top()\
    \ == '{') {\n                stack.pop();\n            }\n            else {\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.empty())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24sk7f7r: /tmp/tmp24sk7f7r.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if(string[i] == ')') {\n            if(stack.empty()) {\n    \
    \            return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpod6fsvpb: /tmp/tmpod6fsvpb.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n  int count = 0;\n  for (int i = 0; i < string.length(); i++) {\n\
    \    if (string[i] == '[') {\n      count++;\n    } else if (string[i] == ']')\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  return count == 0;\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp019mf99e: /tmp/tmp019mf99e.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(' || string[i] == '{' || string[i] == '[')\
    \ {\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == ')' || string[i] == '}' || string[i] == ']') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else if(string[i]\
    \ == ')' && stack.top() == '(') {\n                stack.pop();\n            }\n\
    \            else if(string[i] == '}' && stack.top() == '{') {\n             \
    \   stack.pop();\n            }\n            else if(string[i] == ']' && stack.top()\
    \ == '[') {\n                stack.pop();\n            }\n            else {\n\
    \                return false;\n            }\n        }\n    }\n    if(stack.empty())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy29hw6bg: /tmp/tmpy29hw6bg.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '(') {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ')') {\n            if(stack.empty())\
    \ {\n                return false;\n            }\n            else {\n      \
    \          stack.pop();\n            }\n        }\n    }\n    return stack.empty();\n\
    }\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9jl7q6ak: /tmp/tmp9jl7q6ak.cpp:26: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('||string[i]=='{'||string[i]=='['){\n            st.push(string[i]);\n\
    \        }\n        else if(string[i]==')'||string[i]=='}'||string[i]==']'){\n\
    \            if(st.empty()){\n                return false;\n            }\n \
    \           else if(string[i]==')'&&st.top()=='('){\n                st.pop();\n\
    \            }\n            else if(string[i]=='}'&&st.top()=='{'){\n        \
    \        st.pop();\n            }\n            else if(string[i]==']'&&st.top()=='['){\n\
    \                st.pop();\n            }\n            else{\n               \
    \ return false;\n            }\n        }\n    }\n    if(st.empty()){\n      \
    \  return true;\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg23_m1wk: /tmp/tmpg23_m1wk.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int n = string.length();\n    std::stack<char> s;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(string[i] == '(' || string[i] == '{' || string[i]\
    \ == '[') {\n            s.push(string[i]);\n        }\n        else if(string[i]\
    \ == ')' || string[i] == '}' || string[i] == ']') {\n            if(s.empty())\
    \ {\n                return false;\n            }\n            else if(string[i]\
    \ == ')' && s.top() == '(') {\n                s.pop();\n            }\n     \
    \       else if(string[i] == '}' && s.top() == '{') {\n                s.pop();\n\
    \            }\n            else if(string[i] == ']' && s.top() == '[') {\n  \
    \              s.pop();\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n  \
    \  auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3pe6urpc: /tmp/tmp3pe6urpc.cpp:42: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++)\n\t\
    {\n\t\tif(string[i]=='(')\n\t\t{\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==')')\n\
    \t\t{\n\t\t\tif(st.empty())\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(st.empty())\n\t{\n\t\treturn\
    \ true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkyul_s1f: /tmp/tmpkyul_s1f.cpp:38: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (char c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1ujw1ca: /tmp/tmpo1ujw1ca.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            else{\n                s.pop();\n       \
    \     }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph30ds7tl: /tmp/tmph30ds7tl.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            s.push(string[i]);\n        }\n    \
    \    else if(string[i]==')'){\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzvg44nh: /tmp/tmpwzvg44nh.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (auto c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyeiqz67s: /tmp/tmpyeiqz67s.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='[' || string[i]=='{'){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]==']'\
    \ || string[i]=='}'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]==']' && s.top()=='['){\n\
    \                s.pop();\n            }\n            else if(string[i]=='}' &&\
    \ s.top()=='{'){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9bmdbqwy: /tmp/tmp9bmdbqwy.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (auto c : string) {\n      \
    \  if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyeiqz67s: /tmp/tmpyeiqz67s.cpp:23: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n  int count = 0;\n  for (int i = 0; i < string.length(); i++) {\n\
    \    if (string[i] == '[') {\n      count++;\n    } else if (string[i] == ']')\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  return count == 0;\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp019mf99e: /tmp/tmp019mf99e.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ s.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && s.top()=='('){\n       \
    \         s.pop();\n            }\n            else if(string[i]=='}' && s.top()=='{'){\n\
    \                s.pop();\n            }\n            else if(string[i]==']' &&\
    \ s.top()=='['){\n                s.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf80c8eqj: /tmp/tmpf80c8eqj.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n  int count = 0;\n  for (int i = 0; i < string.length(); i++) {\n\
    \    if (string[i] == '[') {\n      count++;\n    } else if (string[i] == ']')\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  return count == 0;\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp019mf99e: /tmp/tmp019mf99e.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else{\n                st.pop();\n      \
    \      }\n        }\n    }\n    if(st.empty()){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpaa8cqkcb: /tmp/tmpaa8cqkcb.cpp:31: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='['){\n           \
    \ st.push(string[i]);\n        }\n        else if(string[i]==')' || string[i]=='}'\
    \ || string[i]==']'){\n            if(st.empty()){\n                return false;\n\
    \            }\n            else if(string[i]==')' && st.top()=='('){\n      \
    \          st.pop();\n            }\n            else if(string[i]=='}' && st.top()=='{'){\n\
    \                st.pop();\n            }\n            else if(string[i]==']'\
    \ && st.top()=='['){\n                st.pop();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"))\
    \ == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph0yz_3tx: /tmp/tmph0yz_3tx.cpp:41: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='('){\n            st.push(string[i]);\n        }\n   \
    \     else if(string[i]==')'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            st.pop();\n        }\n    }\n    if(st.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n\
    \    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"\
    [][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"\
    []]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptb_09h9u: /tmp/tmptb_09h9u.cpp:27: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='(' || string[i]=='{' || string[i]=='[')\n            s.push(string[i]);\n\
    \        else if(string[i]==')' || string[i]=='}' || string[i]==']'){\n      \
    \      if(s.empty())\n                return false;\n            else if(string[i]==')'\
    \ && s.top()=='(')\n                s.pop();\n            else if(string[i]=='}'\
    \ && s.top()=='{')\n                s.pop();\n            else if(string[i]==']'\
    \ && s.top()=='[')\n                s.pop();\n            else\n             \
    \   return false;\n        }\n    }\n    if(s.empty())\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = is_nested;\n\
    \    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"\
    []\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
    []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
    \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\"))\
    \ == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
    [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpen4y2j3j: /tmp/tmpen4y2j3j.cpp:33: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == '[') {\n            count++;\n        } else if\
    \ (string[i] == ']') {\n            count--;\n        }\n        if (count < 0)\
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    int main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\"\
    )) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24dodmfd: /tmp/tmp24dodmfd.cpp:24: int main(): Assertion `candidate(("[][]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a string as input which contains only square brackets.\n// The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    // where at least one bracket in the subsequence is nested.\nbool is_nested(std::string\
    \ string) {\n    std::stack<char> stack;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == '(') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == ')') {\n            if (stack.empty()) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.empty();\n}\nint main() {\n\
    \    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n\
    \    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"\
    [][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"\
    [[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\"\
    )) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"\
    [[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"\
    ]]]]]]]]\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkw2rhjl2: /tmp/tmpkw2rhjl2.cpp:24: int main(): Assertion `candidate(("[]]]]]]][[[[[]"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660121108
