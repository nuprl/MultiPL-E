name: HumanEval_1_separate_paren_groups
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string containing multiple groups of nested parentheses. Your goal is to\n//\
  \ separate those group into separate strings and return the list of those.\n// Separate\
  \ groups are balanced (each open brace is properly closed) and not nested within\
  \ each other\n// Ignore any spaces in the input string.\nstd::vector<std::string>\
  \ separate_paren_groups(std::string paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<std::string>({\"(()())\", \"((()))\"\
  , \"()\", \"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
  )) == (std::vector<std::string>({\"()\", \"(())\", \"((()))\", \"(((())))\"})));\n\
  \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({\"(()(())((())))\"\
  })));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({\"\
  ()\", \"(())\", \"(()())\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    std::string temp;\n    int\
    \ open_paren = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n     \
    \   if (paren_string[i] == '(') {\n            open_paren++;\n            temp.push_back(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            open_paren--;\n   \
    \         temp.push_back(paren_string[i]);\n        } else if (paren_string[i]\
    \ == ' ') {\n            continue;\n        } else {\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (open_paren == 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        } else if (paren_string[i] == ' ') {\n \
    \           continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ' ') {\n            continue;\n\
    \        }\n        else {\n            assert(false);\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp.clear();\n  \
    \      }\n    }\n    return result;", "    // Your code here\n    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++){\n        if(paren_string[i] == '('){\n            count++;\n         \
    \   temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else if(paren_string[i] == ' '){\n            continue;\n        }\n     \
    \   else{\n            temp += paren_string[i];\n        }\n        if(count ==\
    \ 0){\n            result.push_back(temp);\n            temp = \"\";\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    int\
    \ start = 0;\n    int end = 0;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            if (count == 0) {\n\
    \                start = i;\n            }\n            count++;\n        } else\
    \ if (paren_string[i] == ')') {\n            count--;\n            if (count ==\
    \ 0) {\n                end = i;\n                result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n            }\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else {\n            if(count == 0) {\n                continue;\n\
    \            }\n            else {\n                temp.push_back(paren_string[i]);\n\
    \            }\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "\tstd::vector<std::string> result;\n\
    \tstd::string temp = \"\";\n\tint count = 0;\n\tfor (int i = 0; i < paren_string.length();\
    \ i++) {\n\t\tif (paren_string[i] == '(') {\n\t\t\tcount++;\n\t\t\ttemp += paren_string[i];\n\
    \t\t}\n\t\telse if (paren_string[i] == ')') {\n\t\t\tcount--;\n\t\t\ttemp += paren_string[i];\n\
    \t\t}\n\t\telse if (paren_string[i] == ' ') {\n\t\t\tcontinue;\n\t\t}\n\t\telse\
    \ {\n\t\t\ttemp += paren_string[i];\n\t\t}\n\t\tif (count == 0) {\n\t\t\tresult.push_back(temp);\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp=\"\";\n            }\n        }\n        else if(paren_string[i]!=' '){\n\
    \            temp+=paren_string[i];\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::stack<char> stk;\n    std::string\
    \ temp;\n    for(int i=0;i<paren_string.length();i++){\n        if(paren_string[i]=='('){\n\
    \            stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]==')'){\n\
    \            stk.pop();\n            if(stk.empty()){\n                result.push_back(temp);\n\
    \                temp=\"\";\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp = \"\";\n    int count\
    \ = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp = \"\";\n    for(int\
    \ i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(')\
    \ {\n            st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            if(st.empty()) {\n           \
    \     result.push_back(temp);\n                temp = \"\";\n            }\n \
    \       }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        } else if (paren_string[i] == ' ') {\n \
    \           continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    int start = 0;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \  } else if (paren_string[i] == ')') {\n            count--;\n        }\n   \
    \     if (count == 0) {\n            result.push_back(paren_string.substr(start,\
    \ i - start + 1));\n            start = i + 1;\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp != \"\") {\n            result.push_back(temp);\n    \
    \        temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        } else if (paren_string[i] == ' ') {\n \
    \           continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          if(stk.empty()){\n                result.push_back(temp);\n       \
    \         temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            if (open == 0) {\n\
    \                temp.clear();\n            }\n            open++;\n         \
    \   temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n \
    \           open--;\n            temp += paren_string[i];\n            if (open\
    \ == 0) {\n                result.push_back(temp);\n            }\n        } else\
    \ if (paren_string[i] != ' ') {\n            temp += paren_string[i];\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0 && temp.size() > 0) {\n            result.push_back(temp);\n          \
    \  temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          temp+=paren_string[i];\n        }\n        else{\n            temp+=paren_string[i];\n\
    \        }\n        if(stk.empty()){\n            result.push_back(temp);\n  \
    \          temp=\"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          if(stk.empty()){\n                result.push_back(temp);\n       \
    \         temp=\"\";\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n  \
    \      if(paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        else\
    \ {\n            temp += paren_string[i];\n        }\n        if(count == 0) {\n\
    \            result.push_back(temp);\n            temp = \"\";\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else if(paren_string[i] == ' ') {\n            continue;\n        }\n    \
    \    else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp = \"\";\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp != \"\") {\n            result.push_back(temp);\n    \
    \        temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open_paren_count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            open_paren_count++;\n            temp += paren_string[i];\n \
    \       } else if (paren_string[i] == ')') {\n            open_paren_count--;\n\
    \            temp += paren_string[i];\n        } else if (paren_string[i] == '\
    \ ') {\n            continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open_paren_count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp = \"\";\n    for(int\
    \ i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(')\
    \ {\n            st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            if(st.empty()) {\n           \
    \     result.push_back(temp);\n                temp = \"\";\n            }\n \
    \       }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else {\n            if(count == 0) {\n                result.push_back(temp);\n\
    \                temp.clear();\n            }\n            else {\n          \
    \      temp.push_back(paren_string[i]);\n            }\n        }\n    }\n   \
    \ if(!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::stack<char> stk;\n    std::string\
    \ temp;\n    for(int i=0;i<paren_string.length();i++){\n        if(paren_string[i]=='('){\n\
    \            stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]==')'){\n\
    \            stk.pop();\n            if(stk.empty()){\n                result.push_back(temp);\n\
    \                temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::string temp;\n  int count = 0;\n  for (int i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      count++;\n      temp += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      count--;\n      temp += paren_string[i];\n\
    \    } else {\n      temp += paren_string[i];\n    }\n    if (count == 0 && temp.size()\
    \ > 0) {\n      result.push_back(temp);\n      temp = \"\";\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    std::stack<char> stk;\n\
    \    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n      \
    \  if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n       \
    \ }\n        else if(paren_string[i]==')'){\n            stk.pop();\n        \
    \    if(stk.empty()){\n                result.push_back(temp);\n             \
    \   temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            if(st.empty()){\n\
    \                return result;\n            }\n            else{\n          \
    \      st.pop();\n                if(st.empty()){\n                    result.push_back(temp);\n\
    \                    temp.clear();\n                }\n            }\n       \
    \ }\n        else if(paren_string[i]!=' '){\n            temp.push_back(paren_string[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    int start = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            st.pop();\n       \
    \ }\n        if (st.empty()) {\n            result.push_back(paren_string.substr(start,\
    \ i - start + 1));\n            start = i + 1;\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            open++;\n        \
    \    temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')')\
    \ {\n            open--;\n            temp += paren_string[i];\n        }\n  \
    \      else {\n            temp += paren_string[i];\n        }\n        if(open\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp = \"\";\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            open++;\n        \
    \    temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            open--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ' ') {\n            continue;\n\
    \        }\n        else {\n            temp.push_back(paren_string[i]);\n   \
    \     }\n        if(open == 0) {\n            result.push_back(temp);\n      \
    \      temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open_paren = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open_paren++;\n \
    \           temp += paren_string[i];\n        } else if (paren_string[i] == ')')\
    \ {\n            open_paren--;\n            temp += paren_string[i];\n       \
    \ } else if (paren_string[i] == ' ') {\n            continue;\n        } else\
    \ {\n            temp += paren_string[i];\n        }\n        if (open_paren ==\
    \ 0) {\n            result.push_back(temp);\n            temp = \"\";\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else if(paren_string[i] == ' ') {\n            continue;\n        }\n    \
    \    else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp=\"\";\n            }\n        }\n        else if(paren_string[i]!=' '){\n\
    \            temp+=paren_string[i];\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::string temp;\n    int open_paren_count\
    \ = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_paren_count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open_paren_count--;\n\
    \            temp += paren_string[i];\n        } else if (paren_string[i] == '\
    \ ') {\n            continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open_paren_count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open_count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         open_count++;\n            temp += paren_string[i];\n        } else\
    \ if (paren_string[i] == ')') {\n            open_count--;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ' ') {\n           \
    \ continue;\n        } else {\n            temp += paren_string[i];\n        }\n\
    \        if (open_count == 0) {\n            result.push_back(temp);\n       \
    \     temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open_count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         open_count++;\n            temp += paren_string[i];\n        } else\
    \ if (paren_string[i] == ')') {\n            open_count--;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ' ') {\n           \
    \ continue;\n        } else {\n            assert(false);\n        }\n       \
    \ if (open_count == 0) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          if(stk.empty()){\n                result.push_back(temp);\n       \
    \         temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::stack<char> st;\n    std::string\
    \ temp;\n    for(int i=0;i<paren_string.length();i++){\n        if(paren_string[i]=='('){\n\
    \            st.push(paren_string[i]);\n        }\n        else if(paren_string[i]==')'){\n\
    \            st.pop();\n            if(st.empty()){\n                result.push_back(temp);\n\
    \                temp=\"\";\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else {\n            temp.push_back(paren_string[i]);\n   \
    \     }\n        if(count == 0) {\n            result.push_back(temp);\n     \
    \       temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open_paren_count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            open_paren_count++;\n            temp += paren_string[i];\n \
    \       } else if (paren_string[i] == ')') {\n            open_paren_count--;\n\
    \            temp += paren_string[i];\n        } else if (paren_string[i] == '\
    \ ') {\n            continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open_paren_count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            if(stk.empty()){\n\
    \                return result;\n            }\n            else{\n          \
    \      stk.pop();\n                if(stk.empty()){\n                    result.push_back(temp);\n\
    \                    temp=\"\";\n                }\n            }\n        }\n\
    \        else if(paren_string[i]!=' '){\n            temp+=paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         count++;\n            if (count == 1) {\n                start = i;\n\
    \            }\n        }\n        if (paren_string[i] == ')') {\n           \
    \ count--;\n            if (count == 0) {\n                end = i;\n        \
    \        result.push_back(paren_string.substr(start, end - start + 1));\n    \
    \        }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> groups;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        } else {\n\
    \            temp += paren_string[i];\n        }\n        if (count == 0) {\n\
    \            groups.push_back(temp);\n            temp = \"\";\n        }\n  \
    \  }\n    return groups;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            st.pop();\n    \
    \        if(st.empty()){\n                result.push_back(temp);\n          \
    \      temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    // TODO: Implement this function\n    std::vector<std::string> result;\n  \
    \  std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++){\n        if(paren_string[i] == '('){\n            count++;\n         \
    \   temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else{\n            temp += paren_string[i];\n        }\n        if(count ==\
    \ 0 && temp.size() != 0){\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp = \"\";\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            if(stk.empty()) {\n                result.push_back(temp);\n    \
    \            temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;", "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < paren_string.length(); i++) {\n\t\tif (paren_string[i]\
    \ == '(') {\n\t\t\tcount++;\n\t\t\ttemp += paren_string[i];\n\t\t}\n\t\telse if\
    \ (paren_string[i] == ')') {\n\t\t\tcount--;\n\t\t\ttemp += paren_string[i];\n\
    \t\t}\n\t\telse {\n\t\t\ttemp += paren_string[i];\n\t\t}\n\t\tif (count == 0)\
    \ {\n\t\t\tresult.push_back(temp);\n\t\t\ttemp = \"\";\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int open_count\
    \ = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open_count--;\n   \
    \         temp += paren_string[i];\n        } else if (paren_string[i] == ' ')\
    \ {\n            continue;\n        } else {\n            assert(false);\n   \
    \     }\n        if (open_count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++) {\n    \
    \    if(paren_string[i] == '(') {\n            count++;\n            temp += paren_string[i];\n\
    \        }\n        else if(paren_string[i] == ')') {\n            count--;\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp.clear();\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::string temp;\n  int count = 0;\n  for (int i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      count++;\n      temp += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      count--;\n      temp += paren_string[i];\n\
    \    } else {\n      temp += paren_string[i];\n    }\n    if (count == 0 && temp\
    \ != \"\") {\n      result.push_back(temp);\n      temp = \"\";\n    }\n  }\n\
    \  return result;", "    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else if(paren_string[i] == ' ') {\n            continue;\n        }\n    \
    \    else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> paren_groups;\n\
    \    std::string group;\n    int open_count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open_count++;\n \
    \           group += paren_string[i];\n        } else if (paren_string[i] == ')')\
    \ {\n            open_count--;\n            group += paren_string[i];\n      \
    \  } else {\n            group += paren_string[i];\n        }\n        if (open_count\
    \ == 0) {\n            paren_groups.push_back(group);\n            group = \"\"\
    ;\n        }\n    }\n    return paren_groups;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          count++;\n            temp += paren_string[i];\n        }\n       \
    \ else if(paren_string[i] == ')') {\n            count--;\n            temp +=\
    \ paren_string[i];\n        }\n        else {\n            temp += paren_string[i];\n\
    \        }\n        if(count == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ' ') {\n            continue;\n        } else {\n      \
    \      temp += paren_string[i];\n        }\n        if (open == 0) {\n       \
    \     result.push_back(temp);\n            temp = \"\";\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++) {\n    \
    \    if(paren_string[i] == '(') {\n            count++;\n            temp += paren_string[i];\n\
    \        }\n        else if(paren_string[i] == ')') {\n            count--;\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(count == 0 && temp.size() >\
    \ 0) {\n            result.push_back(temp);\n            temp.clear();\n     \
    \   }\n    }\n    return result;", "    std::vector<std::string> result;\n   \
    \ std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            if(st.empty()){\n\
    \                return result;\n            }\n            else{\n          \
    \      st.pop();\n                temp+=paren_string[i];\n            }\n    \
    \    }\n        else{\n            temp+=paren_string[i];\n        }\n    }\n\
    \    if(st.empty()){\n        result.push_back(temp);\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string s;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            count--;\n       \
    \ }\n        s += paren_string[i];\n        if(count == 0) {\n            result.push_back(s);\n\
    \            s = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            st.pop();\n    \
    \        if(st.empty()){\n                result.push_back(temp);\n          \
    \      temp=\"\";\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int open_paren\
    \ = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_paren++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open_paren--;\n   \
    \         temp += paren_string[i];\n        } else if (paren_string[i] == ' ')\
    \ {\n            continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open_paren == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int open_count\
    \ = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open_count--;\n   \
    \         temp += paren_string[i];\n        } else if (paren_string[i] == ' ')\
    \ {\n            continue;\n        } else {\n            assert(false);\n   \
    \     }\n        if (open_count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            open++;\n        \
    \    temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')')\
    \ {\n            open--;\n            temp += paren_string[i];\n        }\n  \
    \      else if(paren_string[i] == ' ') {\n            continue;\n        }\n \
    \       else {\n            temp += paren_string[i];\n        }\n        if(open\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          temp+=paren_string[i];\n        }\n        else{\n            temp+=paren_string[i];\n\
    \        }\n        if(stk.empty()){\n            result.push_back(temp);\n  \
    \          temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            open++;\n        \
    \    temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')')\
    \ {\n            open--;\n            temp += paren_string[i];\n        }\n  \
    \      else if(paren_string[i] == ' ') {\n            continue;\n        }\n \
    \       else {\n            temp += paren_string[i];\n        }\n        if(open\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> ret;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     if(count == 1) {\n                temp = \"\";\n            }\n        }\
    \ else if(paren_string[i] == ')') {\n            count--;\n            if(count\
    \ == 0) {\n                ret.push_back(temp);\n            }\n        } else\
    \ if(count > 0) {\n            temp += paren_string[i];\n        }\n    }\n  \
    \  return ret;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n  \
    \      if(paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        else\
    \ if(paren_string[i] == ' ') {\n            continue;\n        }\n        else\
    \ {\n            temp += paren_string[i];\n        }\n        if(count == 0) {\n\
    \            result.push_back(temp);\n            temp = \"\";\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         if (count == 0) {\n                start = i;\n            }\n     \
    \       count++;\n        } else if (paren_string[i] == ')') {\n            count--;\n\
    \            if (count == 0) {\n                end = i;\n                result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n            }\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::string temp;\n    int open = 0;\n\
    \    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            open++;\n            temp += paren_string[i];\n     \
    \   }\n        else if(paren_string[i] == ')') {\n            open--;\n      \
    \      temp += paren_string[i];\n        }\n        else {\n            temp +=\
    \ paren_string[i];\n        }\n        if(open == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            st.pop();\n    \
    \        if(st.empty()){\n                result.push_back(temp);\n          \
    \      temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            if(st.empty()){\n\
    \                return result;\n            }\n            else{\n          \
    \      st.pop();\n                temp+=paren_string[i];\n            }\n    \
    \    }\n        else{\n            temp+=paren_string[i];\n        }\n    }\n\
    \    if(!st.empty()){\n        return result;\n    }\n    result.push_back(temp);\n\
    \    return result;", "    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n  \
    \      if(paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            count--;\n\
    \            temp.push_back(paren_string[i]);\n        }\n        else {\n   \
    \         temp.push_back(paren_string[i]);\n        }\n        if(count == 0)\
    \ {\n            result.push_back(temp);\n            temp.clear();\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int open_paren = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open_paren++;\n \
    \           temp += paren_string[i];\n        } else if (paren_string[i] == ')')\
    \ {\n            open_paren--;\n            temp += paren_string[i];\n       \
    \ } else if (paren_string[i] == ' ') {\n            continue;\n        } else\
    \ {\n            temp += paren_string[i];\n        }\n        if (open_paren ==\
    \ 0) {\n            result.push_back(temp);\n            temp = \"\";\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   else {\n            temp += paren_string[i];\n        }\n        if(count\
    \ == 0) {\n            result.push_back(temp);\n            temp = \"\";\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp=\"\";\n            }\n        }\n        else if(paren_string[i]!=' '){\n\
    \            temp+=paren_string[i];\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n \
    \   int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            if (count == 0) {\n          \
    \      start = i;\n            }\n            count++;\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            if (count == 0) {\n           \
    \     end = i;\n                result.push_back(paren_string.substr(start, end\
    \ - start + 1));\n            }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          count++;\n            temp += paren_string[i];\n        }\n       \
    \ else if(paren_string[i] == ')') {\n            count--;\n            temp +=\
    \ paren_string[i];\n        }\n        else if(paren_string[i] == ' ') {\n   \
    \         continue;\n        }\n        else {\n            temp += paren_string[i];\n\
    \        }\n        if(count == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ res;\n    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            if(st.top()=='('){\n\
    \                st.pop();\n                if(st.empty()){\n                \
    \    res.push_back(temp);\n                    temp=\"\";\n                }\n\
    \            }\n        }\n        else{\n            if(!st.empty()){\n     \
    \           temp+=paren_string[i];\n            }\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> result;\n    std::stack<char> st;\n   \
    \ std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n        if(paren_string[i]=='('){\n\
    \            st.push(paren_string[i]);\n        }\n        else if(paren_string[i]==')'){\n\
    \            st.pop();\n            if(st.empty()){\n                result.push_back(temp);\n\
    \                temp=\"\";\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int open = 0;\n\
    \    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open++;\n            temp += paren_string[i];\n     \
    \   } else if (paren_string[i] == ')') {\n            open--;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ' ') {\n        \
    \    continue;\n        } else {\n            temp += paren_string[i];\n     \
    \   }\n        if (open == 0) {\n            result.push_back(temp);\n       \
    \     temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp=\"\";\n            }\n        }\n        else if(paren_string[i]!=' '){\n\
    \            temp+=paren_string[i];\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            count--;\n\
    \            temp.push_back(paren_string[i]);\n        }\n        else {\n   \
    \         temp.push_back(paren_string[i]);\n        }\n        if(count == 0)\
    \ {\n            result.push_back(temp);\n            temp.clear();\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            open++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    open--;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ' ') {\n            continue;\n        } else {\n            temp += paren_string[i];\n\
    \        }\n        if (open == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ res;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            res.push_back(temp);\n    \
    \        temp.clear();\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            if (count == 0) {\n                start = i;\n            }\n\
    \            count++;\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            if (count == 0) {\n                end = i;\n     \
    \           result.push_back(paren_string.substr(start, end - start + 1));\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            s.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            s.pop();\n      \
    \      if(s.empty()){\n                result.push_back(temp);\n             \
    \   temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         count++;\n            if (count == 1) {\n                start = i;\n\
    \            }\n        }\n        if (paren_string[i] == ')') {\n           \
    \ count--;\n            if (count == 0) {\n                end = i;\n        \
    \        result.push_back(paren_string.substr(start, end - start + 1));\n    \
    \        }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          count++;\n            temp += paren_string[i];\n        }\n       \
    \ else if(paren_string[i] == ')') {\n            count--;\n            temp +=\
    \ paren_string[i];\n        }\n        else {\n            temp += paren_string[i];\n\
    \        }\n        if(count == 0) {\n            result.push_back(temp);\n  \
    \          temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ groups;\n    std::string group;\n    int open_parens = 0;\n    for (int i =\
    \ 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            open_parens++;\n            group += paren_string[i];\n        }\
    \ else if (paren_string[i] == ')') {\n            open_parens--;\n           \
    \ group += paren_string[i];\n            if (open_parens == 0) {\n           \
    \     groups.push_back(group);\n                group = \"\";\n            }\n\
    \        } else if (paren_string[i] != ' ') {\n            group += paren_string[i];\n\
    \        }\n    }\n    return groups;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ' ') {\n            continue;\n\
    \        }\n        else {\n            temp.push_back(paren_string[i]);\n   \
    \     }\n        if(count == 0) {\n            result.push_back(temp);\n     \
    \       temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else {\n            temp.push_back(paren_string[i]);\n   \
    \     }\n        if(count == 0) {\n            result.push_back(temp);\n     \
    \       temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            if (count == 0) {\n                start = i;\n            }\n\
    \            count++;\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            if (count == 0) {\n                end = i;\n     \
    \           result.push_back(paren_string.substr(start, end - start + 1));\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            if(stk.empty()){\n\
    \                return result;\n            }\n            else{\n          \
    \      stk.pop();\n                temp+=paren_string[i];\n            }\n   \
    \     }\n        else{\n            temp+=paren_string[i];\n        }\n    }\n\
    \    if(stk.empty()){\n        result.push_back(temp);\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp = \"\";\n    int count\
    \ = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n  \
    \      }\n        else if(paren_string[i]==')'){\n            st.pop();\n    \
    \        if(st.empty()){\n                result.push_back(temp);\n          \
    \      temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else {\n            temp += paren_string[i];\n        }\n       \
    \ if(count == 0 && temp != \"\") {\n            result.push_back(temp);\n    \
    \        temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp += paren_string[i];\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        else if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        else {\n            temp += paren_string[i];\n        }\n      \
    \  if(count == 0) {\n            result.push_back(temp);\n            temp = \"\
    \";\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            count++;\n       \
    \     temp.push_back(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else {\n            temp.push_back(paren_string[i]);\n   \
    \     }\n        if(count == 0) {\n            result.push_back(temp);\n     \
    \       temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i=0;i<paren_string.length();i++){\n\
    \        if(paren_string[i]=='('){\n            stk.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i]==')'){\n            stk.pop();\n  \
    \          if(stk.empty()){\n                result.push_back(temp);\n       \
    \         temp.clear();\n            }\n        }\n        else if(paren_string[i]!='\
    \ '){\n            temp+=paren_string[i];\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ')') {\n            count--;\n    \
    \        temp += paren_string[i];\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(count == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
