language: cpp
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int cnt = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            cnt++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return cnt == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    bool is_prime = true;\n\
    \    int counter = 0;\n    for (int i = 2; i <= a; i++) {\n        for (int j\
    \ = 2; j <= i; j++) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            counter++;\n            if (counter == 3) {\n               \
    \ return true;\n            }\n        }\n        is_prime = true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpkh359qc_: /tmp/tmpkh359qc_.cpp:31: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    if (a == 1) {\n     \
    \   return false;\n    }\n    int count = 0;\n    for (int i = 2; i <= a; i++)\
    \ {\n        if (a % i == 0) {\n            count++;\n            a /= i;\n  \
    \          i--;\n        }\n    }\n    return count == 3;\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (j = 2; j <= a; j++) {\n\
    \t\t\t\tif (a % j == 0) {\n\t\t\t\t\tfor (k = 2; k <= a; k++) {\n\t\t\t\t\t\t\
    if (a % k == 0) {\n\t\t\t\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\t\t\treturn\
    \ true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp74mwsbpf: /tmp/tmp74mwsbpf.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i <= a; i++) {\n\t\tfor (j = 2; j <= a; j++) {\n\t\t\tfor (k = 2; k <=\
    \ a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpo6rrmm49: /tmp/tmpo6rrmm49.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\twhile (a\
    \ != 1) {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\ti = 2;\n\t\t}\n\t\telse\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpvqu415kf: /tmp/tmpvqu415kf.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int c = 0;\n    for (int\
    \ i = 2; i < a; i++) {\n        if (a % i == 0) {\n            c++;\n        }\n\
    \    }\n    if (c == 2) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1_vcif2p: /tmp/tmp1_vcif2p.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int cnt = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            cnt++;\n \
    \           a /= i;\n            i--;\n        }\n    }\n    return cnt == 2;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i < a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    if (count == 2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprg0zwkfd: /tmp/tmprg0zwkfd.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    if(a == 1)\n        return false;\n    for(int i = 2;\
    \ i <= a; i++){\n        if(a % i == 0){\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\
    \tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int cnt = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            cnt++;\n \
    \           a /= i;\n            i--;\n        }\n    }\n    return cnt == 2;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\
    \tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k, count = 0;\n\
    \tfor (i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (j = 2; j <= i\
    \ / 2; j++) {\n\t\t\t\tif (i % j == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (count == 0) {\n\t\t\t\tfor (k = 2; k <= a / 2; k++)\
    \ {\n\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tbreak;\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp8pv6_9ww: /tmp/tmp8pv6_9ww.cpp:35: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i < a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    if (count == 2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprg0zwkfd: /tmp/tmprg0zwkfd.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\twhile (a\
    \ > 1) {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\ti = 2;\n\t\t}\n\t\telse\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (i == 5) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpovlkq2nj: /tmp/tmpovlkq2nj.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tfor (int i = 2; i < a;\
    \ i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (int j = 2; j < a; j++) {\n\t\t\t\t\
    if (a % j == 0) {\n\t\t\t\t\tfor (int k = 2; k < a; k++) {\n\t\t\t\t\t\tif (a\
    \ % k == 0) {\n\t\t\t\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\t\t\treturn true;\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprm7l9fmu: /tmp/tmprm7l9fmu.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint i,j,k;\n\tfor(i=2;i<=a/2;i++)\n\t{\n\t\tfor(j=2;j<=a/2;j++)\n\t\t{\n\t\t\
    \tfor(k=2;k<=a/2;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbwmn0tdl: /tmp/tmpbwmn0tdl.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    for (int i = 2; i < a;\
    \ i++) {\n        if (a % i == 0) {\n            for (int j = 2; j < a; j++) {\n\
    \                if (a % j == 0) {\n                    for (int k = 2; k < a;\
    \ k++) {\n                        if (a % k == 0) {\n                        \
    \    if (i * j * k == a) {\n                                return true;\n   \
    \                         }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprvpog733: /tmp/tmprvpog733.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i = 2;\n    int count\
    \ = 0;\n    while (a != 1) {\n        if (a % i == 0) {\n            a /= i;\n\
    \            count++;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \t// Hint: You can use the function is_prime(long a)\n\t// Hint: You can use the\
    \ function is_prime(long a)\n\tif (a == 1)\n\t\treturn false;\n\tfor (int i =\
    \ 2; i < a; i++) {\n\t\tif (is_prime(i) && a % i == 0) {\n\t\t\tfor (int j = 2;\
    \ j < a; j++) {\n\t\t\t\tif (is_prime(j) && a % j == 0) {\n\t\t\t\t\tfor (int\
    \ k = 2; k < a; k++) {\n\t\t\t\t\t\tif (is_prime(k) && a % k == 0) {\n\t\t\t\t\
    \t\t\tif (i * j * k == a)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8z5u1urt.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp8z5u1urt.cpp:15:7: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   15 |   if (is_prime(i) && a % i == 0) {\n      |       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int i,j,k,l;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n   \
    \     {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp92os5zun: /tmp/tmp92os5zun.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgue3i7z1: /tmp/tmpgue3i7z1.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i < a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    if (count == 2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprg0zwkfd: /tmp/tmprg0zwkfd.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgue3i7z1: /tmp/tmpgue3i7z1.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int cnt = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            cnt++;\n\
    \            a /= i;\n            if (cnt == 3) {\n                return true;\n\
    \            }\n            i--;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppmda0y9t: /tmp/tmppmda0y9t.cpp:30: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        if(a%i==0)\n        {\n            for(j=2;j<=a/2;j++)\n     \
    \       {\n                if(a%j==0)\n                {\n                   \
    \ for(k=2;k<=a/2;k++)\n                    {\n                        if(a%k==0)\n\
    \                        {\n                            if(i*j*k==a)\n       \
    \                     {\n                                return true;\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4nc4oqoh: /tmp/tmp4nc4oqoh.cpp:42: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint i,j,k;\n\tfor(i=2;i<=a/2;i++)\n\t{\n\t\tfor(j=2;j<=a/2;j++)\n\t\t{\n\t\t\
    \tfor(k=2;k<=a/2;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbwmn0tdl: /tmp/tmpbwmn0tdl.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k, count =\
    \ 0;\n    for (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            for\
    \ (j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \ }\n            if (count == 0) {\n                for (k = 2; k <= a / 2; k++)\
    \ {\n                    if (a % k == 0) {\n                        count++;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (count == 0) {\n                    return true;\n         \
    \       }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp46qeuz5o: /tmp/tmp46qeuz5o.cpp:35: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n     \
    \   {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpx6s5iibj: /tmp/tmpx6s5iibj.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint i,j,k;\n\tfor(i=2;i<=a/3;i++)\n\t{\n\t\tfor(j=2;j<=a/2;j++)\n\t\t{\n\t\t\
    \tfor(k=2;k<=a/3;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcxe8g0yy: /tmp/tmpcxe8g0yy.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\
    \tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3)\n            return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpyt_qeklc: /tmp/tmpyt_qeklc.cpp:24: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i = 2;\n    int count\
    \ = 0;\n    while (a != 1) {\n        if (a % i == 0) {\n            a /= i;\n\
    \            count++;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgue3i7z1: /tmp/tmpgue3i7z1.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    if(a<=1)\n        return false;\n    if(a==2 || a==3 || a==5)\n        return\
    \ true;\n    if(a%2==0 || a%3==0 || a%5==0)\n        return false;\n    for(int\
    \ i=7;i<=sqrt(a);i+=2)\n    {\n        if(a%i==0)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp263ed5u_: /tmp/tmp263ed5u_.cpp:25: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\twhile (a\
    \ % i != 0) {\n\t\ti++;\n\t}\n\tint j = i;\n\twhile (a % j != 0) {\n\t\tj++;\n\
    \t}\n\tint k = j;\n\twhile (a % k != 0) {\n\t\tk++;\n\t}\n\tif (i * j * k == a)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpziy1ewnd: /tmp/tmpziy1ewnd.cpp:31: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    if (a == 1) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) {\n        return is_multiply_prime(a\
    \ / 2);\n    }\n    for (int i = 3; i <= sqrt(a); i += 2) {\n        if (a % i\
    \ == 0) {\n            return is_multiply_prime(a / i);\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n  \
    \  assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpj8wsexdn: /tmp/tmpj8wsexdn.cpp:23: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrnhd8_x: /tmp/tmpzrnhd8_x.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i < a; i++){\n        if(a % i == 0){\n\
    \            count++;\n        }\n    }\n    if(count == 2){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpmv9l1vd7: /tmp/tmpmv9l1vd7.cpp:26: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrnhd8_x: /tmp/tmpzrnhd8_x.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    if (a == 1) return false;\n\
    \    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            int\
    \ count = 0;\n            while (a % i == 0) {\n                a /= i;\n    \
    \            count++;\n            }\n            if (count > 1) return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpdor7u7xg: /tmp/tmpdor7u7xg.cpp:24: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int flag = 0;\n    for(int i = 2; i <= a/2; ++i)\n    {\n        if(a%i ==\
    \ 0)\n        {\n            if(is_prime(i))\n            {\n                for(int\
    \ j = 2; j <= a/2; ++j)\n                {\n                    if(a%j == 0)\n\
    \                    {\n                        if(is_prime(j))\n            \
    \            {\n                            for(int k = 2; k <= a/2; ++k)\n  \
    \                          {\n                                if(a%k == 0)\n \
    \                               {\n                                    if(is_prime(k))\n\
    \                                    {\n                                     \
    \   if(i*j*k == a)\n                                        {\n              \
    \                              flag = 1;\n                                   \
    \         break;\n                                        }\n                \
    \                    }\n                                }\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n    }\n    if(flag == 1)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgobyz0y.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmptgobyz0y.cpp:15:16: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   15 |             if(is_prime(i))\n      |                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660099588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i = 2;\n    int count\
    \ = 0;\n    while (a != 1) {\n        if (a % i == 0) {\n            a /= i;\n\
    \            count++;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int counter = 0;\n  \
    \  for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            counter++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    if (counter == 3)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgue3i7z1: /tmp/tmpgue3i7z1.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i <= a / 3; i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (j = 2; j <= a / 2;\
    \ j++) {\n\t\t\t\tif (a % j == 0) {\n\t\t\t\t\tfor (k = 2; k <= a / 2; k++) {\n\
    \t\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    \t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmppxppzk4h: /tmp/tmppxppzk4h.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\
    \tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn count == 3;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    if (a == 1) return false;\n\
    \    if (a == 2) return true;\n    if (a == 3) return true;\n    if (a == 5) return\
    \ true;\n    if (a == 7) return true;\n    if (a == 11) return true;\n    if (a\
    \ == 13) return true;\n    if (a == 17) return true;\n    if (a == 19) return\
    \ true;\n    if (a == 23) return true;\n    if (a == 29) return true;\n    if\
    \ (a == 31) return true;\n    if (a == 37) return true;\n    if (a == 41) return\
    \ true;\n    if (a == 43) return true;\n    if (a == 47) return true;\n    if\
    \ (a == 53) return true;\n    if (a == 59) return true;\n    if (a == 61) return\
    \ true;\n    if (a == 67) return true;\n    if (a == 71) return true;\n    if\
    \ (a == 73) return true;\n    if (a == 79) return true;\n    if (a == 83) return\
    \ true;\n    if (a == 89) return true;\n    if (a == 97) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1xf29vj4: /tmp/tmp1xf29vj4.cpp:39: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (int j\
    \ = 2; j < i; j++) {\n                if (i % j == 0) {\n                    count++;\n\
    \                }\n            }\n            if (count == 0) {\n           \
    \     for (int k = 2; k < a; k++) {\n                    if (a % k == 0) {\n \
    \                       for (int l = 2; l < k; l++) {\n                      \
    \      if (k % l == 0) {\n                                count++;\n         \
    \                   }\n                        }\n                        if (count\
    \ == 0) {\n                            for (int m = 2; m < a; m++) {\n       \
    \                         if (a % m == 0) {\n                                \
    \    for (int n = 2; n < m; n++) {\n                                        if\
    \ (m % n == 0) {\n                                            count++;\n     \
    \                                   }\n                                    }\n\
    \                                    if (count == 0) {\n                     \
    \                   return true;\n                                    }\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmplkr5ev49: /tmp/tmplkr5ev49.cpp:51: int main(): Assertion `candidate((10))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    if(a == 1)\n        return false;\n    for(int i = 2;\
    \ i <= a; i++){\n        if(a % i == 0){\n            int flag = 0;\n        \
    \    for(int j = 2; j <= i/2; j++){\n                if(i % j == 0){\n       \
    \             flag = 1;\n                    break;\n                }\n     \
    \       }\n            if(flag == 0){\n                count++;\n            \
    \    a = a / i;\n                i--;\n            }\n        }\n    }\n    if(count\
    \ == 3)\n        return true;\n    else\n        return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3)\n            return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpyt_qeklc: /tmp/tmpyt_qeklc.cpp:24: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            if (count == 3) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfiwm4w1d: /tmp/tmpfiwm4w1d.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\twhile (a\
    \ != 1) {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\ti = 2;\n\t\t}\n\t\telse\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (i == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8jedr7x5: /tmp/tmp8jedr7x5.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        if(a%i==0)\n        {\n            for(j=2;j<=a/2;j++)\n     \
    \       {\n                if(a%j==0)\n                {\n                   \
    \ for(k=2;k<=a/2;k++)\n                    {\n                        if(a%k==0)\n\
    \                        {\n                            if(i*j*k==a)\n       \
    \                     {\n                                return true;\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4nc4oqoh: /tmp/tmp4nc4oqoh.cpp:42: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ <= a; j++) {\n                if (a % j == 0 && i != j) {\n                \
    \    for (k = 2; k <= a; k++) {\n                        if (a % k == 0 && i !=\
    \ k && j != k) {\n                            if (i * j * k == a) {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpkmz5af1m: /tmp/tmpkmz5af1m.cpp:31: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\tint count\
    \ = 0;\n\twhile (a != 1) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /=\
    \ i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint i,j,k;\n\tfor(i=2;i<=a/2;i++)\n\t{\n\t\tfor(j=2;j<=a/2;j++)\n\t\t{\n\t\t\
    \tfor(k=2;k<=a/2;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbwmn0tdl: /tmp/tmpbwmn0tdl.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    for(i=2;i<a;i++){\n        for(j=2;j<a;j++){\n            for(k=2;k<a;k++){\n\
    \                if(i*j*k==a){\n                    return true;\n           \
    \     }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4lf5c40i: /tmp/tmp4lf5c40i.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrnhd8_x: /tmp/tmpzrnhd8_x.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ <= a; j++) {\n                if (a % j == 0 && i != j) {\n                \
    \    for (k = 2; k <= a; k++) {\n                        if (a % k == 0 && i !=\
    \ k && j != k) {\n                            if (i * j * k == a) {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpkmz5af1m: /tmp/tmpkmz5af1m.cpp:31: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int i,j,k,count=0;\n    for(i=2;i<=a;i++)\n    {\n        for(j=2;j<=a;j++)\n\
    \        {\n            for(k=2;k<=a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    if(count>0)\n    {\n        return true;\n    }\n\
    \    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpj1rpy8mo: /tmp/tmpj1rpy8mo.cpp:41: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\t// Write your code here\n\
    \tint i,j,k;\n\tfor(i=2;i<a;i++)\n\t{\n\t\tfor(j=2;j<a;j++)\n\t\t{\n\t\t\tfor(k=2;k<a;k++)\n\
    \t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpwqce4eun: /tmp/tmpwqce4eun.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i = 2;\n    int count\
    \ = 0;\n    while (a != 1) {\n        if (a % i == 0) {\n            a /= i;\n\
    \            count++;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i;\n\tfor (i = 2; i\
    \ <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tif (i == a) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\ta = a / i;\n\t\t\ti = 1;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmm_rebwb: /tmp/tmpmm_rebwb.cpp:24: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i = 2;\n    while\
    \ (a != 1) {\n        if (a % i == 0) {\n            a /= i;\n            i--;\n\
    \        }\n        i++;\n    }\n    return i == 4;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp455eqsrg: /tmp/tmp455eqsrg.cpp:22: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int arr[a];\n    for(int\
    \ i = 0; i < a; i++) {\n        arr[i] = i;\n    }\n    for(int i = 2; i < a;\
    \ i++) {\n        if(arr[i] != 0) {\n            for(int j = i + i; j < a; j +=\
    \ i) {\n                arr[j] = 0;\n            }\n        }\n    }\n    int\
    \ count = 0;\n    for(int i = 2; i < a; i++) {\n        if(arr[i] != 0) {\n  \
    \          count++;\n        }\n    }\n    int prime[count];\n    int index =\
    \ 0;\n    for(int i = 2; i < a; i++) {\n        if(arr[i] != 0) {\n          \
    \  prime[index] = arr[i];\n            index++;\n        }\n    }\n    int flag\
    \ = 0;\n    for(int i = 0; i < count; i++) {\n        for(int j = 0; j < count;\
    \ j++) {\n            for(int k = 0; k < count; k++) {\n                if(prime[i]\
    \ * prime[j] * prime[k] == a) {\n                    flag = 1;\n             \
    \       break;\n                }\n            }\n        }\n    }\n    if(flag\
    \ == 1) {\n        return true;\n    }\n    else {\n        return false;\n  \
    \  }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\tif (count == 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8weqzplm: /tmp/tmp8weqzplm.cpp:30: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpzrnhd8_x: /tmp/tmpzrnhd8_x.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\tint j = 2;\n\
    \tint k = 2;\n\twhile (i < 100) {\n\t\twhile (j < 100) {\n\t\t\twhile (k < 100)\
    \ {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\
    k++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp59n1kyp6: /tmp/tmp59n1kyp6.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i;\n    int count\
    \ = 0;\n    int flag = 0;\n    for(i = 2; i <= a/2; ++i)\n    {\n        // condition\
    \ for i to be a prime number\n        if(a%i == 0)\n        {\n            flag\
    \ = 1;\n            break;\n        }\n    }\n    if (flag == 0)\n        count++;\n\
    \    if(count == 3)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnsv3t6b2: /tmp/tmpnsv3t6b2.cpp:31: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgue3i7z1: /tmp/tmpgue3i7z1.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/3;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpfa2i1eii: /tmp/tmpfa2i1eii.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            int j = 2;\n\
    \            while (j <= i) {\n                if (i % j == 0) {\n           \
    \         if (j == i) {\n                        count++;\n                  \
    \  }\n                    break;\n                }\n                j++;\n  \
    \          }\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpn___0wmp: /tmp/tmpn___0wmp.cpp:33: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i <= a; i++) {\n\t\tfor (j = 2; j <= a; j++) {\n\t\t\tfor (k = 2; k <=\
    \ a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpo6rrmm49: /tmp/tmpo6rrmm49.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i < a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    if (count == 2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprg0zwkfd: /tmp/tmprg0zwkfd.cpp:25: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    assert(a > 0);\n    int\
    \ i = 2;\n    int count = 0;\n    while (a != 1) {\n        if (a % i == 0) {\n\
    \            count++;\n            a /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int i,j,k;\n    for(i=2;i<=a/2;i++)\n    {\n        for(j=2;j<=a/2;j++)\n\
    \        {\n            for(k=2;k<=a/2;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpqayn3_26: /tmp/tmpqayn3_26.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    if (a == 1) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int\
    \ i = 3; i <= sqrt(a); i += 2) {\n        if (a % i == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpjgmup_71: /tmp/tmpjgmup_71.cpp:19: int main(): Assertion `candidate((5))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<=a/3;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpfa2i1eii: /tmp/tmpfa2i1eii.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp147k1pn6: /tmp/tmp147k1pn6.cpp:23: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwrii1lji: /tmp/tmpwrii1lji.cpp:33: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\
    \t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2eqbhby: /tmp/tmpf2eqbhby.cpp:25: int main(): Assertion `candidate((8))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int i, j, k;\n    for\
    \ (i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (j = 2; j\
    \ < a; j++) {\n                if (a % j == 0) {\n                    for (k =\
    \ 2; k < a; k++) {\n                        if (a % k == 0) {\n              \
    \              if (i * j * k == a) {\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp004tiw23: /tmp/tmp004tiw23.cpp:35: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\tint count\
    \ = 0;\n\twhile (i <= a) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /=\
    \ i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tfor (int i = 2; i < a;\
    \ i++) {\n\t\tif (a % i == 0) {\n\t\t\tfor (int j = 2; j < a; j++) {\n\t\t\t\t\
    if (a % j == 0) {\n\t\t\t\t\tfor (int k = 2; k < a; k++) {\n\t\t\t\t\t\tif (a\
    \ % k == 0) {\n\t\t\t\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\t\t\treturn true;\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprm7l9fmu: /tmp/tmprm7l9fmu.cpp:34: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int cnt = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            cnt++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return cnt == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    int count = 0;\n    for\
    \ (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i = 2;\n\twhile (a\
    \ != 1) {\n\t\tif (a % i == 0) {\n\t\t\ta /= i;\n\t\t\ti = 2;\n\t\t}\n\t\telse\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (i == 3 || i == 5 || i == 7) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp047ozdhc: /tmp/tmp047ozdhc.cpp:29: int main(): Assertion `candidate((30))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n\tint i, j, k;\n\tfor (i\
    \ = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++) {\n\t\t\tfor (k = 2; k < a;\
    \ k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1q5tiug: /tmp/tmpp1q5tiug.cpp:29: int main(): Assertion `candidate((126))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n    // Write your code here\n\
    \    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    if(count == 3){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099590
