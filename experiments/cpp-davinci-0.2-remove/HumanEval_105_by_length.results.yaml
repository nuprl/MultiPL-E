language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    std::vector<long>\
    \ temp;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        switch (temp[i]) {\n            case 1:\n\
    \                result.push_back(\"One\");\n                break;\n        \
    \    case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(sorted.begin(), sorted.end());\n    for (int\
    \ i = sorted.size() - 1; i >= 0; i--) {\n        switch (sorted[i]) {\n      \
    \      case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tstd::map<long, std::string> map;\n\tmap[1] = \"One\";\n\tmap[2] = \"\
    Two\";\n\tmap[3] = \"Three\";\n\tmap[4] = \"Four\";\n\tmap[5] = \"Five\";\n\t\
    map[6] = \"Six\";\n\tmap[7] = \"Seven\";\n\tmap[8] = \"Eight\";\n\tmap[9] = \"\
    Nine\";\n\tfor (auto i : arr) {\n\t\tif (i >= 1 && i <= 9) {\n\t\t\ttemp.push_back(i);\n\
    \t\t}\n\t}\n\tstd::sort(temp.begin(), temp.end());\n\tfor (auto i : temp) {\n\t\
    \tresult.push_back(map[i]);\n\t}\n\tstd::reverse(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for(auto i: temp){\n        switch(i){\n            case 1:\n\
    \                result.push_back(\"One\");\n                break;\n        \
    \    case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i > 0 && i < 10){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::string s;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]>=1 && arr[i]<=9){\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(),temp.end());\n    std::reverse(temp.begin(),temp.end());\n\
    \    for(int i=0;i<temp.size();i++){\n        switch(temp[i]){\n            case\
    \ 1:\n                s=\"One\";\n                break;\n            case 2:\n\
    \                s=\"Two\";\n                break;\n            case 3:\n   \
    \             s=\"Three\";\n                break;\n            case 4:\n    \
    \            s=\"Four\";\n                break;\n            case 5:\n      \
    \          s=\"Five\";\n                break;\n            case 6:\n        \
    \        s=\"Six\";\n                break;\n            case 7:\n           \
    \     s=\"Seven\";\n                break;\n            case 8:\n            \
    \    s=\"Eight\";\n                break;\n            case 9:\n             \
    \   s=\"Nine\";\n                break;\n        }\n        result.push_back(s);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpu_fcto90: /tmp/tmpu_fcto90.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ temp;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++){\n        if(temp[i] == 1){\n            res.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2){\n            res.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3){\n            res.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4){\n            res.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5){\n            res.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6){\n            res.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7){\n            res.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8){\n            res.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9){\n            res.push_back(\"\
    Nine\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i >= 1 && *i <= 9) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    if(temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    }\n    else if(temp[i] == 2) {\n      result.push_back(\"Two\");\n   \
    \ }\n    else if(temp[i] == 3) {\n      result.push_back(\"Three\");\n    }\n\
    \    else if(temp[i] == 4) {\n      result.push_back(\"Four\");\n    }\n    else\
    \ if(temp[i] == 5) {\n      result.push_back(\"Five\");\n    }\n    else if(temp[i]\
    \ == 6) {\n      result.push_back(\"Six\");\n    }\n    else if(temp[i] == 7)\
    \ {\n      result.push_back(\"Seven\");\n    }\n    else if(temp[i] == 8) {\n\
    \      result.push_back(\"Eight\");\n    }\n    else if(temp[i] == 9) {\n    \
    \  result.push_back(\"Nine\");\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1: result.push_back(\"One\"); break;\n \
    \           case 2: result.push_back(\"Two\"); break;\n            case 3: result.push_back(\"\
    Three\"); break;\n            case 4: result.push_back(\"Four\"); break;\n   \
    \         case 5: result.push_back(\"Five\"); break;\n            case 6: result.push_back(\"\
    Six\"); break;\n            case 7: result.push_back(\"Seven\"); break;\n    \
    \        case 8: result.push_back(\"Eight\"); break;\n            case 9: result.push_back(\"\
    Nine\"); break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    std::vector<std::string> names = {\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    };\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            sorted.push_back(arr[i]);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    std::reverse(sorted.begin(), sorted.end());\n    for (int\
    \ i = 0; i < sorted.size(); i++) {\n        result.push_back(names[sorted[i] -\
    \ 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> m;\n    m[1] = \"\
    One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n   \
    \ m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"\
    Eight\";\n    m[9] = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(m[temp[i]]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(map[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1: result.push_back(\"One\");\n                    break;\n\
    \            case 2: result.push_back(\"Two\");\n                    break;\n\
    \            case 3: result.push_back(\"Three\");\n                    break;\n\
    \            case 4: result.push_back(\"Four\");\n                    break;\n\
    \            case 5: result.push_back(\"Five\");\n                    break;\n\
    \            case 6: result.push_back(\"Six\");\n                    break;\n\
    \            case 7: result.push_back(\"Seven\");\n                    break;\n\
    \            case 8: result.push_back(\"Eight\");\n                    break;\n\
    \            case 9: result.push_back(\"Nine\");\n                    break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    switch(temp[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i > 0 && i < 10){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        if(i == 1){\n            result.push_back(\"One\");\n      \
    \  }\n        else if(i == 2){\n            result.push_back(\"Two\");\n     \
    \   }\n        else if(i == 3){\n            result.push_back(\"Three\");\n  \
    \      }\n        else if(i == 4){\n            result.push_back(\"Four\");\n\
    \        }\n        else if(i == 5){\n            result.push_back(\"Five\");\n\
    \        }\n        else if(i == 6){\n            result.push_back(\"Six\");\n\
    \        }\n        else if(i == 7){\n            result.push_back(\"Seven\");\n\
    \        }\n        else if(i == 8){\n            result.push_back(\"Eight\");\n\
    \        }\n        else if(i == 9){\n            result.push_back(\"Nine\");\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    switch(temp[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(it =\
    \ arr.begin(); it != arr.end(); it++) {\n        if(*it >= 1 && *it <= 9) {\n\
    \            temp.push_back(*it);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(it = temp.begin();\
    \ it != temp.end(); it++) {\n        switch(*it) {\n            case 1:\n    \
    \            result.push_back(\"One\");\n                break;\n            case\
    \ 2:\n                result.push_back(\"Two\");\n                break;\n   \
    \         case 3:\n                result.push_back(\"Three\");\n            \
    \    break;\n            case 4:\n                result.push_back(\"Four\");\n\
    \                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    std::vector<std::string> names = {\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    };\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            sorted.push_back(arr[i]);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    std::reverse(sorted.begin(), sorted.end());\n    for (long\
    \ i = 0; i < sorted.size(); i++) {\n        result.push_back(names[sorted[i] -\
    \ 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::sort(arr.begin(),\
    \ arr.end());\n  for (auto i = arr.begin(); i != arr.end(); i++) {\n    if (*i\
    \ > 0 && *i < 10) {\n      result.push_back(map[*i]);\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == 1) {\n            result.push_back(\"One\");\n    \
    \    } else if (arr[i] == 2) {\n            result.push_back(\"Two\");\n     \
    \   } else if (arr[i] == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (arr[i] == 4) {\n            result.push_back(\"Four\");\n    \
    \    } else if (arr[i] == 5) {\n            result.push_back(\"Five\");\n    \
    \    } else if (arr[i] == 6) {\n            result.push_back(\"Six\");\n     \
    \   } else if (arr[i] == 7) {\n            result.push_back(\"Seven\");\n    \
    \    } else if (arr[i] == 8) {\n            result.push_back(\"Eight\");\n   \
    \     } else if (arr[i] == 9) {\n            result.push_back(\"Nine\");\n   \
    \     }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> numbers;\n    std::vector<long>::iterator it;\n    std::string\
    \ str;\n    for(it = arr.begin(); it != arr.end(); it++) {\n        if(*it >=\
    \ 1 && *it <= 9) {\n            numbers.push_back(*it);\n        }\n    }\n  \
    \  std::sort(numbers.begin(), numbers.end());\n    std::reverse(numbers.begin(),\
    \ numbers.end());\n    for(it = numbers.begin(); it != numbers.end(); it++) {\n\
    \        switch(*it) {\n            case 1:\n                str = \"One\";\n\
    \                break;\n            case 2:\n                str = \"Two\";\n\
    \                break;\n            case 3:\n                str = \"Three\"\
    ;\n                break;\n            case 4:\n                str = \"Four\"\
    ;\n                break;\n            case 5:\n                str = \"Five\"\
    ;\n                break;\n            case 6:\n                str = \"Six\"\
    ;\n                break;\n            case 7:\n                str = \"Seven\"\
    ;\n                break;\n            case 8:\n                str = \"Eight\"\
    ;\n                break;\n            case 9:\n                str = \"Nine\"\
    ;\n                break;\n        }\n        result.push_back(str);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  std::string str;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i]\
    \ > 0 && arr[i] < 10) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    switch(temp[i]) {\n      case 1:\n        str = \"\
    One\";\n        break;\n      case 2:\n        str = \"Two\";\n        break;\n\
    \      case 3:\n        str = \"Three\";\n        break;\n      case 4:\n    \
    \    str = \"Four\";\n        break;\n      case 5:\n        str = \"Five\";\n\
    \        break;\n      case 6:\n        str = \"Six\";\n        break;\n     \
    \ case 7:\n        str = \"Seven\";\n        break;\n      case 8:\n        str\
    \ = \"Eight\";\n        break;\n      case 9:\n        str = \"Nine\";\n     \
    \   break;\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        if(i == 1){\n            result.push_back(\"One\");\n      \
    \  }\n        else if(i == 2){\n            result.push_back(\"Two\");\n     \
    \   }\n        else if(i == 3){\n            result.push_back(\"Three\");\n  \
    \      }\n        else if(i == 4){\n            result.push_back(\"Four\");\n\
    \        }\n        else if(i == 5){\n            result.push_back(\"Five\");\n\
    \        }\n        else if(i == 6){\n            result.push_back(\"Six\");\n\
    \        }\n        else if(i == 7){\n            result.push_back(\"Seven\");\n\
    \        }\n        else if(i == 8){\n            result.push_back(\"Eight\");\n\
    \        }\n        else if(i == 9){\n            result.push_back(\"Nine\");\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    if(temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    }\n    else if(temp[i] == 2) {\n      result.push_back(\"Two\");\n   \
    \ }\n    else if(temp[i] == 3) {\n      result.push_back(\"Three\");\n    }\n\
    \    else if(temp[i] == 4) {\n      result.push_back(\"Four\");\n    }\n    else\
    \ if(temp[i] == 5) {\n      result.push_back(\"Five\");\n    }\n    else if(temp[i]\
    \ == 6) {\n      result.push_back(\"Six\");\n    }\n    else if(temp[i] == 7)\
    \ {\n      result.push_back(\"Seven\");\n    }\n    else if(temp[i] == 8) {\n\
    \      result.push_back(\"Eight\");\n    }\n    else if(temp[i] == 9) {\n    \
    \  result.push_back(\"Nine\");\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> temp;\n\
    \    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i :\
    \ temp) {\n        result.push_back(numbers[i - 1]);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i > 0 && i < 10){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> temp;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        result.push_back(numbers[temp[i] - 1]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(sorted.begin(), sorted.end());\n    for (int\
    \ i = sorted.size() - 1; i >= 0; i--) {\n        switch (sorted[i]) {\n      \
    \      case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::vector<std::string> temp2;\n    std::string\
    \ temp3;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9){\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            temp2.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            temp2.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            temp2.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            temp2.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            temp2.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            temp2.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            temp2.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            temp2.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            temp2.push_back(\"Nine\");\n        }\n    }\n    for(int\
    \ i = temp2.size() - 1; i >= 0; i--){\n        result.push_back(temp2[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tif (temp[i] == 1) {\n\t\t\tresult.push_back(\"One\"\
    );\n\t\t}\n\t\telse if (temp[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t\
    }\n\t\telse if (temp[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\
    \telse if (temp[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse\
    \ if (temp[i] == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (temp[i]\
    \ == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (temp[i] == 7)\
    \ {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (temp[i] == 8) {\n\
    \t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (temp[i] == 9) {\n\t\t\t\
    result.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it >= 1 &&\
    \ *it <= 9) {\n            result.push_back(map[*it]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] > 0 && arr[i]\
    \ < 10) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tif (temp[i] == 1) {\n\t\t\tresult.push_back(\"One\"\
    );\n\t\t}\n\t\telse if (temp[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t\
    }\n\t\telse if (temp[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\
    \telse if (temp[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse\
    \ if (temp[i] == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (temp[i]\
    \ == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (temp[i] == 7)\
    \ {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (temp[i] == 8) {\n\
    \t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (temp[i] == 9) {\n\t\t\t\
    result.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ temp;\n    std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2]\
    \ = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"\
    Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\"\
    ;\n    map[9] = \"Nine\";\n    for(auto i: arr){\n        if(i >= 1 && i <= 9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for(auto i: temp){\n        res.push_back(map[i]);\n    }\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::sort(arr.begin(),\
    \ arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tfor (auto i : arr) {\n\
    \t\tswitch (i) {\n\t\tcase 1:\n\t\t\tresult.push_back(\"One\");\n\t\t\tbreak;\n\
    \t\tcase 2:\n\t\t\tresult.push_back(\"Two\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\
    \tresult.push_back(\"Three\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tresult.push_back(\"\
    Four\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult.push_back(\"Five\");\n\t\t\t\
    break;\n\t\tcase 6:\n\t\t\tresult.push_back(\"Six\");\n\t\t\tbreak;\n\t\tcase\
    \ 7:\n\t\t\tresult.push_back(\"Seven\");\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tresult.push_back(\"\
    Eight\");\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult.push_back(\"Nine\");\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tswitch (temp[i]) {\n\t\tcase 1:\n\t\t\tresult.push_back(\"\
    One\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresult.push_back(\"Two\");\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\tresult.push_back(\"Three\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\
    \t\tresult.push_back(\"Four\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult.push_back(\"\
    Five\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult.push_back(\"Six\");\n\t\t\t\
    break;\n\t\tcase 7:\n\t\t\tresult.push_back(\"Seven\");\n\t\t\tbreak;\n\t\tcase\
    \ 8:\n\t\t\tresult.push_back(\"Eight\");\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult.push_back(\"\
    Nine\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]>=1\
    \ && arr[i]<=9){\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    std::reverse(temp.begin(),temp.end());\n    for(long i=0;i<temp.size();i++){\n\
    \        switch(temp[i]){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = temp.size()\
    \ - 1; i >= 0; i--){\n        if(temp[i] == 1){\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2){\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3){\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4){\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5){\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6){\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7){\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8){\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9){\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(long i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n \
    \       }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(long i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> words = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> nums;\n\
    \    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            nums.push_back(i);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::reverse(nums.begin(),\
    \ nums.end());\n    for (auto i : nums) {\n        result.push_back(words[i -\
    \ 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i > 0 && i < 10){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_6xt7pri: /tmp/tmp_6xt7pri.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = temp.size()\
    \ - 1; i >= 0; i--){\n        if(temp[i] == 1){\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2){\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3){\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4){\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5){\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6){\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7){\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8){\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9){\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(long i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n \
    \       }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(long i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] <= 9 && arr[i] >= 1){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i > 0 && i < 10) {\n            temp.push_back(i);\n        }\n \
    \   }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(map[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::vector<long> temp2;\n    for(int i = 0;\
    \ i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n           \
    \ temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n\
    \    for(int i = temp.size() - 1; i >= 0; i--){\n        temp2.push_back(temp[i]);\n\
    \    }\n    for(int i = 0; i < temp2.size(); i++){\n        if(temp2[i] == 1){\n\
    \            result.push_back(\"One\");\n        }\n        else if(temp2[i] ==\
    \ 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp2[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp2[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp2[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp2[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp2[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp2[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp2[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> temp;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        result.push_back(numbers[temp[i] - 1]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tif (temp[i] == 1) {\n\t\t\tresult.push_back(\"One\"\
    );\n\t\t}\n\t\telse if (temp[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t\
    }\n\t\telse if (temp[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\
    \telse if (temp[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse\
    \ if (temp[i] == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (temp[i]\
    \ == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (temp[i] == 7)\
    \ {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (temp[i] == 8) {\n\
    \t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (temp[i] == 9) {\n\t\t\t\
    result.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n    \
    \        result.push_back(numbers[i - 1]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_6xt7pri: /tmp/tmp_6xt7pri.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] > 0 && arr[i]\
    \ < 10) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for(int i = 0; i\
    \ < temp.size(); i++) {\n    switch(temp[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i >= 1 && i <=\
    \ 9){\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto x: arr){\n        if(x>=1 && x<=9){\n\
    \            temp.push_back(x);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto x: temp){\n\
    \        switch(x){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3,\
    \ \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"\
    Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"\
    }\n    };\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n        }\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::sort(arr.begin(),\
    \ arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tfor (int i = 0; i <\
    \ arr.size(); i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tresult.push_back(\"One\");\n\
    \t\t}\n\t\telse if (arr[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t}\n\t\
    \telse if (arr[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\telse\
    \ if (arr[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse if (arr[i]\
    \ == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (arr[i] == 6)\
    \ {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (arr[i] == 7) {\n\t\t\
    \tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (arr[i] == 8) {\n\t\t\tresult.push_back(\"\
    Eight\");\n\t\t}\n\t\telse if (arr[i] == 9) {\n\t\t\tresult.push_back(\"Nine\"\
    );\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it > 0 && *it\
    \ < 10) {\n            result.push_back(map[*it]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (long i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> digit_name = {\n\
    \        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n     \
    \   {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7,\
    \ \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    for\
    \ (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(digit_name[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> dict;\n    dict[1] = \"One\";\n    dict[2] = \"\
    Two\";\n    dict[3] = \"Three\";\n    dict[4] = \"Four\";\n    dict[5] = \"Five\"\
    ;\n    dict[6] = \"Six\";\n    dict[7] = \"Seven\";\n    dict[8] = \"Eight\";\n\
    \    dict[9] = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(dict[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it >= 1 &&\
    \ *it <= 9) {\n            result.push_back(map[*it]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> dict;\n    dict[1]\
    \ = \"One\";\n    dict[2] = \"Two\";\n    dict[3] = \"Three\";\n    dict[4] =\
    \ \"Four\";\n    dict[5] = \"Five\";\n    dict[6] = \"Six\";\n    dict[7] = \"\
    Seven\";\n    dict[8] = \"Eight\";\n    dict[9] = \"Nine\";\n    for (auto i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(dict[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n        result.push_back(map[*i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr){\n        if(i > 0 && i < 10){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp){\n        switch(i){\n            case 1: result.push_back(\"One\");\n\
    \                    break;\n            case 2: result.push_back(\"Two\");\n\
    \                    break;\n            case 3: result.push_back(\"Three\");\n\
    \                    break;\n            case 4: result.push_back(\"Four\");\n\
    \                    break;\n            case 5: result.push_back(\"Five\");\n\
    \                    break;\n            case 6: result.push_back(\"Six\");\n\
    \                    break;\n            case 7: result.push_back(\"Seven\");\n\
    \                    break;\n            case 8: result.push_back(\"Eight\");\n\
    \                    break;\n            case 9: result.push_back(\"Nine\");\n\
    \                    break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i >= 1 && *i <= 9) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        if(i==1){\n            result.push_back(\"One\");\n        }\n      \
    \  else if(i==2){\n            result.push_back(\"Two\");\n        }\n       \
    \ else if(i==3){\n            result.push_back(\"Three\");\n        }\n      \
    \  else if(i==4){\n            result.push_back(\"Four\");\n        }\n      \
    \  else if(i==5){\n            result.push_back(\"Five\");\n        }\n      \
    \  else if(i==6){\n            result.push_back(\"Six\");\n        }\n       \
    \ else if(i==7){\n            result.push_back(\"Seven\");\n        }\n      \
    \  else if(i==8){\n            result.push_back(\"Eight\");\n        }\n     \
    \   else if(i==9){\n            result.push_back(\"Nine\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::vector<long> temp;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (long i : temp)\
    \ {\n        result.push_back(map[i]);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082224
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(map[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> nums = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> temp;\n\
    \    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (auto i : temp) {\n        result.push_back(nums[i - 1]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tswitch (temp[i]) {\n\t\tcase 1:\n\t\t\tresult.push_back(\"\
    One\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresult.push_back(\"Two\");\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\tresult.push_back(\"Three\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\
    \t\tresult.push_back(\"Four\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult.push_back(\"\
    Five\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult.push_back(\"Six\");\n\t\t\t\
    break;\n\t\tcase 7:\n\t\t\tresult.push_back(\"Seven\");\n\t\t\tbreak;\n\t\tcase\
    \ 8:\n\t\t\tresult.push_back(\"Eight\");\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult.push_back(\"\
    Nine\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n         \
    \   result.push_back(numbers[arr[i] - 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }else if(temp[i] ==\
    \ 2){\n            result.push_back(\"Two\");\n        }else if(temp[i] == 3){\n\
    \            result.push_back(\"Three\");\n        }else if(temp[i] == 4){\n \
    \           result.push_back(\"Four\");\n        }else if(temp[i] == 5){\n   \
    \         result.push_back(\"Five\");\n        }else if(temp[i] == 6){\n     \
    \       result.push_back(\"Six\");\n        }else if(temp[i] == 7){\n        \
    \    result.push_back(\"Seven\");\n        }else if(temp[i] == 8){\n         \
    \   result.push_back(\"Eight\");\n        }else if(temp[i] == 9){\n          \
    \  result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> sorted;\n\
    \    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n            sorted.push_back(i);\n\
    \        }\n    }\n    std::sort(sorted.begin(), sorted.end());\n    std::reverse(sorted.begin(),\
    \ sorted.end());\n    for (auto i : sorted) {\n        result.push_back(numbers[i\
    \ - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n     \
    \   if (*i > 0 && *i < 10) {\n            result.push_back(numbers[*i - 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::sort(arr.begin(),\
    \ arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tfor (auto i : arr) {\n\
    \t\tif (i == 1) {\n\t\t\tresult.push_back(\"One\");\n\t\t}\n\t\telse if (i ==\
    \ 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t}\n\t\telse if (i == 3) {\n\t\t\t\
    result.push_back(\"Three\");\n\t\t}\n\t\telse if (i == 4) {\n\t\t\tresult.push_back(\"\
    Four\");\n\t\t}\n\t\telse if (i == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\
    \t}\n\t\telse if (i == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse\
    \ if (i == 7) {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (i ==\
    \ 8) {\n\t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (i == 9) {\n\t\t\
    \tresult.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_6xt7pri: /tmp/tmp_6xt7pri.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082223
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (auto i = arr.begin(); i != arr.end(); i++) {\n\t\tif (*i >= 1\
    \ && *i <= 9) {\n\t\t\ttemp.push_back(*i);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (auto i = temp.begin();\
    \ i != temp.end(); i++) {\n\t\tswitch (*i) {\n\t\tcase 1:\n\t\t\tresult.push_back(\"\
    One\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresult.push_back(\"Two\");\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\tresult.push_back(\"Three\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\
    \t\tresult.push_back(\"Four\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult.push_back(\"\
    Five\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult.push_back(\"Six\");\n\t\t\t\
    break;\n\t\tcase 7:\n\t\t\tresult.push_back(\"Seven\");\n\t\t\tbreak;\n\t\tcase\
    \ 8:\n\t\t\tresult.push_back(\"Eight\");\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult.push_back(\"\
    Nine\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n\tstd::vector<std::string> result;\n\tstd::vector<long>\
    \ temp;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n\t\t\ttemp.push_back(arr[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\tstd::reverse(temp.begin(), temp.end());\n\tfor (int i = 0; i\
    \ < temp.size(); i++) {\n\t\tswitch (temp[i]) {\n\t\tcase 1:\n\t\t\tresult.push_back(\"\
    One\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresult.push_back(\"Two\");\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\tresult.push_back(\"Three\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\
    \t\tresult.push_back(\"Four\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult.push_back(\"\
    Five\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tresult.push_back(\"Six\");\n\t\t\t\
    break;\n\t\tcase 7:\n\t\t\tresult.push_back(\"Seven\");\n\t\t\tbreak;\n\t\tcase\
    \ 8:\n\t\t\tresult.push_back(\"Eight\");\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult.push_back(\"\
    Nine\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    std::reverse(sorted.begin(), sorted.end());\n    for (auto\
    \ i : sorted) {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::string str;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                str = \"One\";\n                break;\n\
    \            case 2:\n                str = \"Two\";\n                break;\n\
    \            case 3:\n                str = \"Three\";\n                break;\n\
    \            case 4:\n                str = \"Four\";\n                break;\n\
    \            case 5:\n                str = \"Five\";\n                break;\n\
    \            case 6:\n                str = \"Six\";\n                break;\n\
    \            case 7:\n                str = \"Seven\";\n                break;\n\
    \            case 8:\n                str = \"Eight\";\n                break;\n\
    \            case 9:\n                str = \"Nine\";\n                break;\n\
    \        }\n        result.push_back(str);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); it++) {\n        if (*it >= 1 && *it <= 9) {\n           \
    \ result.push_back(map[*it]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> sorted_arr;\n\
    \    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            sorted_arr.push_back(i);\n\
    \        }\n    }\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::reverse(sorted_arr.begin(),\
    \ sorted_arr.end());\n    for (auto i : sorted_arr) {\n        result.push_back(numbers[i\
    \ - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        switch(temp[i]){\n\
    \            case 1:\n                result.push_back(\"One\");\n           \
    \     break;\n            case 2:\n                result.push_back(\"Two\");\n\
    \                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp2fkv7oid: /tmp/tmp2fkv7oid.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            result.push_back(map[arr[i]]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082218
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n     \
    \   }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n    \
    \        result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmptolqcecd: /tmp/tmptolqcecd.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660082225
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n    \
    \    }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        if(temp[i]\
    \ == 1){\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2){\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3){\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4){\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5){\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6){\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7){\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8){\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9){\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660082220
