name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that contain given substring\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
  xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) == (std::vector<std::string>({\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"\
  grunt\", \"prune\"})));\n}\n"
completions: ["    std::vector<std::string> filtered;\n    for (auto s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(string);\n \
    \       }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(string);\n \
    \       }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "\tstd::vector<std::string> result;\n\
    \tfor (auto s : strings) {\n\t\tif (s.find(substring) != std::string::npos) {\n\
    \t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "  std::vector<std::string> filtered;\n  for (auto s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      filtered.push_back(s);\n    }\n  }\n  return\
    \ filtered;", "    std::vector<std::string> filtered;\n    for (std::string s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         filtered_strings.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered_strings;\n    for (auto& s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered.push_back(string);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "  std::vector<std::string> filtered;\n  for (std::string s : strings) {\n    if\
    \ (s.find(substring) != std::string::npos) {\n      filtered.push_back(s);\n \
    \   }\n  }\n  return filtered;", "    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (auto string\
    \ : strings) {\n        if (string.find(substring) != std::string::npos) {\n \
    \           result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (auto\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (auto\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  std::vector<std::string>\
    \ result;\n  for (auto s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (std::string str : strings) {\n\
    \        if (str.find(substring) != std::string::npos) {\n            filtered.push_back(str);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (auto &s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (auto s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (auto s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> result;\n    for (auto\
    \ string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> filtered;\n    for (auto\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (std::string string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered.push_back(string);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (std::string string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered_strings;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(s);\n      \
    \  }\n    }\n    return filtered_strings;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered.push_back(s);\n        }\n    }\n    return filtered;", "  \
    \  std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;"]
stop_tokens:
- "\n}"
