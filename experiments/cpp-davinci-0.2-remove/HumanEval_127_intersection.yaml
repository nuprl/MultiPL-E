name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\nstd::string\
  \ intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end2 || start2 > end1)\n        return \"NO\";\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if(start\
    \ == end)\n        return \"YES\";\n    if(start == 1)\n        return \"NO\"\
    ;\n    for(long i = 2; i <= sqrt(end); i++)\n        if(start % i == 0)\n    \
    \        return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long length = end - start + 1;\n   \
    \ if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n \
    \   long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <\
    \ length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) return \"NO\";\n    long len = end - start + 1;\n    if (len\
    \ == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    for (long i = 2;\
    \ i <= sqrt(len); i++) {\n        if (len % i == 0) return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long length = end - start + 1;\n   \
    \ if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i *\
    \ i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1, end1, start2, end2;\n\
    \    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start == end) {\n        return \"YES\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long\
    \ end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long len = end - start + 1;\n \
    \   if (len == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i\
    \ <= len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  if (start1 > end2 || start2 > end1)\
    \ {\n    return \"NO\";\n  }\n  long start = std::max(start1, start2);\n  long\
    \ end = std::min(end1, end2);\n  long length = end - start + 1;\n  if (length\
    \ == 1) {\n    return \"YES\";\n  }\n  if (length == 2) {\n    return \"NO\";\n\
    \  }\n  for (long i = 2; i < length; i++) {\n    if (length % i == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long length = end - start + 1;\n   \
    \ if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    if (start == end) return \"YES\";\n\
    \    for (long i = 2; i <= end; i++) {\n        if (end % i == 0) {\n        \
    \    if (i >= start) return \"NO\";\n            while (end % i == 0) end /= i;\n\
    \        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <=\
    \ len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    // if the intervals don't intersect, return \"NO\"\n    if (start1 > end2\
    \ || start2 > end1) {\n        return \"NO\";\n    }\n    // if the intervals\
    \ intersect, find the intersection\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    // if the intersection is a prime number,\
    \ return \"YES\"\n    if (isPrime(end - start + 1)) {\n        return \"YES\"\
    ;\n    }\n    // otherwise, return \"NO\"\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    // interval1 =\
    \ (1, 3), interval2 = (2, 4)\n    // interval1 = (1, 3), interval2 = (3, 4)\n\
    \    // interval1 = (1, 3), interval2 = (4, 5)\n    // interval1 = (1, 3), interval2\
    \ = (5, 6)\n    // interval1 = (1, 3), interval2 = (6, 7)\n    // interval1 =\
    \ (1, 3), interval2 = (7, 8)\n    // interval1 = (1, 3), interval2 = (8, 9)\n\
    \    // interval1 = (1, 3), interval2 = (9, 10)\n    // interval1 = (1, 3), interval2\
    \ = (10, 11)\n    // interval1 = (1, 3), interval2 = (11, 12)\n    // interval1\
    \ = (1, 3), interval2 = (12, 13)\n    // interval1 = (1, 3), interval2 = (13,\
    \ 14)\n    // interval1 = (1, 3), interval2 = (14, 15)\n    // interval1 = (1,\
    \ 3), interval2 = (15, 16)\n    // interval1 = (1, 3), interval2 = (16, 17)\n\
    \    // interval1 = (1, 3), interval2 = (17, 18)\n    // interval1 = (1, 3), interval2\
    \ = (18, 19)\n    // interval1 = (1, 3), interval2 = (19, 20)\n    // interval1\
    \ = (1, 3), interval2 = (20, 21)\n    // interval1 = (1, 3), interval2 = (21,\
    \ 22)\n    // interval1 = (1, 3), interval2 = (22, 23)\n    // interval1 = (1,\
    \ 3), interval2 = (23, 24)\n    // interval1 = (1, 3), interval2 = (24, 25)\n\
    \    // interval1 = (1, 3), interval2 = (25, 26)\n    // interval1 = (1, 3), interval2\
    \ = (26, 27)\n    // interval1 = (1, 3), interval2 = (27, 28)\n    // interval1\
    \ = (1, 3), interval2 = (28, 29", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <=\
    \ len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long diff = end - start + 1;\n    if\
    \ (diff == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(diff);\
    \ i++) {\n        if (diff % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long\
    \ end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i\
    \ * i <= length; i++) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long length = end - start + 1;\n   \
    \ if (length == 1) return \"NO\";\n    for (long i = 2; i * i <= length; i++)\
    \ {\n        if (length % i == 0) return \"NO\";\n    }\n    return \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1, end1,\
    \ start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2,\
    \ end2) = interval2;\n    if (start1 > end1 || start2 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1, start2);\n\
    \        std::swap(end1, end2);\n    }\n    if (end1 < start2) {\n        return\
    \ \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    if (len == 2) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= len; ++i) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"YES\";\n    }\n    for (long i = 2; i < len; i++) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if\
    \ (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "  long start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n\
    \  long start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n\
    \  long start = std::max(start1, start2);\n  long end = std::min(end1, end2);\n\
    \  if (start > end) {\n    return \"NO\";\n  }\n  long length = end - start +\
    \ 1;\n  if (length == 1) {\n    return \"YES\";\n  }\n  if (length == 2) {\n \
    \   return \"NO\";\n  }\n  for (long i = 2; i < length; i++) {\n    if (length\
    \ % i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start == end) {\n        return \"YES\";\n    }\n    if (start == 2)\
    \ {\n        return \"YES\";\n    }\n    if (start % 2 == 0) {\n        start++;\n\
    \    }\n    for (long i = start; i <= end; i += 2) {\n        if (i == 2) {\n\
    \            return \"YES\";\n        }\n        if (i % 2 == 0) {\n         \
    \   continue;\n        }\n        bool isPrime = true;\n        for (long j =\
    \ 3; j <= std::sqrt(i); j += 2) {\n            if (i % j == 0) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime) {\n            return \"YES\";\n        }\n    }\n    return\
    \ \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n   \
    \ long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    long length = end - start + 1;\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length; i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i * i\
    \ <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if(len\
    \ == 1) {\n        return \"YES\";\n    }\n    for(long i = 2; i <= sqrt(len);\
    \ i++) {\n        if(len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= length / 2; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ * i <= length; i++) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= length / 2; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long\
    \ end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i\
    \ <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long diff = end -\
    \ start + 1;\n    if (diff == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < diff; i++) {\n        if (diff % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n\
    \        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= len\
    \ / 2; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long len\
    \ = end - start + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n  \
    \  for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1,\
    \ end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2,\
    \ end2) = interval2;\n    if (start1 > end1 || start2 > end2) {\n        return\
    \ \"NO\";\n    }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    if (start\
    \ == end) {\n        return \"YES\";\n    }\n    if (start == 2) {\n        return\
    \ \"YES\";\n    }\n    if (start % 2 == 0) {\n        start++;\n    }\n    for\
    \ (long i = start; i <= end; i += 2) {\n        if (i == 2) {\n            return\
    \ \"YES\";\n        }\n        if (i % 2 == 0) {\n            continue;\n    \
    \    }\n        bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j\
    \ += 2) {\n            if (i % j == 0) {\n                isPrime = false;\n \
    \               break;\n            }\n        }\n        if (isPrime) {\n   \
    \         return \"YES\";\n        }\n    }\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start == end) {\n        return \"YES\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long length\
    \ = end - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i <= length / 2; i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    if\
    \ (length == 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    if (start == 2) {\n        return \"\
    YES\";\n    }\n    if (start % 2 == 0) {\n        return \"NO\";\n    }\n    for\
    \ (int i = 3; i <= std::sqrt(end); i += 2) {\n        if (start % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "\tlong start1\
    \ = std::get<0>(interval1);\n\tlong end1 = std::get<1>(interval1);\n\tlong start2\
    \ = std::get<0>(interval2);\n\tlong end2 = std::get<1>(interval2);\n\tif (start1\
    \ > end2 || start2 > end1) {\n\t\treturn \"NO\";\n\t}\n\tlong start = std::max(start1,\
    \ start2);\n\tlong end = std::min(end1, end2);\n\tlong length = end - start +\
    \ 1;\n\tif (length <= 1) {\n\t\treturn \"NO\";\n\t}\n\tfor (long i = 2; i <= sqrt(length);\
    \ i++) {\n\t\tif (length % i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    if (len == 2) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i < len; i++) {\n        if (len % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  if (start1 > end2 || start2 > end1)\
    \ {\n    return \"NO\";\n  }\n  long start = std::max(start1, start2);\n  long\
    \ end = std::min(end1, end2);\n  long length = end - start + 1;\n  if (length\
    \ == 1) {\n    return \"YES\";\n  }\n  for (long i = 2; i <= sqrt(length); i++)\
    \ {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start == end) {\n        return \"YES\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 2) {\n        return \"YES\";\n    }\n    if\
    \ (length % 2 == 0) {\n        return \"NO\";\n    }\n    for (long i = 3; i *\
    \ i <= length; i += 2) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    if (length == 2) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long diff = end - start + 1;\n    if\
    \ (diff == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(diff);\
    \ i++) {\n        if (diff % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"YES\";\n    }\n    if (len == 2) {\n        return \"NO\";\n    }\n\
    \    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if(len == 1) {\n        return \"YES\";\n\
    \    }\n    for(long i = 2; i < len; i++) {\n        if(len % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start == end) {\n        return \"YES\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    if\
    \ (length == 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <=\
    \ length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long a = std::get<0>(interval1);\n\
    \    long b = std::get<1>(interval1);\n    long c = std::get<0>(interval2);\n\
    \    long d = std::get<1>(interval2);\n    if(a > b || c > d) {\n        return\
    \ \"NO\";\n    }\n    if(a > d || b < c) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(a, c);\n    long end = std::min(b, d);\n    if(start\
    \ == end) {\n        return \"YES\";\n    }\n    if(start == 2) {\n        return\
    \ \"YES\";\n    }\n    if(start % 2 == 0) {\n        return \"NO\";\n    }\n \
    \   for(long i = 3; i <= sqrt(end); i += 2) {\n        if(start % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "\tlong start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\tlong end = std::min(std::get<1>(interval1),\
    \ std::get<1>(interval2));\n\tif (start > end) {\n\t\treturn \"NO\";\n\t}\n\t\
    long length = end - start + 1;\n\tif (length == 1) {\n\t\treturn \"NO\";\n\t}\n\
    \tfor (long i = 2; i < length; i++) {\n\t\tif (length % i == 0) {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ <= length / 2; i++) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long diff = end - start + 1;\n    if\
    \ (diff == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(diff);\
    \ i++) {\n        if (diff % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "\tlong start1 = std::get<0>(interval1);\n\tlong\
    \ end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\t\
    long end2 = std::get<1>(interval2);\n\tif (start1 > end2 || start2 > end1) {\n\
    \t\treturn \"NO\";\n\t}\n\tlong start = std::max(start1, start2);\n\tlong end\
    \ = std::min(end1, end2);\n\tlong len = end - start + 1;\n\tif (len == 1) {\n\t\
    \treturn \"NO\";\n\t}\n\tfor (long i = 2; i * i <= len; i++) {\n\t\tif (len %\
    \ i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <= length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    if (length == 2) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(length); i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if(start1 > end2 || start2 > end1) {\n \
    \       return \"NO\";\n    }\n    long start = std::max(start1, start2);\n  \
    \  long end = std::min(end1, end2);\n    long diff = end - start + 1;\n    if(diff\
    \ == 1) {\n        return \"NO\";\n    }\n    if(diff == 2) {\n        return\
    \ \"YES\";\n    }\n    for(long i = 2; i < diff; i++) {\n        if(diff % i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end2 || start2 > end1)\n        return \"NO\";\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if(start\
    \ == end)\n        return \"YES\";\n    long diff = end - start;\n    if(diff\
    \ == 1)\n        return \"NO\";\n    for(long i = 2; i <= sqrt(diff); i++)\n \
    \       if(diff % i == 0)\n            return \"NO\";\n    return \"YES\";", " \
    \   long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n \
    \   long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n   \
    \ if (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ < length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start == end) {\n        return\
    \ \"YES\";\n    }\n    if (start == 2 || start == 3 || start == 5 || start ==\
    \ 7) {\n        return \"YES\";\n    }\n    if (start % 2 == 0 || start % 3 ==\
    \ 0 || start % 5 == 0 || start % 7 == 0) {\n        return \"NO\";\n    }\n  \
    \  for (long i = start; i <= end; i++) {\n        if (i == 2 || i == 3 || i ==\
    \ 5 || i == 7) {\n            return \"YES\";\n        }\n        if (i % 2 ==\
    \ 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long start1, end1, start2, end2;\n\
    \    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n    for (long i =\
    \ 2; i * i <= len; ++i) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n   \
    \     return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n    for (long i =\
    \ 2; i <= std::sqrt(len); i++) {\n        if (len % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long a, b, c, d;\n   \
    \ std::tie(a, b) = interval1;\n    std::tie(c, d) = interval2;\n    if (a > b)\
    \ std::swap(a, b);\n    if (c > d) std::swap(c, d);\n    if (b < c || d < a) return\
    \ \"NO\";\n    long low = std::max(a, c);\n    long high = std::min(b, d);\n \
    \   long len = high - low + 1;\n    if (len == 1) return \"YES\";\n    for (long\
    \ i = 2; i * i <= len; ++i) {\n        if (len % i == 0) return \"NO\";\n    }\n\
    \    return \"YES\";", "    long start1, end1, start2, end2;\n    std::tie(start1,\
    \ end1) = interval1;\n    std::tie(start2, end2) = interval2;\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start\
    \ > end) return \"NO\";\n    if (start == end) return \"YES\";\n    for (long\
    \ i = 2; i * i <= end; i++) {\n        if (start % i == 0) return \"NO\";\n  \
    \      if (end % i == 0) return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    if\
    \ (length == 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <=\
    \ length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i *\
    \ i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (end1 < start2 || end2 < start1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <= len;\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    if (length == 2) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <=\
    \ len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n \
    \ long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  if (start1 > end2 || start2 > end1)\
    \ {\n    return \"NO\";\n  }\n  long start = std::max(start1, start2);\n  long\
    \ end = std::min(end1, end2);\n  long length = end - start + 1;\n  if (length\
    \ == 1) {\n    return \"YES\";\n  }\n  for (long i = 2; i < length; i++) {\n \
    \   if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if\
    \ (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= len\
    \ / 2; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) return \"NO\";\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long len = end - start +\
    \ 1;\n    if (len == 1) return \"YES\";\n    if (len == 2) return \"NO\";\n  \
    \  for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0) return \"\
    NO\";\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  long start = std::max(start1, start2);\n\
    \  long end = std::min(end1, end2);\n  if (start > end) {\n    return \"NO\";\n\
    \  }\n  long length = end - start + 1;\n  if (length == 1) {\n    return \"YES\"\
    ;\n  }\n  for (long i = 2; i <= sqrt(length); i++) {\n    if (length % i == 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long diff\
    \ = end - start + 1;\n    if (diff <= 1) {\n        return \"NO\";\n    }\n  \
    \  for (long i = 2; i <= sqrt(diff); i++) {\n        if (diff % i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ return \"NO\";\n    long len = end - start + 1;\n    if (len == 1) return \"\
    NO\";\n    for (long i = 2; i < len; i++) {\n        if (len % i == 0) return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    if (start == end) {\n\
    \        return \"YES\";\n    }\n    long length = end - start + 1;\n    for (long\
    \ i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ * i <= length; i++) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    // your code here\n    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    if\
    \ (length == 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <=\
    \ length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long a = std::get<0>(interval1);\n\
    \    long b = std::get<1>(interval1);\n    long c = std::get<0>(interval2);\n\
    \    long d = std::get<1>(interval2);\n    if (a > b || c > d) {\n        return\
    \ \"NO\";\n    }\n    if (a > d || b < c) {\n        return \"NO\";\n    }\n \
    \   long start = std::max(a, c);\n    long end = std::min(b, d);\n    long len\
    \ = end - start + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n  \
    \  for (long i = 2; i <= len / 2; i++) {\n        if (len % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    if (start == end) {\n        return \"\
    YES\";\n    }\n    long length = end - start + 1;\n    if (length == 2) {\n  \
    \      return \"YES\";\n    }\n    if (length % 2 == 0) {\n        return \"NO\"\
    ;\n    }\n    for (long i = 3; i * i <= length; i += 2) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1, start2, end1, end2;\n    std::tie(start1, end1) = interval1;\n\
    \    std::tie(start2, end2) = interval2;\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (end1 < start2) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    long len = end - start + 1;\n    if (len == 1) {\n        return\
    \ \"YES\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "  long start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n\
    \  long start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n\
    \  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  long start\
    \ = std::max(start1, start2);\n  long end = std::min(end1, end2);\n  long length\
    \ = end - start + 1;\n  if (length == 1) {\n    return \"YES\";\n  }\n  for (long\
    \ i = 2; i <= std::sqrt(length); i++) {\n    if (length % i == 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= len\
    \ / 2; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long a = std::get<0>(interval1);\n  \
    \  long b = std::get<1>(interval1);\n    long c = std::get<0>(interval2);\n  \
    \  long d = std::get<1>(interval2);\n    if (a > b) {\n        std::swap(a, b);\n\
    \    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (b < c || a\
    \ > d) {\n        return \"NO\";\n    }\n    long start = std::max(a, c);\n  \
    \  long end = std::min(b, d);\n    if (start == end) {\n        return \"YES\"\
    ;\n    }\n    if (start == 2) {\n        return \"YES\";\n    }\n    if (start\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    for (long i = 3; i * i <= end;\
    \ i += 2) {\n        if (start % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    if (start == 2) {\n        return \"\
    YES\";\n    }\n    if (start % 2 == 0) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 3; i * i <= end; i += 2) {\n        if (start % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long length = end - start + 1;\n   \
    \ if (length == 1) return \"NO\";\n    for (long i = 2; i <= sqrt(length); i++)\
    \ {\n        if (length % i == 0) return \"NO\";\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    if\
    \ (length == 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    if (length == 2) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n    if (len == 2)\
    \ {\n        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length; i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long length = end - start + 1;\n   \
    \ if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i <=\
    \ length / 2; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long diff = end -\
    \ start + 1;\n    if (diff == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= std::sqrt(diff); i++) {\n        if (diff % i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if (len == 1) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < len; i++) {\n        if (len % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    // Get\
    \ the start and end of the first interval\n    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    // Get the start and end of the\
    \ second interval\n    long start2 = std::get<0>(interval2);\n    long end2 =\
    \ std::get<1>(interval2);\n    // If the second interval starts after the first\
    \ interval ends,\n    // or the second interval ends before the first interval\
    \ starts,\n    // then the intervals don't intersect\n    if (start2 > end1 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    // Get the start and end\
    \ of the intersection\n    long start = std::max(start1, start2);\n    long end\
    \ = std::min(end1, end2);\n    // If the length of the intersection is 1, then\
    \ it's not a prime number\n    if (end - start == 0) {\n        return \"NO\"\
    ;\n    }\n    // Check if the length of the intersection is a prime number\n \
    \   for (long i = 2; i <= end - start; i++) {\n        if ((end - start) % i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if(start == end) {\n        return \"YES\";\n    }\n    long len = end -\
    \ start + 1;\n    if(len == 2) {\n        return \"YES\";\n    }\n    if(len %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    for(long i = 3; i <= sqrt(len);\
    \ i += 2) {\n        if(len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end2 || start2 > end1)\n\
    \        return \"NO\";\n    long start = std::max(start1, start2);\n    long\
    \ end = std::min(end1, end2);\n    long len = end - start + 1;\n    if(len ==\
    \ 1)\n        return \"YES\";\n    for(long i = 2; i <= std::sqrt(len); i++)\n\
    \        if(len % i == 0)\n            return \"NO\";\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "  long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  long end = std::min(std::get<1>(interval1),\
    \ std::get<1>(interval2));\n  if (start > end) {\n    return \"NO\";\n  }\n  long\
    \ length = end - start + 1;\n  if (length == 1) {\n    return \"NO\";\n  }\n \
    \ for (long i = 2; i <= std::sqrt(length); i++) {\n    if (length % i == 0) {\n\
    \      return \"NO\";\n    }\n  }\n  return \"YES\";", "  long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \  if (start > end) {\n    return \"NO\";\n  }\n  if (start == end) {\n    return\
    \ \"YES\";\n  }\n  if (start == 2 || start == 3 || start == 5 || start == 7) {\n\
    \    return \"YES\";\n  }\n  if (start % 2 == 0 || start % 3 == 0 || start % 5\
    \ == 0 || start % 7 == 0) {\n    return \"NO\";\n  }\n  return \"YES\";", "  long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  long end\
    \ = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  if (start > end)\
    \ {\n    return \"NO\";\n  }\n  if (start == end) {\n    return \"YES\";\n  }\n\
    \  if (start == 2) {\n    return \"YES\";\n  }\n  if (start % 2 == 0) {\n    return\
    \ \"NO\";\n  }\n  for (long i = 3; i <= sqrt(end); i += 2) {\n    if (start %\
    \ i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"YES\";\n    }\n    for (long i =\
    \ 2; i <= std::sqrt(len); i++) {\n        if (len % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start >= end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long length\
    \ = end - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1,\
    \ end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2,\
    \ end2) = interval2;\n    if (start1 > end1 || start2 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1, start2);\n\
    \        std::swap(end1, end2);\n    }\n    if (end1 < start2) {\n        return\
    \ \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length <= 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) return \"NO\";\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start == end) return \"YES\";\n\
    \    if (start == 1) return \"NO\";\n    for (long i = 2; i < start; i++) {\n\
    \        if (start % i == 0) return \"NO\";\n    }\n    return \"YES\";", "  \
    \  long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i\
    \ <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start == end) {\n        return\
    \ \"YES\";\n    }\n    long length = end - start + 1;\n    for (long i = 2; i\
    \ * i <= length; i++) {\n        if (length % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1, end1,\
    \ start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2,\
    \ end2) = interval2;\n    // if the intervals don't intersect, return \"NO\"\n\
    \    if (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n  \
    \  // find the intersection of the intervals\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    // check if the length of\
    \ the intersection is a prime number\n    for (long i = 2; i <= end - start; i++)\
    \ {\n        if ((end - start) % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "\tlong start1 = std::get<0>(interval1);\n\
    \tlong end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\
    \tlong end2 = std::get<1>(interval2);\n\tif (start1 > end2 || start2 > end1) {\n\
    \t\treturn \"NO\";\n\t}\n\tlong start = std::max(start1, start2);\n\tlong end\
    \ = std::min(end1, end2);\n\tlong length = end - start + 1;\n\tif (length == 1)\
    \ {\n\t\treturn \"NO\";\n\t}\n\tfor (long i = 2; i * i <= length; i++) {\n\t\t\
    if (length % i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length; i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) return \"NO\";\n \
    \   long diff = end - start + 1;\n    if (diff == 1) return \"YES\";\n    for\
    \ (long i = 2; i < diff; i++) {\n        if (diff % i == 0) return \"NO\";\n \
    \   }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n  long\
    \ end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n  long\
    \ end2 = std::get<1>(interval2);\n  if (start1 > end2 || start2 > end1) {\n  \
    \  return \"NO\";\n  }\n  long start = std::max(start1, start2);\n  long end =\
    \ std::min(end1, end2);\n  long length = end - start + 1;\n  if (length == 1)\
    \ {\n    return \"YES\";\n  }\n  if (length == 2) {\n    return \"NO\";\n  }\n\
    \  for (long i = 2; i <= std::sqrt(length); i++) {\n    if (length % i == 0) {\n\
    \      return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    if (len == 2) {\n        return\
    \ \"NO\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if (len %\
    \ i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n  \
    \  long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n  \
    \  if(a > b) {\n        std::swap(a, b);\n    }\n    if(c > d) {\n        std::swap(c,\
    \ d);\n    }\n    if(a > d || b < c) {\n        return \"NO\";\n    }\n    long\
    \ e = std::max(a, c);\n    long f = std::min(b, d);\n    if(e > f) {\n       \
    \ return \"NO\";\n    }\n    long len = f - e + 1;\n    if(len == 1) {\n     \
    \   return \"NO\";\n    }\n    if(len == 2) {\n        return \"YES\";\n    }\n\
    \    for(long i = 2; i * i <= len; ++i) {\n        if(len % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if\
    \ (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    // interval1 = (1, 3),\
    \ interval2 = (2, 4)\n    // interval1 = (1, 3), interval2 = (4, 5)\n    // interval1\
    \ = (1, 3), interval2 = (5, 6)\n    // interval1 = (1, 3), interval2 = (6, 7)\n\
    \    // interval1 = (1, 3), interval2 = (7, 8)\n    // interval1 = (1, 3), interval2\
    \ = (8, 9)\n    // interval1 = (1, 3), interval2 = (9, 10)\n    // interval1 =\
    \ (1, 3), interval2 = (10, 11)\n    // interval1 = (1, 3), interval2 = (11, 12)\n\
    \    // interval1 = (1, 3), interval2 = (12, 13)\n    // interval1 = (1, 3), interval2\
    \ = (13, 14)\n    // interval1 = (1, 3), interval2 = (14, 15)\n    // interval1\
    \ = (1, 3), interval2 = (15, 16)\n    // interval1 = (1, 3), interval2 = (16,\
    \ 17)\n    // interval1 = (1, 3), interval2 = (17, 18)\n    // interval1 = (1,\
    \ 3), interval2 = (18, 19)\n    // interval1 = (1, 3), interval2 = (19, 20)\n\
    \    // interval1 = (1, 3), interval2 = (20, 21)\n    // interval1 = (1, 3), interval2\
    \ = (21, 22)\n    // interval1 = (1, 3), interval2 = (22, 23)\n    // interval1\
    \ = (1, 3), interval2 = (23, 24)\n    // interval1 = (1, 3), interval2 = (24,\
    \ 25)\n    // interval1 = (1, 3), interval2 = (25, 26)\n    // interval1 = (1,\
    \ 3), interval2 = (26, 27)\n    // interval1 = (1, 3), interval2 = (27, 28)\n\
    \    // interval1 = (1, 3), interval2 = (28, 29)\n    // interval1 = (1, 3), interval2\
    \ = (29, 30", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    YES\";\n    }\n    if (length == 2) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start\
    \ == end) {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n\
    \    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", " \
    \   long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n \
    \   long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n   \
    \ if (start > end) return \"NO\";\n    if (start == end) return \"YES\";\n   \
    \ if (start == 2) return \"YES\";\n    if (start % 2 == 0) start++;\n    for (long\
    \ i = start; i <= end; i += 2) {\n        if (i == 3) return \"YES\";\n      \
    \  if (i % 3 == 0) continue;\n        if (i == 5) return \"YES\";\n        if\
    \ (i % 5 == 0) continue;\n        if (i == 7) return \"YES\";\n        if (i %\
    \ 7 == 0) continue;\n        if (i == 11) return \"YES\";\n        if (i % 11\
    \ == 0) continue;\n        if (i == 13) return \"YES\";\n        if (i % 13 ==\
    \ 0) continue;\n        if (i == 17) return \"YES\";\n        if (i % 17 == 0)\
    \ continue;\n        if (i == 19) return \"YES\";\n        if (i % 19 == 0) continue;\n\
    \        if (i == 23) return \"YES\";\n        if (i % 23 == 0) continue;\n  \
    \      if (i == 29) return \"YES\";\n        if (i % 29 == 0) continue;\n    \
    \    if (i == 31) return \"YES\";\n        if (i % 31 == 0) continue;\n      \
    \  if (i == 37) return \"YES\";\n        if (i % 37 == 0) continue;\n        if\
    \ (i == 41) return \"YES\";\n        if (i % 41 == 0) continue;\n        if (i\
    \ == 43) return \"YES\";\n        if (i % 43 == 0) continue;\n        if (i ==\
    \ 47) return \"YES\";\n        if (i % 47 == 0) continue;\n        if (i == 53)\
    \ return \"YES\";\n        if (i % 53 == 0) continue;\n        if (i == 59) return\
    \ \"YES\";\n        if (i % 59 == 0) continue;\n        if (", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end2 || start2 > end1)\n        return \"NO\";\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long\
    \ length = end - start + 1;\n    if(length == 1)\n        return \"NO\";\n   \
    \ for(long i = 2; i <= sqrt(length); i++)\n        if(length % i == 0)\n     \
    \       return \"NO\";\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "\tlong start1 = std::get<0>(interval1);\n\t\
    long end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\
    \tlong end2 = std::get<1>(interval2);\n\tlong start = std::max(start1, start2);\n\
    \tlong end = std::min(end1, end2);\n\tif (start > end) {\n\t\treturn \"NO\";\n\
    \t}\n\tlong length = end - start + 1;\n\tif (length == 1) {\n\t\treturn \"YES\"\
    ;\n\t}\n\tfor (long i = 2; i < length; i++) {\n\t\tif (length % i == 0) {\n\t\t\
    \treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if(start1\
    \ > end2 || start2 > end1)\n        return \"NO\";\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if(start == end)\n     \
    \   return \"YES\";\n    long length = end - start + 1;\n    if(length == 2)\n\
    \        return \"YES\";\n    if(length % 2 == 0)\n        return \"NO\";\n  \
    \  for(long i = 3; i * i <= length; i += 2)\n        if(length % i == 0)\n   \
    \         return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long len = end - start + 1;\n    if\
    \ (len == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i < len;\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long length = end - start + 1;\n   \
    \ if (length < 2) return \"NO\";\n    if (length == 2) return \"YES\";\n    for\
    \ (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) return \"\
    NO\";\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  long start = std::max(start1, start2);\n\
    \  long end = std::min(end1, end2);\n  if (start > end) {\n    return \"NO\";\n\
    \  }\n  long length = end - start + 1;\n  if (length == 1) {\n    return \"YES\"\
    ;\n  }\n  for (long i = 2; i < length; i++) {\n    if (length % i == 0) {\n  \
    \    return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n\
    \        return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    long len = end1 - start2 + 1;\n    if(len == 1)\n\
    \        return \"NO\";\n    if(len == 2)\n        return \"YES\";\n    for(long\
    \ i = 2; i <= std::sqrt(len); i++)\n        if(len % i == 0)\n            return\
    \ \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start == end) {\n        return\
    \ \"YES\";\n    }\n    long length = end - start + 1;\n    if (length == 2) {\n\
    \        return \"YES\";\n    }\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    for (long i = 3; i * i <= length; i += 2) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if(start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if(start2 > end1) {\n \
    \       return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    long len = end - start + 1;\n    if(len <= 1) {\n        return\
    \ \"NO\";\n    }\n    for(long i = 2; i < len; i++) {\n        if(len % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1, start2, end1, end2;\n    std::tie(start1, end1) = interval1;\n\
    \    std::tie(start2, end2) = interval2;\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n  \
    \  if (start == 2) {\n        return \"YES\";\n    }\n    if (start % 2 == 0)\
    \ {\n        return \"NO\";\n    }\n    for (long i = 3; i <= std::sqrt(end);\
    \ i += 2) {\n        if (start % i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";"]
stop_tokens:
- "\n}"
