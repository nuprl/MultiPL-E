name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    int len = word.length();\n    int i = len - 1;\n    while(i >=\
    \ 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if(i != len - 1 && word[i + 1] != 'a'\
    \ && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i\
    \ + 1] != 'u') {\n                return word.substr(i, 1);\n            }\n \
    \       }\n        i--;\n    }\n    return \"\";", "    std::string vowels = \"\
    aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n  \
    \  for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i - 1; j >= 0; j--) {\n  \
    \              if (vowels.find(word[j]) == std::string::npos) {\n            \
    \        if (i - j < min_distance) {\n                        min_distance = i\
    \ - j;\n                        result = word[i];\n                    }\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return result;", "    // your code here\n    std::string vowels = \"aeiou\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel_distance\
    \ = word.size() - i;\n            } else {\n                if (i < closest_vowel_index)\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel_distance\
    \ = word.size() - i;\n                }\n            }\n        }\n    }\n   \
    \ if (closest_vowel_index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            if (closest_vowel_index - i < closest_vowel_distance)\
    \ {\n                closest_vowel_distance = closest_vowel_index - i;\n     \
    \       }\n        }\n    }\n    return word.substr(closest_vowel_index, closest_vowel_distance);",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    int distance = 0;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    distance = i - j;\n           \
    \         if (distance < min_distance) {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n  \
    \  std::string result = \"\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                if (index - i == 1) {\n                    result =\
    \ word[index];\n                    break;\n                } else {\n       \
    \             index = i;\n                }\n            }\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = word.size() - 1;\n    while (index\
    \ >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n    \
    \        result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    int index\
    \ = -1;\n    int min_distance = INT_MAX;\n    for (int i = word.size() - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index == -1) {\n        return \"\";\n\
    \    }\n    return word.substr(index, 1);", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    int distance\
    \ = 0;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            distance = 0;\n            for (int j =\
    \ i - 1; j >= 0; j--) {\n                if (vowels.find(word[j]) != std::string::npos)\
    \ {\n                    break;\n                }\n                distance++;\n\
    \            }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    int distance = 0;\n   \
    \ int last_vowel_index = -1;\n    int last_consonant_index = -1;\n    int vowel_index\
    \ = -1;\n    int consonant_index = -1;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   vowel_index = i;\n            if (last_consonant_index != -1) {\n        \
    \        distance = vowel_index - last_consonant_index;\n                if (distance\
    \ < min_distance) {\n                    min_distance = distance;\n          \
    \          result = word[vowel_index];\n                }\n            }\n   \
    \         last_vowel_index = vowel_index;\n        } else {\n            consonant_index\
    \ = i;\n            if (last_vowel_index != -1) {\n                distance =\
    \ consonant_index - last_vowel_index;\n                if (distance < min_distance)\
    \ {\n                    min_distance = distance;\n                    result\
    \ = word[last_vowel_index];\n                }\n            }\n            last_consonant_index\
    \ = consonant_index;\n        }\n    }\n    return result;", "    int n = word.size();\n\
    \    int i = n - 1;\n    while (i >= 0) {\n        if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  if (i == n - 1) {\n                return \"\";\n            }\n          \
    \  if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i\
    \ + 1] != 'o' && word[i + 1] != 'u') {\n                return word.substr(i,\
    \ 1);\n            }\n        }\n        i--;\n    }\n    return \"\";", "   \
    \ std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) return \"\";\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    int pos\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    for (int i = pos - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int pos = word.length()\
    \ - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            result = word[pos];\n            break;\n        }\n        pos--;\n\
    \    }\n    if (pos == 0) {\n        return \"\";\n    }\n    pos--;\n    while\
    \ (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n \
    \           if (result.length() == 0) {\n                result = word[pos];\n\
    \            } else {\n                if (pos > word.length() - pos) {\n    \
    \                result = word[pos];\n                }\n            }\n     \
    \   }\n        pos--;\n    }\n    return result;", "\tstd::string vowels = \"\
    aeiou\";\n\tstd::string result = \"\";\n\tint index = word.size() - 1;\n\twhile\
    \ (index >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\
    \t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;",
  "    std::string vowels = \"aeiou\";\n    int pos = word.size() - 1;\n    while\
    \ (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n  \
    \          if (vowels.find(word[pos - 1]) == std::string::npos) {\n          \
    \      return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    int i = word.size() - 1;\n    while (i >= 0)\
    \ {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            return word.substr(i, 1);\n       \
    \ }\n        i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = INT_MAX;\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n            } else {\n                int\
    \ distance = closest_vowel_index - i;\n                if (distance < closest_vowel_distance)\
    \ {\n                    closest_vowel_distance = distance;\n                \
    \    closest_vowel_index = i;\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index == -1) {\n        return \"\";\n    }\n   \
    \ return word.substr(closest_vowel_index, 1);", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (index !=\
    \ -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0 && vowels.find(word[j]) != std::string::npos) {\n                j--;\n  \
    \          }\n            if (j >= 0) {\n                int k = i + 1;\n    \
    \            while (k < word.size() && vowels.find(word[k]) != std::string::npos)\
    \ {\n                    k++;\n                }\n                if (k < word.size())\
    \ {\n                    if (k - i < distance) {\n                        distance\
    \ = k - i;\n                        result = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  return word.substr(i, 1);\n        }\n        i--;\n    }\n    return \"\";",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    int distance = 0;\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return result;\n    }\n    for (int\
    \ i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            distance = last_vowel_index - i;\n       \
    \     if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            index = i;\n            break;\n        }\n\
    \    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int i =\
    \ index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n \
    \   int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int distance\
    \ = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n            \
    \    if (vowels.find(word[j]) != std::string::npos) {\n                    break;\n\
    \                }\n                distance++;\n            }\n            if\
    \ (distance < min_distance) {\n                min_distance = distance;\n    \
    \            result = word[i];\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = word.size() -\
    \ 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            if (index > 0 && vowels.find(word[index - 1]) == std::string::npos)\
    \ {\n                result = word[index];\n                break;\n         \
    \   }\n            if (index < word.size() - 1 && vowels.find(word[index + 1])\
    \ == std::string::npos) {\n                result = word[index];\n           \
    \     break;\n            }\n        }\n        index--;\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int distance = word.size();\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i + 1 < word.size() && vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                if (i + 1 < distance) {\n                    distance = i\
    \ + 1;\n                    result = word[i];\n                }\n           \
    \ }\n            if (i - 1 >= 0 && vowels.find(word[i - 1]) == std::string::npos)\
    \ {\n                if (word.size() - i < distance) {\n                    distance\
    \ = word.size() - i;\n                    result = word[i];\n                }\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = INT_MAX;\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n            } else {\n                if\
    \ (closest_vowel_distance > (closest_vowel_index - i)) {\n                   \
    \ closest_vowel_distance = closest_vowel_index - i;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(closest_vowel_index,\
    \ 1);", "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n  int\
    \ index = word.size() - 1;\n  while (index >= 0) {\n    if (vowels.find(word[index])\
    \ != std::string::npos) {\n      result = word[index];\n      break;\n    }\n\
    \    index--;\n  }\n  return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = word.size() - 1;\n    while (index\
    \ >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n    \
    \        result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = word.size() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance\
    \ = INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n            } else {\n                int\
    \ distance = closest_vowel_index - i;\n                if (distance < closest_vowel_distance)\
    \ {\n                    closest_vowel_distance = distance;\n                \
    \    closest_vowel_index = i;\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index == -1) {\n        return \"\";\n    }\n   \
    \ return word.substr(closest_vowel_index, 1);", "    std::string vowels = \"aeiou\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (consonants.find(word[i]) != std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    int last_consonant_index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            last_consonant_index = i;\n            break;\n\
    \        }\n    }\n    if (last_consonant_index == -1) {\n        return result;\n\
    \    }\n    for (int i = last_consonant_index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            int distance = last_consonant_index\
    \ - i;\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    int n = word.size();\n    int i = n - 1;\n  \
    \  while (i >= 0) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u') {\n            if (i == n - 1) {\n\
    \                return \"\";\n            }\n            if (word[i + 1] != 'a'\
    \ && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i\
    \ + 1] != 'u') {\n                return word.substr(i, 1);\n            }\n \
    \       }\n        i--;\n    }\n    return \"\";", "    std::string vowels = \"\
    aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n  \
    \  int distance = 0;\n    int last_consonant_index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            distance = last_consonant_index - i;\n            if (distance\
    \ > 0 && distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        } else {\n        \
    \    last_consonant_index = i;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int pos = -1;\n    for (int i = word.size() - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         pos = i;\n            break;\n        }\n    }\n    if (pos == -1) {\n\
    \        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(pos,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (index !=\
    \ -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index\
    \ = -1;\n    int closest_vowel_distance = INT_MAX;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i < closest_vowel_distance) {\n                closest_vowel_distance\
    \ = i;\n                closest_vowel_index = i;\n            }\n        } else\
    \ {\n            if (closest_vowel_index != -1) {\n                return word.substr(closest_vowel_index,\
    \ 1);\n            }\n        }\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance\
    \ = INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n            } else {\n                int\
    \ distance = closest_vowel_index - i;\n                if (distance < closest_vowel_distance)\
    \ {\n                    closest_vowel_distance = distance;\n                \
    \    closest_vowel_index = i;\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index == -1) {\n        return \"\";\n    }\n   \
    \ return word.substr(closest_vowel_index, 1);", "    int n = word.size();\n  \
    \  int i = n - 1;\n    while (i >= 0 && !is_vowel(word[i])) {\n        i--;\n\
    \    }\n    if (i == 0) {\n        return \"\";\n    }\n    int j = i - 1;\n \
    \   while (j >= 0 && is_vowel(word[j])) {\n        j--;\n    }\n    if (j == -1)\
    \ {\n        return \"\";\n    }\n    return word.substr(i, 1);", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    int len = word.length();\n    int i =\
    \ len - 1;\n    int j = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == len - 1) {\n                i--;\n\
    \                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) != std::string::npos) {\n                i--;\n                continue;\n\
    \            }\n            j = i;\n            break;\n        }\n        i--;\n\
    \    }\n    if (j == len - 1) {\n        return \"\";\n    }\n    return word.substr(j,\
    \ 1);", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int distance\
    \ = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n            \
    \    if (vowels.find(word[j]) != std::string::npos) {\n                    break;\n\
    \                }\n                distance++;\n            }\n            if\
    \ (distance < min_distance) {\n                min_distance = distance;\n    \
    \            result = word[i];\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   if (closest_vowel_index != -1) {\n                if (i < closest_vowel_index\
    \ && closest_vowel_index - i < closest_vowel_distance) {\n                   \
    \ closest_vowel_distance = closest_vowel_index - i;\n                    closest_vowel_index\
    \ = i;\n                }\n            } else {\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(closest_vowel_index, 1);",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance =\
    \ INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i - 1; j >= 0; j--) {\n  \
    \              if (vowels.find(word[j]) == std::string::npos) {\n            \
    \        if (i - j < closest_vowel_distance) {\n                        closest_vowel_distance\
    \ = i - j;\n                        closest_vowel_index = i;\n               \
    \     }\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    if (closest_vowel_index != -1) {\n        result = word[closest_vowel_index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int index = -1;\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = INT_MAX;\n    for (int i = word.size() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n            } else {\n                int distance = closest_vowel_index\
    \ - i;\n                if (distance < closest_vowel_distance) {\n           \
    \         closest_vowel_distance = distance;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(closest_vowel_index,\
    \ 1);", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "  std::string vowels = \"aeiou\";\n \
    \ int min_distance = INT_MAX;\n  char closest_vowel = '\\0';\n  for (int i = 0;\
    \ i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      int distance = word.size() - i - 1;\n      if (distance < min_distance)\
    \ {\n        min_distance = distance;\n        closest_vowel = word[i];\n    \
    \  }\n    }\n  }\n  return closest_vowel == '\\0' ? \"\" : std::string(1, closest_vowel);",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (index == -1) {\n                index\
    \ = i;\n            } else {\n                if (index - i > 1) {\n         \
    \           result = word[i];\n                    break;\n                }\n\
    \            }\n        } else {\n            index = -1;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int pos = -1;\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    for (int i = pos - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    int distance = 0;\n    int last_consonant_index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            distance = last_consonant_index - i;\n            if (distance\
    \ > 0 && distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        } else {\n        \
    \    last_consonant_index = i;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int i = 0; i\
    \ < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (consonants.find(word[j]) != std::string::npos) {\n\
    \                    distance = j - i;\n                    break;\n         \
    \       }\n            }\n            if (distance < min_distance) {\n       \
    \         min_distance = distance;\n                index = i;\n            }\n\
    \        }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    return\
    \ word.substr(index, 1);", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            result =\
    \ word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   std::string result = \"\";\n    int index = 0;\n    int min_index = word.size();\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            if (index - min_index\
    \ > 1) {\n                return result;\n            }\n            result =\
    \ word[i];\n        } else {\n            min_index = std::min(min_index, index);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        for (int j = 0; j < vowels.size(); j++)\
    \ {\n            if (word[i] == vowels[j]) {\n                int distance = word.size()\
    \ - i - 1;\n                if (distance < min_distance) {\n                 \
    \   min_distance = distance;\n                    result = word[i];\n        \
    \        }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int i = word.size() - 1;\n    while (i >= 0) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            return word[i];\n\
    \        }\n        i--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiou\";\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    int distance = 0;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    distance = i - j;\n           \
    \         if (distance < min_distance) {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   pos = i;\n            break;\n        }\n    }\n    if (pos == -1) return\
    \ result;\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[pos];\n            break;\n\
    \        }\n    }\n    return result;", "  std::string vowels = \"aeiou\";\n \
    \ int closest_vowel_index = -1;\n  int closest_vowel_distance = INT_MAX;\n  for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      if (closest_vowel_index == -1) {\n        closest_vowel_index = i;\n\
    \      } else {\n        if (i < closest_vowel_index) {\n          closest_vowel_index\
    \ = i;\n          closest_vowel_distance = closest_vowel_index - i;\n        }\n\
    \      }\n    }\n  }\n  if (closest_vowel_index == -1) {\n    return \"\";\n \
    \ }\n  return word.substr(closest_vowel_index, 1);", "    std::string vowels =\
    \ \"aeiou\";\n    int min_distance = INT_MAX;\n    int min_index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            int j = i + 1;\n            while (j < word.size()\
    \ && vowels.find(word[j]) != std::string::npos) {\n                j++;\n    \
    \        }\n            if (j < word.size()) {\n                int distance =\
    \ j - i;\n                if (distance < min_distance) {\n                   \
    \ min_distance = distance;\n                    min_index = i;\n             \
    \   }\n            }\n        }\n    }\n    if (min_index == -1) {\n        return\
    \ \"\";\n    }\n    return word.substr(min_index, 1);", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_dist\
    \ = INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int dist = word.size() - i;\n         \
    \   if (dist < min_dist) {\n                min_dist = dist;\n               \
    \ result = word[i];\n            }\n        }\n    }\n    return result;", " \
    \   int n = word.size();\n    int i = n - 1;\n    while (i >= 0) {\n        if\
    \ (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i]\
    \ == 'u') {\n            if (i == n - 1) {\n                return \"\";\n   \
    \         }\n            if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i\
    \ + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u') {\n               \
    \ return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n \
    \   return \"\";", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    int distance = INT_MAX;\n    for (int i =\
    \ word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.size() - 1) {\n                return \"\";\n \
    \           }\n            if (i == 0) {\n                return \"\";\n     \
    \       }\n            if (vowels.find(word[i + 1]) != std::string::npos) {\n\
    \                continue;\n            }\n            if (vowels.find(word[i\
    \ - 1]) != std::string::npos) {\n                continue;\n            }\n  \
    \          if (distance > word.size() - i) {\n                distance = word.size()\
    \ - i;\n                index = i;\n            }\n        }\n    }\n    if (index\
    \ != -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   int min = INT_MAX;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i + 1;\n            while (j < word.length() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.length()) {\n\
    \                if (j - i < min) {\n                    min = j - i;\n      \
    \              index = i;\n                }\n            }\n        }\n    }\n\
    \    if (index != -1) {\n        result = word[index];\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return \"\";\n    }\n    int first_consonant_index\
    \ = -1;\n    for (int i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            first_consonant_index = i;\n          \
    \  break;\n        }\n    }\n    if (first_consonant_index == -1) {\n        return\
    \ \"\";\n    }\n    int second_consonant_index = -1;\n    for (int i = first_consonant_index\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            second_consonant_index = i;\n            break;\n        }\n\
    \    }\n    if (second_consonant_index == -1) {\n        return \"\";\n    }\n\
    \    return word.substr(last_vowel_index, 1);", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (index !=\
    \ -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    int distance = 0;\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    for (int i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            distance = last_vowel_index - i;\n    \
    \        if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.size() - i;\n            if (distance < min_distance) {\n  \
    \              result = word[i];\n                min_distance = distance;\n \
    \           }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        for (int j\
    \ = 0; j < vowels.size(); j++) {\n            if (word[i] == vowels[j]) {\n  \
    \              int distance = 0;\n                for (int k = i; k < word.size();\
    \ k++) {\n                    if (vowels.find(word[k]) == std::string::npos) {\n\
    \                        distance++;\n                    } else {\n         \
    \               break;\n                    }\n                }\n           \
    \     if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    int len = word.length();\n    if (len\
    \ < 3) return \"\";\n    int i = len - 1;\n    while (i >= 0) {\n        if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            if (i == len - 1) {\n                i--;\n                continue;\n\
    \            }\n            if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i\
    \ + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u') {\n               \
    \ return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n \
    \   return \"\";", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = word.size() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  if(i == len - 1) {\n                i--;\n                continue;\n     \
    \       }\n            if(word[i + 1] != 'a' && word[i + 1] != 'e' && word[i +\
    \ 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u') {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    int distance = 0;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            distance = 0;\n            for (int j = i - 1; j >= 0; j--) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            result =\
    \ word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   pos = i;\n            break;\n        }\n    }\n    if (pos == -1) {\n   \
    \     return result;\n    }\n    for (int i = pos; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[pos];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   if (closest_vowel_index == -1) {\n                closest_vowel_index = i;\n\
    \            } else {\n                if (i + 1 < closest_vowel_index) {\n  \
    \                  closest_vowel_distance = closest_vowel_index - i - 1;\n   \
    \                 closest_vowel_index = i;\n                }\n            }\n\
    \        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n\
    \    }\n    return word.substr(closest_vowel_index, 1);", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = word.size() -\
    \ 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                index = i;\n         \
    \       min_distance = distance;\n            }\n        }\n    }\n    if (index\
    \ != -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel_index = i;\n            break;\n\
    \        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n\
    \    }\n    for (int i = closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(closest_vowel_index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result;\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index\
    \ = -1;\n    int closest_vowel_distance = -1;\n    for (int i = word.size() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel_distance = word.size() - 1 - i;\n      \
    \      } else {\n                int distance = closest_vowel_index - i;\n   \
    \             if (distance < closest_vowel_distance) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel_distance = distance;\n             \
    \   }\n            }\n        }\n    }\n    if (closest_vowel_index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(closest_vowel_index, 1);",
  "    std::string vowels = \"aeiou\";\n    int closest = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            closest = i;\n            break;\n        }\n    }\n    if (closest\
    \ == -1) return \"\";\n    for (int i = closest - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(closest,\
    \ 1);\n        }\n    }\n    return \"\";", "    int len = word.length();\n  \
    \  int i = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  if(i == len - 1) {\n                i--;\n                continue;\n     \
    \       }\n            if(word[i + 1] == 'a' || word[i + 1] == 'e' || word[i +\
    \ 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u') {\n                i--;\n\
    \                continue;\n            }\n            return word.substr(i, 1);\n\
    \        }\n        i--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.size(); j++) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    break;\n                }\n      \
    \          distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.size();\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (min_distance != word.size()) {\n     \
    \   result = word[index];\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (index !=\
    \ -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int pos = word.size() - 1;\n    while (pos >= 0) {\n\
    \        if (vowels.find(word[pos]) != std::string::npos) {\n            if (pos\
    \ > 0 && vowels.find(word[pos - 1]) == std::string::npos) {\n                return\
    \ word.substr(pos, 1);\n            }\n            else if (pos < word.size()\
    \ - 1 && vowels.find(word[pos + 1]) == std::string::npos) {\n                return\
    \ word.substr(pos, 1);\n            }\n        }\n        pos--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int i = 0; i\
    \ < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index\
    \ = -1;\n    int closest_vowel_distance = INT_MAX;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n            } else {\n                if (i - closest_vowel_index < closest_vowel_distance)\
    \ {\n                    closest_vowel_distance = i - closest_vowel_index;\n \
    \                   closest_vowel_index = i;\n                }\n            }\n\
    \        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n\
    \    }\n    return word.substr(closest_vowel_index, 1);", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                return word[index];\n            }\n        } else {\n\
    \            index = -1;\n        }\n    }\n    return result;", "    // your\
    \ code here\n    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            for (int j = i - 1; j >= 0; j--) {\n     \
    \           if (vowels.find(word[j]) == std::string::npos) {\n               \
    \     if (i - j < min_distance) {\n                        min_distance = i -\
    \ j;\n                        index = i;\n                    }\n            \
    \        break;\n                }\n            }\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(index, 1);", " \
    \   // your code here\n    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = word.size() - 1;\n    while (index >= 0) {\n      \
    \  if (vowels.find(word[index]) != std::string::npos) {\n            if (index\
    \ > 0 && vowels.find(word[index - 1]) == std::string::npos) {\n              \
    \  result = word[index];\n                break;\n            }\n            else\
    \ if (index == 0) {\n                result = word[index];\n                break;\n\
    \            }\n        }\n        index--;\n    }\n    return result;", "   \
    \ std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   if (closest_vowel_index == -1) {\n                closest_vowel_index = i;\n\
    \            } else {\n                int distance = closest_vowel_index - i;\n\
    \                if (distance < closest_vowel_distance) {\n                  \
    \  closest_vowel_distance = distance;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(closest_vowel_index,\
    \ 1);", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int index = 0;\n    int min_distance = INT_MAX;\n    for (int i = 0; i <\
    \ word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (min_distance != INT_MAX) {\n        result\
    \ = word[index];\n    }\n    return result;", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    int n = word.size();\n    int i = n - 1;\n  \
    \  while (i >= 0) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u') {\n            if (i == n - 1) {\n\
    \                if (i == 0) {\n                    return \"\";\n           \
    \     }\n                if (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i\
    \ - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u') {\n               \
    \     return word.substr(i, 1);\n                }\n            } else {\n   \
    \             if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i'\
    \ && word[i + 1] != 'o' && word[i + 1] != 'u') {\n                    return word.substr(i,\
    \ 1);\n                }\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) return \"\";\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return result;\n    }\n    for (int i = pos - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[pos];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = word.size() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    int pos = word.size() - 1;\n    while\
    \ (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n \
    \           if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos) {\n\
    \                return word.substr(pos, 1);\n            }\n            if (pos\
    \ < word.size() - 1 && vowels.find(word[pos + 1]) == std::string::npos) {\n  \
    \              return word.substr(pos, 1);\n            }\n        }\n       \
    \ pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n   \
    \ std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int i\
    \ = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = word.size() -\
    \ 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string result = \"\";\n    int vowel_index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    if\
    \ (vowel_index == -1) {\n        return result;\n    }\n    for (int i = vowel_index\
    \ - 1; i >= 0; i--) {\n        if (word[i] != 'a' && word[i] != 'e' && word[i]\
    \ != 'i' && word[i] != 'o' && word[i] != 'u') {\n            result = word[vowel_index];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int pos = -1;\n    int min_dist = INT_MAX;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            min_dist = std::min(min_dist, pos - i);\n            pos = i;\n\
    \        }\n    }\n    if (min_dist == INT_MAX) {\n        return \"\";\n    }\n\
    \    return word.substr(pos, min_dist + 1);", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = word.size() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   // your code here\n    std::string vowels = \"aeiou\";\n    int n = word.size();\n\
    \    int i = n-1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            return word[i];\n        }\n        i--;\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n \
    \   int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    int left = index - 1;\n    int right = index + 1;\n    while\
    \ (left >= 0 && right < word.size()) {\n        if (vowels.find(word[left]) ==\
    \ std::string::npos && vowels.find(word[right]) == std::string::npos) {\n    \
    \        return word.substr(index, 1);\n        }\n        left--;\n        right++;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   index = i;\n            break;\n        }\n    }\n    if (index == -1) {\n\
    \        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    int n = word.size();\n    int i = n - 1;\n    while (i >= 0)\
    \ {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if (i == n - 1) {\n               \
    \ return \"\";\n            }\n            return word.substr(i, 1);\n       \
    \ }\n        i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (index !=\
    \ -1) {\n        result = word[index];\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int i = word.size() - 1;\n    while (i >= 0) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ word.size() - 1) {\n                return \"\";\n            }\n          \
    \  if (vowels.find(word[i + 1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel_distance\
    \ = word.size() - i;\n            } else {\n                if (closest_vowel_distance\
    \ > i - closest_vowel_index) {\n                    closest_vowel_index = i;\n\
    \                    closest_vowel_distance = i - closest_vowel_index;\n     \
    \           }\n            }\n        }\n    }\n    if (closest_vowel_index !=\
    \ -1) {\n        result = word[closest_vowel_index];\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    int n = word.size();\n    int i = n - 1;\n    while (i >= 0)\
    \ {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if (i == n - 1) {\n               \
    \ return \"\";\n            }\n            if (word[i + 1] != 'a' && word[i +\
    \ 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u')\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   std::string result = \"\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string closest_vowel;\n    int closest_vowel_index =\
    \ -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = word.size()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.size() - 1) {\n                index--;\n \
    \               continue;\n            }\n            if (vowels.find(word[index\
    \ + 1]) != std::string::npos) {\n                index--;\n                continue;\n\
    \            }\n            result = word[index];\n            break;\n      \
    \  }\n        index--;\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0 && vowels.find(word[j]) != std::string::npos) {\n                j--;\n  \
    \          }\n            if (j >= 0) {\n                int k = i + 1;\n    \
    \            while (k < word.size() && vowels.find(word[k]) != std::string::npos)\
    \ {\n                    k++;\n                }\n                if (k < word.size())\
    \ {\n                    int distance = k - j;\n                    if (distance\
    \ < min_distance) {\n                        min_distance = distance;\n      \
    \                  result = word[i];\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            index = i;\n            break;\n        }\n\
    \    }\n    if (index == -1) return \"\";\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   return word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int len = word.length();\n    int i = len - 1;\n  \
    \  while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (i == len - 1) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[i + 1]) == std::string::npos) {\n          \
    \      return word.substr(i, 1);\n            }\n        }\n        i--;\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    int pos = word.size()\
    \ - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n            if\
    \ (pos < word.size() - 1 && vowels.find(word[pos + 1]) == std::string::npos) {\n\
    \                return word.substr(pos, 1);\n            }\n        }\n     \
    \   pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n  \
    \  std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int i\
    \ = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int temp = j - i;\n                if (temp\
    \ < distance) {\n                    distance = temp;\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.size(); j++) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    break;\n                }\n      \
    \          distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    int i = word.size()\
    \ - 1;\n    while (i >= 0) {\n        if (word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n            if (i ==\
    \ word.size() - 1) {\n                i--;\n                continue;\n      \
    \      }\n            if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i +\
    \ 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u') {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    if (min_distance > i - j) {\n \
    \                       min_distance = i - j;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int pos = -1;\n    for (int i = word.size() - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         pos = i;\n            break;\n        }\n    }\n    if (pos == -1) return\
    \ \"\";\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    int last_vowel_index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            last_vowel_index = i;\n            break;\n\
    \        }\n    }\n    if (last_vowel_index == -1) {\n        return \"\";\n \
    \   }\n    for (int i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(i + 1, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    int pos\
    \ = word.size() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos > 0 && vowels.find(word[pos - 1])\
    \ == std::string::npos) {\n                return word.substr(pos, 1);\n     \
    \       }\n            else if (pos < word.size() - 1 && vowels.find(word[pos\
    \ + 1]) == std::string::npos) {\n                return word.substr(pos, 1);\n\
    \            }\n        }\n        pos--;\n    }\n    return \"\";", "    int\
    \ n = word.size();\n    int i = n - 1;\n    while (i >= 0) {\n        if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            if (i == n - 1) return \"\";\n            if (word[i + 1] ==\
    \ 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i\
    \ + 1] == 'u') {\n                return \"\";\n            }\n            return\
    \ word.substr(i, 1);\n        }\n        i--;\n    }\n    return \"\";", "   \
    \ std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (closest_vowel_index == -1) {\n                closest_vowel_index = i;\n  \
    \              closest_vowel_distance = word.size() - i;\n            } else {\n\
    \                if (i + 1 < word.size() && vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                    if (closest_vowel_distance > word.size() - i) {\n   \
    \                     closest_vowel_index = i;\n                        closest_vowel_distance\
    \ = word.size() - i;\n                    }\n                }\n            }\n\
    \        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n\
    \    }\n    return word.substr(closest_vowel_index, 1);", "    std::string vowels\
    \ = \"aeiou\";\n    int len = word.length();\n    int i = len - 1;\n    while\
    \ (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n     \
    \       if (i == len - 1) {\n                return \"\";\n            }\n   \
    \         if (vowels.find(word[i + 1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                index = i;\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    int len\
    \ = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n    int\
    \ last_consonant_index = -1;\n    for (int i = 0; i < word.size(); i++) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            if (last_consonant_index\
    \ != -1) {\n                int distance = i - last_consonant_index;\n       \
    \         if (closest_vowel_distance == -1 || distance < closest_vowel_distance)\
    \ {\n                    closest_vowel_distance = distance;\n                \
    \    closest_vowel_index = i;\n                }\n            }\n        } else\
    \ {\n            last_consonant_index = i;\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    } else {\n        return word.substr(closest_vowel_index,\
    \ 1);\n    }"]
stop_tokens:
- "\n}"
