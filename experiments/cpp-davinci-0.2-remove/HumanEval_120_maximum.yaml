name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1.\
  \ The length of the array will be in the range of [1, 1000].\n// 2. The elements\
  \ in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\n\
  std::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
  \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
  \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
  \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
  \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
  \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15,\
  \ (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
  \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
  \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
  \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
  }\n"
completions: ["    std::vector<long> result;\n    if (arr.size() == 0) {\n       \
    \ return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size()\
    \ < k) {\n            min_heap.push(arr[i]);\n        } else {\n            if\
    \ (min_heap.top() < arr[i]) {\n                min_heap.pop();\n             \
    \   min_heap.push(arr[i]);\n            }\n        }\n    }\n    while (!min_heap.empty())\
    \ {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.size() == 0)\
    \ {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n   \
    \         if (pq.top() < arr[i]) {\n                pq.pop();\n              \
    \  pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ {\n            pq.push(arr[i]);\n        } else {\n            if (pq.top()\
    \ < arr[i]) {\n                pq.pop();\n                pq.push(arr[i]);\n \
    \           }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n \
    \   }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (arr[i] > min_heap.top()) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    if (arr.size()\
    \ == 1) {\n        result.push_back(arr[0]);\n        return result;\n    }\n\
    \    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    for (long i = 0; i < k; i++) {\n   \
    \     result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while(k--)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ {\n            pq.push(arr[i]);\n        } else {\n            if (pq.top()\
    \ < arr[i]) {\n                pq.pop();\n                pq.push(arr[i]);\n \
    \           }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i=0; i<arr.size(); i++) {\n \
    \       pq.push(arr[i]);\n    }\n    for(long i=0; i<k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::make_heap(result.begin(),\
    \ result.end());\n    for(int i = k; i < arr.size(); i++) {\n        if(arr[i]\
    \ > result[0]) {\n            std::pop_heap(result.begin(), result.end());\n \
    \           result.pop_back();\n            result.push_back(arr[i]);\n      \
    \      std::push_heap(result.begin(), result.end());\n        }\n    }\n    std::sort_heap(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n \
    \   }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    // Write your code here\n\
    \    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(pq.size() < k){\n            pq.push(arr[i]);\n        }\n\
    \        else{\n            if(arr[i] > pq.top()){\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while(!pq.empty()){\n\
    \        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (pq.top() < arr[i])\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(long i = 0;\
    \ i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    for(long i = k; i < arr.size(); i++) {\n        if(arr[i]\
    \ > result[0]) {\n            result[0] = arr[i];\n            std::sort(result.begin(),\
    \ result.end());\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> res;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n   \
    \         if (pq.top() < arr[i]) {\n                pq.pop();\n              \
    \  pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n    \
    \    pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n \
    \   std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    for(int i = k; i < arr.size(); i++) {\n        if(arr[i]\
    \ > result[0]) {\n            result[0] = arr[i];\n            std::sort(result.begin(),\
    \ result.end());\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::priority_queue<long> pq;\n    for(auto i: arr) {\n       \
    \ pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n        }\n\
    \    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n      \
    \  pq.pop();\n    }\n    return result;", "    std::vector<long> res;\n    if(arr.size()\
    \ == 0)\n        return res;\n    std::priority_queue<long> pq;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n        if(pq.size()\
    \ > k)\n            pq.pop();\n    }\n    while(!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n    \
    \        if (arr[i] > pq.top()) {\n                pq.pop();\n               \
    \ pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (minHeap.size() < k)\
    \ {\n            minHeap.push(arr[i]);\n        } else {\n            if (minHeap.top()\
    \ < arr[i]) {\n                minHeap.pop();\n                minHeap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ max_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    if (arr.size() == 1) {\n       \
    \ result.push_back(arr[0]);\n        return result;\n    }\n    if (arr.size()\
    \ == k) {\n        return arr;\n    }\n    std::priority_queue<long> pq;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n  \
    \  for (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n      \
    \  pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n   \
    \ std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::priority_queue<long> pq;\n    for(long i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long>\
    \ ans;\n    while(k--) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i=0; i<arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    while(k--) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (arr[i] > min_heap.top()) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (minHeap.size() < k)\
    \ {\n            minHeap.push(arr[i]);\n        } else {\n            if (minHeap.top()\
    \ < arr[i]) {\n                minHeap.pop();\n                minHeap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k) {\n \
    \           pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto\
    \ i : arr) {\n        pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (min_heap.top() < arr[i]) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while(k--)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n     \
    \   pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    if (arr.size()\
    \ == 1) {\n        result.push_back(arr[0]);\n        return result;\n    }\n\
    \    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    for (long i = 0; i < k; i++) {\n   \
    \     result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for(int i\
    \ = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n \
    \   }\n    while(k > 0) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \        k--;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto a: arr) {\n        pq.push(a);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto\
    \ i: arr) {\n        pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto\
    \ i : arr) {\n        pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i=0; i<arr.size(); i++) {\n \
    \       pq.push(arr[i]);\n    }\n    for(long i=0; i<k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.size() == 0)\
    \ {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (arr[i] > min_heap.top()) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    while(k--) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n    \
    \        if (arr[i] > pq.top()) {\n                pq.pop();\n               \
    \ pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) return result;\n    if (arr.size() <= k) return arr;\n    for (long i\
    \ = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::make_heap(result.begin(),\
    \ result.end());\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i]\
    \ > result[0]) {\n            std::pop_heap(result.begin(), result.end());\n \
    \           result.pop_back();\n            result.push_back(arr[i]);\n      \
    \      std::push_heap(result.begin(), result.end());\n        }\n    }\n    std::sort_heap(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n   \
    \         if (pq.top() < arr[i]) {\n                pq.pop();\n              \
    \  pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    if (arr.size() == 1) {\n        result.push_back(arr[0]);\n\
    \        return result;\n    }\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) return result;\n    if (arr.size() == 1) {\n        result.push_back(arr[0]);\n\
    \        return result;\n    }\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n   \
    \         if (pq.top() < arr[i]) {\n                pq.pop();\n              \
    \  pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size()\
    \ < k) {\n            min_heap.push(arr[i]);\n        } else {\n            if\
    \ (min_heap.top() < arr[i]) {\n                min_heap.pop();\n             \
    \   min_heap.push(arr[i]);\n            }\n        }\n    }\n    while (!min_heap.empty())\
    \ {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.size() == 0)\
    \ {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n      \
    \  } else {\n            if (minHeap.top() < arr[i]) {\n                minHeap.pop();\n\
    \                minHeap.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    if (arr.size() == 1) {\n        result.push_back(arr[0]);\n      \
    \  return result;\n    }\n    std::priority_queue<long> pq;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while (k > 0)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n        k--;\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    for(int i = k; i < arr.size(); i++) {\n        if(arr[i]\
    \ > result[0]) {\n            result[0] = arr[i];\n            std::sort(result.begin(),\
    \ result.end());\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::priority_queue<long> pq;\n    for(auto i: arr) {\n       \
    \ pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n        }\n\
    \    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n      \
    \  pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ {\n            pq.push(arr[i]);\n        } else {\n            if (pq.top()\
    \ < arr[i]) {\n                pq.pop();\n                pq.push(arr[i]);\n \
    \           }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    if (arr.size() == 1) {\n       \
    \ result.push_back(arr[0]);\n        return result;\n    }\n    std::priority_queue<long>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while(k--)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ {\n            pq.push(arr[i]);\n        } else {\n            if (pq.top()\
    \ < arr[i]) {\n                pq.pop();\n                pq.push(arr[i]);\n \
    \           }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size()\
    \ < k) {\n            min_heap.push(arr[i]);\n        } else {\n            if\
    \ (min_heap.top() < arr[i]) {\n                min_heap.pop();\n             \
    \   min_heap.push(arr[i]);\n            }\n        }\n    }\n    while (!min_heap.empty())\
    \ {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n\
    \    std::reverse(result.begin(), result.end());\n    return result;", "    std::vector<long>\
    \ result;\n    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto\
    \ i : arr) {\n        pq.push(i);\n        if(pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) return result;\n    if (arr.size() == 1) {\n       \
    \ result.push_back(arr[0]);\n        return result;\n    }\n    std::priority_queue<long>\
    \ pq;\n    for (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    if (arr.size()\
    \ <= k) {\n        return arr;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < k; i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > pq.top())\
    \ {\n            pq.pop();\n            pq.push(arr[i]);\n        }\n    }\n \
    \   while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (min_heap.top() < arr[i]) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (min_heap.top() < arr[i]) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    for(int i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n\
    \    std::sort(result.begin(), result.end());\n    for(int i = k; i < arr.size();\
    \ i++) {\n        if(arr[i] > result[0]) {\n            result[0] = arr[i];\n\
    \            std::sort(result.begin(), result.end());\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    while(k--) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (min_heap.top() < arr[i]) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "\tstd::vector<long> res;\n\t\
    std::priority_queue<long> pq;\n\tfor (auto i : arr) {\n\t\tpq.push(i);\n\t\tif\
    \ (pq.size() > k) {\n\t\t\tpq.pop();\n\t\t}\n\t}\n\twhile (!pq.empty()) {\n\t\t\
    res.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\tstd::reverse(res.begin(), res.end());\n\
    \treturn res;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n \
    \       return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n      \
    \  } else {\n            if (minHeap.top() < arr[i]) {\n                minHeap.pop();\n\
    \                minHeap.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n \
    \   }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto num : arr) {\n        pq.push(num);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> minHeap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n\
    \        } else {\n            if (minHeap.top() < arr[i]) {\n               \
    \ minHeap.pop();\n                minHeap.push(arr[i]);\n            }\n     \
    \   }\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    while(k--) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> max_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        max_heap.push(arr[i]);\n    }\n    while (k > 0) {\n       \
    \ result.push_back(max_heap.top());\n        max_heap.pop();\n        k--;\n \
    \   }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n    \
    \        if (arr[i] > pq.top()) {\n                pq.pop();\n               \
    \ pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size() < k)\
    \ {\n            min_heap.push(arr[i]);\n        } else {\n            if (min_heap.top()\
    \ < arr[i]) {\n                min_heap.pop();\n                min_heap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (auto i : arr) {\n     \
    \   if (pq.size() < k) {\n            pq.push(i);\n        } else {\n        \
    \    if (pq.top() < i) {\n                pq.pop();\n                pq.push(i);\n\
    \            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> res;\n\
    \    if(arr.size() == 0) return res;\n    std::priority_queue<long> pq;\n    for(int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n        if(pq.size()\
    \ > k) pq.pop();\n    }\n    while(!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    if (arr.size()\
    \ == 1) {\n        result.push_back(arr[0]);\n        return result;\n    }\n\
    \    std::priority_queue<long> max_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        max_heap.push(arr[i]);\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.size() == 0)\
    \ {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n      \
    \  } else {\n            if (minHeap.top() < arr[i]) {\n                minHeap.pop();\n\
    \                minHeap.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (auto i : arr) {\n        if (pq.size() < k) {\n            pq.push(i);\n\
    \        } else {\n            if (pq.top() < i) {\n                pq.pop();\n\
    \                pq.push(i);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  if (arr.size() == 0) {\n    return\
    \ result;\n  }\n  std::priority_queue<long> max_heap;\n  for (long i = 0; i <\
    \ arr.size(); i++) {\n    max_heap.push(arr[i]);\n  }\n  for (long i = 0; i <\
    \ k; i++) {\n    result.push_back(max_heap.top());\n    max_heap.pop();\n  }\n\
    \  return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> res;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i=0; i<arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for(long i=0; i<k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n \
    \   }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (minHeap.size() < k)\
    \ {\n            minHeap.push(arr[i]);\n        } else {\n            if (minHeap.top()\
    \ < arr[i]) {\n                minHeap.pop();\n                minHeap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> res;\n\
    \    if(k == 0) return res;\n    std::priority_queue<long> pq;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n        if(pq.size()\
    \ > k) pq.pop();\n    }\n    while(!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (arr[i] > min_heap.top()) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n    \
    \    } else {\n            if (arr[i] > min_heap.top()) {\n                min_heap.pop();\n\
    \                min_heap.push(arr[i]);\n            }\n        }\n    }\n   \
    \ while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n   \
    \     min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    if (arr.size()\
    \ <= k) {\n        return arr;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < k; i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > pq.top())\
    \ {\n            pq.pop();\n            pq.push(arr[i]);\n        }\n    }\n \
    \   while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ max_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n     \
    \   return result;\n    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ {\n            pq.push(arr[i]);\n        } else {\n            if (pq.top()\
    \ < arr[i]) {\n                pq.pop();\n                pq.push(arr[i]);\n \
    \           }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i : arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (min_heap.top() < arr[i]) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (pq.top() < arr[i])\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> minHeap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n\
    \        } else {\n            if (minHeap.top() < arr[i]) {\n               \
    \ minHeap.pop();\n                minHeap.push(arr[i]);\n            }\n     \
    \   }\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    for (long i = 0; i <\
    \ k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i]\
    \ > result[0]) {\n            result[0] = arr[i];\n            std::sort(result.begin(),\
    \ result.end());\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (pq.top() < arr[i])\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n       \
    \ } else {\n            if (minHeap.top() < arr[i]) {\n                minHeap.pop();\n\
    \                minHeap.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::make_heap(result.begin(),\
    \ result.end());\n    for(int i = k; i < arr.size(); i++) {\n        if(arr[i]\
    \ > result[0]) {\n            std::pop_heap(result.begin(), result.end());\n \
    \           result.pop_back();\n            result.push_back(arr[i]);\n      \
    \      std::push_heap(result.begin(), result.end());\n        }\n    }\n    std::sort_heap(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    while(k--) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while(k--)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::priority_queue<long> pq;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n    \
    \    pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n \
    \   std::priority_queue<long> pq;\n    for(long i=0; i<arr.size(); i++) {\n  \
    \      pq.push(arr[i]);\n    }\n    for(long i=0; i<k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    while(k > 0) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n        k--;\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i: arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size() < k)\
    \ {\n            min_heap.push(arr[i]);\n        } else {\n            if (min_heap.top()\
    \ < arr[i]) {\n                min_heap.pop();\n                min_heap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ maxHeap;\n    for (auto i : arr) {\n        maxHeap.push(i);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(maxHeap.top());\n      \
    \  maxHeap.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for(auto i: arr) {\n        pq.push(i);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.size() == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (pq.top() < arr[i])\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (min_heap.size() < k) {\n            min_heap.push(arr[i]);\n\
    \        } else {\n            if (arr[i] > min_heap.top()) {\n              \
    \  min_heap.pop();\n                min_heap.push(arr[i]);\n            }\n  \
    \      }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;", "    std::vector<long> res;\n\
    \    if(arr.size() == 0 || k == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(pq.size() < k) {\n            pq.push(arr[i]);\n        }\
    \ else {\n            if(arr[i] > pq.top()) {\n                pq.pop();\n   \
    \             pq.push(arr[i]);\n            }\n        }\n    }\n    while(!pq.empty())\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;"]
stop_tokens:
- "\n}"
