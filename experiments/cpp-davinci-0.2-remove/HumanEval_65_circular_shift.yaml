name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\nstd::string\
  \ circular_shift(long x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["  std::string s = std::to_string(x);\n  if (shift > s.size()) {\n \
    \   std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    std::string r = \"\";\n    if (shift > s.length()) {\n        for (int i\
    \ = s.length() - 1; i >= 0; i--) {\n            r += s[i];\n        }\n      \
    \  return r;\n    }\n    for (int i = shift; i < s.length(); i++) {\n        r\
    \ += s[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        r += s[i];\n\
    \    }\n    return r;", "    std::string s = std::to_string(x);\n    if (shift\
    \ >= s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;", "    std::string str = std::to_string(x);\n \
    \   std::reverse(str.begin(), str.end());\n    if (shift > str.size()) {\n   \
    \     return str;\n    }\n    std::string str1 = str.substr(0, shift);\n    std::string\
    \ str2 = str.substr(shift, str.size() - shift);\n    return str2 + str1;", " \
    \   std::string digits = std::to_string(x);\n    if (shift > digits.size()) {\n\
    \        std::reverse(digits.begin(), digits.end());\n        return digits;\n\
    \    }\n    std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \    return digits;", "    std::string s = std::to_string(x);\n    std::string\
    \ res = \"\";\n    if (shift > s.length()) {\n        for (int i = s.length()\
    \ - 1; i >= 0; i--) {\n            res += s[i];\n        }\n        return res;\n\
    \    }\n    for (int i = shift; i < s.length(); i++) {\n        res += s[i];\n\
    \    }\n    for (int i = 0; i < shift; i++) {\n        res += s[i];\n    }\n \
    \   return res;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift >= s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n    return\
    \ s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s1 + s2;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string digits = std::to_string(x);\n    if (shift >\
    \ digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n    \
    \    return digits;\n    }\n    std::rotate(digits.begin(), digits.begin() + shift,\
    \ digits.end());\n    return digits;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::string t = s.substr(shift, s.size() - shift);\n \
    \   t += s.substr(0, shift);\n    return t;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string str = std::to_string(x);\n    if (shift > str.length()) {\n   \
    \     std::reverse(str.begin(), str.end());\n        return str;\n    }\n    std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    std::reverse(str.begin(),\
    \ str.end());\n    if (shift > str.size()) {\n        return str;\n    }\n   \
    \ std::string shifted = str.substr(0, shift);\n    std::reverse(shifted.begin(),\
    \ shifted.end());\n    str.erase(0, shift);\n    str += shifted;\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string\
    \ s2 = s.substr(shift);\n    return s2 + s1;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  // TODO: Implement this function.\n  std::string str = std::to_string(x);\n\
    \  std::string result = \"\";\n  if (shift > str.length()) {\n    for (int i =\
    \ str.length() - 1; i >= 0; i--) {\n      result += str[i];\n    }\n    return\
    \ result;\n  }\n  for (int i = shift; i < str.length(); i++) {\n    result +=\
    \ str[i];\n  }\n  for (int i = 0; i < shift; i++) {\n    result += str[i];\n \
    \ }\n  return result;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift);\n    return s2 + s1;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string result = s.substr(shift)\
    \ + s.substr(0, shift);\n    return result;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::string result = s.substr(shift) + s.substr(0, shift);\n    return\
    \ result;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::string result = s.substr(shift) + s.substr(0, shift);\n  return result;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string result = s.substr(s.size()\
    \ - shift, shift);\n    result += s.substr(0, s.size() - shift);\n    return result;",
  "    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        return s;\n    }\n    std::string a = s.substr(0,\
    \ shift);\n    std::string b = s.substr(shift);\n    return b + a;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "  std::string\
    \ s = std::to_string(x);\n  std::string result = s;\n  if (shift > s.size()) {\n\
    \    std::reverse(result.begin(), result.end());\n  } else {\n    result = s.substr(shift)\
    \ + s.substr(0, shift);\n  }\n  return result;", "    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    }\n    std::rotate(digits.begin(), digits.begin()\
    \ + shift, digits.end());\n    return digits;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift >= s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string result = std::to_string(x);\n\
    \    if (shift > result.size()) {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }\n    std::rotate(result.begin(), result.begin()\
    \ + shift, result.end());\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + s.size() - shift, s.end());\n  return s;", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::string str1 = str.substr(str.length()\
    \ - shift, shift);\n    std::string str2 = str.substr(0, str.length() - shift);\n\
    \    return str1 + str2;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s1 + s2;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift >= s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string digits = std::to_string(x);\n\
    \    std::string result;\n    if (shift > digits.size()) {\n        for (int i\
    \ = digits.size() - 1; i >= 0; i--) {\n            result += digits[i];\n    \
    \    }\n    } else {\n        for (int i = shift; i < digits.size(); i++) {\n\
    \            result += digits[i];\n        }\n        for (int i = 0; i < shift;\
    \ i++) {\n            result += digits[i];\n        }\n    }\n    return result;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string left = s.substr(0, shift);\n    std::string right\
    \ = s.substr(shift);\n    std::reverse(left.begin(), left.end());\n    std::reverse(right.begin(),\
    \ right.end());\n    return left + right;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string digits = std::to_string(x);\n    std::string\
    \ result = \"\";\n    if (shift > digits.length()) {\n        for (int i = digits.length()\
    \ - 1; i >= 0; i--) {\n            result += digits[i];\n        }\n    } else\
    \ {\n        for (int i = shift; i < digits.length(); i++) {\n            result\
    \ += digits[i];\n        }\n        for (int i = 0; i < shift; i++) {\n      \
    \      result += digits[i];\n        }\n    }\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string digits = std::to_string(x);\n\
    \  if (shift > digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n\
    \    return digits;\n  }\n  std::rotate(digits.begin(), digits.begin() + shift,\
    \ digits.end());\n  return digits;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift);\n    return s2 + s1;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string\
    \ s2 = s.substr(shift);\n    return s2 + s1;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string\
    \ s2 = s.substr(shift);\n    return s2 + s1;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(s.size()\
    \ - shift);\n    std::string s2 = s.substr(0, s.size() - shift);\n    return s1\
    \ + s2;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string t = s.substr(shift, s.size()\
    \ - shift);\n    t += s.substr(0, shift);\n    return t;", "    std::string s\
    \ = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string a = s.substr(0, shift);\n\
    \    std::string b = s.substr(shift);\n    return b + a;", "    std::string s\
    \ = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    }\n    std::rotate(digits.begin(), digits.begin()\
    \ + shift, digits.end());\n    return digits;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string digits = std::to_string(x);\n    if (shift >\
    \ digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n    \
    \    return digits;\n    }\n    std::string shifted = digits.substr(digits.size()\
    \ - shift) + digits.substr(0, digits.size() - shift);\n    return shifted;", " \
    \   std::string s = std::to_string(x);\n    std::string res = \"\";\n    if (shift\
    \ > s.length()) {\n        for (int i = s.length() - 1; i >= 0; i--) {\n     \
    \       res += s[i];\n        }\n        return res;\n    }\n    for (int i =\
    \ shift; i < s.length(); i++) {\n        res += s[i];\n    }\n    for (int i =\
    \ 0; i < shift; i++) {\n        res += s[i];\n    }\n    return res;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string digits = std::to_string(x);\n    if (shift >\
    \ digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n    \
    \    return digits;\n    }\n    std::rotate(digits.begin(), digits.begin() + shift,\
    \ digits.end());\n    return digits;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::string str1 = str.substr(0, shift);\n    std::string str2 = str.substr(shift,\
    \ str.length() - shift);\n    str = str2 + str1;\n    return str;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \   std::string s = std::to_string(x);\n    std::string result = \"\";\n    if\
    \ (shift > s.length()) {\n        for (int i = s.length() - 1; i >= 0; i--) {\n\
    \            result += s[i];\n        }\n        return result;\n    }\n    for\
    \ (int i = s.length() - shift; i < s.length(); i++) {\n        result += s[i];\n\
    \    }\n    for (int i = 0; i < s.length() - shift; i++) {\n        result +=\
    \ s[i];\n    }\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string s1 = s.substr(0, s.size() - shift);\n    std::string s2 = s.substr(s.size()\
    \ - shift, shift);\n    return s2 + s1;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    s += s;\n\
    \    return s.substr(0, s.size() - shift);", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::string s2 = s;\n    for (int\
    \ i = 0; i < shift; i++) {\n        s2[i] = s[s.size() - shift + i];\n    }\n\
    \    for (int i = shift; i < s.size(); i++) {\n        s2[i] = s[i - shift];\n\
    \    }\n    return s2;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string digits = std::to_string(x);\n    if (shift > digits.size()) {\n\
    \        std::reverse(digits.begin(), digits.end());\n        return digits;\n\
    \    }\n    std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \    return digits;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ digits = std::to_string(x);\n    std::string result = \"\";\n    if (shift >\
    \ digits.length()) {\n        for (int i = digits.length() - 1; i >= 0; i--) {\n\
    \            result += digits[i];\n        }\n    } else {\n        for (int i\
    \ = shift; i < digits.length(); i++) {\n            result += digits[i];\n   \
    \     }\n        for (int i = 0; i < shift; i++) {\n            result += digits[i];\n\
    \        }\n    }\n    return result;", "    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    }\n    std::string result = digits.substr(digits.size()\
    \ - shift) + digits.substr(0, digits.size() - shift);\n    return result;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift);\n    return s2 + s1;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string str = std::to_string(x);\n    if (shift > str.length()) {\n   \
    \     std::reverse(str.begin(), str.end());\n        return str;\n    }\n    std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string result = s.substr(shift) + s.substr(0,\
    \ shift);\n    return result;", "    std::string s = std::to_string(x);\n    if\
    \ (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n    std::string result = s.substr(shift) + s.substr(0, shift);\n\
    \    return result;"]
stop_tokens:
- "\n}"
