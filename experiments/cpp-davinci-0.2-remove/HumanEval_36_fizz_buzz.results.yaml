language: cpp
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long temp=i;\n       \
    \     while(temp!=0)\n            {\n                if(temp%10==7)\n        \
    \        {\n                    count++;\n                    break;\n       \
    \         }\n                temp=temp/10;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpwuxrw08_: /tmp/tmpwuxrw08_.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      long temp = i;\n      while(temp\
    \ > 0) {\n        if(temp % 10 == 7) {\n          count++;\n          break;\n\
    \        }\n        temp /= 10;\n      }\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp4mgvjuz7: /tmp/tmp4mgvjuz7.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    int count = 0;\n    for(int i = 7; i < n; i++) {\n\
    \        if(i % 11 == 0 || i % 13 == 0) {\n            int temp = i;\n       \
    \     while(temp > 0) {\n                if(temp % 10 == 7) {\n              \
    \      count++;\n                    break;\n                }\n             \
    \   temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpau9y9sy4: /tmp/tmpau9y9sy4.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num != 0) {\n                if(num % 10 == 7) {\n           \
    \         count++;\n                    break;\n                }\n          \
    \      num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpqz7hjkrf: /tmp/tmpqz7hjkrf.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for(int j = 0; j < str.length(); j++) {\n        if(str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(char c : str) {\n                if(c == '7') {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i <= n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j < s.length(); j++) {\n        if(s[j] == '7') {\n    \
    \      count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpguyk2yc5: /tmp/tmpguyk2yc5.cpp:21: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0||i%13==0)\n        {\n            long temp=i;\n         \
    \   while(temp!=0)\n            {\n                if(temp%10==7)\n          \
    \      {\n                    count++;\n                    break;\n         \
    \       }\n                temp=temp/10;\n            }\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpwwtqb6g4: /tmp/tmpwwtqb6g4.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i +=\
    \ 11) {\n        if(i % 13 == 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp_vzq0cme: /tmp/tmp_vzq0cme.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i +=\
    \ 7) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmphe3xg_64: /tmp/tmphe3xg_64.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpew7s8q5d: /tmp/tmpew7s8q5d.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(long j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxmolfnla: /tmp/tmpxmolfnla.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      long num = i;\n      while(num >\
    \ 0) {\n        if(num % 10 == 7) {\n          count++;\n          break;\n  \
    \      }\n        num /= 10;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp81822uei: /tmp/tmp81822uei.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count=0;\n  for(long i=1;i<n;i++)\n  {\n    if(i%11==0\
    \ || i%13==0)\n    {\n      long temp=i;\n      while(temp!=0)\n      {\n    \
    \    if(temp%10==7)\n        {\n          count++;\n          break;\n       \
    \ }\n        temp=temp/10;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp7ju631hq: /tmp/tmp7ju631hq.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if((i % 11 == 0 || i % 13 == 0) && i % 10 == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmp864chvgh: /tmp/tmp864chvgh.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0||i%13==0)\n        {\n            long temp=i;\n         \
    \   while(temp!=0)\n            {\n                if(temp%10==7)\n          \
    \      {\n                    count++;\n                    break;\n         \
    \       }\n                temp=temp/10;\n            }\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpwwtqb6g4: /tmp/tmpwwtqb6g4.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      long temp = i;\n      while(temp\
    \ > 0) {\n        if(temp % 10 == 7) {\n          count++;\n          break;\n\
    \        }\n        temp /= 10;\n      }\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp4mgvjuz7: /tmp/tmp4mgvjuz7.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 0; i < n; i++){\n\
    \    if(i % 11 == 0 || i % 13 == 0){\n      std::string str = std::to_string(i);\n\
    \      for(int j = 0; j < str.length(); j++){\n        if(str[j] == '7'){\n  \
    \        count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(char c : s) {\n                if(c == '7') {\n             \
    \       count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 0; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j < s.length(); j++) {\n        if(s[j] == '7') {\n    \
    \      count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7')\n                    count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i+=7)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmphfyqv71t: /tmp/tmphfyqv71t.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long temp=i;\n       \
    \     while(temp>0)\n            {\n                if(temp%10==7)\n         \
    \       {\n                    count++;\n                    break;\n        \
    \        }\n                temp=temp/10;\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp17uryr7l: /tmp/tmp17uryr7l.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j < s.length(); j++) {\n        if(s[j] == '7') {\n    \
    \      count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long temp=i;\n       \
    \     while(temp!=0)\n            {\n                if(temp%10==7)\n        \
    \        {\n                    count++;\n                    break;\n       \
    \         }\n                temp=temp/10;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpwuxrw08_: /tmp/tmpwuxrw08_.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmp3y08yx2r: /tmp/tmp3y08yx2r.cpp:21: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long temp=i;\n       \
    \     while(temp>0)\n            {\n                if(temp%10==7)\n         \
    \       {\n                    count++;\n                    break;\n        \
    \        }\n                temp=temp/10;\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp17uryr7l: /tmp/tmp17uryr7l.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i +=\
    \ 11) {\n        if(i % 13 == 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp_vzq0cme: /tmp/tmp_vzq0cme.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j < s.length(); j++) {\n        if(s[j] == '7') {\n    \
    \      count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    // Write your code here\n    long count = 0;\n \
    \   for(long i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          long temp = i;\n            while(temp > 0){\n                if(temp\
    \ % 10 == 7){\n                    count++;\n                    break;\n    \
    \            }\n                temp /= 10;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpg3zipe6g: /tmp/tmpg3zipe6g.cpp:24: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(long j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if((i % 11 == 0) || (i % 13 == 0)) {\n            long temp = i;\n\
    \            while(temp > 0) {\n                if(temp % 10 == 7) {\n       \
    \             count++;\n                }\n                temp /= 10;\n     \
    \       }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long num=i;\n        \
    \    while(num>0)\n            {\n                if(num%10==7)\n            \
    \    {\n                    count++;\n                    break;\n           \
    \     }\n                num=num/10;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp545iorqw: /tmp/tmp545iorqw.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i +=\
    \ 7) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmphe3xg_64: /tmp/tmphe3xg_64.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long number = i;\n\
    \            while(number > 0) {\n                if(number % 10 == 7) {\n   \
    \                 count++;\n                }\n                number /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(char c : s) {\n                if(c == '7') {\n             \
    \       count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxmolfnla: /tmp/tmpxmolfnla.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long num = i;\n        \
    \    while(num > 0){\n                if(num % 10 == 7){\n                   \
    \ count++;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp0mwnp42b: /tmp/tmp0mwnp42b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if((i % 11 == 0) || (i % 13 == 0)) {\n            long num = i;\n\
    \            while(num > 0) {\n                if(num % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmphdiaw3qw: /tmp/tmphdiaw3qw.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp2uvpze3g: /tmp/tmp2uvpze3g.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++){\n                if(s[j] ==\
    \ '7'){\n                    count++;\n                }\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for(int j = 0; j < str.length(); j++) {\n        if(str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i+=7)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmphfyqv71t: /tmp/tmphfyqv71t.cpp:16: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++)\n    {\n\
    \        if(i%11==0 || i%13==0)\n        {\n            long temp=i;\n       \
    \     while(temp>0)\n            {\n                if(temp%10==7)\n         \
    \       {\n                    count++;\n                    break;\n        \
    \        }\n                temp=temp/10;\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp17uryr7l: /tmp/tmp17uryr7l.cpp:27: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++){\n                if(str[j]\
    \ == '7'){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n   \
    \         while(num > 0) {\n                if(num % 10 == 7) {\n            \
    \        count++;\n                    break;\n                }\n           \
    \     num /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxc_3g3fe: /tmp/tmpxc_3g3fe.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(long j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j < s.length(); j++) {\n        if(s[j] == '7') {\n    \
    \      count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(int j = 0; j < str.length(); j++) {\n                if(str[j]\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(char c : str) {\n                if(c == '7') {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n\
    \    if(i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for(int j = 0; j < str.length(); j++) {\n        if(str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++){\n\
    \        if(i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n       \
    \     while(temp > 0){\n                if(temp % 10 == 7){\n                \
    \    count++;\n                    break;\n                }\n               \
    \ temp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpdlxrm3_b: /tmp/tmpdlxrm3_b.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 7; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long j = i;\n     \
    \       while(j > 0) {\n                if(j % 10 == 7) {\n                  \
    \  count++;\n                    break;\n                }\n                j\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpj8zm402l: /tmp/tmpj8zm402l.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp != 0) {\n                if(temp % 10 == 7) {\n        \
    \            count++;\n                }\n                temp /= 10;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n\
    \            for(char c : str) {\n                if(c == '7') {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmp3lz28f62: /tmp/tmp3lz28f62.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long j = i;\n     \
    \       while(j > 0) {\n                if(j % 10 == 7) {\n                  \
    \  count++;\n                    break;\n                }\n                j\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpeg_0tjqa: /tmp/tmpeg_0tjqa.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n  \
    \          while(temp > 0) {\n                if(temp % 10 == 7) {\n         \
    \           count++;\n                    break;\n                }\n        \
    \        temp /= 10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxmolfnla: /tmp/tmpxmolfnla.cpp:23: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    long fizz_buzz(long n) {\n    long count = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for(int j = 0; j < s.length(); j++) {\n                if(s[j] ==\
    \ '7') {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126846
