language: cpp
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n\
    \    int dot_index_end = 0;\n    int dot_index_start = 0;\n    int dot_index_start_end\
    \ = 0;\n    int dot_index_end_end = 0;\n    int dot_index_start_start = 0;\n \
    \   int dot_index_end_start = 0;\n    int dot_index_start_start_end = 0;\n   \
    \ int dot_index_end_start_end = 0;\n    int dot_index_start_end_end = 0;\n   \
    \ int dot_index_end_end_end = 0;\n    int dot_index_start_start_start = 0;\n \
    \   int dot_index_end_start_start = 0;\n    int dot_index_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_end = 0;\n    int dot_index_start_start_end_end\
    \ = 0;\n    int dot_index_end_start_end_end = 0;\n    int dot_index_start_end_end_end\
    \ = 0;\n    int dot_index_end_end_end_end = 0;\n    int dot_index_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start = 0;\n    int dot_index_start_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_start_end = 0;\n    int dot_index_start_start_start_end_end\
    \ = 0;\n    int dot_index_end_start_start_end_end = 0;\n    int dot_index_start_start_end_end_end\
    \ = 0;\n    int dot_index_end_start_end_end_end = 0;\n    int dot_index_start_end_end_end_end\
    \ = 0;\n    int dot_index_end_end_end_end_end = 0;\n    int dot_index_start_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start_start = 0\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbu6wbwb.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpvbu6wbwb.cpp:47:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpvbu6wbwb.cpp:47:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n\
    \    int count_after_dot = 0;\n    int count_before_dot = 0;\n    int count_after_dot_index\
    \ = 0;\n    int count_before_dot_index = 0;\n    int count_after_dot_index_2 =\
    \ 0;\n    int count_before_dot_index_2 = 0;\n    int count_after_dot_index_3 =\
    \ 0;\n    int count_before_dot_index_3 = 0;\n    int count_after_dot_index_4 =\
    \ 0;\n    int count_before_dot_index_4 = 0;\n    int count_after_dot_index_5 =\
    \ 0;\n    int count_before_dot_index_5 = 0;\n    int count_after_dot_index_6 =\
    \ 0;\n    int count_before_dot_index_6 = 0;\n    int count_after_dot_index_7 =\
    \ 0;\n    int count_before_dot_index_7 = 0;\n    int count_after_dot_index_8 =\
    \ 0;\n    int count_before_dot_index_8 = 0;\n    int count_after_dot_index_9 =\
    \ 0;\n    int count_before_dot_index_9 = 0;\n    int count_after_dot_index_10\
    \ = 0;\n    int count_before_dot_index_10 = 0;\n    int count_after_dot_index_11\
    \ = 0;\n    int count_before_dot_index_11 = 0;\n    int count_after_dot_index_12\
    \ = 0;\n    int count_before_dot_index_12 = 0;\n    int count_after_dot_index_13\
    \ = 0;\n    int count_before_dot_index_13 = 0;\n    int count_after_dot_index_14\
    \ = 0;\n    int count_before_dot_index_14 = 0;\n    int count_after_dot_index_15\
    \ = 0;\n    int count_before_dot_index_15 = 0;\n    int count_after_dot_index_16\
    \ = 0;\n    int count_before\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_fg4u8g.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpx_fg4u8g.cpp:51:1: error: expected initializer before \u2018}\u2019\
    \ token\n   51 | }\n      | ^\n/tmp/tmpx_fg4u8g.cpp:51:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int flag = 0;\n\
    \    int flag1 = 0;\n    int flag2 = 0;\n    int flag3 = 0;\n    int flag4 = 0;\n\
    \    int flag5 = 0;\n    int flag6 = 0;\n    int flag7 = 0;\n    int flag8 = 0;\n\
    \    int flag9 = 0;\n    int flag10 = 0;\n    int flag11 = 0;\n    int flag12\
    \ = 0;\n    int flag13 = 0;\n    int flag14 = 0;\n    int flag15 = 0;\n    int\
    \ flag16 = 0;\n    int flag17 = 0;\n    int flag18 = 0;\n    int flag19 = 0;\n\
    \    int flag20 = 0;\n    int flag21 = 0;\n    int flag22 = 0;\n    int flag23\
    \ = 0;\n    int flag24 = 0;\n    int flag25 = 0;\n    int flag26 = 0;\n    int\
    \ flag27 = 0;\n    int flag28 = 0;\n    int flag29 = 0;\n    int flag30 = 0;\n\
    \    int flag31 = 0;\n    int flag32 = 0;\n    int flag33 = 0;\n    int flag34\
    \ = 0;\n    int flag35 = 0;\n    int flag36 = 0;\n    int flag37 = 0;\n    int\
    \ flag38 = 0;\n    int flag39 = 0;\n    int flag40 = 0;\n    int flag41 = 0;\n\
    \    int flag42 = 0;\n    int flag43 = 0;\n    int flag44 = 0;\n    int flag45\
    \ = 0;\n    int flag46 = 0;\n    int flag47 = 0;\n    int flag48 = 0;\n    int\
    \ flag49 = 0;\n    int flag50 = 0;\n    int flag51 = 0;\n    int flag52 = 0;\n\
    \    int flag53 = 0;\n    int flag54 = 0;\n    int flag55 = 0;\n    int flag56\
    \ = 0;\n    int flag57 = 0;\n    int flag58 = 0;\n    int flag59 = 0;\n    int\
    \ flag60 = 0;\n    int flag61 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpzsodwawo: /tmp/tmpzsodwawo.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n\tif (ext == \"\
    txt\" || ext == \"exe\" || ext == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\treturn\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpv574fn_h: /tmp/tmpv574fn_h.cpp:37: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint dot_index_after = 0;\n\tint dot_index_before = 0;\n\tfor (int i = 0; i <\
    \ file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tdot_index_after = dot_index\
    \ + 1;\n\tdot_index_before = dot_index - 1;\n\tif (file_name[dot_index_before]\
    \ == '.' || file_name[dot_index_after] == '.') {\n\t\treturn \"No\";\n\t}\n\t\
    if (file_name[dot_index_before] == ' ' || file_name[dot_index_after] == ' ') {\n\
    \t\treturn \"No\";\n\t}\n\tif (file_name[dot_index_before] == '\\0' || file_name[dot_index_after]\
    \ == '\\0') {\n\t\treturn \"No\";\n\t}\n\tif (file_name[dot_index_before] == '\\\
    n' || file_name[dot_index_after] == '\\n') {\n\t\treturn \"No\";\n\t}\n\tif (file_name[dot_index_before]\
    \ == '\\t' || file_name[dot_index_after] == '\\t') {\n\t\treturn \"No\";\n\t}\n\
    \tif (file_name[dot_index_before] == '\\r' || file_name[dot_index_after] == '\\\
    r') {\n\t\treturn \"No\";\n\t}\n\tif (file_name[dot_index_before] == '\\v' ||\
    \ file_name[dot_index_after\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kzadcfb.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_kzadcfb.cpp:54:70: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n   54 |  if (file_name[dot_index_before] == '\\v' || file_name[dot_index_after\n\
    \      |                                                                     \
    \ ^\n      |                                                                 \
    \     ]\n   55 | }\n      | ~                                                \
    \                     \n/tmp/tmp_kzadcfb.cpp:54:70: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   54 |  if (file_name[dot_index_before] == '\\\
    v' || file_name[dot_index_after\n      |     ~                               \
    \                                 ^\n      |                                 \
    \                                     )\n   55 | }\n      | ~                \
    \                                                     \n/tmp/tmp_kzadcfb.cpp:55:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   55 | }\n \
    \     | ^\n/tmp/tmp_kzadcfb.cpp:55:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::string result = \"No\";\n    int dot_count = 0;\n   \
    \ int digit_count = 0;\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n     \
    \       dot_index = i;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digit_count++;\n        }\n    }\n    if (dot_count ==\
    \ 1 && digit_count <= 3) {\n        std::string substring_before_dot = file_name.substr(0,\
    \ dot_index);\n        std::string substring_after_dot = file_name.substr(dot_index\
    \ + 1);\n        if (substring_before_dot.length() > 0 && \n            (substring_before_dot[0]\
    \ >= 'a' && substring_before_dot[0] <= 'z' ||\n            substring_before_dot[0]\
    \ >= 'A' && substring_before_dot[0] <= 'Z')) {\n            if (substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" ||\n                substring_after_dot\
    \ == \"dll\") {\n                result = \"Yes\";\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int count_dot = 0;\n    int count_digit\
    \ = 0;\n    int count_alpha = 0;\n    int count_alpha_upper = 0;\n    int count_alpha_lower\
    \ = 0;\n    int count_alpha_upper_lower = 0;\n    int count_alpha_upper_lower_digit\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot = 0;\n    int count_alpha_upper_lower_digit_dot_txt\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_exe = 0;\n    int count_alpha_upper_lower_digit_dot_dll\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three = 0;\n\
    \    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes = 0;\n\
    \    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no = 0;\n\
    \    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no =\
    \ 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no_no\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no_no_no\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no_no_no_no\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no_no_no_no_no\
    \ = 0;\n    int count_alpha_upper_lower_digit_dot_txt_exe_dll_empty_three_yes_no_no_no_no\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj04ffva.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpyj04ffva.cpp:37:1: error: expected initializer before \u2018}\u2019\
    \ token\n   37 | }\n      | ^\n/tmp/tmpyj04ffva.cpp:37:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n    \
    \    return \"No\";\n    }\n    if(dot_index == 0) {\n        return \"No\";\n\
    \    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x' &&\
    \ file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp1e6r7p9z: /tmp/tmp1e6r7p9z.cpp:49: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor\
    \ (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tcount1++;\n\
    \t\t}\n\t\tif (file_name[i] == '.' && file_name[i + 1] == 't' && file_name[i +\
    \ 2] == 'x' && file_name[i + 3] == 't') {\n\t\t\tcount2++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.' && file_name[i + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 'e') {\n\t\t\tcount2++;\n\t\t}\n\t\tif (file_name[i] == '.' && file_name[i\
    \ + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i + 3] == 'l') {\n\t\t\t\
    count2++;\n\t\t}\n\t}\n\tif (count <= 3 && count1 == 1 && count2 == 1) {\n\t\t\
    return \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";\n\t}\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpmffyu5ox: /tmp/tmpmffyu5ox.cpp:44: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int dot_count = 0;\n    int digit_count = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n        if(file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n            digit_count++;\n        }\n    }\n  \
    \  if(dot_count != 1 || digit_count > 3) {\n        return \"No\";\n    }\n  \
    \  std::string extension = file_name.substr(file_name.find('.') + 1);\n    if(extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return\
    \ \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpc13z8ltc: /tmp/tmpc13z8ltc.cpp:37: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int count1 = 0;\n    int count2 = 0;\n\
    \    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6\
    \ = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int\
    \ count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 =\
    \ 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int\
    \ count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 =\
    \ 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int\
    \ count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 =\
    \ 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int\
    \ count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 =\
    \ 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int\
    \ count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 =\
    \ 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int\
    \ count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 =\
    \ 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int\
    \ count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 =\
    \ 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int\
    \ count59 = 0;\n    int count60 = 0;\n    int count61 = 0;\n    int count62 =\
    \ 0;\n    int count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpwqbw1es7: /tmp/tmpwqbw1es7.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ str = file_name.substr(0, file_name.find('.'));\n\tif (str.length() == 0 ||\
    \ !((str[0] >= 'a' && str[0] <= 'z') || (str[0] >= 'A' && str[0] <= 'Z'))) {\n\
    \t\treturn \"No\";\n\t}\n\tstd::string str1 = file_name.substr(file_name.find('.')\
    \ + 1, len);\n\tif (str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n\
    \t\treturn \"Yes\";\n\t}\n\treturn \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index+1] == 't' && file_name[dot_index+2]\
    \ == 'x' && file_name[dot_index+3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index+1] == 'e' && file_name[dot_index+2] == 'x' && file_name[dot_index+3]\
    \ == 'e') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index+1] ==\
    \ 'd' && file_name[dot_index+2] == 'l' && file_name[dot_index+3] == 'l') {\n \
    \       return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp4srydw6v: /tmp/tmp4srydw6v.cpp:49: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_index);\n    std::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n    if(count > 3 || dot_count != 1 || sub1.length() == 0 || !(sub1[0]\
    \ >= 'a' && sub1[0] <= 'z') || !(sub1[0] >= 'A' && sub1[0] <= 'Z') || (sub2 !=\
    \ \"txt\" && sub2 != \"exe\" && sub2 != \"dll\")) {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmptlzxh8wc: /tmp/tmptlzxh8wc.cpp:36: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_letter = 0;\n\
    \tint count_number = 0;\n\tint count_txt = 0;\n\tint count_exe = 0;\n\tint count_dll\
    \ = 0;\n\tint count_substring = 0;\n\tint count_substring_2 = 0;\n\tint count_substring_3\
    \ = 0;\n\tint count_substring_4 = 0;\n\tint count_substring_5 = 0;\n\tint count_substring_6\
    \ = 0;\n\tint count_substring_7 = 0;\n\tint count_substring_8 = 0;\n\tint count_substring_9\
    \ = 0;\n\tint count_substring_10 = 0;\n\tint count_substring_11 = 0;\n\tint count_substring_12\
    \ = 0;\n\tint count_substring_13 = 0;\n\tint count_substring_14 = 0;\n\tint count_substring_15\
    \ = 0;\n\tint count_substring_16 = 0;\n\tint count_substring_17 = 0;\n\tint count_substring_18\
    \ = 0;\n\tint count_substring_19 = 0;\n\tint count_substring_20 = 0;\n\tint count_substring_21\
    \ = 0;\n\tint count_substring_22 = 0;\n\tint count_substring_23 = 0;\n\tint count_substring_24\
    \ = 0;\n\tint count_substring_25 = 0;\n\tint count_substring_26 = 0;\n\tint count_substring_27\
    \ = 0;\n\tint count_substring_28 = 0;\n\tint count_substring_29 = 0;\n\tint count_substring_30\
    \ = 0;\n\tint count_substring_31 = 0;\n\tint count_substring_32 = 0;\n\tint count_substring_33\
    \ = 0;\n\tint count_substring_34 = 0;\n\tint count_substring_35 = 0;\n\tint count_substring_36\
    \ = 0;\n\tint count_substring_37 = 0;\n\tint count_substring_38\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7cmlwud.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpk7cmlwud.cpp:59:1: error: expected initializer before \u2018}\u2019\
    \ token\n   59 | }\n      | ^\n/tmp/tmpk7cmlwud.cpp:59:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_char = 0;\n\
    \tint count_char_after_dot = 0;\n\tint count_char_before_dot = 0;\n\tint count_char_after_dot_txt\
    \ = 0;\n\tint count_char_after_dot_exe = 0;\n\tint count_char_after_dot_dll =\
    \ 0;\n\tint count_char_after_dot_txt_exe_dll = 0;\n\tint count_char_after_dot_txt_exe_dll_2\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_3 = 0;\n\tint count_char_after_dot_txt_exe_dll_4\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_5 = 0;\n\tint count_char_after_dot_txt_exe_dll_6\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_7 = 0;\n\tint count_char_after_dot_txt_exe_dll_8\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_9 = 0;\n\tint count_char_after_dot_txt_exe_dll_10\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_11 = 0;\n\tint count_char_after_dot_txt_exe_dll_12\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_13 = 0;\n\tint count_char_after_dot_txt_exe_dll_14\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_15 = 0;\n\tint count_char_after_dot_txt_exe_dll_16\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_17 = 0;\n\tint count_char_after_dot_txt_exe_dll_18\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_19 = 0;\n\tint count_char_after_dot_txt_exe_dll_20\
    \ =\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevs05d15.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpevs05d15.cpp:42:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   42 | }\n      | ^\n/tmp/tmpevs05d15.cpp:42:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n \
    \   }\n    std::string sub = file_name.substr(0, file_name.find(\".\"));\n   \
    \ if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(sub[0] >= 'a'\
    \ && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z') {\n        std::string sub2\
    \ = file_name.substr(file_name.find(\".\") + 1);\n        if(sub2 == \"txt\" ||\
    \ sub2 == \"exe\" || sub2 == \"dll\") {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\
    \t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    if (file_name[0] >= '0' && file_name[0] <= '9') {\n\t\treturn \"No\";\n\t}\n\t\
    std::string ext = file_name.substr(dot_index + 1);\n\tif (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpg6rtyrkg: /tmp/tmpg6rtyrkg.cpp:49: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tfor\
    \ (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\
    \tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1) != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvb_gos_x: /tmp/tmpvb_gos_x.cpp:45: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_alpha = 0;\n\
    \tint count_digit = 0;\n\tint count_txt = 0;\n\tint count_exe = 0;\n\tint count_dll\
    \ = 0;\n\tint count_substring_before_dot = 0;\n\tint count_substring_after_dot\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tcount_dot++;\n\t\t}\n\t\tif (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n\t\t\tcount_alpha++;\n\t\t}\n\t\tif (file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z') {\n\t\t\tcount_alpha++;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount_digit++;\n\t\t}\n\t\tif (file_name[i] == 't' && file_name[i\
    \ + 1] == 'x' && file_name[i + 2] == 't') {\n\t\t\tcount_txt++;\n\t\t}\n\t\tif\
    \ (file_name[i] == 'e' && file_name[i + 1] == 'x' && file_name[i + 2] == 'e')\
    \ {\n\t\t\tcount_exe++;\n\t\t}\n\t\tif (file_name[i] == 'd' && file_name[i + 1]\
    \ == 'l' && file_name[i + 2] == 'l') {\n\t\t\tcount_dll++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tcount_substring_before_dot = i;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tcount_substring_after_dot = file_name.length() - i - 1;\n\t\
    \t}\n\t}\n\tif (count_dot == 1 && count_digit <=\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy23n4z6m.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpy23n4z6m.cpp:53:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   53 | }\n      | ^\n/tmp/tmpy23n4z6m.cpp:52:38: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   52 |  if (count_dot == 1 && count_digit\
    \ <=\n      |     ~                                ^\n      |                \
    \                      )\n   53 | }\n      | ~                               \
    \      \n/tmp/tmpy23n4z6m.cpp:53:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpy23n4z6m.cpp:53:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint\
    \ count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint\
    \ count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint\
    \ count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\t\
    int count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\
    \tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\
    \tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\
    \tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\
    \tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\
    \tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\
    \tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\
    \tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\
    \tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\
    \tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\
    \tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\
    \tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\
    \tint count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmps_ogycpw: /tmp/tmps_ogycpw.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n   \
    \     return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpw70zombr: /tmp/tmpw70zombr.cpp:37: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int count=0;\n\
    \    int count1=0;\n    int count2=0;\n    int count3=0;\n    int count4=0;\n\
    \    int count5=0;\n    int count6=0;\n    int count7=0;\n    int count8=0;\n\
    \    int count9=0;\n    int count10=0;\n    int count11=0;\n    int count12=0;\n\
    \    int count13=0;\n    int count14=0;\n    int count15=0;\n    int count16=0;\n\
    \    int count17=0;\n    int count18=0;\n    int count19=0;\n    int count20=0;\n\
    \    int count21=0;\n    int count22=0;\n    int count23=0;\n    int count24=0;\n\
    \    int count25=0;\n    int count26=0;\n    int count27=0;\n    int count28=0;\n\
    \    int count29=0;\n    int count30=0;\n    int count31=0;\n    int count32=0;\n\
    \    int count33=0;\n    int count34=0;\n    int count35=0;\n    int count36=0;\n\
    \    int count37=0;\n    int count38=0;\n    int count39=0;\n    int count40=0;\n\
    \    int count41=0;\n    int count42=0;\n    int count43=0;\n    int count44=0;\n\
    \    int count45=0;\n    int count46=0;\n    int count47=0;\n    int count48=0;\n\
    \    int count49=0;\n    int count50=0;\n    int count51=0;\n    int count52=0;\n\
    \    int count53=0;\n    int count54=0;\n    int count55=0;\n    int count56=0;\n\
    \    int count57=0;\n    int count58=0;\n   \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpgakskq6l: /tmp/tmpgakskq6l.cpp:78: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string str2 = file_name.substr(file_name.find('.') + 1);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n   \
    \     return \"No\";\n    }\n    std::string name = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(name.length() == 0) {\n        return \"No\";\n    }\n    if(name[0]\
    \ >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z') {\n        return\
    \ \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint dot_flag = 0;\n\tint ext_flag = 0;\n\tint ext_index = 0;\n\tint ext_len\
    \ = 0;\n\tint ext_count = 0;\n\tint ext_flag_1 = 0;\n\tint ext_flag_2 = 0;\n\t\
    int ext_flag_3 = 0;\n\tint ext_flag_4 = 0;\n\tint ext_flag_5 = 0;\n\tint ext_flag_6\
    \ = 0;\n\tint ext_flag_7 = 0;\n\tint ext_flag_8 = 0;\n\tint ext_flag_9 = 0;\n\t\
    int ext_flag_10 = 0;\n\tint ext_flag_11 = 0;\n\tint ext_flag_12 = 0;\n\tint ext_flag_13\
    \ = 0;\n\tint ext_flag_14 = 0;\n\tint ext_flag_15 = 0;\n\tint ext_flag_16 = 0;\n\
    \tint ext_flag_17 = 0;\n\tint ext_flag_18 = 0;\n\tint ext_flag_19 = 0;\n\tint\
    \ ext_flag_20 = 0;\n\tint ext_flag_21 = 0;\n\tint ext_flag_22 = 0;\n\tint ext_flag_23\
    \ = 0;\n\tint ext_flag_24 = 0;\n\tint ext_flag_25 = 0;\n\tint ext_flag_26 = 0;\n\
    \tint ext_flag_27 = 0;\n\tint ext_flag_28 = 0;\n\tint ext_flag_29 = 0;\n\tint\
    \ ext_flag_30 = 0;\n\tint ext_flag_31 = 0;\n\tint ext_flag_32 = 0;\n\tint ext_flag_33\
    \ = 0;\n\tint ext_flag_34 = 0;\n\tint ext_flag_35 = 0;\n\tint ext_flag_36 = 0;\n\
    \tint ext_flag_37 = 0;\n\tint ext_flag_38 = 0;\n\tint ext_flag_39 = 0;\n\tint\
    \ ext_flag_40 = 0;\n\t\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpgj6n0izm: /tmp/tmpgj6n0izm.cpp:66: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ str = file_name.substr(0, file_name.find('.'));\n\tif (str.length() == 0 ||\
    \ (str[0] < 'a' || str[0] > 'z') && (str[0] < 'A' || str[0] > 'Z')) {\n\t\treturn\
    \ \"No\";\n\t}\n\tstd::string str2 = file_name.substr(file_name.find('.') + 1,\
    \ len);\n\tif (str2 != \"txt\" && str2 != \"exe\" && str2 != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub1 = file_name.substr(0,\
    \ dot_index);\n\tstd::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n\tif (sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    while(file_name[i] != '\\0'){\n        if(file_name[i]\
    \ == '.'){\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n\
    \        }\n        i++;\n    }\n    if(count > 3){\n        return \"No\";\n\
    \    }\n    if(dot_count != 1){\n        return \"No\";\n    }\n    if(dot_index\
    \ == 0){\n        return \"No\";\n    }\n    if(file_name[dot_index - 1] < 'a'\
    \ || file_name[dot_index - 1] > 'z'){\n        if(file_name[dot_index - 1] < 'A'\
    \ || file_name[dot_index - 1] > 'Z'){\n            return \"No\";\n        }\n\
    \    }\n    if(file_name[dot_index + 1] != 't' || file_name[dot_index + 2] !=\
    \ 'x' || file_name[dot_index + 3] != 't'){\n        if(file_name[dot_index + 1]\
    \ != 'e' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] != 'e'){\n\
    \            if(file_name[dot_index + 1] != 'd' || file_name[dot_index + 2] !=\
    \ 'l' || file_name[dot_index + 3] != 'l'){\n                return \"No\";\n \
    \           }\n        }\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmphnwf6dzo: /tmp/tmphnwf6dzo.cpp:54: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n\
    \    int count_after_dot = 0;\n    int count_before_dot = 0;\n    int count_after_dot_txt\
    \ = 0;\n    int count_after_dot_exe = 0;\n    int count_after_dot_dll = 0;\n \
    \   int count_before_dot_letter = 0;\n    int count_before_dot_digit = 0;\n  \
    \  int count_before_dot_other = 0;\n    int count_after_dot_other = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++){\n        if(file_name[i] == '.'){\n   \
    \         dot++;\n            dot_index = i;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n    }\n  \
    \  for(int i = 0; i < dot_index; i++){\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z'){\n            count_before_dot_letter++;\n        }\n        if(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z'){\n            count_before_dot_letter++;\n  \
    \      }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n          \
    \  count_before_dot_digit++;\n        }\n        if(file_name[i] != '.' && file_name[i]\
    \ != '0' && file_name[i] != '1' && file_name[i] != '2' && file_name[i] != '3'\
    \ && file_name[i] != '4' && file_name[i] != '5' && file_name[i] != '6' && file_name[i]\
    \ != '7' && file_name[i] != '8' && file_name[i] != '9' && file_name[i] != 'a'\
    \ && file_name[i] != 'b' && file_name[i] != 'c'\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b2uvjyu.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp7b2uvjyu.cpp:45:330: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   45 |         if(file_name[i] != '.' && file_name[i] != '0' && file_name[i]\
    \ != '1' && file_name[i] != '2' && file_name[i] != '3' && file_name[i] != '4'\
    \ && file_name[i] != '5' && file_name[i] != '6' && file_name[i] != '7' && file_name[i]\
    \ != '8' && file_name[i] != '9' && file_name[i] != 'a' && file_name[i] != 'b'\
    \ && file_name[i] != 'c'\n      |           ~                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          ^\n      |        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  )\n   46 | }\n      | ~                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                  \n/tmp/tmp7b2uvjyu.cpp:46:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   46 | }\n \
    \     | ^\n/tmp/tmp7b2uvjyu.cpp:47:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   47 | int main() {\n      |            ^\n\
    /tmp/tmp7b2uvjyu.cpp:75:1: error: expected \u2018}\u2019 at end of input\n   75\
    \ | }\n      | ^\n/tmp/tmp7b2uvjyu.cpp:13:52: note: to match this \u2018{\u2019\
    \n   13 | std::string file_name_check(std::string file_name) {\n      |      \
    \                                              ^\n/tmp/tmp7b2uvjyu.cp"
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint dot_index_after = 0;\n\tint dot_index_before = 0;\n\tstd::string dot_after;\n\
    \tstd::string dot_before;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\
    \tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\
    \t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tdot_index_after\
    \ = dot_index + 1;\n\tdot_index_before = dot_index - 1;\n\tfor (int i = dot_index_after;\
    \ i < file_name.length(); i++) {\n\t\tdot_after += file_name[i];\n\t}\n\tfor (int\
    \ i = 0; i < dot_index_before; i++) {\n\t\tdot_before += file_name[i];\n\t}\n\t\
    if (dot_before.length() == 0 || (dot_before[0] < 'a' || dot_before[0] > 'z') &&\
    \ (dot_before[0] < 'A' || dot_before[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\t\
    if (dot_after != \"txt\" && dot_after != \"exe\" && dot_after != \"dll\") {\n\t\
    \treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpeal9bs3k: /tmp/tmpeal9bs3k.cpp:54: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::string result = \"No\";\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n        if (file_name[i] == '.') {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if (count > 3) {\n        return\
    \ result;\n    }\n    if (dot_count != 1) {\n        return result;\n    }\n \
    \   if (file_name[0] >= '0' && file_name[0] <= '9') {\n        return result;\n\
    \    }\n    if (file_name.substr(dot_index + 1, 3) != \"txt\" && file_name.substr(dot_index\
    \ + 1, 3) != \"exe\" && file_name.substr(dot_index + 1, 3) != \"dll\") {\n   \
    \     return result;\n    }\n    result = \"Yes\";\n    return result;\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpgitw97_y: /tmp/tmpgitw97_y.cpp:50: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint dot_count = 0;\n\tint digit_count = 0;\n\tint i = 0;\n\t\
    while (file_name[i] != '\\0') {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\
    \t\t}\n\t\ti++;\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (digit_count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tstd::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n\tif (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\tstd::string name = file_name.substr(0, file_name.find(\"\
    .\"));\n\tif (name.length() == 0) {\n\t\treturn \"No\";\n\t}\n\tif (name[0] <\
    \ 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z') {\n\t\treturn \"No\"\
    ;\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpjtw277iv: /tmp/tmpjtw277iv.cpp:47: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::regex pattern(\"([a-zA-Z]{1}[a-zA-Z0-9]{0,})(\\\\.)(txt|exe|dll)\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpdxc_pugq: /tmp/tmpdxc_pugq.cpp:24: int main(): Assertion `candidate(("His12FILE94.exe"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    bool is_valid = true;\n    while(file_name[i] != '\\\
    0'){\n        if(file_name[i] == '.'){\n            dot_count++;\n           \
    \ dot_index = i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <=\
    \ '9'){\n            count++;\n        }\n        i++;\n    }\n    if(dot_count\
    \ != 1){\n        is_valid = false;\n    }\n    if(count > 3){\n        is_valid\
    \ = false;\n    }\n    if(dot_index == 0){\n        is_valid = false;\n    }\n\
    \    if(file_name[dot_index+1] == '\\0'){\n        is_valid = false;\n    }\n\
    \    if(file_name[dot_index-1] < 'a' || file_name[dot_index-1] > 'z'){\n     \
    \   is_valid = false;\n    }\n    if(file_name[dot_index+1] != 't' || file_name[dot_index+2]\
    \ != 'x' || file_name[dot_index+3] != 't'){\n        is_valid = false;\n    }\n\
    \    if(is_valid){\n        return \"Yes\";\n    }\n    else{\n        return\
    \ \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n   \
    \ assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpdfmpv6va: /tmp/tmpdfmpv6va.cpp:59: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint dot_index_after = 0;\n\tint dot_index_before = 0;\n\tstd::string dot_after;\n\
    \tstd::string dot_before;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\
    \tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\
    \t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tdot_index_after\
    \ = dot_index + 1;\n\tdot_index_before = dot_index - 1;\n\tdot_after = file_name.substr(dot_index_after,\
    \ file_name.length() - dot_index_after);\n\tdot_before = file_name.substr(0, dot_index_before\
    \ + 1);\n\tif (dot_before.length() == 0 || (dot_before[0] < 'a' || dot_before[0]\
    \ > 'z') && (dot_before[0] < 'A' || dot_before[0] > 'Z')) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (dot_after != \"txt\" && dot_after != \"exe\" && dot_after != \"\
    dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str == \"txt\" || str == \"exe\" || str == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpej4ucxts: /tmp/tmpej4ucxts.cpp:37: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint\
    \ count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint\
    \ count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint\
    \ count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\t\
    int count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\
    \tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\
    \tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\
    \tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\
    \tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\
    \tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\
    \tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\
    \tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\
    \tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\
    \tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\
    \tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\
    \tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\
    \tint count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmps_ogycpw: /tmp/tmps_ogycpw.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ str = file_name.substr(0, file_name.find(\".\"));\n\tstd::string str2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n\tif (str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (str2 != \"txt\" &&\
    \ str2 != \"exe\" && str2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint\
    \ len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3 ||\
    \ dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (dot_index == 0 || dot_index == len\
    \ - 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string str1 = file_name.substr(0, dot_index);\n\
    \tstd::string str2 = file_name.substr(dot_index + 1, len - dot_index - 1);\n\t\
    if (str1.length() == 0) {\n\t\treturn \"No\";\n\t}\n\tif (str1[0] < 'a' || str1[0]\
    \ > 'z' && str1[0] < 'A' || str1[0] > 'Z') {\n\t\treturn \"No\";\n\t}\n\tif (str2\
    \ != \"txt\" && str2 != \"exe\" && str2 != \"dll\") {\n\t\treturn \"No\";\n\t\
    }\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvg11cnmg: /tmp/tmpvg11cnmg.cpp:48: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int i = 0;\n \
    \   int len = file_name.length();\n    if(file_name[0] >= '0' && file_name[0]\
    \ <= '9')\n        return \"No\";\n    for(i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n            count++;\n        if(file_name[i]\
    \ == '.')\n            dot_count++;\n    }\n    if(count > 3 || dot_count != 1)\n\
    \        return \"No\";\n    std::string sub = file_name.substr(i);\n    if(sub\
    \ == \"txt\" || sub == \"exe\" || sub == \"dll\")\n        return \"Yes\";\n \
    \   return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp__a3wdgp: /tmp/tmp__a3wdgp.cpp:35: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\t// TODO: Implement this function\n\tint dot_count = 0;\n\tint\
    \ digit_count = 0;\n\tint len = file_name.length();\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\t\t}\n\t}\n\tif (digit_count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\"\
    ;\n\t}\n\tstd::string sub1 = file_name.substr(0, file_name.find(\".\"));\n\tstd::string\
    \ sub2 = file_name.substr(file_name.find(\".\") + 1);\n\tif (sub1.length() ==\
    \ 0) {\n\t\treturn \"No\";\n\t}\n\tif (sub1[0] < 'A' || sub1[0] > 'z') {\n\t\t\
    return \"No\";\n\t}\n\tif (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\"\
    ) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpwx004oet: /tmp/tmpwx004oet.cpp:53: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tfor (int i = 0; i <\
    \ file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string sub = file_name.substr(0, file_name.find('.'));\n\tif (sub.length()\
    \ == 0 || (sub[0] < 'a' || sub[0] > 'z') && (sub[0] < 'A' || sub[0] > 'Z')) {\n\
    \t\treturn \"No\";\n\t}\n\tstd::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos =\
    \ 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_pos = i;\n        }\n \
    \   }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    std::string sub_str = file_name.substr(0,\
    \ dot_pos);\n    if(sub_str.length() == 0) {\n        return \"No\";\n    }\n\
    \    if(sub_str[0] < 'a' || sub_str[0] > 'z') {\n        return \"No\";\n    }\n\
    \    sub_str = file_name.substr(dot_pos + 1, file_name.length() - dot_pos - 1);\n\
    \    if(sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"dll\") {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp8yvq0zh0: /tmp/tmp8yvq0zh0.cpp:50: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] == '.') {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \            count++;\n        }\n    }\n    if(count > 3) {\n        return \"\
    No\";\n    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n    if(dot_index\
    \ == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_index + 1] != 't'\
    \ && file_name[dot_index + 1] != 'e' && file_name[dot_index + 1] != 'd') {\n \
    \       return \"No\";\n    }\n    if(file_name[dot_index + 2] != 'x' && file_name[dot_index\
    \ + 2] != 'x' && file_name[dot_index + 2] != 'l') {\n        return \"No\";\n\
    \    }\n    if(file_name[dot_index + 3] != 'e' && file_name[dot_index + 3] !=\
    \ 'e' && file_name[dot_index + 3] != 'l') {\n        return \"No\";\n    }\n \
    \   return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmphkrm078u: /tmp/tmphkrm078u.cpp:49: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n  int count = 0;\n  int dot_count = 0;\n  int len = file_name.length();\n\
    \  for(int i = 0; i < len; i++) {\n    if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n      count++;\n    }\n    if(file_name[i] == '.') {\n      dot_count++;\n\
    \    }\n  }\n  if(count > 3 || dot_count != 1) {\n    return \"No\";\n  }\n  std::string\
    \ s1 = file_name.substr(0, file_name.find('.'));\n  std::string s2 = file_name.substr(file_name.find('.')\
    \ + 1);\n  if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A'\
    \ || s1[0] > 'Z')) {\n    return \"No\";\n  }\n  if(s2 != \"txt\" && s2 != \"\
    exe\" && s2 != \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint dot_count = 0;\n\tint digit_count = 0;\n\tint letter_count\
    \ = 0;\n\tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\
    \tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t\telse if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\t\t}\n\t\telse if ((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\
    \ {\n\t\t\tletter_count++;\n\t\t}\n\t}\n\tif (dot_count != 1 || digit_count >\
    \ 3 || letter_count == 0) {\n\t\treturn \"No\";\n\t}\n\tstd::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n\tif (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmphh_3h5uo: /tmp/tmphh_3h5uo.cpp:41: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint\
    \ count_after_dot = 0;\n\tint count_before_dot = 0;\n\tint count_after_dot_txt\
    \ = 0;\n\tint count_after_dot_exe = 0;\n\tint count_after_dot_dll = 0;\n\tfor\
    \ (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t\tdot_index = i;\n\t\t}\n\t}\n\tfor (int i = dot_index + 1; i < file_name.length();\
    \ i++) {\n\t\tcount_after_dot++;\n\t}\n\tfor (int i = 0; i < dot_index; i++) {\n\
    \t\tcount_before_dot++;\n\t}\n\tfor (int i = dot_index + 1; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == 't') {\n\t\t\tcount_after_dot_txt++;\n\t\t}\n\
    \t\tif (file_name[i] == 'e') {\n\t\t\tcount_after_dot_exe++;\n\t\t}\n\t\tif (file_name[i]\
    \ == 'd') {\n\t\t\tcount_after_dot_dll++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\t\
    return \"No\";\n\t}\n\tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (count_before_dot\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] >= '0' && file_name[0]\
    \ <= '9') {\n\t\treturn \"No\";\n\t}\n\tif (count_after_dot != 3) {\n\t\treturn\
    \ \"No\";\n\t}\n\tif (count_after_dot_txt != 2) {\n\t\treturn \"No\";\n\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpid_w0enm.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpid_w0enm.cpp:67:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   67 | int main() {\n      |            ^\n/tmp/tmpid_w0enm.cpp:95:1:\
    \ error: expected \u2018}\u2019 at end of input\n   95 | }\n      | ^\n/tmp/tmpid_w0enm.cpp:13:52:\
    \ note: to match this \u2018{\u2019\n   13 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmpid_w0enm.cpp:95:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   95 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\
    \t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    if (file_name[0] < 'a' || file_name[0] > 'z') {\n\t\treturn \"No\";\n\t}\n\tif\
    \ (file_name.substr(dot_index + 1, 3) != \"txt\" && file_name.substr(dot_index\
    \ + 1, 3) != \"exe\" && file_name.substr(dot_index + 1, 3) != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp_2rjgyf0: /tmp/tmp_2rjgyf0.cpp:45: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\t// your code here\n\tint count = 0;\n\tint dot = 0;\n\tint dot_pos\
    \ = 0;\n\tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\
    \tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t\tdot_pos = i;\n\t\t}\n\t}\n\t\
    if (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string s1 = file_name.substr(0,\
    \ dot_pos);\n\tstd::string s2 = file_name.substr(dot_pos + 1, len - dot_pos -\
    \ 1);\n\tif (s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A'\
    \ || s1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (s2 != \"txt\" && s2 != \"\
    exe\" && s2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint\
    \ digit = 0;\n\tint digit_count = 0;\n\tint ext_count = 0;\n\tint ext_index =\
    \ 0;\n\tint ext_length = 0;\n\tint ext_start = 0;\n\tint ext_end = 0;\n\tint ext_start_index\
    \ = 0;\n\tint ext_end_index = 0;\n\tint ext_start_count = 0;\n\tint ext_end_count\
    \ = 0;\n\tint ext_start_digit = 0;\n\tint ext_end_digit = 0;\n\tint ext_start_digit_count\
    \ = 0;\n\tint ext_end_digit_count = 0;\n\tint ext_start_dot = 0;\n\tint ext_end_dot\
    \ = 0;\n\tint ext_start_dot_count = 0;\n\tint ext_end_dot_count = 0;\n\tint ext_start_dot_index\
    \ = 0;\n\tint ext_end_dot_index = 0;\n\tint ext_start_dot_digit = 0;\n\tint ext_end_dot_digit\
    \ = 0;\n\tint ext_start_dot_digit_count = 0;\n\tint ext_end_dot_digit_count =\
    \ 0;\n\tint ext_start_dot_digit_index = 0;\n\tint ext_end_dot_digit_index = 0;\n\
    \tint ext_start_dot_digit_dot = 0;\n\tint ext_end_dot_digit_dot = 0;\n\tint ext_start_dot_digit_dot_count\
    \ = 0;\n\tint ext_end_dot_digit_dot_count = 0;\n\tint ext_start_dot_digit_dot_index\
    \ = 0;\n\tint ext_end_dot_digit_dot_index = 0;\n\tint ext_start_dot_digit_dot_digit\
    \ = 0;\n\tint ext_end_dot_digit_dot_digit = 0;\n\tint ext_start_dot_digit_dot_digit_count\
    \ = 0;\n\tint ext_end_dot_digit_dot_digit_count = 0;\n\tint ext_start\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhbqe4_z.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpbhbqe4_z.cpp:55:1: error: expected initializer before \u2018}\u2019\
    \ token\n   55 | }\n      | ^\n/tmp/tmpbhbqe4_z.cpp:55:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\
    \t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string sub = file_name.substr(0, dot_index);\n\tif (sub.length() == 0) {\n\
    \t\treturn \"No\";\n\t}\n\tif (sub[0] < 'a' || sub[0] > 'z') {\n\t\tif (sub[0]\
    \ < 'A' || sub[0] > 'Z') {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tstd::string sub2\
    \ = file_name.substr(dot_index + 1, file_name.length() - dot_index - 1);\n\tif\
    \ (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\"\
    ;\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\
    \tint flag = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot++;\n\t\t}\n\t\tif (file_name[i] == '.' && file_name[i + 1] == 't'\
    \ && file_name[i + 2] == 'x' && file_name[i + 3] == 't') {\n\t\t\tflag = 1;\n\t\
    \t}\n\t\tif (file_name[i] == '.' && file_name[i + 1] == 'e' && file_name[i + 2]\
    \ == 'x' && file_name[i + 3] == 'e') {\n\t\t\tflag = 1;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.' && file_name[i + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i\
    \ + 3] == 'l') {\n\t\t\tflag = 1;\n\t\t}\n\t}\n\tif (count > 3 || dot != 1 ||\
    \ flag != 1) {\n\t\treturn \"No\";\n\t}\n\telse {\n\t\treturn \"Yes\";\n\t}\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp5lg95kd1: /tmp/tmp5lg95kd1.cpp:45: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint flag = 0;\n\tint flag1\
    \ = 0;\n\tint flag2 = 0;\n\tint flag3 = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n\t\t\tflag = 1;\n\t\t}\n\t\tif (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n\t\t\tflag = 1;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tif (file_name[i + 1] == 't' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 't') {\n\t\t\t\tflag1 = 1;\n\t\t\t}\n\t\t\tif (file_name[i + 1] == 'e'\
    \ && file_name[i + 2] == 'x' && file_name[i + 3] == 'e') {\n\t\t\t\tflag2 = 1;\n\
    \t\t\t}\n\t\t\tif (file_name[i + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i\
    \ + 3] == 'l') {\n\t\t\t\tflag3 = 1;\n\t\t\t}\n\t\t}\n\t}\n\tif (count > 3) {\n\
    \t\treturn \"No\";\n\t}\n\tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\tif (flag\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tif (flag1 == 0 && flag2 == 0 && flag3 ==\
    \ 0) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpmo0v0_xs: /tmp/tmpmo0v0_xs.cpp:62: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_index +\
    \ 1, 3) != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp6arevls3: /tmp/tmp6arevls3.cpp:45: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string sub = file_name.substr(0, file_name.find(\".\"));\n\tif (sub.length()\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tif (sub[0] >= 'a' && sub[0] <= 'z' || sub[0]\
    \ >= 'A' && sub[0] <= 'Z') {\n\t\tsub = file_name.substr(file_name.find(\".\"\
    ) + 1);\n\t\tif (sub == \"txt\" || sub == \"exe\" || sub == \"dll\") {\n\t\t\t\
    return \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_pos = 0;\n\tint len\
    \ = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot++;\n\t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (count > 3 ||\
    \ dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub1 = file_name.substr(0,\
    \ dot_pos);\n\tstd::string sub2 = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n\tif (sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n\
    \ = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\
    \tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y\
    \ = 0;\n\tint z = 0;\n\tint A = 0;\n\tint B = 0;\n\tint C = 0;\n\tint D = 0;\n\
    \tint E = 0;\n\tint F = 0;\n\tint G = 0;\n\tint H = 0;\n\tint I = 0;\n\tint J\
    \ = 0;\n\tint K = 0;\n\tint L = 0;\n\tint M = 0;\n\tint N = 0;\n\tint O = 0;\n\
    \tint P = 0;\n\tint Q = 0;\n\tint R = 0;\n\tint S = 0;\n\tint T = 0;\n\tint U\
    \ = 0;\n\tint V = 0;\n\tint W = 0;\n\tint X = 0;\n\tint Y = 0;\n\tint Z = 0;\n\
    \tint zero = 0;\n\tint one = 0;\n\tint two = 0;\n\tint three = 0;\n\tint four\
    \ = 0;\n\tint five = 0;\n\tint six = 0;\n\tint seven = 0;\n\tint eight = 0;\n\t\
    int nine = 0;\n\tint dot = 0;\n\tint txt = 0;\n\tint exe = 0;\n\tint dll = 0;\n\
    \tint txt_count = 0;\n\tint exe_count = 0;\n\tint dll_count = 0;\n\tint txt_index\
    \ = 0;\n\tint exe_index = 0;\n\tint dll_index = 0;\n\tint txt_index_end = 0;\n\
    \tint exe_\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo6dp2uy.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpvo6dp2uy.cpp:83:1: error: expected initializer before \u2018}\u2019\
    \ token\n   83 | }\n      | ^\n/tmp/tmpvo6dp2uy.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string first = file_name.substr(0,\
    \ dot_index);\n    std::string second = file_name.substr(dot_index + 1, len -\
    \ dot_index - 1);\n    if(first.length() == 0 || (first[0] < 'a' || first[0] >\
    \ 'z') && (first[0] < 'A' || first[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(second != \"txt\" && second != \"exe\" && second != \"dll\") {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpw412bwzq: /tmp/tmpw412bwzq.cpp:19: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_position = 0;\n\t\
    int digit_count = 0;\n\tint letter_count = 0;\n\tint letter_position = 0;\n\t\
    int last_letter_position = 0;\n\tint last_digit_position = 0;\n\tint last_dot_position\
    \ = 0;\n\tint last_letter_count = 0;\n\tint last_digit_count = 0;\n\tint last_dot_count\
    \ = 0;\n\tint last_dot_position_count = 0;\n\tint last_letter_position_count =\
    \ 0;\n\tint last_digit_position_count = 0;\n\tint last_dot_position_count_count\
    \ = 0;\n\tint last_letter_position_count_count = 0;\n\tint last_digit_position_count_count\
    \ = 0;\n\tint last_dot_position_count_count_count = 0;\n\tint last_letter_position_count_count_count\
    \ = 0;\n\tint last_digit_position_count_count_count = 0;\n\tint last_dot_position_count_count_count_count\
    \ = 0;\n\tint last_letter_position_count_count_count_count = 0;\n\tint last_digit_position_count_count_count_count\
    \ = 0;\n\tint last_dot_position_count_count_count_count_count = 0;\n\tint last_letter_position_count_count_count_count_count\
    \ = 0;\n\tint last_digit_position_count_count_count_count_count = 0;\n\tint last_dot_position_count_count_count_count_count_count\
    \ = 0;\n\tint last_letter_position_count_count_count_count_count_count = 0;\n\t\
    int last_digit_position_count_count_count_count_count_count = 0;\n\tint last_dot_position_count_count_count_count_count_count_count\
    \ = 0;\n\tint last_letter_position_count_count_count_count_count_count_count =\
    \ 0;\n\tint last_digit_position_count_count_count_count_count_count_count\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6h03t3bl.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp6h03t3bl.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmp6h03t3bl.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n  int count = 0;\n  int dot_count = 0;\n  int dot_index = 0;\n\
    \  int len = file_name.length();\n  for(int i = 0; i < len; i++) {\n    if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n      count++;\n    }\n    if(file_name[i]\
    \ == '.') {\n      dot_count++;\n      dot_index = i;\n    }\n  }\n  if(count\
    \ > 3 || dot_count != 1) {\n    return \"No\";\n  }\n  std::string sub1 = file_name.substr(0,\
    \ dot_index);\n  std::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n  if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n    return \"No\";\n  }\n  if(sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n    return \"No\";\n  }\n  return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string str2 = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(str1.length() == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A'\
    \ || str1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(str2 != \"txt\"\
    \ && str2 != \"exe\" && str2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint\
    \ count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint\
    \ count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint\
    \ count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\t\
    int count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\
    \tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\
    \tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\
    \tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\
    \tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\
    \tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\
    \tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\
    \tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\
    \tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\
    \tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\
    \tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\
    \tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\
    \tint count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmps_ogycpw: /tmp/tmps_ogycpw.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint dot_index_1 = 0;\n\tint dot_index_2 = 0;\n\tint dot_index_3 = 0;\n\tint\
    \ dot_index_4 = 0;\n\tint dot_index_5 = 0;\n\tint dot_index_6 = 0;\n\tint dot_index_7\
    \ = 0;\n\tint dot_index_8 = 0;\n\tint dot_index_9 = 0;\n\tint dot_index_10 = 0;\n\
    \tint dot_index_11 = 0;\n\tint dot_index_12 = 0;\n\tint dot_index_13 = 0;\n\t\
    int dot_index_14 = 0;\n\tint dot_index_15 = 0;\n\tint dot_index_16 = 0;\n\tint\
    \ dot_index_17 = 0;\n\tint dot_index_18 = 0;\n\tint dot_index_19 = 0;\n\tint dot_index_20\
    \ = 0;\n\tint dot_index_21 = 0;\n\tint dot_index_22 = 0;\n\tint dot_index_23 =\
    \ 0;\n\tint dot_index_24 = 0;\n\tint dot_index_25 = 0;\n\tint dot_index_26 = 0;\n\
    \tint dot_index_27 = 0;\n\tint dot_index_28 = 0;\n\tint dot_index_29 = 0;\n\t\
    int dot_index_30 = 0;\n\tint dot_index_31 = 0;\n\tint dot_index_32 = 0;\n\tint\
    \ dot_index_33 = 0;\n\tint dot_index_34 = 0;\n\tint dot_index_35 = 0;\n\tint dot_index_36\
    \ = 0;\n\tint dot_index_37 = 0;\n\tint dot_index_38 = 0;\n\tint dot_index_39 =\
    \ 0;\n\tint dot_index_40 = 0;\n\tint dot_index_41 = 0;\n\tint dot_index_42 = 0;\n\
    \tint dot_index_43 = 0;\n\tint dot_index_44 = 0;\n\tint\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvzet08s.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpjvzet08s.cpp:62:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   62 | }\n      | ^\n/tmp/tmpjvzet08s.cpp:62:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string before_dot\
    \ = file_name.substr(0, dot_index);\n\tstd::string after_dot = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n\tif (before_dot.length() == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n\t\treturn \"No\";\n\t}\n\tif (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_position\
    \ = 0;\n    std::string extension;\n    std::string name;\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n        \
    \    dot_count++;\n            dot_position = i;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(dot_position == 0) {\n        return \"\
    No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        if(file_name[0]\
    \ < 'A' || file_name[0] > 'Z') {\n            return \"No\";\n        }\n    }\n\
    \    extension = file_name.substr(dot_position + 1);\n    name = file_name.substr(0,\
    \ dot_position);\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_char = 0;\n\
    \tint count_char_after_dot = 0;\n\tint count_char_before_dot = 0;\n\tint count_char_after_dot_txt\
    \ = 0;\n\tint count_char_after_dot_exe = 0;\n\tint count_char_after_dot_dll =\
    \ 0;\n\tint count_char_before_dot_a_z = 0;\n\tint count_char_before_dot_A_Z =\
    \ 0;\n\tint count_char_before_dot_a_z_A_Z = 0;\n\tint count_char_after_dot_txt_exe_dll\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_txt = 0;\n\tint count_char_after_dot_txt_exe_dll_exe\
    \ = 0;\n\tint count_char_after_dot_txt_exe_dll_dll = 0;\n\tint count_char_before_dot_a_z_A_Z_dot\
    \ = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_exe\
    \ = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_dll = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe_dll\
    \ = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe_dll_txt = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe_dll_exe\
    \ = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe_dll_dll = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe_dll_txt_exe_dll\
    \ = 0;\n\tint count_char_before_dot_a_z_A_Z_dot_txt_exe\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp525n3k7t.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp525n3k7t.cpp:39:1: error: expected initializer before \u2018}\u2019\
    \ token\n   39 | }\n      | ^\n/tmp/tmp525n3k7t.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint\
    \ len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3 ||\
    \ dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string before_dot = file_name.substr(0,\
    \ dot_index);\n\tstd::string after_dot = file_name.substr(dot_index + 1, len -\
    \ dot_index - 1);\n\tif (before_dot.length() == 0 || (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z')) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"\
    dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_position\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int\
    \ m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n   \
    \ int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int zero = 0;\n    int one = 0;\n    int two = 0;\n    int three = 0;\n \
    \   int four = 0;\n    int five = 0;\n    int six = 0;\n    int seven = 0;\n \
    \   int eight = 0;\n    int nine = 0;\n    int dot = 0;\n    int dot_txt = 0;\n\
    \    int dot_exe = 0;\n    int dot_dll = 0;\n    int dot_txt_count = 0;\n    int\
    \ dot_exe_count = 0;\n    int dot_dll_count = 0;\n    int dot_txt_position = 0;\n\
    \    int dot_exe_position = 0;\n    int dot_dll_position = 0;\n    int dot_txt_position_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4sy6act.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpo4sy6act.cpp:82:1: error: expected initializer before \u2018}\u2019\
    \ token\n   82 | }\n      | ^\n/tmp/tmpo4sy6act.cpp:82:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint dot_count = 0;\n\tint digit_count = 0;\n\tfor (int i = 0;\
    \ i < file_name.length(); i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\
    \t\t}\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (digit_count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tstd::string before_dot = file_name.substr(0,\
    \ file_name.find('.'));\n\tstd::string after_dot = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (before_dot.length() == 0) {\n\t\treturn \"No\";\n\t}\n\tif (before_dot[0]\
    \ < 'A' || (before_dot[0] > 'Z' && before_dot[0] < 'a') || before_dot[0] > 'z')\
    \ {\n\t\treturn \"No\";\n\t}\n\tif (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint\
    \ count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint\
    \ count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint\
    \ count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\t\
    int count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\
    \tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\
    \tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\
    \tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\
    \tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\
    \tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\
    \tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\
    \tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\
    \tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\
    \tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\
    \tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\
    \tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\
    \tint count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmps_ogycpw: /tmp/tmps_ogycpw.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::string result = \"No\";\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    int\
    \ dot_index_before = 0;\n    int dot_index_after_count = 0;\n    int dot_index_before_count\
    \ = 0;\n    int digit_count = 0;\n    int digit_index = 0;\n    int digit_index_count\
    \ = 0;\n    int digit_index_before = 0;\n    int digit_index_before_count = 0;\n\
    \    int digit_index_after = 0;\n    int digit_index_after_count = 0;\n    int\
    \ digit_index_before_after = 0;\n    int digit_index_before_after_count = 0;\n\
    \    int digit_index_before_before = 0;\n    int digit_index_before_before_count\
    \ = 0;\n    int digit_index_after_after = 0;\n    int digit_index_after_after_count\
    \ = 0;\n    int digit_index_before_before_before = 0;\n    int digit_index_before_before_before_count\
    \ = 0;\n    int digit_index_after_after_after = 0;\n    int digit_index_after_after_after_count\
    \ = 0;\n    int digit_index_before_before_before_before = 0;\n    int digit_index_before_before_before_before_count\
    \ = 0;\n    int digit_index_after_after_after_after = 0;\n    int digit_index_after_after_after_after_count\
    \ = 0;\n    int digit_index_before_before_before_before_before = 0;\n    int digit_index_before_before_before_before_before_count\
    \ = 0;\n    int digit_index_after_after_after_after_after = 0;\n    int digit_index_after_after_after_after_after_count\
    \ = 0;\n    int digit_index_before_before_before_before_before_before = 0;\n \
    \   int digit_index_before_before_before_before_before_before_count = 0;\n   \
    \ int digit_index_after\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qu25r1i.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp6qu25r1i.cpp:50:1: error: expected initializer before \u2018}\u2019\
    \ token\n   50 | }\n      | ^\n/tmp/tmp6qu25r1i.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126825
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tstd::string sub_str1,\
    \ sub_str2;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t}\n\tif (count > 3 || dot_count != 1)\
    \ {\n\t\treturn \"No\";\n\t}\n\tsub_str1 = file_name.substr(0, file_name.find('.'));\n\
    \tsub_str2 = file_name.substr(file_name.find('.') + 1);\n\tif (sub_str1.length()\
    \ == 0 || (sub_str1[0] < 'a' || sub_str1[0] > 'z') && (sub_str1[0] < 'A' || sub_str1[0]\
    \ > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub_str2 != \"txt\" && sub_str2 !=\
    \ \"exe\" && sub_str2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvb24widb: /tmp/tmpvb24widb.cpp:37: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126825
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_index = 0;\n\
    \    int count_after_dot = 0;\n    std::string after_dot;\n    std::string before_dot;\n\
    \    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9'){\n            count++;\n        }\n        if(file_name[i]\
    \ == '.'){\n            dot++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot != 1){\n        return \"No\";\n    }\n    for(int i\
    \ = dot_index + 1; i < file_name.length(); i++){\n        count_after_dot++;\n\
    \    }\n    if(count_after_dot != 3){\n        return \"No\";\n    }\n    for(int\
    \ i = dot_index + 1; i < file_name.length(); i++){\n        after_dot += file_name[i];\n\
    \    }\n    for(int i = 0; i < dot_index; i++){\n        before_dot += file_name[i];\n\
    \    }\n    if(before_dot.length() == 0){\n        return \"No\";\n    }\n   \
    \ if(!(before_dot[0] >= 'a' && before_dot[0] <= 'z') && !(before_dot[0] >= 'A'\
    \ && before_dot[0] <= 'Z')){\n        return \"No\";\n    }\n    if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"){\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub1 = file_name.substr(0,\
    \ dot_index);\n\tstd::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n\tif (sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n\t\treturn \"No\";\n\t}\n\tif (sub2 != \"txt\" &&\
    \ sub2 != \"exe\" && sub2 != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string sub = file_name.substr(0,\
    \ dot_index);\n\tif (sub.length() == 0 || !((sub[0] >= 'a' && sub[0] <= 'z') ||\
    \ (sub[0] >= 'A' && sub[0] <= 'Z'))) {\n\t\treturn \"No\";\n\t}\n\tsub = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n\tif (sub != \"txt\" && sub != \"exe\" && sub !=\
    \ \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n  \
    \  auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_2 = 0;\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n\
    \        }\n        if(file_name[i] == '.'){\n            dot_count++;\n     \
    \       dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1){\n\
    \        return \"No\";\n    }\n    if(file_name[0] >= '0' && file_name[0] <=\
    \ '9'){\n        return \"No\";\n    }\n    if(file_name[dot_index + 1] == 't'\
    \ && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 't'){\n  \
    \      return \"Yes\";\n    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 'e'){\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] ==\
    \ 'l' && file_name[dot_index + 3] == 'l'){\n        return \"Yes\";\n    }\n \
    \   return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmptx88cgap: /tmp/tmptx88cgap.cpp:52: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ str = file_name.substr(0, file_name.find('.'));\n\tif (str.length() == 0 ||\
    \ (str[0] < 'a' || str[0] > 'z') && (str[0] < 'A' || str[0] > 'Z')) {\n\t\treturn\
    \ \"No\";\n\t}\n\tstd::string str1 = file_name.substr(file_name.find('.') + 1,\
    \ len);\n\tif (str1 != \"txt\" && str1 != \"exe\" && str1 != \"dll\") {\n\t\t\
    return \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_index);\n    std::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint count_dot = 0;\n\tint\
    \ count_txt = 0;\n\tint count_exe = 0;\n\tint count_dll = 0;\n\tint count_letter\
    \ = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot = i;\n\t\t\tcount_dot++;\n\t\t}\n\t\tif (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n\t\t\tcount_letter++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n\t\t\tcount_letter++;\n\t\t}\n\t\tif (file_name[i]\
    \ == 't' && file_name[i + 1] == 'x' && file_name[i + 2] == 't') {\n\t\t\tcount_txt++;\n\
    \t\t}\n\t\tif (file_name[i] == 'e' && file_name[i + 1] == 'x' && file_name[i +\
    \ 2] == 'e') {\n\t\t\tcount_exe++;\n\t\t}\n\t\tif (file_name[i] == 'd' && file_name[i\
    \ + 1] == 'l' && file_name[i + 2] == 'l') {\n\t\t\tcount_dll++;\n\t\t}\n\t}\n\t\
    if (count > 3) {\n\t\treturn \"No\";\n\t}\n\tif (count_dot != 1) {\n\t\treturn\
    \ \"No\";\n\t}\n\tif (dot == 0) {\n\t\treturn \"No\";\n\t}\n\tif (count_letter\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tif (count_txt == 0 && count_exe == 0 &&\
    \ count_dll == 0) {\n\t\treturn \"No\";\n\t}\n\treturn \"\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpadx0lqo6.cpp:60:9: warning: missing terminating \" character\n\
    \   60 |  return \"\n      |         ^\n/tmp/tmpadx0lqo6.cpp:60:9: error: missing\
    \ terminating \" character\n/tmp/tmpadx0lqo6.cpp: In function \u2018std::string\
    \ file_name_check(std::string)\u2019:\n/tmp/tmpadx0lqo6.cpp:61:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpadx0lqo6.cpp:60:8:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   60 |  return \"\
    \n      |        ^\n      |        ;\n   61 | }\n      | ~       \n"
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_alpha = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tcount_dot++;\n\t\t}\n\t\tif ((file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\tcount_alpha++;\n\
    \t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\tif (count_dot != 1)\
    \ {\n\t\treturn \"No\";\n\t}\n\tif (count_alpha == 0) {\n\t\treturn \"No\";\n\t\
    }\n\tstd::string str = file_name.substr(file_name.find(\".\") + 1);\n\tif (str\
    \ == \"txt\" || str == \"exe\" || str == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\
    \treturn \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n   \
    \ assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp3rrcsqth: /tmp/tmp3rrcsqth.cpp:46: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = -1;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_index);\n    std::string sub2 = file_name.substr(dot_index + 1, len - dot_index\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    if(dot_index == 0) {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n\
    \    }\n    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'd' && file_name[dot_index + 2] == 'l' &&\
    \ file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp96xkp_30: /tmp/tmp96xkp_30.cpp:49: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int dot_count = 0;\n    int digit_count = 0;\n    int letter_count\
    \ = 0;\n    int dot_index = 0;\n    int extension_index = 0;\n    std::string\
    \ extension;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n\
    \        }\n        if ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z')) {\n            letter_count++;\n        }\n\
    \    }\n    if (dot_count != 1) {\n        return \"No\";\n    }\n    if (digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    if (letter_count == 0) {\n      \
    \  return \"No\";\n    }\n    extension_index = dot_index + 1;\n    extension\
    \ = file_name.substr(extension_index, file_name.length() - extension_index);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvseq3f52: /tmp/tmpvseq3f52.cpp:51: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tstd::stringstream ss(file_name);\n\tstd::string token;\n\tstd::string\
    \ extension;\n\tstd::string name;\n\tint count = 0;\n\twhile (std::getline(ss,\
    \ token, '.')) {\n\t\tif (count == 0) {\n\t\t\tname = token;\n\t\t}\n\t\telse\
    \ {\n\t\t\textension = token;\n\t\t}\n\t\tcount++;\n\t}\n\tif (count != 2) {\n\
    \t\treturn \"No\";\n\t}\n\tif (extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\") {\n\t\treturn \"No\";\n\t}\n\tint num_count = 0;\n\tfor\
    \ (int i = 0; i < name.length(); i++) {\n\t\tif (name[i] >= '0' && name[i] <=\
    \ '9') {\n\t\t\tnum_count++;\n\t\t}\n\t}\n\tif (num_count > 3) {\n\t\treturn \"\
    No\";\n\t}\n\tif (name[0] >= '0' && name[0] <= '9') {\n\t\treturn \"No\";\n\t\
    }\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpbi8x9xsw: /tmp/tmpbi8x9xsw.cpp:56: int main(): Assertion `candidate(("_Y.txt"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tint digit_count = 0;\n\tint alpha_count = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index\
    \ = i;\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_count++;\n\
    \t\t}\n\t\tif ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >=\
    \ 'A' && file_name[i] <= 'Z')) {\n\t\t\talpha_count++;\n\t\t}\n\t}\n\tif (dot_count\
    \ != 1) {\n\t\treturn \"No\";\n\t}\n\tif (digit_count > 3) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (alpha_count == 0) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substr(dot_index\
    \ + 1, 3) != \"txt\" && file_name.substr(dot_index + 1, 3) != \"exe\" && file_name.substr(dot_index\
    \ + 1, 3) != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpw3meiowa: /tmp/tmpw3meiowa.cpp:48: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    // TODO: Implement your solution here\n    int count = 0;\n\
    \    int dot = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(file_name[i] == '.')\n        {\n            dot++;\n\
    \        }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n\
    \            count++;\n        }\n    }\n    if(count > 3 || dot != 1)\n    {\n\
    \        return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub.length() == 0)\n    {\n        return \"No\";\n    }\n    if(sub[0]\
    \ >= 'a' && sub[0] <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z')\n    {\n        sub\
    \ = file_name.substr(file_name.find('.') + 1, len);\n        if(sub == \"txt\"\
    \ || sub == \"exe\" || sub == \"dll\")\n        {\n            return \"Yes\"\
    ;\n        }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_position = 0;\n\
    \tint len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_position = i;\n\t\t}\n\t}\n\tif (count\
    \ > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string before_dot\
    \ = file_name.substr(0, dot_position);\n\tstd::string after_dot = file_name.substr(dot_position\
    \ + 1, len - dot_position - 1);\n\tif (before_dot.length() == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n\t\treturn \"No\";\n\t}\n\tif (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_digit = 0;\n\
    \tint count_alphabet = 0;\n\tint count_alphabet_after_dot = 0;\n\tint count_alphabet_before_dot\
    \ = 0;\n\tint count_dot_after_alphabet = 0;\n\tint count_dot_before_alphabet =\
    \ 0;\n\tint count_digit_after_dot = 0;\n\tint count_digit_before_dot = 0;\n\t\
    int count_digit_after_alphabet = 0;\n\tint count_digit_before_alphabet = 0;\n\t\
    int count_alphabet_after_digit = 0;\n\tint count_alphabet_before_digit = 0;\n\t\
    int count_dot_after_digit = 0;\n\tint count_dot_before_digit = 0;\n\tint count_digit_after_digit\
    \ = 0;\n\tint count_digit_before_digit = 0;\n\tint count_dot_after_dot = 0;\n\t\
    int count_dot_before_dot = 0;\n\tint count_alphabet_after_dot_after_alphabet =\
    \ 0;\n\tint count_alphabet_before_dot_before_alphabet = 0;\n\tint count_digit_after_dot_after_alphabet\
    \ = 0;\n\tint count_digit_before_dot_before_alphabet = 0;\n\tint count_dot_after_dot_after_alphabet\
    \ = 0;\n\tint count_dot_before_dot_before_alphabet = 0;\n\tint count_alphabet_after_dot_after_digit\
    \ = 0;\n\tint count_alphabet_before_dot_before_digit = 0;\n\tint count_digit_after_dot_after_digit\
    \ = 0;\n\tint count_digit_before_dot_before_digit = 0;\n\tint count_dot_after_dot_after_digit\
    \ = 0;\n\tint count_dot_before_dot_before_digit = 0;\n\tint count_alphabet_after_dot_after_dot\
    \ = 0;\n\tint count_alphabet_before_dot_before_dot = 0;\n\tint count_digit_after_dot_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_x7d0q_k.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_x7d0q_k.cpp:49:1: error: expected initializer before \u2018}\u2019\
    \ token\n   49 | }\n      | ^\n/tmp/tmp_x7d0q_k.cpp:49:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_pos = 0;\n\tint flag\
    \ = 0;\n\tint flag1 = 0;\n\tint flag2 = 0;\n\tint flag3 = 0;\n\tint flag4 = 0;\n\
    \tint flag5 = 0;\n\tint flag6 = 0;\n\tint flag7 = 0;\n\tint flag8 = 0;\n\tint\
    \ flag9 = 0;\n\tint flag10 = 0;\n\tint flag11 = 0;\n\tint flag12 = 0;\n\tint flag13\
    \ = 0;\n\tint flag14 = 0;\n\tint flag15 = 0;\n\tint flag16 = 0;\n\tint flag17\
    \ = 0;\n\tint flag18 = 0;\n\tint flag19 = 0;\n\tint flag20 = 0;\n\tint flag21\
    \ = 0;\n\tint flag22 = 0;\n\tint flag23 = 0;\n\tint flag24 = 0;\n\tint flag25\
    \ = 0;\n\tint flag26 = 0;\n\tint flag27 = 0;\n\tint flag28 = 0;\n\tint flag29\
    \ = 0;\n\tint flag30 = 0;\n\tint flag31 = 0;\n\tint flag32 = 0;\n\tint flag33\
    \ = 0;\n\tint flag34 = 0;\n\tint flag35 = 0;\n\tint flag36 = 0;\n\tint flag37\
    \ = 0;\n\tint flag38 = 0;\n\tint flag39 = 0;\n\tint flag40 = 0;\n\tint flag41\
    \ = 0;\n\tint flag42 = 0;\n\tint flag43 = 0;\n\tint flag44 = 0;\n\tint flag45\
    \ = 0;\n\tint flag46 = 0;\n\tint flag47 = 0;\n\tint flag48 = 0;\n\tint flag49\
    \ = 0;\n\tint flag50 = 0;\n\tint flag51 = 0;\n\tint flag52 = 0;\n\tint flag53\
    \ = 0;\n\tint flag54 = 0;\n\tint flag55 = 0;\n\tint flag56 = 0;\n\tint flag57\
    \ = 0;\n\tint flag58 = 0;\n\tint flag59 = 0;\n\tint flag60 = 0;\n\t\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpy_pn_udj: /tmp/tmpy_pn_udj.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot = 0;\n\tint dot_index = 0;\n\tint\
    \ dot_index_1 = 0;\n\tint dot_index_2 = 0;\n\tint dot_index_3 = 0;\n\tint dot_index_4\
    \ = 0;\n\tint dot_index_5 = 0;\n\tint dot_index_6 = 0;\n\tint dot_index_7 = 0;\n\
    \tint dot_index_8 = 0;\n\tint dot_index_9 = 0;\n\tint dot_index_10 = 0;\n\tint\
    \ dot_index_11 = 0;\n\tint dot_index_12 = 0;\n\tint dot_index_13 = 0;\n\tint dot_index_14\
    \ = 0;\n\tint dot_index_15 = 0;\n\tint dot_index_16 = 0;\n\tint dot_index_17 =\
    \ 0;\n\tint dot_index_18 = 0;\n\tint dot_index_19 = 0;\n\tint dot_index_20 = 0;\n\
    \tint dot_index_21 = 0;\n\tint dot_index_22 = 0;\n\tint dot_index_23 = 0;\n\t\
    int dot_index_24 = 0;\n\tint dot_index_25 = 0;\n\tint dot_index_26 = 0;\n\tint\
    \ dot_index_27 = 0;\n\tint dot_index_28 = 0;\n\tint dot_index_29 = 0;\n\tint dot_index_30\
    \ = 0;\n\tint dot_index_31 = 0;\n\tint dot_index_32 = 0;\n\tint dot_index_33 =\
    \ 0;\n\tint dot_index_34 = 0;\n\tint dot_index_35 = 0;\n\tint dot_index_36 = 0;\n\
    \tint dot_index_37 = 0;\n\tint dot_index_38 = 0;\n\tint dot_index_39 = 0;\n\t\
    int dot_index_40 = 0;\n\tint dot_index_41 = 0;\n\tint dot_index_42 = 0;\n\tint\
    \ dot_index_43 = 0;\n\tint dot_index_44 = 0;\n\tint dot_\n}\nint main() {\n  \
    \  auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiiy8zblx.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpiiy8zblx.cpp:62:1: error: expected initializer before \u2018}\u2019\
    \ token\n   62 | }\n      | ^\n/tmp/tmpiiy8zblx.cpp:62:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n  int dot_count = 0;\n  int digit_count = 0;\n  for (int i = 0;\
    \ i < file_name.size(); i++) {\n    if (file_name[i] == '.') {\n      dot_count++;\n\
    \    }\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digit_count++;\n\
    \    }\n  }\n  if (dot_count != 1 || digit_count > 3) {\n    return \"No\";\n\
    \  }\n  std::string extension = file_name.substr(file_name.find(\".\") + 1);\n\
    \  std::string name = file_name.substr(0, file_name.find(\".\"));\n  if (name.size()\
    \ == 0 || !(name[0] >= 'a' && name[0] <= 'z') || !(name[0] >= 'A' && name[0] <=\
    \ 'Z')) {\n    return \"No\";\n  }\n  if (extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmptk5ypypq: /tmp/tmptk5ypypq.cpp:39: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count1 = 0;\n\tint count2 = 0;\n\tint\
    \ count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint\
    \ count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint\
    \ count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\t\
    int count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\
    \tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\
    \tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\
    \tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\
    \tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\
    \tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\
    \tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\
    \tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\
    \tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\
    \tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\
    \tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\
    \tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\tint count62 = 0;\n\
    \tint count63 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmps_ogycpw: /tmp/tmps_ogycpw.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n\
    \    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7\
    \ = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int\
    \ count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 =\
    \ 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int\
    \ count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 =\
    \ 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int\
    \ count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 =\
    \ 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int\
    \ count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 =\
    \ 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int\
    \ count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 =\
    \ 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int\
    \ count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 =\
    \ 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int\
    \ count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 =\
    \ 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int\
    \ count60 = 0;\n    int count61 = 0;\n    int count62 = 0;\n    int count63 =\
    \ 0;\n    int count64 = 0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvmi2a1pr: /tmp/tmpvmi2a1pr.cpp:82: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n \
    \   int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n      \
    \  if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n  \
    \      }\n        if(file_name[i] == '.') {\n            dot++;\n            dot_pos\
    \ = i;\n        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n\
    \    if(dot != 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a'\
    \ || file_name[0] > 'z') {\n        return \"No\";\n    }\n    if(file_name[dot_pos\
    \ + 1] != 't' || file_name[dot_pos + 2] != 'x' || file_name[dot_pos + 3] != 't')\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpvnc3bhhl: /tmp/tmpvnc3bhhl.cpp:46: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::regex pattern(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpw412bwzq: /tmp/tmpw412bwzq.cpp:19: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int count_dot = 0;\n    int count_alpha\
    \ = 0;\n    int count_alpha_after_dot = 0;\n    int count_alpha_before_dot = 0;\n\
    \    int count_digit = 0;\n    int count_digit_before_dot = 0;\n    int count_digit_after_dot\
    \ = 0;\n    int count_alpha_after_dot_txt = 0;\n    int count_alpha_after_dot_exe\
    \ = 0;\n    int count_alpha_after_dot_dll = 0;\n    int count_alpha_after_dot_txt_exe_dll\
    \ = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt = 0;\n    int count_alpha_after_dot_txt_exe_dll_exe\
    \ = 0;\n    int count_alpha_after_dot_txt_exe_dll_dll = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll\
    \ = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt = 0;\n    int\
    \ count_alpha_after_dot_txt_exe_dll_txt_exe_dll_exe = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_dll\
    \ = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe_dll = 0;\n\
    \    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe_dll_txt = 0;\n\
    \    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe_dll_exe = 0;\n\
    \    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe_dll_dll = 0;\n\
    \    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe_dll_txt_exe_dll\
    \ = 0;\n    int count_alpha_after_dot_txt_exe_dll_txt_exe_dll_txt_exe\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9505hlao.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp9505hlao.cpp:39:1: error: expected initializer before \u2018}\u2019\
    \ token\n   39 | }\n      | ^\n/tmp/tmp9505hlao.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int dot_count = 0;\n    int digit_count = 0;\n    int letter_count\
    \ = 0;\n    int ext_count = 0;\n    int ext_index = 0;\n    for (int i = 0; i\
    \ < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n         \
    \   dot_count++;\n            ext_index = i;\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            digit_count++;\n        }\n  \
    \      if ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z')) {\n            letter_count++;\n        }\n    }\n\
    \    if (dot_count != 1) {\n        return \"No\";\n    }\n    if (digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    if (letter_count == 0) {\n      \
    \  return \"No\";\n    }\n    if (file_name.substr(ext_index + 1, 3) == \"txt\"\
    ) {\n        ext_count++;\n    }\n    if (file_name.substr(ext_index + 1, 3) ==\
    \ \"exe\") {\n        ext_count++;\n    }\n    if (file_name.substr(ext_index\
    \ + 1, 3) == \"dll\") {\n        ext_count++;\n    }\n    if (ext_count == 0)\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpltkm2fnf: /tmp/tmpltkm2fnf.cpp:57: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_pos = 0;\n\t\
    int len = file_name.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (count >\
    \ 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name[0] < 'a' ||\
    \ file_name[0] > 'z') {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substr(dot_pos\
    \ + 1, 3) != \"txt\" && file_name.substr(dot_pos + 1, 3) != \"exe\" && file_name.substr(dot_pos\
    \ + 1, 3) != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpg8tv6n8q: /tmp/tmpg8tv6n8q.cpp:43: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint count_dot = 0;\n\tint count_alpha = 0;\n\
    \tint count_num = 0;\n\tint count_txt = 0;\n\tint count_exe = 0;\n\tint count_dll\
    \ = 0;\n\tint count_sub = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\
    \t\tif (file_name[i] == '.') {\n\t\t\tcount_dot++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount_num++;\n\t\t}\n\t\tif ((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\
    \ {\n\t\t\tcount_alpha++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tcount_sub\
    \ = i;\n\t\t}\n\t\tif (file_name[i] == 't' && file_name[i + 1] == 'x' && file_name[i\
    \ + 2] == 't') {\n\t\t\tcount_txt++;\n\t\t}\n\t\tif (file_name[i] == 'e' && file_name[i\
    \ + 1] == 'x' && file_name[i + 2] == 'e') {\n\t\t\tcount_exe++;\n\t\t}\n\t\tif\
    \ (file_name[i] == 'd' && file_name[i + 1] == 'l' && file_name[i + 2] == 'l')\
    \ {\n\t\t\tcount_dll++;\n\t\t}\n\t}\n\tif (count_dot == 1 && count_num <= 3 &&\
    \ count_alpha != 0 && count_sub != 0 && (count_txt == 1 || count_exe == 1 || count_dll\
    \ == 1)) {\n\t\treturn \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";\n\t}\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpdr1fvxsj: /tmp/tmpdr1fvxsj.cpp:55: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string after_dot = file_name.substr(dot_index + 1, len\
    \ - dot_index);\n    if(before_dot.length() == 0 || (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z')) {\n        return \"\
    No\";\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    std::regex pattern(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n    std::smatch match;\n    if (std::regex_search(file_name, match, pattern))\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmppsjbi89a: /tmp/tmppsjbi89a.cpp:23: int main(): Assertion `candidate(("example.txt"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    bool dot = false;\n    bool valid = false;\n\
    \    for(int i = 0; i < file_name.size(); i++) {\n        if(file_name[i] == '.')\
    \ {\n            dot = true;\n            continue;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(count\
    \ > 3) {\n            return \"No\";\n        }\n        if(file_name[i] >= 'a'\
    \ && file_name[i] <= 'z') {\n            valid = true;\n        }\n        if(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n            valid = true;\n        }\n   \
    \ }\n    if(!dot) {\n        return \"No\";\n    }\n    if(!valid) {\n       \
    \ return \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmp_qbk9lzi: /tmp/tmp_qbk9lzi.cpp:50: int main(): Assertion `candidate(("1example.dll"))
    == ("No")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string str1 = file_name.substr(0, file_name.find(\"\
    .\"));\n    std::string str2 = file_name.substr(file_name.find(\".\") + 1, len);\n\
    \    if(str1.length() == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A'\
    \ || str1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(str2 != \"txt\"\
    \ && str2 != \"exe\" && str2 != \"dll\") {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint dot_index = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t}\n\t}\n\tif (count > 3) {\n\
    \t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    if (file_name[0] < 'a' || file_name[0] > 'z') {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ extension = file_name.substr(dot_index + 1);\n\tif (extension != \"txt\" &&\
    \ extension != \"exe\" && extension != \"dll\") {\n\t\treturn \"No\";\n\t}\n\t\
    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpcp848be9: /tmp/tmpcp848be9.cpp:46: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\nstd::string file_name_check(std::string\
    \ file_name) {\n\tint count = 0;\n\tint dot_count = 0;\n\tint len = file_name.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    std::string temp = file_name.substr(0, file_name.find('.'));\n\tif (temp.length()\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tif (temp[0] < 'a' || temp[0] > 'z') {\n\t\
    \treturn \"No\";\n\t}\n\tstd::string temp2 = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (temp2 != \"txt\" && temp2 != \"exe\" && temp2 != \"dll\") {\n\t\
    \treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: Exception
  stderr: 'tmpa0_zvayl: /tmp/tmpa0_zvayl.cpp:46: int main(): Assertion `candidate(("K.dll"))
    == ("Yes")'' failed.

    '
  stdout: ''
  timestamp: 1660126827
