name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the array\
  \ palindromic. A palindromic array is an array that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\nlong smallest_change(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n \
  \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3,\
  \ (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n\
  }\n"
completions: ["  long n = arr.size();\n  long left = 0;\n  long right = n - 1;\n \
    \ long count = 0;\n  while (left < right) {\n    if (arr[left] != arr[right])\
    \ {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;",
  "  long n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    ans += std::abs(arr[i] - arr[n - i - 1]);\n  }\n  return ans;", "    long\
    \ n = arr.size();\n    long start = 0;\n    long end = n - 1;\n    long count\
    \ = 0;\n    while (start < end) {\n        if (arr[start] != arr[end]) {\n   \
    \         count++;\n        }\n        start++;\n        end--;\n    }\n    return\
    \ count;", "    long n = arr.size();\n    long i = 0, j = n - 1;\n    long count\
    \ = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return count;", "    long n\
    \ = arr.size();\n    long i = 0, j = n - 1;\n    long count = 0;\n    while (i\
    \ < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n        }\n \
    \       i++;\n        j--;\n    }\n    return count;", "    long n = arr.size();\n\
    \    long left = 0;\n    long right = n - 1;\n    long count = 0;\n    while (left\
    \ < right) {\n        if (arr[left] != arr[right]) {\n            count++;\n \
    \       }\n        left++;\n        right--;\n    }\n    return count;", "  long\
    \ n = arr.size();\n  long left = 0;\n  long right = n - 1;\n  long count = 0;\n\
    \  while (left < right) {\n    if (arr[left] != arr[right]) {\n      count++;\n\
    \    }\n    left++;\n    right--;\n  }\n  return count;", "  long n = arr.size();\n\
    \  long left = 0;\n  long right = n - 1;\n  long count = 0;\n  while (left < right)\
    \ {\n    if (arr[left] != arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;", "    long n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            count++;\n        }\n    }\n    return count;", "  long\
    \ n = arr.size();\n  long i = 0;\n  long j = n - 1;\n  long count = 0;\n  while\
    \ (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n    i++;\n  \
    \  j--;\n  }\n  return count;", "  long n = arr.size();\n  long count = 0;\n \
    \ for (int i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n   \
    \   count++;\n    }\n  }\n  return count;", "    long n = arr.size();\n    long\
    \ count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n\
    \ - i - 1]) {\n            count++;\n        }\n    }\n    return count;", " \
    \   // Write your code here\n    int n = arr.size();\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (int i = 0; i < n; i++) {\n       \
    \ dp[i][i] = 0;\n    }\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i]\
    \ != arr[i + 1]) {\n            dp[i][i + 1] = 1;\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        for (int j = 0; j < n - i; j++) {\n          \
    \  if (arr[j] == arr[j + i]) {\n                dp[j][j + i] = dp[j + 1][j + i\
    \ - 1];\n            } else {\n                dp[j][j + i] = std::min(dp[j +\
    \ 1][j + i], dp[j][j + i - 1]) + 1;\n            }\n        }\n    }\n    return\
    \ dp[0][n - 1];", "  long n = arr.size();\n  long count = 0;\n  for (long i =\
    \ 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      count++;\n\
    \    }\n  }\n  return count;", "    long n = arr.size();\n    long dp[n][n];\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n\
    \        dp[i][i] = 0;\n    }\n    for(long i = 0; i < n-1; i++) {\n        if(arr[i]\
    \ != arr[i+1]) {\n            dp[i][i+1] = 1;\n        }\n    }\n    for(long\
    \ l = 3; l <= n; l++) {\n        for(long i = 0; i < n-l+1; i++) {\n         \
    \   long j = i+l-1;\n            if(arr[i] == arr[j]) {\n                dp[i][j]\
    \ = dp[i+1][j-1];\n            } else {\n                dp[i][j] = std::min(dp[i+1][j],\
    \ dp[i][j-1]) + 1;\n            }\n        }\n    }\n    return dp[0][n-1];",
  "  long n = arr.size();\n  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n  return count;",
  "  // Write your code here\n  long n = arr.size();\n  long dp[n][n];\n  for(long\
    \ i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++) {\n      dp[i][j] = 0;\n\
    \    }\n  }\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++)\
    \ {\n      if(i == j) {\n        dp[i][j] = 0;\n      }\n      else if(i == j\
    \ - 1) {\n        dp[i][j] = abs(arr[i] - arr[j]);\n      }\n      else {\n  \
    \      dp[i][j] = std::min(dp[i][j - 1], dp[i + 1][j]) + abs(arr[i] - arr[j]);\n\
    \      }\n    }\n  }\n  return dp[0][n - 1];", "  long n = arr.size();\n  long\
    \ i = 0;\n  long j = n - 1;\n  long count = 0;\n  while (i < j) {\n    if (arr[i]\
    \ != arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;",
  "  // Write your code here\n  long n = arr.size();\n  long i = 0, j = n - 1;\n \
    \ long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n\
    \    }\n    i++;\n    j--;\n  }\n  return count;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "  long n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;",
  "  long n = arr.size();\n  long min_changes = 0;\n  for (long i = 0; i < n / 2;\
    \ i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      min_changes++;\n    }\n \
    \ }\n  return min_changes;", "  long n = arr.size();\n  long i = 0;\n  long j\
    \ = n - 1;\n  long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n\
    \      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;", "  long n =\
    \ arr.size();\n  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if\
    \ (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n  return count;",
  "  // Write your code here\n  long n = arr.size();\n  long dp[n][n];\n  for(long\
    \ i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(long l = 2; l <= n; l++) {\n  \
    \  for(long i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n      if(arr[i]\
    \ == arr[j])\n        dp[i][j] = dp[i + 1][j - 1];\n      else\n        dp[i][j]\
    \ = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n    }\n  }\n  return dp[0][n -\
    \ 1];", "  long n = arr.size();\n  long count = 0;\n  for (long i = 0; i < n /\
    \ 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n\
    \  return count;", "  // your code goes here\n  int n = arr.size();\n  int i =\
    \ 0;\n  int j = n-1;\n  int count = 0;\n  while(i<j){\n    if(arr[i] != arr[j]){\n\
    \      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;", "    long n\
    \ = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n \
    \       if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n\
    \    return ans;", "  long n = arr.size();\n  long count = 0;\n  for (long i =\
    \ 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      count++;\n\
    \    }\n  }\n  return count;", "    long n = arr.size();\n    long ans = 0;\n\
    \    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\
    \ {\n            ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long l = 0, r = n - 1;\n    long count = 0;\n    while (l < r) {\n      \
    \  if (arr[l] != arr[r]) {\n            count++;\n        }\n        l++;\n  \
    \      r--;\n    }\n    return count;", "    long n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2; i++)\
    \ {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n\
    \    }\n    return count;", "    // Write your code here\n    long n = arr.size();\n\
    \    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    for (long\
    \ i = 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n    for (long i = 0; i <\
    \ n - 1; i++) {\n        if (arr[i] != arr[i + 1]) {\n            dp[i][i + 1]\
    \ = 1;\n        }\n    }\n    for (long l = 3; l <= n; l++) {\n        for (long\
    \ i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if\
    \ (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n       \
    \     } else {\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1])\
    \ + 1;\n            }\n        }\n    }\n    return dp[0][n - 1];", "    // Write\
    \ your code here\n    long n = arr.size();\n    long dp[n][n];\n    for(long i\
    \ = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n\
    \        for(long i = 0; i < n-l+1; i++) {\n            long j = i+l-1;\n    \
    \        if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n    \
    \        else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    long n = arr.size();\n    long\
    \ ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n\
    \ - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "  // your\
    \ code goes here\n  long n = arr.size();\n  std::vector<std::vector<long>> dp(n,\
    \ std::vector<long>(n, 0));\n  for (long i = 0; i < n; i++) {\n    dp[i][i] =\
    \ 0;\n  }\n  for (long i = 0; i < n - 1; i++) {\n    if (arr[i] != arr[i + 1])\
    \ {\n      dp[i][i + 1] = 1;\n    }\n  }\n  for (long l = 3; l <= n; l++) {\n\
    \    for (long i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n     \
    \ if (arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1];\n      } else\
    \ {\n        dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n      }\n \
    \   }\n  }\n  return dp[0][n - 1];", "    long n = arr.size();\n    long ans =\
    \ 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i\
    \ - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "  long n =\
    \ arr.size();\n  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if\
    \ (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n  return count;",
  "  long n = arr.size();\n  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n  return count;",
  "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    int j\
    \ = n-1;\n    int count = 0;\n    while(i<j){\n        if(arr[i] == arr[j]){\n\
    \            i++;\n            j--;\n        }\n        else{\n            if(arr[i]\
    \ > arr[j]){\n                arr[j-1] += arr[j];\n                j--;\n    \
    \        }\n            else{\n                arr[i+1] += arr[i];\n         \
    \       i++;\n            }\n            count++;\n        }\n    }\n    return\
    \ count;", "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0;\
    \ i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    // Write your code here\n    long n\
    \ = arr.size();\n    long count = 0;\n    for(long i = 0; i < n/2; i++){\n   \
    \     if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return\
    \ count;", "    // Write your code here\n    int n = arr.size();\n    int i =\
    \ 0;\n    int j = n-1;\n    int count = 0;\n    while(i<j){\n        if(arr[i]\
    \ == arr[j]){\n            i++;\n            j--;\n        }\n        else{\n\
    \            count++;\n            if(arr[i] < arr[j]){\n                arr[i+1]\
    \ = arr[i];\n                i++;\n            }\n            else{\n        \
    \        arr[j-1] = arr[j];\n                j--;\n            }\n        }\n\
    \    }\n    return count;", "    long n = arr.size();\n    long count = 0;\n \
    \   for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\
    \ {\n            count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      count++;\n    }\n  }\n  return count;", "    long n = arr.size();\n\
    \    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1])\n            count++;\n    }\n    return count;", "    long\
    \ n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n\
    \        if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n  \
    \  }\n    return count;", "    long n = arr.size();\n    long ans = 0;\n    for\
    \ (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // Write your code\
    \ here\n    long n = arr.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n,\
    \ 0));\n    for (long i = 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n   \
    \ for (long l = 2; l <= n; l++) {\n        for (long i = 0; i < n - l + 1; i++)\
    \ {\n            long j = i + l - 1;\n            if (arr[i] == arr[j]) {\n  \
    \              dp[i][j] = dp[i + 1][j - 1];\n            } else {\n          \
    \      dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            }\n \
    \       }\n    }\n    return dp[0][n - 1];", "    // Write your code here\n  \
    \  long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i\
    \ = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    // your code goes here\n    long\
    \ n = arr.size();\n    long ans = 0;\n    for(long i = 0; i < n/2; i++) {\n  \
    \      if(arr[i] != arr[n-i-1]) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // Write your code here\n    long n = arr.size();\n    long i =\
    \ 0, j = n - 1;\n    long count = 0;\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j]) {\n            count++;\n        }\n        i++;\n        j--;\n\
    \    }\n    return count;", "    long n = arr.size();\n    long ans = 0;\n   \
    \ for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1]) {\n    \
    \        ans++;\n        }\n    }\n    return ans;", "  // Write your code here\n\
    \  long n = arr.size();\n  long ans = 0;\n  for(long i = 0; i < n/2; i++){\n \
    \   if(arr[i] != arr[n-i-1]){\n      ans++;\n    }\n  }\n  return ans;", "  long\
    \ n = arr.size();\n  long count = 0;\n  for (long i = 0; i < n/2; i++) {\n   \
    \ if (arr[i] != arr[n-i-1]) {\n      count++;\n    }\n  }\n  return count;", " \
    \   long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2;\
    \ i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n    \
    \    }\n    }\n    return count;", "    long n = arr.size();\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (long i = 0; i < n; i++) {\n      \
    \  dp[i][i] = 0;\n    }\n    for (long i = 0; i < n - 1; i++) {\n        dp[i][i\
    \ + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n    }\n    for (long i = 2; i < n; i++)\
    \ {\n        for (long j = 0; j < n - i; j++) {\n            if (arr[j] == arr[j\
    \ + i]) {\n                dp[j][j + i] = dp[j + 1][j + i - 1];\n            }\
    \ else {\n                dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j +\
    \ i - 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n - 1];", " \
    \ // your code goes here\n  long n = arr.size();\n  long dp[n][n];\n  for(long\
    \ i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++) {\n      dp[i][j] = 0;\n\
    \    }\n  }\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++)\
    \ {\n      if(i >= j) {\n        dp[i][j] = 0;\n      }\n      else {\n      \
    \  dp[i][j] = std::min(dp[i+1][j], dp[i][j-1]) + 1;\n      }\n    }\n  }\n  return\
    \ dp[0][n-1];", "  long n = arr.size();\n  long count = 0;\n  for (long i = 0;\
    \ i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      count++;\n   \
    \ }\n  }\n  return count;", "    long n = arr.size();\n    long ans = 0;\n   \
    \ for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            count++;\n        }\n    }\n    return count;",
  "    long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2;\
    \ i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n    \
    \    }\n    }\n    return count;", "  long n = arr.size();\n  long i = 0;\n  long\
    \ j = n - 1;\n  long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j])\
    \ {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;", "  long\
    \ n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n   \
    \ ans += std::abs(arr[i] - arr[n - i - 1]);\n  }\n  return ans;", "    // Write\
    \ your code here\n    long n = arr.size();\n    long count = 0;\n    for(long\
    \ i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n\
    \        }\n    }\n    return count;", "    long n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            count++;\n        }\n    }\n    return count;", "   \
    \ int n = arr.size();\n    long dp[n][n];\n    for(int i = 0; i < n; i++)\n  \
    \      dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0;\
    \ i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2)\n                dp[i][j] = 0;\n            else if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i][j - 1], dp[i + 1][j]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "  long n = arr.size();\n  long count\
    \ = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\
    \ {\n      count++;\n    }\n  }\n  return count;", "    // your code goes here\n\
    \    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i\
    \ = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2)\n                dp[i][j] = 0;\n            else if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i][j - 1], dp[i + 1][j]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            count++;\n        }\n    }\n    return count;", "  //\
    \ your code goes here\n  long n = arr.size();\n  long dp[n][n];\n  for(long i\
    \ = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(long l = 2; l <= n; l++) {\n    for(long\
    \ i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n      if(arr[i] ==\
    \ arr[j])\n        dp[i][j] = dp[i + 1][j - 1];\n      else\n        dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[0][n -\
    \ 1];", "    // Write your code here\n    long n = arr.size();\n    long dp[n][n];\n\
    \    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long i = 0; i\
    \ < n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    for(long\
    \ l = 3; l <= n; l++) {\n        for(long i = 0; i <= n-l; i++) {\n          \
    \  long j = i+l-1;\n            if(arr[i] == arr[j])\n                dp[i][j]\
    \ = dp[i+1][j-1];\n            else\n                dp[i][j] = 1 + std::min(dp[i+1][j],\
    \ dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    ans += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n  }\n  return ans;", "  long n = arr.size();\n  long ans\
    \ = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\
    \ {\n      ans++;\n    }\n  }\n  return ans;", "  long n = arr.size();\n  long\
    \ min_changes = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      min_changes++;\n    }\n  }\n  return min_changes;", "  long\
    \ n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n   \
    \ if (arr[i] != arr[n - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", " \
    \   int n = arr.size();\n    int count = 0;\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return count;", "  // your\
    \ code goes here\n  int n = arr.size();\n  int dp[n][n];\n  for(int i = 0; i <\
    \ n; i++)\n    dp[i][i] = 0;\n  for(int l = 2; l <= n; l++) {\n    for(int i =\
    \ 0; i < n - l + 1; i++) {\n      int j = i + l - 1;\n      if(arr[i] == arr[j])\n\
    \        dp[i][j] = dp[i + 1][j - 1];\n      else\n        dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[0][n - 1];", "    long n =\
    \ arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n \
    \       if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n   \
    \ }\n    return count;", "    long n = arr.size();\n    long count = 0;\n    for\
    \ (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n  \
    \          count++;\n        }\n    }\n    return count;", "  // your code goes\
    \ here\n  long n = arr.size();\n  long dp[n][n];\n  for(long i = 0; i < n; i++)\n\
    \    dp[i][i] = 0;\n  for(long l = 2; l <= n; l++) {\n    for(long i = 0; i <\
    \ n - l + 1; i++) {\n      long j = i + l - 1;\n      if(arr[i] == arr[j])\n \
    \       dp[i][j] = dp[i + 1][j - 1];\n      else\n        dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[0][n - 1];", "    long n =\
    \ arr.size();\n    long ans = 0;\n    for (long i = 0; i < n/2; i++) {\n     \
    \   if (arr[i] != arr[n-i-1]) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // Write your code here\n    long n = arr.size();\n    long count\
    \ = 0;\n    for(long i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n\
    \            count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long left = 0;\n  long right = n - 1;\n  long count = 0;\n  while (left < right)\
    \ {\n    if (arr[left] != arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;", "    // Write your code here\n    long n\
    \ = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n       \
    \ dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i = 0; i\
    \ < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        ans += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n    }\n    return ans;", "    long n = arr.size();\n   \
    \ long ans = 0;\n    for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1])\
    \ {\n            ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "    // Write your code here\n    long n = arr.size();\n    long count = 0;\n  \
    \  for(long i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n       \
    \     count++;\n        }\n    }\n    return count;", "    long n = arr.size();\n\
    \    long count = 0;\n    for (long i = 0; i < n/2; i++) {\n        if (arr[i]\
    \ != arr[n-i-1]) {\n            count++;\n        }\n    }\n    return count;",
  "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++)\
    \ {\n        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n\
    \    }\n    return ans;", "  long n = arr.size();\n  long ans = 0;\n  for (long\
    \ i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      ans++;\n\
    \    }\n  }\n  return ans;", "  // Write your code here\n  long n = arr.size();\n\
    \  long ans = 0;\n  for(long i = 0; i < n/2; i++){\n    if(arr[i] != arr[n-i-1]){\n\
    \      ans++;\n    }\n  }\n  return ans;", "  long n = arr.size();\n  long ans\
    \ = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\
    \ {\n      ans++;\n    }\n  }\n  return ans;", "  long n = arr.size();\n  long\
    \ left = 0;\n  long right = n - 1;\n  long count = 0;\n  while (left < right)\
    \ {\n    if (arr[left] != arr[right]) {\n      count++;\n    }\n    left++;\n\
    \    right--;\n  }\n  return count;", "    long n = arr.size();\n    long i =\
    \ 0, j = n - 1;\n    long count = 0;\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j]) {\n            count++;\n        }\n        i++;\n        j--;\n\
    \    }\n    return count;", "    long n = arr.size();\n    long ans = 0;\n   \
    \ for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            count++;\n        }\n    }\n    return count;",
  "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++)\
    \ {\n        ans += std::abs(arr[i] - arr[n - i - 1]);\n    }\n    return ans;",
  "  long n = arr.size();\n  long left = 0;\n  long right = n - 1;\n  long count =\
    \ 0;\n  while (left < right) {\n    if (arr[left] != arr[right]) {\n      count++;\n\
    \    }\n    left++;\n    right--;\n  }\n  return count;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        ans += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n    }\n    return ans;", "    long n = arr.size();\n   \
    \ long i = 0, j = n - 1;\n    long count = 0;\n    while (i < j) {\n        if\
    \ (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n      \
    \  j--;\n    }\n    return count;", "    long n = arr.size();\n    long ans =\
    \ 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i\
    \ - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "    long n\
    \ = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n\
    \        if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n  \
    \  }\n    return count;", "    long n = arr.size();\n    long count = 0;\n   \
    \ for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1]) {\n    \
    \        count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      count++;\n    }\n  }\n  return count;", "  long n = arr.size();\n\
    \  long i = 0;\n  long j = n - 1;\n  long count = 0;\n  while (i < j) {\n    if\
    \ (arr[i] != arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return\
    \ count;", "    // Write your code here\n    long n = arr.size();\n    long count\
    \ = 0;\n    for(long i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n\
    \            count++;\n        }\n    }\n    return count;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "    long n = arr.size();\n    long i = 0, j = n - 1;\n    long count = 0;\n   \
    \ while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n   \
    \     }\n        i++;\n        j--;\n    }\n    return count;", "  // Write your\
    \ code here\n  long n = arr.size();\n  long i = 0, j = n - 1;\n  long count =\
    \ 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n\
    \    i++;\n    j--;\n  }\n  return count;", "  // Write your code here\n  int\
    \ n = arr.size();\n  int dp[n][n];\n  for(int i = 0; i < n; i++)\n    dp[i][i]\
    \ = 0;\n  for(int l = 2; l <= n; l++) {\n    for(int i = 0; i < n-l+1; i++) {\n\
    \      int j = i+l-1;\n      if(arr[i] == arr[j])\n        dp[i][j] = dp[i+1][j-1];\n\
    \      else\n        dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n    }\n\
    \  }\n  return dp[0][n-1];", "    long n = arr.size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", "    long n = arr.size();\n\
    \    long i = 0, j = n - 1;\n    long count = 0;\n    while (i < j) {\n      \
    \  if (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n  \
    \      j--;\n    }\n    return count;", "    long n = arr.size();\n    long count\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++)\
    \ {\n        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n\
    \    }\n    return ans;", "  // Write your code here\n  long n = arr.size();\n\
    \  long dp[n][n];\n  for(long i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(long\
    \ l = 2; l <= n; l++) {\n    for(long i = 0; i < n - l + 1; i++) {\n      long\
    \ j = i + l - 1;\n      if(arr[i] == arr[j])\n        dp[i][j] = dp[i + 1][j -\
    \ 1];\n      else\n        dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n\
    \    }\n  }\n  return dp[0][n - 1];", "    long n = arr.size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "    long\
    \ n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n\
    \        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n\
    \    return ans;", "  long n = arr.size();\n  long ans = 0;\n  for (long i = 0;\
    \ i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      ans++;\n    }\n\
    \  }\n  return ans;", "  long n = arr.size();\n  long i = 0;\n  long j = n - 1;\n\
    \  long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n\
    \    }\n    i++;\n    j--;\n  }\n  return count;", "  long n = arr.size();\n \
    \ long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      count++;\n    }\n  }\n  return count;", "  int n = arr.size();\n\
    \  int i = 0;\n  int j = n - 1;\n  int count = 0;\n  while (i < j) {\n    if (arr[i]\
    \ != arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;",
  "    long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n/2; i++)\
    \ {\n        if (arr[i] != arr[n-i-1]) {\n            count++;\n        }\n  \
    \  }\n    return count;", "    long n = arr.size();\n    long count = 0;\n   \
    \ for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n\
    \            count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    ans += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n  }\n  return ans;", "    long n = arr.size();\n    long\
    \ count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n\
    \ - i - 1]) {\n            count++;\n        }\n    }\n    return count;", " \
    \ long n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    ans += std::abs(arr[i] - arr[n - i - 1]);\n  }\n  return ans;", "  // Write\
    \ your code here\n  long n = arr.size();\n  long count = 0;\n  long i = 0;\n \
    \ long j = n - 1;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n\
    \    }\n    i++;\n    j--;\n  }\n  return count;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++)\
    \ {\n        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n\
    \    }\n    return ans;", "  long n = arr.size();\n  long count = 0;\n  for (long\
    \ i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1]) {\n      count++;\n\
    \    }\n  }\n  return count;", "    long n = arr.size();\n    long ans = 0;\n\
    \    for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1]) {\n \
    \           ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "  long n = arr.size();\n  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      count++;\n    }\n  }\n  return count;",
  "  long n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;",
  "    long n = arr.size();\n    long i = 0, j = n - 1;\n    long count = 0;\n   \
    \ while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n   \
    \     }\n        i++;\n        j--;\n    }\n    return count;", "  long n = arr.size();\n\
    \  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j <\
    \ n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    dp[i][i] = 0;\n  }\n  for (long i = 0; i < n - 1; i++) {\n    if (arr[i]\
    \ != arr[i + 1]) {\n      dp[i][i + 1] = 1;\n    }\n  }\n  for (long i = 2; i\
    \ < n; i++) {\n    for (long j = 0; j < n - i; j++) {\n      if (arr[j] == arr[j\
    \ + i]) {\n        dp[j][j + i] = dp[j + 1][j + i - 1];\n      } else {\n    \
    \    dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1;\n      }\n\
    \    }\n  }\n  return dp[0][n - 1];", "    long n = arr.size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1])\
    \ {\n            ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i]\
    \ != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;",
  "  long n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n\
    \    if (arr[i] != arr[n - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;",
  "    long n = arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2;\
    \ i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n    \
    \    }\n    }\n    return count;", "  // Write your code here\n  long n = arr.size();\n\
    \  long count = 0;\n  for(long i = 0; i < n/2; i++){\n    if(arr[i] != arr[n-i-1]){\n\
    \      count++;\n    }\n  }\n  return count;", "    // Write your code here\n\
    \    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n/2; i++){\n\
    \        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n \
    \   return count;", "  long n = arr.size();\n  long ans = 0;\n  for (long i =\
    \ 0; i < n / 2; i++) {\n    ans += std::abs(arr[i] - arr[n - i - 1]);\n  }\n \
    \ return ans;", "    long n = arr.size();\n    long ans = 0;\n    for (long i\
    \ = 0; i < n / 2; i++) {\n        ans += std::abs(arr[i] - arr[n - i - 1]);\n\
    \    }\n    return ans;", "    long n = arr.size();\n    long count = 0;\n   \
    \ for (long i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-i-1]) {\n    \
    \        count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    ans += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n  }\n  return ans;", "    long n = arr.size();\n    long\
    \ i = 0, j = n - 1;\n    long count = 0;\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j]) {\n            count++;\n        }\n        i++;\n        j--;\n\
    \    }\n    return count;", "    long n = arr.size();\n    long i = 0, j = n -\
    \ 1;\n    long res = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n\
    \            res++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ res;", "  // your code goes here\n  long n = arr.size();\n  long dp[n][n];\n\
    \  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++) {\n      dp[i][j]\
    \ = 0;\n    }\n  }\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n;\
    \ j++) {\n      if(i >= j) {\n        dp[i][j] = 0;\n      }\n      else {\n \
    \       dp[i][j] = std::min(dp[i+1][j], dp[i][j-1]) + 1;\n      }\n    }\n  }\n\
    \  return dp[0][n-1];", "  long n = arr.size();\n  long ans = 0;\n  for (long\
    \ i = 0; i < n/2; i++) {\n    ans += std::abs(arr[i] - arr[n-i-1]);\n  }\n  return\
    \ ans;", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n;\
    \ i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n  \
    \      }\n    }\n    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n   \
    \ }\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n\
    \            dp[i][i + 1] = 1;\n        } else {\n            dp[i][i + 1] = 2;\n\
    \        }\n    }\n    for(int len = 3; len <= n; len++) {\n        for(int i\
    \ = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n           \
    \ if(arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n     \
    \       } else {\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j -\
    \ 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n - 1];", "  long\
    \ n = arr.size();\n  long start = 0;\n  long end = n - 1;\n  long count = 0;\n\
    \  while (start < end) {\n    if (arr[start] != arr[end]) {\n      count++;\n\
    \    }\n    start++;\n    end--;\n  }\n  return count;", "  // your code goes\
    \ here\n  long n = arr.size();\n  long count = 0;\n  long i = 0;\n  long j = n\
    \ - 1;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n\
    \    i++;\n    j--;\n  }\n  return count;", "  long n = arr.size();\n  long count\
    \ = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\
    \ {\n      count++;\n    }\n  }\n  return count;", "  // Write your code here.\n\
    \  long n = arr.size();\n  long left = 0;\n  long right = n - 1;\n  long count\
    \ = 0;\n  while (left < right) {\n    if (arr[left] != arr[right]) {\n      count++;\n\
    \    }\n    left++;\n    right--;\n  }\n  return count;", "  // Write your code\
    \ here\n  long n = arr.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n,\
    \ 0));\n  for (long i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (long\
    \ i = n - 2; i >= 0; i--) {\n    for (long j = i + 1; j < n; j++) {\n      if\
    \ (arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else\
    \ {\n        dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n\
    \  }\n  return n - dp[0][n - 1];", "    long n = arr.size();\n    long count =\
    \ 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i\
    \ - 1]) {\n            count++;\n        }\n    }\n    return count;", "  // Write\
    \ your code here\n  long n = arr.size();\n  long ans = 0;\n  for(long i = 0; i\
    \ < n/2; i++){\n    ans += std::abs(arr[i] - arr[n-i-1]);\n  }\n  return ans;",
  "    long n = arr.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n,\
    \ 0));\n    for (long i = 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n   \
    \ for (long i = 0; i < n - 1; i++) {\n        dp[i][i + 1] = arr[i] == arr[i +\
    \ 1] ? 0 : 1;\n    }\n    for (long i = 2; i < n; i++) {\n        for (long j\
    \ = 0; j < n - i; j++) {\n            if (arr[j] == arr[j + i]) {\n          \
    \      dp[j][j + i] = dp[j + 1][j + i - 1];\n            } else {\n          \
    \      dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1;\n    \
    \        }\n        }\n    }\n    return dp[0][n - 1];", "  long n = arr.size();\n\
    \  long count = 0;\n  for (long i = 0; i < n / 2; i++) {\n    count += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n  }\n  return count;", "    long n = arr.size();\n    long\
    \ ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n\
    \ - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "  // your\
    \ code goes here\n  long n = arr.size();\n  long count = 0;\n  for(long i = 0;\
    \ i < n/2; i++) {\n    if(arr[i] != arr[n-i-1]) {\n      count++;\n    }\n  }\n\
    \  return count;", "    long n = arr.size();\n    long count = 0;\n    for (long\
    \ i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n        \
    \    count++;\n        }\n    }\n    return count;", "  int n = arr.size();\n\
    \  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  for (int\
    \ i = 0; i < n; i++) {\n    dp[i][i] = 0;\n  }\n  for (int i = 0; i < n - 1; i++)\
    \ {\n    dp[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n  }\n  for (int i = 2;\
    \ i < n; i++) {\n    for (int j = 0; j < n - i; j++) {\n      if (arr[j] == arr[j\
    \ + i]) {\n        dp[j][j + i] = dp[j + 1][j + i - 1];\n      } else {\n    \
    \    dp[j][j + i] = 1 + std::min(dp[j + 1][j + i], dp[j][j + i - 1]);\n      }\n\
    \    }\n  }\n  return dp[0][n - 1];", "    long n = arr.size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            ans++;\n        }\n    }\n    return ans;", "    // Write\
    \ your code here\n    long n = arr.size();\n    long dp[n][n];\n    for(long i\
    \ = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long i = 0; i < n-1; i++)\n\
    \        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    for(long l = 3; l <= n;\
    \ l++) {\n        for(long i = 0; i <= n-l; i++) {\n            long j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "  // Write your code here\n  long\
    \ n = arr.size();\n  long count = 0;\n  for(long i = 0; i < n/2; i++){\n    if(arr[i]\
    \ != arr[n-i-1]){\n      count++;\n    }\n  }\n  return count;", "  // Write your\
    \ code here\n  long n = arr.size();\n  long left = 0;\n  long right = n - 1;\n\
    \  long count = 0;\n  while (left < right) {\n    if (arr[left] != arr[right])\
    \ {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;",
  "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n/2; i++)\
    \ {\n        if (arr[i] != arr[n-i-1]) {\n            ans++;\n        }\n    }\n\
    \    return ans;", "  long n = arr.size();\n  long i = 0;\n  long j = n - 1;\n\
    \  long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n\
    \    }\n    i++;\n    j--;\n  }\n  return count;", "  // Write your code here\n\
    \  int n = arr.size();\n  int i = 0;\n  int j = n - 1;\n  int count = 0;\n  while\
    \ (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n    i++;\n  \
    \  j--;\n  }\n  return count;", "    long n = arr.size();\n    long count = 0;\n\
    \    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\
    \ {\n            count++;\n        }\n    }\n    return count;", "  long n = arr.size();\n\
    \  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n\
    \ - i - 1]) {\n      ans++;\n    }\n  }\n  return ans;", "    // Write your code\
    \ here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i <\
    \ n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n      \
    \  }\n    }\n    return count;", "    long n = arr.size();\n    long total_changes\
    \ = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n -\
    \ i - 1]) {\n            total_changes++;\n        }\n    }\n    return total_changes;",
  "    long n = arr.size();\n    long result = 0;\n    for (long i = 0; i < n / 2;\
    \ i++) {\n        result += std::abs(arr[i] - arr[n - i - 1]);\n    }\n    return\
    \ result;", "    long n = arr.size();\n    long ans = 0;\n    for (long i = 0;\
    \ i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "  long n = arr.size();\n  long i = 0;\n\
    \  long j = n - 1;\n  long count = 0;\n  while (i < j) {\n    if (arr[i] != arr[j])\
    \ {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;", "    long\
    \ n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n\
    \        if (arr[i] != arr[n - i - 1]) {\n            ans++;\n        }\n    }\n\
    \    return ans;", "    long n = arr.size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n        \
    \    ans++;\n        }\n    }\n    return ans;", "    int n = arr.size();\n  \
    \  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    for (int\
    \ i = 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n    for (int i = 0; i <\
    \ n - 1; i++) {\n        dp[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n    }\n\
    \    for (int len = 3; len <= n; len++) {\n        for (int i = 0; i <= n - len;\
    \ i++) {\n            int j = i + len - 1;\n            if (arr[i] == arr[j])\
    \ {\n                dp[i][j] = dp[i + 1][j - 1];\n            } else {\n    \
    \            dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n          \
    \  }\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i =\
    \ 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i ==\
    \ j) {\n                dp[i][j] = 0;\n            }\n            else if(i ==\
    \ j - 1) {\n                dp[i][j] = std::abs(arr[i] - arr[j]);\n          \
    \  }\n            else {\n                dp[i][j] = std::min(dp[i][j - 1] + std::abs(arr[j]\
    \ - arr[j - 1]),\n                                    dp[i + 1][j] + std::abs(arr[i]\
    \ - arr[i + 1]));\n            }\n        }\n    }\n    return dp[0][n - 1];",
  "    long n = arr.size();\n    long i = 0, j = n - 1;\n    long count = 0;\n   \
    \ while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n   \
    \     }\n        i++;\n        j--;\n    }\n    return count;", "    long n =\
    \ arr.size();\n    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n \
    \       if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n   \
    \ }\n    return count;", "    long n = arr.size();\n    long min_changes = 0;\n\
    \    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1])\
    \ {\n            min_changes++;\n        }\n    }\n    return min_changes;", " \
    \   long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n      \
    \  }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n;\
    \ j++) {\n            if(i == j) {\n                dp[i][j] = 0;\n          \
    \  }\n            else if(i == j - 1) {\n                dp[i][j] = std::abs(arr[i]\
    \ - arr[j]);\n            }\n            else {\n                dp[i][j] = std::min(dp[i][j\
    \ - 1] + std::abs(arr[j] - arr[j - 1]), dp[i + 1][j] + std::abs(arr[i] - arr[i\
    \ + 1]));\n            }\n        }\n    }\n    return dp[0][n - 1];", "  long\
    \ n = arr.size();\n  long ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n   \
    \ long j = n - i - 1;\n    if (arr[i] != arr[j]) {\n      ans++;\n    }\n  }\n\
    \  return ans;", "    long n = arr.size();\n    long ans = 0;\n    for (long i\
    \ = 0; i < n / 2; i++) {\n        ans += std::abs(arr[i] - arr[n - i - 1]);\n\
    \    }\n    return ans;", "    long n = arr.size();\n    long i = 0, j = n - 1;\n\
    \    long count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n \
    \           count++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ count;", "  // Write your code here\n  long n = arr.size();\n  long dp[n][n];\n\
    \  for(long i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(long l = 2; l <= n; l++)\
    \ {\n    for(long i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n  \
    \    if(arr[i] == arr[j])\n        dp[i][j] = dp[i + 1][j - 1];\n      else\n\
    \        dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n    }\n  }\n  return\
    \ dp[0][n - 1];", "    long n = arr.size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n        \
    \    ans++;\n        }\n    }\n    return ans;", "  long n = arr.size();\n  long\
    \ ans = 0;\n  for (long i = 0; i < n / 2; i++) {\n    ans += std::abs(arr[i] -\
    \ arr[n - i - 1]);\n  }\n  return ans;", "  long n = arr.size();\n  long count\
    \ = 0;\n  for (long i = 0; i < n / 2; i++) {\n    if (arr[i] != arr[n - i - 1])\
    \ {\n      count++;\n    }\n  }\n  return count;"]
stop_tokens:
- "\n}"
