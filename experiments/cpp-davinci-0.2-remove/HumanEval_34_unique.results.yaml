language: cpp
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); ++i) {\n        if (i == l.begin() || *i != *(i-1)) {\n           \
    \ ret.push_back(*i);\n        }\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(result));\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i != l.end();\
    \ i++) {\n        if (i == l.begin() || *i != *(i-1)) {\n            u.push_back(*i);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n\
    \  return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i-1)) {\n           \
    \ ret.push_back(*i);\n        }\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i-1)) {\n           \
    \ ret.push_back(*i);\n        }\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    v.push_back(l[0]);\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  ret.push_back(l[i]);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  ret.push_back(l[i]);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    result.push_back(l[0]);\n \
    \   for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n    \
    \        result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i != l.end();\
    \ i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            v.push_back(*i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (ret.size() == 0 || ret.back() != i) {\n            ret.push_back(i);\n    \
    \    }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3,\
    \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2,\
    \ (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  ret.push_back(l[i]);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126841
