name: HumanEval_2_truncate_number
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
  \ point number, it can be decomposed into\n// and integer part (largest integer\
  \ smaller than given number) and decimals\n// (leftover part always smaller than\
  \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float number)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
  \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
  \ == (0.0));\n}\n"
completions: ["  int integer_part = (int)number;\n  float decimal_part = number -\
    \ integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "  // TODO: implement this function\n  return 0.0;", "   \
    \ int integer_part = (int)number;\n    return number - integer_part;", "    //\
    \ Write your code here\n    int int_part = (int)number;\n    float dec_part =\
    \ number - int_part;\n    return dec_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "    assert(number\
    \ > 0);\n    int integer_part = (int)number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    // Write your code here\n    int i = number;\n\
    \    float f = number - i;\n    return f;", "  // TODO: Implement this function.\n\
    \  float decimal = number - (int)number;\n  return decimal;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  float decimal_part = number\
    \ - integer_part;\n  return decimal_part;", "  assert(number > 0);\n  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "  int integer_part = (int)number;\n  float decimal_part =\
    \ number - integer_part;\n  return decimal_part;", "    // Write your code here\n\
    \    int num = number;\n    float dec = number - num;\n    return dec;", "   \
    \ int integer_part = (int)number;\n    return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    assert(number >= 0);\n    int integer_part = (int)number;\n\
    \    return number - integer_part;", "  assert(number >= 0);\n  int int_part =\
    \ (int)number;\n  return number - int_part;", "    assert(number > 0);\n    int\
    \ integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ // Write your code here\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int int_part = (int)number;\n  float decimal_part\
    \ = number - int_part;\n  return decimal_part;", "  // TODO: Implement truncate_number\
    \ function\n  int truncated_number = (int)number;\n  return number - truncated_number;",
  "    // Write your code here\n    int int_part = (int)number;\n    float dec_part\
    \ = number - int_part;\n    return dec_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  // Implement this function\n  int i = number;\n\
    \  float f = number - i;\n  return f;", "  int integer_part = static_cast<int>(number);\n\
    \  return number - integer_part;", "    int integer_part = (int)number;\n    return\
    \ number - integer_part;", "  // TODO: Write - Your - Code\n  int int_part = (int)number;\n\
    \  return number - int_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", '  return number - (int)number;',
  "  int integer_part = (int)number;\n  return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int int_part = (int)number;\n  float dec_part =\
    \ number - int_part;\n  return dec_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    int integer_part = (int)number;\n  \
    \  float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  // Implement this function\n  int integer_part =\
    \ (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "    assert(number\
    \ >= 0);\n    int integer_part = (int)number;\n    return number - integer_part;",
  "  assert(number >= 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    assert(number > 0);\n    int integer_part\
    \ = (int)number;\n    return number - integer_part;", "    int integer_part =\
    \ (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;",
  "  // TODO: Implement this function\n  return number - (int)number;", '    return
    number - (int)number;', '  return number - (int)number;', "  assert(number >=\
    \ 0);\n  // TODO: Implement this function\n  int i = number;\n  float j = number\
    \ - i;\n  return j;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    return number - integer_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  return number - integer_part;",
  "    assert(number > 0);\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ int_part = (int)number;\n  return number - int_part;", "  // TODO: implement\
    \ this function\n  return 0.0;", "  int integer_part = (int)number;\n  return\
    \ number - integer_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", '  return number - (int)number;',
  "  assert(number >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "  float\
    \ integer_part;\n  return modf(number, &integer_part);", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    assert(number >= 0);\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number > 0);\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ assert(number >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    assert(number >= 0);\n    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    assert(number > 0);\n    int int_part = (int)number;\n\
    \    return number - int_part;", "  int integer_part = (int)number;\n  return\
    \ number - integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "  // Write\
    \ your code here\n  int truncated = (int)number;\n  return number - truncated;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "    int int_part = (int)number;\n    float\
    \ decimals = number - int_part;\n    return decimals;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    return number - integer_part;", "  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "  // TODO: Implement this\
    \ function.\n  return number - (int)number;", "    int int_part = (int)number;\n\
    \    float decimal_part = number - int_part;\n    return decimal_part;", "   \
    \ int integer_part = (int)number;\n    return number - integer_part;", "    //\
    \ Write your code here\n    int num = number;\n    float result = number - num;\n\
    \    return result;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", '  return number - (int)number;', "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  // Write your code here\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ // TODO: Write - Your - Code\n    int integer_part = (int)number;\n    float\
    \ decimal_part = number - integer_part;\n    return decimal_part;", "    assert(number\
    \ > 0);\n    int integer_part = (int)number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    return number - integer_part;", "    //\
    \ Write your code here\n    int a = number;\n    return number - a;", "    assert(number\
    \ > 0);\n    int integer_part = (int)number;\n    return number - integer_part;",
  "  assert(number > 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "  assert(number >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "  assert(number > 0);\n \
    \ int integer_part = (int)number;\n  return number - integer_part;", "  // TODO:\
    \ Write - Your - Code\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    return number - integer_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number >= 0);\n    int integer_part =\
    \ (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;",
  "  assert(number > 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", '  return
    number - (int)number;', "    int integer_part = (int)number;\n    return number\
    \ - integer_part;", '  return number - (int)number;', "  int integer_part = number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  assert(number >= 0);\n  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  int integer_part = (int)number;\n  return number - integer_part;", "    assert(number\
    \ >= 0);\n    int integer_part = (int)number;\n    return number - integer_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "    int integer_part = (int)number;\n    return\
    \ number - integer_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  return\
    \ number - integer_part;", "    int int_part = (int)number;\n    float decimal_part\
    \ = number - int_part;\n    return decimal_part;", "  // TODO: Implement truncate_number\
    \ function.\n  int n = number;\n  float result = number - n;\n  return result;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "    int integer_part = (int)number;\n    float\
    \ decimal_part = number - integer_part;\n    return decimal_part;", "  int integer_part\
    \ = (int)number;\n  return number - integer_part;", '    return number - (int)number;',
  "    int integer_part = (int)number;\n    return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  assert(number > 0);\n  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "    assert(number >= 0);\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    int integer_part =\
    \ (int)number;\n    return number - integer_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "    // Write your code here\n    float integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "    int integer_part = (int)number;\n    return\
    \ number - integer_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    return number - integer_part;", "   \
    \ assert(number >= 0);\n    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  float decimal_part =\
    \ number - (int)number;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    // Write your code here\n    int int_part = (int)number;\n\
    \    float decimal_part = number - int_part;\n    return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;"]
stop_tokens:
- "\n}"
