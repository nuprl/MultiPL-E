name: HumanEval_2_truncate_number
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
  \ point number, it can be decomposed into\n// and integer part (largest integer\
  \ smaller than given number) and decimals\n// (leftover part always smaller than\
  \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float number)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
  \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
  \ == (0.0));\n}\n"
completions: ["    int integer_part = (int)number;\n    return number - integer_part;",
  "  // TODO: Implement this function.\n  int int_part = (int)number;\n  float decimal_part\
    \ = number - int_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    int integer_part = (int)number;\n  \
    \  return number - integer_part;", "    int int_part = (int)number;\n    return\
    \ number - int_part;", "    // Write your code here\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ // TODO: Write - Your - Code\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  assert(number > 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", '  return number - (int)number;',
  "  assert(number >= 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    int integer_part = (int)number;\n  \
    \  return number - integer_part;", "  // TODO: Implement this function.\n  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ assert(number > 0);\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   // Write your code here\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = static_cast<int>(number);\n  return number - integer_part;",
  "    assert(number >= 0);\n    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "  int integer_part = (int)number;\n  float decimal_part =\
    \ number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "  int integer_part = (int)number;\n  return\
    \ number - integer_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  return number - integer_part;",
  "  int integer_part = (int)number;\n  return number - integer_part;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  float decimal_part = number\
    \ - integer_part;\n  return decimal_part;", "  assert(number >= 0);\n  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "  assert(number > 0);\n \
    \ int integer_part = (int)number;\n  return number - integer_part;", "    // Write\
    \ your code here\n    int integer = (int)number;\n    float decimal = number -\
    \ integer;\n    return decimal;", "  assert(number >= 0);\n  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  // TODO: Implement this function.\n  int int_part = (int)number;\n  float dec_part\
    \ = number - int_part;\n  return dec_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "  int int_part\
    \ = (int)number;\n  float decimal_part = number - int_part;\n  return decimal_part;",
  "    assert(number > 0);\n    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    int integer_part = (int)number;\n    return number -\
    \ integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    int integer_part =\
    \ (int)number;\n    return number - integer_part;", "    // Write your code here\n\
    \    int i = number;\n    float j = number - i;\n    return j;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    // TODO: Write - Your - Code\n    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", '    return number - (int)number;', "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  assert(number > 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    return number - integer_part;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "    //\
    \ Write your code here\n    int n = number;\n    float result = number - n;\n\
    \    return result;", "    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    int int_part = (int)number;\n    float decimal_part =\
    \ number - int_part;\n    return decimal_part;", '    return number - (int)number;',
  '    return number - (int)number;', "    assert(number >= 0);\n    return number\
    \ - (int)number;", "    int integer_part = (int)number;\n    return number - integer_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  assert(number >= 0);\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    // Write your code\
    \ here\n    int a = number;\n    float b = number - a;\n    return b;", "    int\
    \ integer_part = (int)number;\n    return number - integer_part;", "    int integer_part\
    \ = (int)number;\n    return number - integer_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  assert(number >= 0);\n  if (number < 1)\
    \ {\n    return number;\n  }\n  int integer_part = static_cast<int>(number);\n\
    \  return number - integer_part;", "    assert(number >= 0);\n    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "  int integer_part = (int)number;\n  float decimal_part = number\
    \ - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number > 0);\n    int int_part = (int)number;\n\
    \    float decimal_part = number - int_part;\n    return decimal_part;", "   \
    \ int int_part = (int)number;\n    float decimal_part = number - int_part;\n \
    \   return decimal_part;", "  assert(number > 0);\n  int integer_part = static_cast<int>(number);\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", '    return number - (int)number;', '    return number - (int)number;',
  "    // Write your code here\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    int integer_part =\
    \ (int)number;\n    return number - integer_part;", "    int int_part = (int)number;\n\
    \    return number - int_part;", "    int integer_part = (int)number;\n    float\
    \ decimal_part = number - integer_part;\n    return decimal_part;", "    // Write\
    \ your code here\n    int a = number;\n    float b = number - a;\n    return b;",
  "    assert(number > 0);\n    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    assert(number >= 0);\n    int integer_part = (int)number;\n\
    \    return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "  // Implement this function.\n  int x = number;\n  float\
    \ y = number - x;\n  return y;", "    int integer_part = (int)number;\n    float\
    \ decimal_part = number - integer_part;\n    return decimal_part;", "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  '  return number - (int)number;', "    int integer_part = (int)number;\n    return\
    \ number - integer_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    int integer_part = (int)number;\n    return number\
    \ - integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", '  return number - (int)number;',
  "  // TODO: Write - Your - Code\n  return number - (int)number;", "  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "    assert(number > 0);\n\
    \    int integer_part = (int)number;\n    return number - integer_part;", "  //\
    \ TODO: Implement this function.\n  return number - (int)number;", "  assert(number\
    \ >= 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    assert(number > 0);\n    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    int integer_part = (int)number;\n  \
    \  float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    assert(number > 0);\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ assert(number > 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  // TODO: Implement this function.\n  int num =\
    \ (int)number;\n  float result = number - num;\n  return result;", "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "  // TODO: Implement\
    \ the function\n  int a = number;\n  float b = number - a;\n  return b;", "  \
    \  int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    assert(number >= 0);\n\
    \    int integer_part = number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  assert(number > 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", '  return
    number - (int)number;', "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", '  return number
    - (int)number;', "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  assert(number > 0);\n  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  int integer_part = (int)number;\n  return\
    \ number - integer_part;", "    // Write your code here\n    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "    assert(number >= 0);\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ int integer_part = (int)number;\n  return number - integer_part;", "    int\
    \ integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number >= 0);\n    int integer_part =\
    \ (int)number;\n    return number - integer_part;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \   int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number >= 0);\n    int integer_part =\
    \ (int)number;\n    return number - integer_part;", "    assert(number > 0);\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "    assert(number >= 0);\n    int integer_part =\
    \ (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "    //\
    \ Write your code here\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  // TODO: Implement this\
    \ function.\n  int integer_part = (int)number;\n  float decimal_part = number\
    \ - integer_part;\n  return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  // Write your code here\n\
    \  int num = number;\n  float dec = number - num;\n  return dec;", "  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "    assert(number > 0);\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "   \
    \ // Write your code here\n    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;", "  int\
    \ integer_part = (int)number;\n  return number - integer_part;", "  assert(number\
    \ > 0);\n  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "    // Write your code here\n    int integer_part =\
    \ (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;",
  "    int integer_part = (int)number;\n    return number - integer_part;", "  int\
    \ integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  // TODO: Implement this function.\n  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  assert(number > 0);\n  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "  assert(number > 0);\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  int integer_part = (int)number;\n  float decimal_part\
    \ = number - integer_part;\n  return decimal_part;", "    int integer_part = (int)number;\n\
    \    return number - integer_part;", "    // Write your code here\n    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "    assert(number > 0);\n    int integer_part = (int)number;\n\
    \    return number - integer_part;", "  // Implement this function.\n  int integer_part\
    \ = (int)number;\n  float decimal_part = number - integer_part;\n  return decimal_part;",
  "  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;", "  assert(number >= 0);\n  int integer_part = (int)number;\n\
    \  return number - integer_part;", "  assert(number >= 0);\n  int integer_part\
    \ = (int)number;\n  return number - integer_part;", "    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;", "  int integer_part = (int)number;\n  return number\
    \ - integer_part;", "    // TODO: Write - Your - Code\n    return number - (int)number;",
  "  assert(number >= 0);\n  int integer_part = (int)number;\n  return number - integer_part;",
  "    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;"]
stop_tokens:
- "\n}"
