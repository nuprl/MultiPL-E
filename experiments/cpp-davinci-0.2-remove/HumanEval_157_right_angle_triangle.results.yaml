language: cpp
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a+b*b==c*c\
    \ || a*a+c*c==b*b || b*b+c*c==a*a)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxjknw7b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a > b && a > c) {\n        if(a*a\
    \ == b*b + c*c) return true;\n        else return false;\n    }\n    else if(b\
    \ > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n        else return\
    \ false;\n    }\n    else if(c > a && c > b) {\n        if(c*c == a*a + b*b) return\
    \ true;\n        else return false;\n    }\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppaoxd96s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a < 0 || b < 0 || c < 0) return false;\n    if(a == b && b == c) return false;\n\
    \    if(a == b || b == c || a == c) return false;\n    if(a > b && a > c) {\n\
    \        if(a*a == b*b + c*c) return true;\n        else return false;\n    }\n\
    \    if(b > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n       \
    \ else return false;\n    }\n    if(c > a && c > b) {\n        if(c*c == a*a +\
    \ b*b) return true;\n        else return false;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1kkr1xzt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if (a == b && b == c)\n        return false;\n    if (a*a + b*b == c*c)\n\
    \        return true;\n    if (a*a + c*c == b*b)\n        return true;\n    if\
    \ (b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6p3edul7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if (v[0]*v[0] +\
    \ v[1]*v[1] == v[2]*v[2]) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ecnr95a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long x = a*a;\n    long\
    \ y = b*b;\n    long z = c*c;\n    if(x+y==z || y+z==x || x+z==y)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxxrxeyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  long max = std::max(a, std::max(b, c));\n  long sum\
    \ = a + b + c;\n  return (max * max) == (sum - max) * (sum - max);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpon30431d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a+b*b==c*c)\n\
    \        return true;\n    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgp1bouc9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a>b && a>c)\n    {\n        if(a*a==(b*b+c*c))\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else if(b>a && b>c)\n    {\n        if(b*b==(a*a+c*c))\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else\n    {\n        if(c*c==(a*a+b*b))\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7jm09n5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long arr[3] = {a,b,c};\n\
    \    std::sort(arr,arr+3);\n    if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3rjnump6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2sp43m5s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a > b && a > c) {\n        if(a*a\
    \ == b*b + c*c) return true;\n        else return false;\n    }\n    else if(b\
    \ > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n        else return\
    \ false;\n    }\n    else if(c > a && c > b) {\n        if(c*c == a*a + b*b) return\
    \ true;\n        else return false;\n    }\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppaoxd96s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    if(max * max == min * min +\
    \ mid * mid) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbyfy04hp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        return (a * a == b\
    \ * b + c * c);\n    } else if (b > a && b > c) {\n        return (b * b == a\
    \ * a + c * c);\n    } else {\n        return (c * c == a * a + b * b);\n    }\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx5t39dry.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c\
    \ == b*b) return true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprl2ka7s5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprsd0_os1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a+b*b==c*c)\n    return true;\n  else if(a*a+c*c==b*b)\n    return\
    \ true;\n  else if(b*b+c*c==a*a)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fz7tctt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a+b*b==c*c\
    \ || b*b+c*c==a*a || c*c+a*a==b*b)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzsept77w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2h3fl_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long x = std::max(a, std::max(b, c));\n    long y\
    \ = std::min(a, std::min(b, c));\n    long z = a + b + c - x - y;\n    return\
    \ x * x == y * y + z * z;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9pf05jc1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhftg5jb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a > b && a > c) {\n        return (a*a == b*b +\
    \ c*c);\n    }\n    else if(b > a && b > c) {\n        return (b*b == a*a + c*c);\n\
    \    }\n    else {\n        return (c*c == a*a + b*b);\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptixmqbho.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a > b && a > c) {\n        if(a*a == b*b + c*c) return true;\n    } else\
    \ if(b > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n    } else\
    \ if(c > a && c > b) {\n        if(c*c == a*a + b*b) return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvmtuoxau.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \      return true;\n    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr2dbera2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    if(c*c+a*a==b*b)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx568kdly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c\
    \ == a*a)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd66pe1eq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a == b && b == c)\n        return false;\n\
    \    if(a > b && a > c)\n        return (a*a == b*b + c*c);\n    if(b > a && b\
    \ > c)\n        return (b*b == a*a + c*c);\n    if(c > a && c > b)\n        return\
    \ (c*c == a*a + b*b);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx8q67xdr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyoib_9ty.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a+b*b==c*c)\n    return true;\n  else if(a*a+c*c==b*b)\n    return\
    \ true;\n  else if(b*b+c*c==a*a)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fz7tctt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    //long max = std::max(a, std::max(b, c));\n    //long min =\
    \ std::min(a, std::min(b, c));\n    //long mid = a + b + c - max - min;\n    //return\
    \ (max * max == min * min + mid * mid);\n    return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0pxxfus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n\
    \        return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv5spbtoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a<=0 || b<=0 || c<=0)\n\
    \        return false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfu5uvko.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvbuibe10.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \      return true;\n    else if(a*a+c*c==b*b)\n        return true;\n    else\
    \ if(b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpop0v6_xz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a < 0 || b < 0 || c < 0)\n        return false;\n    if(a == b && b ==\
    \ c)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpel4edjth.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0) return false;\n    if(a<0\
    \ || b<0 || c<0) return false;\n    if(a>b && a>c) return (a*a==b*b+c*c);\n  \
    \  if(b>a && b>c) return (b*b==a*a+c*c);\n    if(c>a && c>b) return (c*c==a*a+b*b);\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdfmnkwr9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a>b && a>c)\n    {\n        if(a*a==b*b+c*c)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else if(b>a && b>c)\n    {\n        if(b*b==a*a+c*c)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else\n    {\n        if(c*c==a*a+b*b)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8t1vesfu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a+b*b==c*c)\n\
    \        return true;\n    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgp1bouc9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a == b && b == c)\n        return false;\n\
    \    if(a == b || b == c || a == c)\n        return true;\n    if(a > b && a >\
    \ c)\n        return a*a == b*b + c*c;\n    if(b > a && b > c)\n        return\
    \ b*b == a*a + c*c;\n    if(c > a && c > b)\n        return c*c == a*a + b*b;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk_b_hqxd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3h7iv0f_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    long arr[3] = {a,b,c};\n    std::sort(arr,arr+3);\n\
    \    if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuevxn__8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a > b && a > c) {\n        if(a*a == b*b + c*c) return true;\n    } else\
    \ if(b > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n    } else\
    \ if(c > a && c > b) {\n        if(c*c == a*a + b*b) return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvmtuoxau.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == min * min + mid * mid;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdkioaz_8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a > b && a > c)\n        return a*a == b*b\
    \ + c*c;\n    if(b > a && b > c)\n        return b*b == a*a + c*c;\n    if(c >\
    \ a && c > b)\n        return c*c == a*a + b*b;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjbjcp8mk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0) return false;\n    if(a*a\
    \ + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return true;\n    if(b*b\
    \ + c*c == a*a) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwl6dh3v6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a*a + b*b == c*c)\n \
    \       return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6r1e7fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    if (max == a) {\n        return\
    \ (a * a == b * b + c * c);\n    } else if (max == b) {\n        return (b * b\
    \ == a * a + c * c);\n    } else {\n        return (c * c == a * a + b * b);\n\
    \    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy4l_mngs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwchr6ob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2h3fl_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqjklli4c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfgjyws5r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a > b && a > c)\n        return (a*a ==\
    \ b*b + c*c);\n    if(b > a && b > c)\n        return (b*b == a*a + c*c);\n  \
    \  if(c > a && c > b)\n        return (c*c == a*a + b*b);\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbph9gqf3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a == 0 || b == 0 || c == 0)\n    return false;\n  if(a == b &&\
    \ b == c)\n    return false;\n  if(a*a + b*b == c*c)\n    return true;\n  if(a*a\
    \ + c*c == b*b)\n    return true;\n  if(b*b + c*c == a*a)\n    return true;\n\
    \  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4waaxxf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return true;\n \
    \   if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvqg9s9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2sp43m5s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b,\
    \ c));\n    long mid = a+b+c-max-min;\n    if(max*max == min*min + mid*mid)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpffvqyguh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \      return true;\n    else if(a*a+c*c==b*b)\n        return true;\n    else\
    \ if(b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpop0v6_xz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvbuibe10.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a<=0 || b<=0 || c<=0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaponbm11.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0||b==0||c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6z5dthgl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \      return true;\n    else if(a*a+c*c==b*b)\n        return true;\n    else\
    \ if(b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpop0v6_xz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return true;\n \
    \   if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvqg9s9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a<0 || b<0 || c<0)\n        return false;\n    if(a>b && a>c)\n      \
    \  return (a*a == b*b + c*c);\n    if(b>a && b>c)\n        return (b*b == a*a\
    \ + c*c);\n    if(c>a && c>b)\n        return (c*c == a*a + b*b);\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpctvg96og.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhftg5jb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a < 0 || b < 0 || c < 0)\n        return false;\n    if(a > b && a > c)\n\
    \        return (a*a == b*b + c*c);\n    if(b > a && b > c)\n        return (b*b\
    \ == a*a + c*c);\n    if(c > a && c > b)\n        return (c*c == a*a + b*b);\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphczc341k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a==0 || b==0 || c==0)\n    return false;\n  if(a*a + b*b == c*c)\n\
    \    return true;\n  if(a*a + c*c == b*b)\n    return true;\n  if(b*b + c*c ==\
    \ a*a)\n    return true;\n  return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu_n8lcq3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b && a>c){\n   \
    \     if(a*a == b*b + c*c){\n            return true;\n        }\n    }\n    else\
    \ if(b>a && b>c){\n        if(b*b == a*a + c*c){\n            return true;\n \
    \       }\n    }\n    else if(c>a && c>b){\n        if(c*c == a*a + b*b){\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x5ql830.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    long arr[3]={a,b,c};\n    sort(arr,arr+3);\n    if(arr[0]*arr[0]+arr[1]*arr[1]==arr[2]*arr[2])\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcw05qsd6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a > b && a > c)\n   \
    \     return (a*a == b*b + c*c);\n    if(b > a && b > c)\n        return (b*b\
    \ == a*a + c*c);\n    if(c > a && c > b)\n        return (c*c == a*a + b*b);\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4gpujhyv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) {\n        return\
    \ false;\n    }\n    if (a == b && b == c) {\n        return false;\n    }\n \
    \   if (a == b || b == c || a == c) {\n        return false;\n    }\n    if (a\
    \ * a + b * b == c * c) {\n        return true;\n    }\n    if (a * a + c * c\
    \ == b * b) {\n        return true;\n    }\n    if (b * b + c * c == a * a) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplu2ukrl4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    long max = std::max(a, std::max(b, c));\n    if(max==a)\n\
    \        return (b*b + c*c == a*a);\n    else if(max==b)\n        return (a*a\
    \ + c*c == b*b);\n    else\n        return (a*a + b*b == c*c);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8g0a5h41.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2h3fl_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n\
    \        return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv5spbtoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  long sides[3] = {a, b, c};\n  std::sort(sides, sides + 3);\n  return\
    \ (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpere_507n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7u6hsde9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a+b*b==c*c)\n\
    \        return true;\n    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4kpt5oso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    long arr[3]={a,b,c};\n    std::sort(arr,arr+3);\n\
    \    if(arr[0]*arr[0]+arr[1]*arr[1]==arr[2]*arr[2])\n        return true;\n  \
    \  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpca3wfuel.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6d_erqs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a > b && a > c) {\n        if(a*a == b*b + c*c) return true;\n    }\n   \
    \ else if(b > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n    }\n\
    \    else if(c > a && c > b) {\n        if(c*c == a*a + b*b) return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7q3oud99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a*a + b*b == c*c)\n \
    \       return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6r1e7fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a > b && a > c)\n   \
    \     return (a*a == b*b + c*c);\n    if(b > a && b > c)\n        return (b*b\
    \ == a*a + c*c);\n    if(c > a && c > b)\n        return (c*c == a*a + b*b);\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4gpujhyv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a > b && a > c) {\n        if(a*a\
    \ == b*b + c*c) return true;\n        else return false;\n    }\n    else if(b\
    \ > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n        else return\
    \ false;\n    }\n    else if(c > a && c > b) {\n        if(c*c == a*a + b*b) return\
    \ true;\n        else return false;\n    }\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppaoxd96s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2sp43m5s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhftg5jb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a*a + b*b == c*c)\n \
    \       return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6r1e7fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n\
    \        return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7rx9lvek.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(b*b + c*c == a*a) return\
    \ true;\n    if(a*a + c*c == b*b) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyriesr6n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\
    \ return false;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b)\
    \ return true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnvelsc6f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    else if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpma_sxq3p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a*a + b*b == c*c)\n \
    \       return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6r1e7fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxqqyw1wq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhftg5jb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a+b*b==c*c)\n\
    \        return true;\n    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4kpt5oso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  if(a==0 || b==0 || c==0)\n\
    \    return false;\n  if(a*a + b*b == c*c)\n    return true;\n  if(a*a + c*c ==\
    \ b*b)\n    return true;\n  if(b*b + c*c == a*a)\n    return true;\n  return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4y9c4i4r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwchr6ob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c ||\
    \ a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3rlq2w9q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n\
    \        return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7rx9lvek.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a + b*b == c*c)\n    return true;\n  else if(a*a + c*c == b*b)\n\
    \    return true;\n  else if(b*b + c*c == a*a)\n    return true;\n  else\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzywdx7l_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a > b && a > c) {\n        if(a*a == b*b + c*c) return true;\n    }\n   \
    \ else if(b > a && b > c) {\n        if(b*b == a*a + c*c) return true;\n    }\n\
    \    else if(c > a && c > b) {\n        if(c*c == a*a + b*b) return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7q3oud99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a+b*b==c*c)\n    return true;\n  else if(a*a+c*c==b*b)\n    return\
    \ true;\n  else if(b*b+c*c==a*a)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fz7tctt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2coo1fi3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a+b*b==c*c)\n    return true;\n  else if(a*a+c*c==b*b)\n    return\
    \ true;\n  else if(b*b+c*c==a*a)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fz7tctt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1m9lx9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a==b && b==c)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2h3fl_x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphvhc9ydf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvbuibe10.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnznmrkvb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2sp43m5s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a == b && b == c)\n        return false;\n\
    \    if(a == b || b == c || a == c)\n        return true;\n    if(a*a + b*b ==\
    \ c*c || b*b + c*c == a*a || a*a + c*c == b*b)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt5d6b6n7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b && a>c)\n    {\n\
    \        if(a*a==b*b+c*c)\n        {\n            return true;\n        }\n  \
    \      else\n        {\n            return false;\n        }\n    }\n    else\
    \ if(b>a && b>c)\n    {\n        if(b*b==a*a+c*c)\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n    else\n    {\n        if(c*c==a*a+b*b)\n        {\n         \
    \   return true;\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpprg1yijz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a<0 || b<0 || c<0)\n        return false;\n   \
    \ if(a==b && b==c)\n        return false;\n    if(a==b || b==c || a==c)\n    \
    \    return true;\n    if(a*a+b*b==c*c || b*b+c*c==a*a || a*a+c*c==b*b)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6pxsh9ya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0) return false;\n   \
    \ if(a == b && b == c) return false;\n    if(a == b || b == c || a == c) return\
    \ true;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return\
    \ true;\n    if(b*b + c*c == a*a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_alk7h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a==b\
    \ && b==c)\n        return false;\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzr8ungns.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) {\n        return\
    \ false;\n    }\n    if (a == b && b == c) {\n        return false;\n    }\n \
    \   if (a > b && a > c) {\n        return a * a == b * b + c * c;\n    }\n   \
    \ if (b > a && b > c) {\n        return b * b == a * a + c * c;\n    }\n    if\
    \ (c > a && c > b) {\n        return c * c == a * a + b * b;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp98jygmld.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use Printf\n    // Example: Printf(\"%s = %d\\n\"\
    , \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0bz5a_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c ==\
    \ a*a)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkqfhvq0i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long arr[3] = {a,b,c};\n\
    \    std::sort(arr,arr+3);\n    return (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg3pplrx9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    return (a*a + b*b == c*c);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwchr6ob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    if (max == a) {\n        return\
    \ (b * b + c * c == a * a);\n    } else if (max == b) {\n        return (a * a\
    \ + c * c == b * b);\n    } else {\n        return (a * a + b * b == c * c);\n\
    \    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd92ug72e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyoib_9ty.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \  return true;\n    else if(a*a+c*c==b*b)\n    return true;\n    else if(b*b+c*c==a*a)\n\
    \    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ezww04u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b && a>c){\n   \
    \     if(a*a == b*b + c*c){\n            return true;\n        }\n    }\n    else\
    \ if(b>a && b>c){\n        if(b*b == a*a + c*c){\n            return true;\n \
    \       }\n    }\n    else if(c>a && c>b){\n        if(c*c == a*a + b*b){\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x5ql830.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n  // Write your code here\n  // To print results to the\
    \ standard output you can use Printf\n  // Example: Printf(\"%s = %d\\n\", \"\
    a\", a);\n  if(a*a+b*b==c*c)\n    return true;\n  else if(a*a+c*c==b*b)\n    return\
    \ true;\n  else if(b*b+c*c==a*a)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fz7tctt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n\
    \        return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzgnu97f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    long max = std::max(a, std::max(b,\
    \ c));\n    if(max == a)\n        return (b*b + c*c == a*a);\n    else if(max\
    \ == b)\n        return (a*a + c*c == b*b);\n    else\n        return (a*a + b*b\
    \ == c*c);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcu4j_itn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a+b*b==c*c)\n  \
    \      return true;\n    else if(a*a+c*c==b*b)\n        return true;\n    else\
    \ if(b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpop0v6_xz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4pkczbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7hjk11z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660015875
