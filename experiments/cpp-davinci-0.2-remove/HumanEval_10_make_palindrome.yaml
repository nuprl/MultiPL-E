name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  std::string make_palindrome(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    std::string result = string;\n    std::string::iterator it = result.begin();\n\
    \    std::string::iterator it_end = result.end();\n    std::string::iterator it_middle\
    \ = result.begin() + result.size() / 2;\n    std::string::iterator it_middle_end\
    \ = result.begin() + (result.size() + 1) / 2;\n    std::string::iterator it_reverse\
    \ = result.end() - 1;\n    while (it != it_middle) {\n        if (*it == *it_reverse)\
    \ {\n            it++;\n            it_reverse--;\n        } else {\n        \
    \    it_reverse = result.end() - 1;\n            it_middle--;\n            it_middle_end--;\n\
    \            it = it_middle;\n        }\n    }\n    std::string prefix(it_middle_end,\
    \ result.end());\n    std::reverse(prefix.begin(), prefix.end());\n    result.append(prefix);\n\
    \    return result;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_naive(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int longest_palindrome_length = prefix_function[concatenated_string.size()\
    \ - 1];\n    return reversed_string.substr(0, string.size() - longest_palindrome_length)\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string rev_string =\
    \ string;\n    std::reverse(rev_string.begin(), rev_string.end());\n    std::string\
    \ concat_string = string + \"#\" + rev_string;\n    std::vector<int> prefix_function(concat_string.size());\n\
    \    for (int i = 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concat_string[i] != concat_string[j]) {\n   \
    \         j = prefix_function[j - 1];\n        }\n        if (concat_string[i]\
    \ == concat_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return rev_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    int longest_palindrome_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (j > longest_palindrome_length)\
    \ {\n            longest_palindrome_length = j;\n        }\n    }\n    return\
    \ reverse_string.substr(0, string.size() - longest_palindrome_length) + string;",
  "  std::string reversed_string = string;\n  std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n  std::string concatenated_string = string + reversed_string;\n\
    \  std::vector<int> prefix_function(concatenated_string.size());\n  for (int i\
    \ = 1; i < concatenated_string.size(); ++i) {\n    int j = prefix_function[i -\
    \ 1];\n    while (j > 0 && concatenated_string[i] != concatenated_string[j]) {\n\
    \      j = prefix_function[j - 1];\n    }\n    if (concatenated_string[i] == concatenated_string[j])\
    \ {\n      ++j;\n    }\n    prefix_function[i] = j;\n  }\n  return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ string_prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(string_prefix.begin(), string_prefix.end());\n    return string_prefix\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string palindrome = string;\n    std::reverse(palindrome.begin(),\
    \ palindrome.end());\n    int n = string.size();\n    int i = 0;\n    for (; i\
    \ < n; ++i) {\n        if (string.substr(i) == palindrome.substr(0, n - i)) {\n\
    \            break;\n        }\n    }\n    return string + palindrome.substr(n\
    \ - i);", "    std::string palindrome = string;\n    std::reverse(palindrome.begin(),\
    \ palindrome.end());\n    std::string::size_type max_postfix_length = 0;\n   \
    \ for (std::string::size_type i = 0; i < string.size(); ++i) {\n        if (string.substr(i)\
    \ == palindrome.substr(0, string.size() - i)) {\n            max_postfix_length\
    \ = string.size() - i;\n        }\n    }\n    return string + palindrome.substr(max_postfix_length);",
  "    std::string reversed_string(string);\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int palindrome_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string result = string;\n\
    \    std::string reverse = string;\n    std::reverse(reverse.begin(), reverse.end());\n\
    \    std::string::size_type max_palindrome_size = 0;\n    std::string::size_type\
    \ max_palindrome_start = 0;\n    for (std::string::size_type i = 0; i < string.size();\
    \ ++i) {\n        for (std::string::size_type j = 0; j < string.size() - i; ++j)\
    \ {\n            if (string[i + j] != reverse[j]) {\n                break;\n\
    \            }\n            if (j + 1 > max_palindrome_size) {\n             \
    \   max_palindrome_size = j + 1;\n                max_palindrome_start = i;\n\
    \            }\n        }\n    }\n    result += reverse.substr(max_palindrome_size);\n\
    \    return result;", "    std::string result = string;\n    std::string::iterator\
    \ it = string.begin();\n    std::string::iterator rit = string.rbegin();\n   \
    \ std::string::iterator rit_end = string.rend();\n    while (it != string.end())\
    \ {\n        if (*it == *rit) {\n            it++;\n            rit++;\n     \
    \   } else {\n            it = string.begin();\n            rit_end--;\n     \
    \       rit = rit_end;\n        }\n    }\n    std::string prefix(string.begin(),\
    \ rit_end);\n    std::string::iterator rit_begin = string.rbegin();\n    while\
    \ (rit_begin != rit_end) {\n        result.push_back(*rit_begin);\n        rit_begin++;\n\
    \    }\n    return result;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int longest_palindrome_suffix_length = prefix_function[concatenated_string.size()\
    \ - 1];\n    std::string prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    return\
    \ reversed_string.substr(0, string.size() - longest_palindromic_suffix_length)\
    \ + string;", "    std::string palindrome;\n    int length = string.length();\n\
    \    int i = 0;\n    int j = length - 1;\n    while (i < j) {\n        if (string[i]\
    \ == string[j]) {\n            i++;\n            j--;\n        } else {\n    \
    \        i = 0;\n            j--;\n        }\n    }\n    palindrome = string.substr(0,\
    \ j + 1);\n    std::reverse(palindrome.begin(), palindrome.end());\n    palindrome\
    \ += string;\n    return palindrome;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int length = prefix_function.back();\n    std::string prefix = string.substr(0,\
    \ string.size() - length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int palindrome_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reverse = string;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    std::string concat = string\
    \ + \"#\" + reverse;\n    std::vector<int> prefix_function(concat.size());\n \
    \   for (int i = 1; i < concat.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concat[i] != concat[j]) {\n            j = prefix_function[j\
    \ - 1];\n        }\n        if (concat[i] == concat[j]) {\n            ++j;\n\
    \        }\n        prefix_function[i] = j;\n    }\n    return reverse.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string rev_string\
    \ = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n    std::string\
    \ concat_string = string + \"#\" + rev_string;\n    std::vector<int> prefix_function(concat_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concat_string.size(); ++i)\
    \ {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concat_string[i]\
    \ != concat_string[j]) {\n            j = prefix_function[j - 1];\n        }\n\
    \        if (concat_string[i] == concat_string[j]) {\n            ++j;\n     \
    \   }\n        prefix_function[i] = j;\n    }\n    return rev_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + '$' +\
    \ reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string combined_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(combined_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    return\
    \ reversed_string.substr(0, string.size() - longest_palindromic_suffix_length)\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string string_with_reversed_prefix = string\
    \ + reversed_string;\n    std::vector<int> z_function = z_function_naive(string_with_reversed_prefix);\n\
    \    int longest_palindromic_suffix = z_function[string_with_reversed_prefix.size()\
    \ - 1];\n    std::string prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return string + prefix;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::reverse(result.begin(),\
    \ result.end());\n    std::string::iterator it = std::search(string.begin(), string.end(),\
    \ result.begin(), result.end());\n    std::string prefix(string.begin(), it);\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int palindrome_length = prefix_function.back();\n\
    \    std::string prefix = string.substr(0, string.size() - palindrome_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_calculator(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> z_function = z_function_of(concatenated_string);\n    int\
    \ longest_palindrome_suffix_length = z_function[string.size()];\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    int longest_palindromic_suffix_length = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (i < string.size()\
    \ && j == string.size()) {\n            longest_palindromic_suffix_length = i\
    \ + 1 - string.size();\n        }\n    }\n    std::string prefix = string.substr(0,\
    \ string.size() - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string concat = string + '$' + reverse;\n    std::vector<int>\
    \ prefix_function(concat.size());\n    for (int i = 1; i < concat.size(); ++i)\
    \ {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i]\
    \ != concat[j]) {\n            j = prefix_function[j - 1];\n        }\n      \
    \  if (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_string[j - 1];\n      \
    \  }\n        if (concatenated_string[i] == concatenated_string[j]) {\n      \
    \      ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "  std::string result;\n  std::string reversed_string = string;\n\
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n  std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n  std::vector<int>\
    \ prefix_function(concatenated_string.size());\n  for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n    int j = prefix_function[i - 1];\n    while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n      j = prefix_function[j - 1];\n    }\n   \
    \ if (concatenated_string[i] == concatenated_string[j]) {\n      ++j;\n    }\n\
    \    prefix_function[i] = j;\n  }\n  result = reversed_string.substr(0, string.size()\
    \ - prefix_function.back()) + string;\n  return result;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int palindrome_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_string[j - 1];\n      \
    \  }\n        if (concatenated_string[i] == concatenated_string[j]) {\n      \
    \      ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ result = string;\n    std::reverse(result.begin(), result.end());\n    std::string::iterator\
    \ it = std::search(string.begin(), string.end(), result.begin(), result.end());\n\
    \    std::string prefix(string.begin(), it);\n    return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ result = string;\n    std::string reversed = string;\n    std::reverse(reversed.begin(),\
    \ reversed.end());\n    std::string concatenated = string + reversed;\n    std::vector<int>\
    \ prefix_function(concatenated.size());\n    prefix_function[0] = 0;\n    for\
    \ (int i = 1; i < concatenated.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated[i] != concatenated[j]) {\n     \
    \       j = prefix_function[j - 1];\n        }\n        if (concatenated[i] ==\
    \ concatenated[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    result += reversed.substr(prefix_function[concatenated.size()\
    \ - 1]);\n    return result;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int palindrome_length = prefix_function.back();\n\
    \    std::string prefix = string.substr(0, string.size() - palindrome_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    int border = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i)\
    \ {\n        while (border > 0 && concatenated_string[i] != concatenated_string[border])\
    \ {\n            border = prefix_function[border - 1];\n        }\n        if\
    \ (concatenated_string[i] == concatenated_string[border]) {\n            ++border;\n\
    \        } else {\n            border = 0;\n        }\n        prefix_function[i]\
    \ = border;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    // Find the longest palindromic suffix of the string.\n   \
    \ std::string::iterator it = string.begin();\n    std::string::iterator rit =\
    \ string.end() - 1;\n    std::string::iterator palindrome_end = string.end();\n\
    \    while (it < rit) {\n        if (*it == *rit) {\n            palindrome_end\
    \ = rit;\n        }\n        ++it;\n        --rit;\n    }\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    std::string prefix(string.begin(), palindrome_end);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    string.append(prefix);\n    return string;", "    std::string\
    \ rev_string = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n\
    \    std::string concat_string = string + '$' + rev_string;\n    std::vector<int>\
    \ prefix_function(concat_string.size());\n    prefix_function[0] = 0;\n    for\
    \ (int i = 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concat_string[i] != concat_string[j]) {\n   \
    \         j = prefix_function[j - 1];\n        }\n        if (concat_string[i]\
    \ == concat_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return rev_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int longest_palindrome_suffix_length\
    \ = prefix_function[concatenated_string.size() - 1];\n    std::string prefix =\
    \ string.substr(0, string.size() - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ rev_string = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n\
    \    std::string concat_string = string + \"#\" + rev_string;\n    std::vector<int>\
    \ lps(concat_string.size());\n    int i = 1;\n    int j = 0;\n    while (i < concat_string.size())\
    \ {\n        if (concat_string[i] == concat_string[j]) {\n            lps[i] =\
    \ j + 1;\n            i++;\n            j++;\n        } else {\n            if\
    \ (j != 0) {\n                j = lps[j - 1];\n            } else {\n        \
    \        lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\
    \    return rev_string.substr(0, string.size() - lps[concat_string.size() - 1])\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    int n = string.size();\n    std::vector<int> z(n);\n    z[0] = 0;\n    for\
    \ (int i = 1, l = 0, r = 0; i < n; ++i) {\n        if (i <= r) {\n           \
    \ z[i] = std::min(r - i + 1, z[i - l]);\n        }\n        while (i + z[i] <\
    \ n && string[z[i]] == string[i + z[i]]) {\n            ++z[i];\n        }\n \
    \       if (i + z[i] - 1 > r) {\n            l = i;\n            r = i + z[i]\
    \ - 1;\n        }\n    }\n    int longest_palindrome_suffix = 0;\n    for (int\
    \ i = 1; i < n; ++i) {\n        if (i + z[i] == n) {\n            longest_palindrome_suffix\
    \ = i;\n        }\n    }\n    std::string prefix = string.substr(0, longest_palindrome_suffix);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return string + prefix;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    int border = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        while (border > 0 && concatenated_string[i] != concatenated_string[border])\
    \ {\n            border = prefix_function[border - 1];\n        }\n        if\
    \ (concatenated_string[i] == concatenated_string[border]) {\n            ++border;\n\
    \        } else {\n            border = 0;\n        }\n        prefix_function[i]\
    \ = border;\n    }\n    std::string prefix = string.substr(0, string.size() -\
    \ prefix_function.back());\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> lps = compute_lps(concat_string);\n    int lps_value = lps.back();\n\
    \    std::string prefix = string.substr(lps_value);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string rev_string\
    \ = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n    std::string\
    \ concat_string = string + \"#\" + rev_string;\n    std::vector<int> lps(concat_string.size());\n\
    \    int i = 1;\n    int j = 0;\n    while (i < concat_string.size()) {\n    \
    \    if (concat_string[i] == concat_string[j]) {\n            lps[i] = j + 1;\n\
    \            i++;\n            j++;\n        } else {\n            if (j != 0)\
    \ {\n                j = lps[j - 1];\n            } else {\n                lps[i]\
    \ = 0;\n                i++;\n            }\n        }\n    }\n    return rev_string.substr(0,\
    \ string.size() - lps[concat_string.size() - 1]) + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string palindrome = string + reverse;\n    std::vector<int>\
    \ prefix_function(palindrome.size());\n    for (int i = 1; i < palindrome.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && palindrome[i]\
    \ != palindrome[j]) {\n            j = prefix_function[j - 1];\n        }\n  \
    \      if (palindrome[i] == palindrome[j]) {\n            ++j;\n        }\n  \
    \      prefix_function[i] = j;\n    }\n    return reverse.substr(0, string.size()\
    \ - prefix_function.back()) + string;", "    std::string result = string;\n  \
    \  std::string::iterator it = string.begin();\n    std::string::iterator rit =\
    \ string.rbegin();\n    while (it != string.end() && rit != string.rend()) {\n\
    \        if (*it == *rit) {\n            ++it;\n            ++rit;\n        }\
    \ else {\n            break;\n        }\n    }\n    if (it == string.end()) {\n\
    \        return result;\n    }\n    std::string prefix(it, string.end());\n  \
    \  std::string::iterator pit = prefix.begin();\n    std::string::iterator rpit\
    \ = prefix.rbegin();\n    while (pit != prefix.end() && rpit != prefix.rend())\
    \ {\n        if (*pit == *rpit) {\n            ++pit;\n            ++rpit;\n \
    \       } else {\n            break;\n        }\n    }\n    if (pit == prefix.end())\
    \ {\n        return result;\n    }\n    std::string suffix(prefix.begin(), pit);\n\
    \    std::string::iterator sit = suffix.begin();\n    std::string::iterator rsit\
    \ = suffix.rbegin();\n    while (sit != suffix.end() && rsit != suffix.rend())\
    \ {\n        if (*sit == *rsit) {\n            ++sit;\n            ++rsit;\n \
    \       } else {\n            break;\n        }\n    }\n    if (sit == suffix.end())\
    \ {\n        return result;\n    }\n    std::string::iterator rprefix_it = prefix.rbegin();\n\
    \    std::string::iterator rprefix_end = rprefix_it + (prefix.rend() - pit);\n\
    \    result.append(rprefix_it, rprefix_end);\n    return result;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ palindrome = string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    int n = string.size();\n    int i = 0;\n    while (i <\
    \ n) {\n        if (string.substr(i) == reverse.substr(0, n - i)) {\n        \
    \    break;\n        }\n        i++;\n    }\n    palindrome += reverse.substr(n\
    \ - i);\n    return palindrome;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_string[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string result = string;\n    std::string::iterator it = string.begin();\n\
    \    std::string::iterator rit = string.rbegin();\n    std::string::iterator rit_end\
    \ = string.rend();\n    std::string::iterator it_end = string.end();\n    std::string::iterator\
    \ it_start = string.begin();\n    std::string::iterator rit_start = string.rbegin();\n\
    \    std::string::iterator it_mid = string.begin();\n    std::string::iterator\
    \ rit_mid = string.rbegin();\n    std::string::iterator it_mid_end = string.end();\n\
    \    std::string::iterator rit_mid_end = string.rend();\n    std::string::iterator\
    \ it_mid_start = string.begin();\n    std::string::iterator rit_mid_start = string.rbegin();\n\
    \    while (it != it_end && rit != rit_end) {\n        if (*it == *rit) {\n  \
    \          it++;\n            rit++;\n        } else {\n            it = it_start;\n\
    \            rit = rit_start;\n            it_start++;\n            rit_start++;\n\
    \        }\n    }\n    it_mid = it_start;\n    rit_mid = rit_start;\n    it_mid_end\
    \ = it_end;\n    rit_mid_end = rit_end;\n    it_mid_start = it_start;\n    rit_mid_start\
    \ = rit_start;\n    while (it_mid != it_mid_end && rit_mid != rit_mid_end) {\n\
    \        if (*it_mid == *rit_mid) {\n            it_mid++;\n            rit_mid++;\n\
    \        } else {\n            it_mid = it_mid_start;\n            rit_mid = rit_mid_start;\n\
    \            it_mid_start++;\n            rit_mid_start++;\n        }\n    }\n\
    \    std::string prefix = std::string(it_mid_start, it_mid);\n    std::string\
    \ suffix = std::string(rit_mid_start, rit_mid);\n    std::", "    std::string\
    \ reverse = string;\n    std::reverse(reverse.begin(), reverse.end());\n    std::string\
    \ concat = string + \"#\" + reverse;\n    std::vector<int> prefix_function(concat.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concat.size(); ++i) {\n\
    \        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i] !=\
    \ concat[j]) {\n            j = prefix_function[j - 1];\n        }\n        if\
    \ (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string result;\n    std::string reversed_prefix;\n\
    \    std::string::iterator it;\n    std::string::reverse_iterator rit;\n    std::string::iterator\
    \ rit_end;\n    std::string::iterator rit_begin;\n    std::string::iterator it_end;\n\
    \    std::string::iterator it_begin;\n    std::string::iterator it_prefix_end;\n\
    \    std::string::iterator it_prefix_begin;\n    std::string::iterator it_suffix_end;\n\
    \    std::string::iterator it_suffix_begin;\n    std::string::iterator it_suffix_end_next;\n\
    \    std::string::iterator it_suffix_begin_next;\n    std::string::iterator it_suffix_end_prev;\n\
    \    std::string::iterator it_suffix_begin_prev;\n    std::string::iterator it_suffix_end_prev_prev;\n\
    \    std::string::iterator it_suffix_begin_prev_prev;\n    std::string::iterator\
    \ it_suffix_end_next_next;\n    std::string::iterator it_suffix_begin_next_next;\n\
    \    std::string::iterator it_suffix_end_next_next_next;\n    std::string::iterator\
    \ it_suffix_begin_next_next_next;\n    std::string::iterator it_suffix_end_prev_prev_prev;\n\
    \    std::string::iterator it_suffix_begin_prev_prev_prev;\n    std::string::iterator\
    \ it_suffix_end_prev_prev_prev_prev;\n    std::string::iterator it_suffix_begin_prev_prev_prev_prev;\n\
    \    std::string::iterator it_suffix_end_next_next_next_next;\n    std::string::iterator\
    \ it_suffix_begin_next_next_next_next;\n    std::string::iterator it_suffix_end_next_next_next_next_next;\n\
    \    std::string::iterator it_suffix_begin_next_next_next_next_next;\n    std::string::iterator\
    \ it_suffix_end_prev_prev_prev_prev_prev", "    std::string reversed_string =\
    \ string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = compute_prefix_function(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "  std::string reverse = string;\n  std::reverse(reverse.begin(),\
    \ reverse.end());\n  std::string palindrome = string + reverse;\n  std::vector<int>\
    \ prefix_function(palindrome.size());\n  for (int i = 1; i < palindrome.size();\
    \ ++i) {\n    int j = prefix_function[i - 1];\n    while (j > 0 && palindrome[i]\
    \ != palindrome[j]) {\n      j = prefix_function[j - 1];\n    }\n    if (palindrome[i]\
    \ == palindrome[j]) {\n      ++j;\n    }\n    prefix_function[i] = j;\n  }\n \
    \ return reverse.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string(string);\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ string_prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string string_prefix_reversed = string_prefix;\n    std::reverse(string_prefix_reversed.begin(),\
    \ string_prefix_reversed.end());\n    return string_prefix_reversed + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string concat = string + \"#\" + reverse;\n    std::vector<int>\
    \ prefix_function(concat.size());\n    for (int i = 1; i < concat.size(); ++i)\
    \ {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i]\
    \ != concat[j]) {\n            j = prefix_function[j - 1];\n        }\n      \
    \  if (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string concat = string + reverse;\n    std::vector<int>\
    \ prefix_function(concat.size());\n    for (int i = 1; i < concat.size(); ++i)\
    \ {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i]\
    \ != concat[j]) {\n            j = prefix_function[j - 1];\n        }\n      \
    \  if (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    std::string prefix = string.substr(0, string.size() - prefix_function.back());\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_string[j - 1];\n      \
    \  }\n        if (concatenated_string[i] == concatenated_string[j]) {\n      \
    \      ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_string[j - 1];\n      \
    \  }\n        if (concatenated_string[i] == concatenated_string[j]) {\n      \
    \      ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concat_string.size(); ++i) {\n        int j =\
    \ prefix_function[i - 1];\n        while (j > 0 && concat_string[i] != concat_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concat_string[i]\
    \ == concat_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return rev_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string result = string;\n    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    result += reversed_string.substr(prefix_function[concatenated_string.size()\
    \ - 1]);\n    return result;", "    std::string reverse_string = string;\n   \
    \ std::reverse(reverse_string.begin(), reverse_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \   std::string rev_string = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n\
    \    std::string concat_string = string + \"#\" + rev_string;\n    std::vector<int>\
    \ lps = compute_lps(concat_string);\n    return rev_string.substr(0, string.size()\
    \ - lps.back()) + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::string reversed_prefix\
    \ = prefix;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    return reversed_prefix + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    std::string\
    \ result = string;\n    result.append(reversed_string.begin() + prefix_function[concatenated_string.size()\
    \ - 1], reversed_string.end());\n    return result;", "    std::string palindrome\
    \ = string;\n    std::reverse(palindrome.begin(), palindrome.end());\n    std::string::iterator\
    \ it = std::search(string.begin(), string.end(), palindrome.begin(), palindrome.end());\n\
    \    std::string prefix = string.substr(0, string.size() - (it - string.begin()));\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ palindrome = string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string::size_type n = string.size();\n    std::string::size_type\
    \ i = 0;\n    for (; i < n; ++i) {\n        if (string.substr(i) == reverse.substr(0,\
    \ n - i)) {\n            break;\n        }\n    }\n    palindrome += reverse.substr(n\
    \ - i);\n    return palindrome;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    for (int i =\
    \ 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i - 1];\n\
    \        while (j > 0 && concat_string[i] != concat_string[j]) {\n           \
    \ j = prefix_function[j - 1];\n        }\n        if (concat_string[i] == concat_string[j])\
    \ {\n            ++j;\n        }\n        prefix_function[i] = j;\n    }\n   \
    \ return rev_string.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::string reversed_prefix\
    \ = string;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    std::string::size_type suffix_length = 0;\n    for (std::string::size_type\
    \ i = 0; i < string.size(); ++i) {\n        if (string.substr(i) == reversed_prefix.substr(0,\
    \ string.size() - i)) {\n            suffix_length = string.size() - i;\n    \
    \        break;\n        }\n    }\n    result += reversed_prefix.substr(suffix_length);\n\
    \    return result;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string result = string;\n    std::string\
    \ reversed_prefix = string;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    std::string::iterator it = string.begin();\n    std::string::iterator rit\
    \ = reversed_prefix.begin();\n    while (it != string.end()) {\n        if (*it\
    \ == *rit) {\n            ++it;\n            ++rit;\n        } else {\n      \
    \      it = string.begin();\n            ++rit;\n        }\n    }\n    result\
    \ += std::string(reversed_prefix.begin(), rit);\n    return result;", "    std::string\
    \ palindrome = string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    int n = string.size();\n    int i = 0;\n    while (i <\
    \ n) {\n        if (string.substr(i) == reverse.substr(0, n - i)) {\n        \
    \    break;\n        }\n        i++;\n    }\n    palindrome += reverse.substr(n\
    \ - i);\n    return palindrome;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> lps = compute_lps(concat_string);\n    int lps_value = lps.back();\n\
    \    std::string prefix = string.substr(lps_value);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed = string;\n\
    \    std::reverse(reversed.begin(), reversed.end());\n    std::string concatenated\
    \ = string + reversed;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated);\n\
    \    int longest_palindrome_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string rev_string = string;\n    std::reverse(rev_string.begin(), rev_string.end());\n\
    \    std::string concat_string = string + \"#\" + rev_string;\n    std::vector<int>\
    \ lps = compute_lps(concat_string);\n    int max_palindrome_length = lps.back();\n\
    \    std::string prefix = string.substr(max_palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string result;\n    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindrome_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    result = prefix + string;\n    return result;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::reverse(result.begin(),\
    \ result.end());\n    int n = string.size();\n    int i = 0;\n    while (i < n)\
    \ {\n        if (string.substr(i) == result.substr(0, n - i)) {\n            break;\n\
    \        }\n        ++i;\n    }\n    return string + result.substr(n - i);", " \
    \   std::string result = string;\n    std::reverse(result.begin(), result.end());\n\
    \    return string + result;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "  std::string\
    \ reversed_string = string;\n  std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \  std::string concatenated_string = string + \"#\" + reversed_string;\n  std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n  int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n  std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n  std::reverse(prefix.begin(), prefix.end());\n\
    \  return prefix + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int longest_palindrome_suffix_length\
    \ = prefix_function[concatenated_string.size() - 1];\n    std::string prefix =\
    \ string.substr(0, string.size() - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reverse\
    \ = string;\n    std::reverse(reverse.begin(), reverse.end());\n    std::string\
    \ concat = string + \"#\" + reverse;\n    std::vector<int> prefix_function(concat.size());\n\
    \    for (int i = 1; i < concat.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concat[i] != concat[j]) {\n            j = prefix_function[j\
    \ - 1];\n        }\n        if (concat[i] == concat[j]) {\n            ++j;\n\
    \        }\n        prefix_function[i] = j;\n    }\n    return reverse.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::string::iterator it = string.begin();\n    std::string::iterator\
    \ rit = string.rbegin();\n    std::string::iterator it_end = string.end();\n \
    \   std::string::iterator rit_end = string.rend();\n    while (it != it_end &&\
    \ rit != rit_end) {\n        if (*it == *rit) {\n            ++it;\n         \
    \   ++rit;\n        } else {\n            break;\n        }\n    }\n    if (it\
    \ == it_end) {\n        return result;\n    }\n    std::string prefix(it, it_end);\n\
    \    std::string suffix(rit.base(), rit_end.base());\n    result += prefix;\n\
    \    result += suffix;\n    return result;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int longest_palindrome_suffix_length\
    \ = prefix_function[concatenated_string.size() - 1];\n    std::string prefix =\
    \ string.substr(0, string.size() - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string palindrome =\
    \ string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    int n = string.size();\n    int i = 0;\n    for (; i <\
    \ n; ++i) {\n        if (string.substr(i) == reverse.substr(0, n - i)) {\n   \
    \         break;\n        }\n    }\n    palindrome += reverse.substr(n - i);\n\
    \    return palindrome;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindrome_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    result += prefix;\n    return\
    \ result;", "    int length = string.length();\n    int i = 0;\n    int j = length\
    \ - 1;\n    while (i < j) {\n        if (string[i] != string[j]) {\n         \
    \   break;\n        }\n        i++;\n        j--;\n    }\n    if (i >= j) {\n\
    \        return string;\n    }\n    std::string prefix = string.substr(0, i);\n\
    \    std::string suffix = string.substr(i, length - i);\n    std::string reversed_prefix\
    \ = prefix;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    return reversed_prefix + make_palindrome(suffix) + prefix;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string result;\n    std::string reversed_string(string.rbegin(),\
    \ string.rend());\n    std::string concatenated_string = string + \"#\" + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::string reversed_prefix(prefix.rbegin(), prefix.rend());\n    result = reversed_prefix\
    \ + string;\n    return result;", "    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::string concat = string + reverse;\n    std::vector<int>\
    \ prefix_function(concat.size());\n    for (int i = 1; i < concat.size(); ++i)\
    \ {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i]\
    \ != concat[j]) {\n            j = prefix_function[j - 1];\n        }\n      \
    \  if (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    std::string prefix = string.substr(0, string.size() - prefix_function.back());\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string new_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(new_string.size());\n    for (int i = 1; i < new_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && new_string[i]\
    \ != new_string[j]) {\n            j = prefix_function[j - 1];\n        }\n  \
    \      if (new_string[i] == new_string[j]) {\n            ++j;\n        }\n  \
    \      prefix_function[i] = j;\n    }\n    return reversed_string.substr(0, string.size()\
    \ - prefix_function.back()) + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int length_of_longest_palindromic_suffix\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - length_of_longest_palindromic_suffix);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string palindrome = string;\n    std::reverse(palindrome.begin(),\
    \ palindrome.end());\n    int n = string.size();\n    int i = 0;\n    while (i\
    \ < n && string[i] == string[n - 1 - i]) {\n        ++i;\n    }\n    if (i ==\
    \ n) {\n        return string;\n    }\n    std::string prefix = string.substr(0,\
    \ n - i);\n    std::reverse(prefix.begin(), prefix.end());\n    return prefix\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ palindrome = string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    int n = string.size();\n    int i = 0;\n    while (i <\
    \ n) {\n        if (string.substr(i) == reverse.substr(0, n - i)) {\n        \
    \    break;\n        }\n        i++;\n    }\n    palindrome += reverse.substr(n\
    \ - i);\n    return palindrome;"]
stop_tokens:
- "\n}"
