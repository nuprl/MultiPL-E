name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  std::string make_palindrome(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    std::string result = string;\n    std::string::size_type suffix_length\
    \ = 0;\n    for (std::string::size_type i = 0; i < string.size(); ++i) {\n   \
    \     if (string.substr(i) == std::string(string.substr(i).rbegin(), string.substr(i).rend()))\
    \ {\n            suffix_length = string.size() - i;\n            break;\n    \
    \    }\n    }\n    result.append(std::string(string.begin(), string.begin() +\
    \ string.size() - suffix_length).rbegin(),\n                  std::string(string.begin(),\
    \ string.begin() + string.size() - suffix_length).rend());\n    return result;",
  "    std::string result = string;\n    std::string::iterator it = string.begin();\n\
    \    std::string::iterator rit = string.rbegin();\n    while (it != string.end()\
    \ && rit != string.rend()) {\n        if (*it == *rit) {\n            ++it;\n\
    \            ++rit;\n        } else {\n            it = string.begin();\n    \
    \        ++rit;\n        }\n    }\n    std::string prefix(string.begin(), it);\n\
    \    std::string suffix(rit.base(), string.end());\n    result += std::string(prefix.rbegin(),\
    \ prefix.rend());\n    return result;", "    std::string reverse_string = string;\n\
    \    std::reverse(reverse_string.begin(), reverse_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::string::iterator it = string.begin();\n    std::string::iterator\
    \ rit = string.rbegin();\n    for (; it != string.end() && rit != string.rend();\
    \ ++it, ++rit) {\n        if (*it != *rit) {\n            break;\n        }\n\
    \    }\n    std::string prefix(it, string.end());\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    result += prefix;\n    return result;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + '#' + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "  std::string reversed_string\
    \ = string;\n  std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \  std::string concatenated_string = string + reversed_string;\n  std::vector<int>\
    \ prefix_function(concatenated_string.size());\n  for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n    int j = prefix_function[i - 1];\n    while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n      j = prefix_function[j - 1];\n    }\n   \
    \ if (concatenated_string[i] == concatenated_string[j]) {\n      ++j;\n    }\n\
    \    prefix_function[i] = j;\n  }\n  int longest_palindrome_suffix_length = prefix_function[concatenated_string.size()\
    \ - 1];\n  std::string prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \  std::reverse(prefix.begin(), prefix.end());\n  return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    for (int i =\
    \ 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i - 1];\n\
    \        while (j > 0 && concat_string[i] != concat_string[j]) {\n           \
    \ j = prefix_function[j - 1];\n        }\n        if (concat_string[i] == concat_string[j])\
    \ {\n            ++j;\n        }\n        prefix_function[i] = j;\n    }\n   \
    \ return rev_string.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int palindrome_length\
    \ = prefix_function.back();\n    return reversed_string.substr(0, string.size()\
    \ - palindrome_length) + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reverse\
    \ = string;\n    std::reverse(reverse.begin(), reverse.end());\n    std::string\
    \ concat = string + \"#\" + reverse;\n    std::vector<int> prefix_function(concat.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concat.size(); ++i) {\n\
    \        int j = prefix_function[i - 1];\n        while (j > 0 && concat[i] !=\
    \ concat[j]) {\n            j = prefix_function[j - 1];\n        }\n        if\
    \ (concat[i] == concat[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    std::string prefix = string.substr(0, string.size() - prefix_function.back());\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ palindrome = string;\n    std::reverse(palindrome.begin(), palindrome.end());\n\
    \    std::string::size_type pos = string.find(palindrome);\n    if (pos != std::string::npos)\
    \ {\n        return string;\n    }\n    std::string::size_type suffix_length =\
    \ 0;\n    for (std::string::size_type i = 0; i < string.size(); ++i) {\n     \
    \   if (string[i] == string[string.size() - 1 - i]) {\n            ++suffix_length;\n\
    \        } else {\n            break;\n        }\n    }\n    std::string prefix\
    \ = string.substr(0, string.size() - suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindrome_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string(string);\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> z_function = z_function_naive(concatenated_string);\n  \
    \  int longest_palindrome_suffix_length = z_function[string.size()];\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + '#'\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    int n =\
    \ string.size();\n    std::vector<int> z(n);\n    z[0] = 0;\n    for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n        if (i <= r) {\n            z[i] = std::min(r\
    \ - i + 1, z[i - l]);\n        }\n        while (i + z[i] < n && string[z[i]]\
    \ == string[i + z[i]]) {\n            ++z[i];\n        }\n        if (i + z[i]\
    \ - 1 > r) {\n            l = i;\n            r = i + z[i] - 1;\n        }\n \
    \   }\n    int longest_palindrome_suffix = 0;\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (i + z[i] == n) {\n            longest_palindrome_suffix = i;\n\
    \        }\n    }\n    std::string prefix = string.substr(0, longest_palindrome_suffix);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return string + prefix;",
  "    std::string reverse_string(string);\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::string reverse_prefix(prefix);\n    std::reverse(reverse_prefix.begin(),\
    \ reverse_prefix.end());\n    return reverse_prefix + string;", "    std::string\
    \ result = string;\n    std::string::iterator it = string.begin();\n    std::string::iterator\
    \ rit = string.rbegin();\n    while (it != string.end() && rit != string.rend())\
    \ {\n        if (*it == *rit) {\n            it++;\n            rit++;\n     \
    \   } else {\n            it = string.begin();\n            rit++;\n        }\n\
    \    }\n    std::string prefix(string.begin(), it);\n    std::string suffix(rit.base(),\
    \ string.end());\n    result += std::string(prefix.rbegin(), prefix.rend());\n\
    \    return result;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::string::iterator it = string.begin();\n    std::string::iterator\
    \ rit = string.rbegin();\n    std::string::iterator rit_end = string.rend();\n\
    \    while (it != string.end()) {\n        if (*it == *rit) {\n            ++it;\n\
    \            ++rit;\n        } else {\n            it = string.begin();\n    \
    \        ++rit;\n            rit_end = rit;\n        }\n    }\n    std::string\
    \ prefix(rit_end, string.rend());\n    result.append(prefix);\n    return result;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::string::iterator it\
    \ = string.begin();\n    std::string::iterator rit = string.rbegin();\n    std::string::iterator\
    \ rit_end = string.rend();\n    std::string::iterator it_end = string.end();\n\
    \    std::string::iterator it_begin = string.begin();\n    std::string::iterator\
    \ rit_begin = string.rbegin();\n    std::string::iterator it_palindrome_end =\
    \ string.end();\n    std::string::iterator it_palindrome_begin = string.end();\n\
    \    std::string::iterator rit_palindrome_end = string.rend();\n    std::string::iterator\
    \ rit_palindrome_begin = string.rend();\n    while (it != it_end && rit != rit_end)\
    \ {\n        if (*it == *rit) {\n            it_palindrome_end = it;\n       \
    \     rit_palindrome_end = rit;\n            it++;\n            rit++;\n     \
    \   } else {\n            it = it_palindrome_end;\n            rit = rit_palindrome_end;\n\
    \            it_palindrome_end = it_end;\n            rit_palindrome_end = rit_end;\n\
    \        }\n    }\n    it_palindrome_begin = it_palindrome_end;\n    rit_palindrome_begin\
    \ = rit_palindrome_end;\n    while (it_palindrome_begin != it_begin && rit_palindrome_begin\
    \ != rit_begin) {\n        if (*it_palindrome_begin == *rit_palindrome_begin)\
    \ {\n            it_palindrome_begin--;\n            rit_palindrome_begin--;\n\
    \        } else {\n            break;\n        }\n    }\n    std::string prefix\
    \ = std::string(it_palindrome_begin, it_palindrome_end);\n    std::string suffix\
    \ = std::string(rit_palindrome_begin, rit_palindrome_end);\n    std::string reverse_prefix\
    \ = std::string(prefix.rbegin(), prefix", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    return reversed_string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int palindrome_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed = string;\n\
    \    std::reverse(reversed.begin(), reversed.end());\n    std::string concatenated\
    \ = string + reversed;\n    std::vector<int> prefix_function(concatenated.size());\n\
    \    for (int i = 1; i < concatenated.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated[i] != concatenated[j]) {\n     \
    \       j = prefix_function[j - 1];\n        }\n        if (concatenated[i] ==\
    \ concatenated[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> z_function = z_function_naive(concatenated_string);\n  \
    \  int longest_palindrome_length = z_function[string.size()];\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \   std::string result = string;\n    std::string::iterator it = string.begin();\n\
    \    std::string::iterator rit = string.rbegin();\n    while (it != string.end()\
    \ && rit != string.rend()) {\n        if (*it == *rit) {\n            ++it;\n\
    \            ++rit;\n        } else {\n            break;\n        }\n    }\n\
    \    std::string prefix(string.begin(), it);\n    std::string suffix(string.rbegin(),\
    \ rit);\n    result.append(suffix.rbegin(), suffix.rend());\n    return result;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string combined_string = string + \"#\" + reverse_string;\n\
    \    std::vector<int> prefix_function(combined_string.size());\n    for (int i\
    \ = 1; i < combined_string.size(); ++i) {\n        int j = prefix_function[i -\
    \ 1];\n        while (j > 0 && combined_string[i] != combined_string[j]) {\n \
    \           j = prefix_function[j - 1];\n        }\n        if (combined_string[i]\
    \ == combined_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    std::string prefix = string.substr(0, string.size() - prefix_function.back());\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = compute_prefix_function(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \ std::string reversed_string = string;\n  std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n  std::string concatenated_string = string + reversed_string;\n\
    \  std::vector<int> prefix_function(concatenated_string.size());\n  for (int i\
    \ = 1; i < concatenated_string.size(); ++i) {\n    int j = prefix_function[i -\
    \ 1];\n    while (j > 0 && concatenated_string[i] != concatenated_string[j]) {\n\
    \      j = prefix_function[j - 1];\n    }\n    if (concatenated_string[i] == concatenated_string[j])\
    \ {\n      ++j;\n    }\n    prefix_function[i] = j;\n  }\n  return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    for (int i =\
    \ 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i - 1];\n\
    \        while (j > 0 && concat_string[i] != concat_string[j]) {\n           \
    \ j = prefix_function[j - 1];\n        }\n        if (concat_string[i] == concat_string[j])\
    \ {\n            ++j;\n        }\n        prefix_function[i] = j;\n    }\n   \
    \ return rev_string.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string result;\n    std::string::iterator\
    \ it = string.begin();\n    std::string::iterator it_end = string.end();\n   \
    \ std::string::iterator it_mid = string.begin() + string.size() / 2;\n    std::string::iterator\
    \ it_mid_end = string.end() - string.size() / 2;\n    std::string::iterator it_mid_end_rev\
    \ = string.begin();\n    std::string::iterator it_mid_rev = string.begin() + string.size()\
    \ / 2;\n    std::string::iterator it_rev = string.end() - 1;\n    std::string::iterator\
    \ it_rev_end = string.begin() - 1;\n    std::string::iterator it_rev_end_rev =\
    \ string.end() - 1;\n    std::string::iterator it_rev_mid = string.end() - string.size()\
    \ / 2 - 1;\n    std::string::iterator it_rev_mid_rev = string.end() - string.size()\
    \ / 2;\n    std::string::iterator it_rev_mid_end = string.begin() - 1;\n    std::string::iterator\
    \ it_rev_mid_end_rev = string.end() - 1;\n    std::string::iterator it_rev_mid_end_rev_mid\
    \ = string.end() - string.size() / 2 - 1;\n    std::string::iterator it_rev_mid_end_rev_mid_rev\
    \ = string.end() - string.size() / 2;\n    std::string::iterator it_rev_mid_end_rev_mid_rev_end\
    \ = string.begin() - 1;\n    std::string::iterator it_rev_mid_end_rev_mid_rev_end_rev\
    \ = string.end() - 1;\n    std::string::iterator it_rev_mid_end_rev_mid_rev_end_rev_mid\
    \ = string.end() - string.size() / 2 - 1;\n    std::string::iterator it_rev_mid_end_rev_mid_rev_end_rev_mid_rev\
    \ = string.end() - string.size() / 2;\n    std::string::iterator it_rev_mid_end_",
  "    std::string result = string;\n    std::string::iterator it = string.begin();\n\
    \    std::string::iterator rit = string.rbegin();\n    std::string::iterator end\
    \ = string.end();\n    std::string::iterator rend = string.rend();\n    while\
    \ (it != end && rit != rend) {\n        if (*it == *rit) {\n            ++it;\n\
    \            ++rit;\n        } else {\n            it = string.begin();\n    \
    \        ++rend;\n            rit = rend;\n        }\n    }\n    std::string prefix(string.begin(),\
    \ it);\n    std::string suffix(rit, string.rend());\n    result.append(prefix.rbegin(),\
    \ prefix.rend());\n    return result;", "    std::string result = string;\n  \
    \  std::reverse(result.begin(), result.end());\n    int n = string.size();\n \
    \   int i = 0;\n    for (; i < n; ++i) {\n        if (string.substr(i) == result.substr(0,\
    \ n - i)) {\n            break;\n        }\n    }\n    return string + result.substr(n\
    \ - i);", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_vector(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string result = string;\n    std::string\
    \ reverse = string;\n    std::reverse(reverse.begin(), reverse.end());\n    int\
    \ n = string.size();\n    int i = 0;\n    while (i < n) {\n        if (string.substr(i)\
    \ == reverse.substr(0, n - i)) {\n            break;\n        }\n        ++i;\n\
    \    }\n    result.append(reverse.substr(n - i));\n    return result;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int palindrome_length = prefix_function.back();\n\
    \    std::string prefix = string.substr(0, string.size() - palindrome_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string string_with_reversed_prefix = string\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_kmp(string_with_reversed_prefix);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::string reverse = string;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    int n = string.size();\n\
    \    int i = 0;\n    while (i < n) {\n        if (string.substr(i) == reverse.substr(0,\
    \ n - i)) {\n            break;\n        }\n        ++i;\n    }\n    result.append(reverse.substr(n\
    \ - i));\n    return result;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindrome_suffix_length\
    \ = prefix_function.back();\n    std::string longest_palindrome_suffix = string.substr(string.size()\
    \ - longest_palindrome_suffix_length);\n    std::string prefix_to_append = string.substr(0,\
    \ string.size() - longest_palindrome_suffix_length);\n    std::reverse(prefix_to_append.begin(),\
    \ prefix_to_append.end());\n    return prefix_to_append + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_calculator(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + '#' + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    for (int i =\
    \ 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i - 1];\n\
    \        while (j > 0 && concat_string[i] != concat_string[j]) {\n           \
    \ j = prefix_function[j - 1];\n        }\n        if (concat_string[i] == concat_string[j])\
    \ {\n            ++j;\n        }\n        prefix_function[i] = j;\n    }\n   \
    \ return rev_string.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    int longest_palindrome_suffix_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (j > longest_palindrome_suffix_length)\
    \ {\n            longest_palindrome_suffix_length = j;\n        }\n    }\n   \
    \ return reversed_string.substr(0, string.size() - longest_palindrome_suffix_length)\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed = string;\n    std::reverse(reversed.begin(), reversed.end());\n  \
    \  std::string concatenated = string + \"#\" + reversed;\n    std::vector<int>\
    \ prefix_function(concatenated.size());\n    for (int i = 1; i < concatenated.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated[i]\
    \ != concatenated[j]) {\n            j = prefix_function[j - 1];\n        }\n\
    \        if (concatenated[i] == concatenated[j]) {\n            ++j;\n       \
    \ }\n        prefix_function[i] = j;\n    }\n    int palindrome_length = prefix_function.back();\n\
    \    std::string prefix = string.substr(0, string.size() - palindrome_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed = string;\n    std::reverse(reversed.begin(), reversed.end());\n  \
    \  std::string concatenated = string + \"#\" + reversed;\n    std::vector<int>\
    \ prefix_function(concatenated.size());\n    for (int i = 1; i < concatenated.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated[i]\
    \ != concatenated[j]) {\n            j = prefix_function[j - 1];\n        }\n\
    \        if (concatenated[i] == concatenated[j]) {\n            ++j;\n       \
    \ }\n        prefix_function[i] = j;\n    }\n    return reversed.substr(0, string.size()\
    \ - prefix_function.back()) + string;", "  std::string reversed_string = string;\n\
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n  std::string\
    \ concatenated_string = string + reversed_string;\n  std::vector<int> prefix_function(concatenated_string.size());\n\
    \  int longest_palindrome_length = 0;\n  for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n    int j = prefix_function[i - 1];\n    while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n      j = prefix_function[j - 1];\n    }\n   \
    \ if (concatenated_string[i] == concatenated_string[j]) {\n      ++j;\n    }\n\
    \    prefix_function[i] = j;\n    if (j > longest_palindrome_length) {\n     \
    \ longest_palindrome_length = j;\n    }\n  }\n  std::string prefix = string.substr(longest_palindrome_length);\n\
    \  std::reverse(prefix.begin(), prefix.end());\n  return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_for_string(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ result = string;\n    std::string reversed_prefix = string;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    size_t longest_palindrome_suffix_length = 0;\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        if (string.substr(i)\
    \ == reversed_prefix.substr(0, string.size() - i)) {\n            longest_palindrome_suffix_length\
    \ = string.size() - i;\n            break;\n        }\n    }\n    result += reversed_prefix.substr(longest_palindrome_suffix_length);\n\
    \    return result;", "    std::string reverse(string.rbegin(), string.rend());\n\
    \    std::string result = string + reverse;\n    return result;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> prefix_function(concat_string.size());\n    for (int i =\
    \ 1; i < concat_string.size(); ++i) {\n        int j = prefix_function[i - 1];\n\
    \        while (j > 0 && concat_string[i] != concat_string[j]) {\n           \
    \ j = prefix_function[j - 1];\n        }\n        if (concat_string[i] == concat_string[j])\
    \ {\n            ++j;\n        }\n        prefix_function[i] = j;\n    }\n   \
    \ return rev_string.substr(0, string.size() - prefix_function.back()) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::string reverse = string;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    std::string::size_type\
    \ max_palindrome_length = 0;\n    std::string::size_type max_palindrome_index\
    \ = 0;\n    for (std::string::size_type i = 0; i < string.size(); ++i) {\n   \
    \     std::string::size_type length = 0;\n        std::string::size_type j = 0;\n\
    \        while (i + j < string.size() && j < string.size() && string[i + j] ==\
    \ reverse[j]) {\n            ++length;\n            ++j;\n        }\n        if\
    \ (length > max_palindrome_length) {\n            max_palindrome_length = length;\n\
    \            max_palindrome_index = i;\n        }\n    }\n    result += reverse.substr(max_palindrome_length);\n\
    \    return result;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ result;\n    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_length = prefix_function.back();\n    std::string prefix =\
    \ string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    result = prefix + string;\n    return result;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string result = string;\n    std::string\
    \ reverse = string;\n    std::reverse(reverse.begin(), reverse.end());\n    std::string::size_type\
    \ max_length = 0;\n    std::string::size_type length = 0;\n    for (std::string::size_type\
    \ i = 0; i < string.size(); ++i) {\n        if (string[i] == reverse[i]) {\n \
    \           ++length;\n        } else {\n            length = 0;\n        }\n\
    \        if (length > max_length) {\n            max_length = length;\n      \
    \  }\n    }\n    result += reverse.substr(max_length);\n    return result;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    int longest_palindrome_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (j == string.size())\
    \ {\n            longest_palindrome_length = j;\n        }\n    }\n    return\
    \ reversed_string.substr(0, string.size() - longest_palindrome_length) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindrome_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    int longest_palindromic_suffix_length = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (i < string.size()\
    \ && prefix_function[i] == string.size()) {\n            longest_palindromic_suffix_length\
    \ = prefix_function[i];\n        }\n    }\n    std::string prefix = string.substr(0,\
    \ string.size() - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix);\n   \
    \ std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::reverse(result.begin(), result.end());\n    std::string::iterator\
    \ it = result.begin();\n    std::string::iterator it2 = string.begin();\n    while\
    \ (it2 != string.end()) {\n        if (*it2 == *it) {\n            ++it2;\n  \
    \          ++it;\n        } else {\n            ++it;\n        }\n    }\n    std::string\
    \ prefix(it, result.end());\n    result += prefix;\n    return result;", "   \
    \ std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    std::string prefix = string.substr(0, string.size() - prefix_function.back());\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> z_function = z_function_naive(concatenated_string);\n  \
    \  int longest_palindrome_length = z_function[string.size()];\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string result\
    \ = string;\n    std::string reversed_prefix = string;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    std::string::iterator it = string.begin();\n  \
    \  std::string::iterator rit = reversed_prefix.begin();\n    while (it != string.end())\
    \ {\n        if (*it == *rit) {\n            it++;\n            rit++;\n     \
    \   } else {\n            it = string.begin();\n            rit++;\n        }\n\
    \    }\n    result.append(reversed_prefix.begin(), rit);\n    return result;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string result = string;\n    std::string reverse = string;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    int n = string.size();\n\
    \    int i = 0;\n    for (; i < n; ++i) {\n        if (string.substr(i) == reverse.substr(0,\
    \ n - i)) {\n            break;\n        }\n    }\n    result.append(reverse.substr(n\
    \ - i));\n    return result;", "    std::string reverse_string = string;\n   \
    \ std::reverse(reverse_string.begin(), reverse_string.end());\n    std::string\
    \ concatenated_string = string + '$' + reverse_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_calculator(concatenated_string);\n    int\
    \ longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int length_of_palindromic_suffix\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - length_of_palindromic_suffix);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    int longest_palindrome_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (j == string.size())\
    \ {\n            longest_palindrome_length = i;\n        }\n    }\n    return\
    \ reverse_string.substr(0, string.size() - longest_palindrome_length) + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int longest_palindrome_suffix_length = prefix_function[concatenated_string.size()\
    \ - 1];\n    return reversed_string.substr(0, string.size() - longest_palindrome_suffix_length)\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    prefix_function[0]\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int palindrome_length\
    \ = prefix_function.back();\n    return reversed_string.substr(0, string.size()\
    \ - palindrome_length) + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    int palindrome_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - palindrome_length);\n    std::reverse(prefix.begin(), prefix.end());\n   \
    \ return prefix + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int palindrome_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string palindrome =\
    \ string;\n    std::string reverse = string;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    int n = string.size();\n    int i = 0;\n    while (i <\
    \ n) {\n        if (string.substr(i) == reverse.substr(0, n - i)) {\n        \
    \    break;\n        }\n        i++;\n    }\n    palindrome += reverse.substr(n\
    \ - i);\n    return palindrome;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    int longest_palindrome_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (j > longest_palindrome_length)\
    \ {\n            longest_palindrome_length = j;\n        }\n    }\n    std::string\
    \ prefix = string.substr(longest_palindrome_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string result = string;\n    std::string::iterator\
    \ it = string.begin();\n    std::string::iterator rit = string.rbegin();\n   \
    \ while (it != string.end() && rit != string.rend()) {\n        if (*it == *rit)\
    \ {\n            it++;\n            rit++;\n        } else {\n            it =\
    \ string.begin();\n            rit++;\n        }\n    }\n    std::string prefix(string.begin(),\
    \ it);\n    std::string suffix(rit.base(), string.end());\n    result += std::string(prefix.rbegin(),\
    \ prefix.rend());\n    return result;", "  std::string reversed_string = string;\n\
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n  std::string\
    \ concatenated_string = string + reversed_string;\n  std::vector<int> prefix_function(concatenated_string.size());\n\
    \  prefix_function[0] = 0;\n  for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n    int j = prefix_function[i - 1];\n    while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n      j = prefix_function[j - 1];\n    }\n   \
    \ if (concatenated_string[i] == concatenated_string[j]) {\n      ++j;\n    }\n\
    \    prefix_function[i] = j;\n  }\n  int longest_palindrome_suffix_length = prefix_function[concatenated_string.size()\
    \ - 1];\n  std::string prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \  std::reverse(prefix.begin(), prefix.end());\n  return prefix + string;", " \
    \   std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + \"#\" + rev_string;\n\
    \    std::vector<int> lps = compute_lps(concat_string);\n    return rev_string.substr(0,\
    \ string.size() - lps.back()) + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string palindrome = string;\n    std::string\
    \ reverse = string;\n    std::reverse(reverse.begin(), reverse.end());\n    std::string\
    \ postfix = string;\n    while (postfix.size() > 0) {\n        std::string prefix\
    \ = postfix;\n        std::reverse(prefix.begin(), prefix.end());\n        if\
    \ (prefix == postfix) {\n            palindrome += reverse.substr(postfix.size());\n\
    \            break;\n        }\n        postfix.pop_back();\n    }\n    return\
    \ palindrome;", "    std::string result = string;\n    std::string reverse = string;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    int n = string.size();\n\
    \    int i = 0;\n    while (i < n) {\n        if (string.substr(i) == reverse.substr(0,\
    \ n - i)) {\n            break;\n        }\n        ++i;\n    }\n    result.append(reverse.substr(n\
    \ - i));\n    return result;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    return reversed_string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string new_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(new_string.size());\n    for (int i = 1; i < new_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && new_string[i]\
    \ != new_string[j]) {\n            j = prefix_function[j - 1];\n        }\n  \
    \      if (new_string[i] == new_string[j]) {\n            ++j;\n        }\n  \
    \      prefix_function[i] = j;\n    }\n    return reversed_string.substr(0, string.size()\
    \ - prefix_function.back()) + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    int longest_palindrome_suffix_length = prefix_function[concatenated_string.size()\
    \ - 1];\n    std::string prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reversed_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reverse_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function(concatenated_string.size());\n    int longest_palindromic_suffix_length\
    \ = 0;\n    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int\
    \ j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n        if (i < string.size()\
    \ && j == string.size()) {\n            longest_palindromic_suffix_length = j;\n\
    \        }\n    }\n    return reversed_string.substr(0, string.size() - longest_palindromic_suffix_length)\
    \ + string;", "    std::string result = string;\n    std::string reverse_string\
    \ = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindrome_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    result += prefix;\n    return result;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + \"#\" + reversed_string;\n   \
    \ std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    int palindrome_suffix_length = prefix_function.back();\n    std::string prefix\
    \ = string.substr(0, string.size() - palindrome_suffix_length);\n    std::reverse(prefix.begin(),\
    \ prefix.end());\n    return prefix + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    return reversed_string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_kmp(concatenated_string);\n    int longest_palindrome_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindrome_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed\
    \ = string;\n    std::reverse(reversed.begin(), reversed.end());\n    std::string\
    \ concatenated = string + reversed;\n    std::vector<int> z_function(concatenated.size());\n\
    \    int left = 0;\n    int right = 0;\n    for (int i = 1; i < concatenated.size();\
    \ ++i) {\n        if (i <= right) {\n            z_function[i] = std::min(right\
    \ - i + 1, z_function[i - left]);\n        }\n        while (i + z_function[i]\
    \ < concatenated.size() && concatenated[z_function[i]] == concatenated[i + z_function[i]])\
    \ {\n            ++z_function[i];\n        }\n        if (i + z_function[i] -\
    \ 1 > right) {\n            left = i;\n            right = i + z_function[i] -\
    \ 1;\n        }\n    }\n    int longest_palindrome_suffix_length = z_function[string.size()];\n\
    \    std::string prefix = string.substr(0, string.size() - longest_palindrome_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;",
  "    std::string result = string;\n    std::reverse(result.begin(), result.end());\n\
    \    return string + result;", "    std::string reversed_string = string;\n  \
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + \"#\"\
    \ + reverse_string;\n    std::vector<int> prefix_function = prefix_function_kmp(concatenated_string);\n\
    \    return reverse_string.substr(0, string.size() - prefix_function.back()) +\
    \ string;", "    std::string result = string;\n    std::reverse(result.begin(),\
    \ result.end());\n    return string + result;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string rev_string = string;\n    std::reverse(rev_string.begin(),\
    \ rev_string.end());\n    std::string concat_string = string + rev_string;\n \
    \   std::vector<int> prefix_function(concat_string.size());\n    int max_prefix_len\
    \ = 0;\n    for (int i = 1; i < concat_string.size(); ++i) {\n        int j =\
    \ prefix_function[i - 1];\n        while (j > 0 && concat_string[i] != concat_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concat_string[i]\
    \ == concat_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n        max_prefix_len = std::max(max_prefix_len, j);\n    }\n    return\
    \ rev_string.substr(0, string.size() - max_prefix_len) + string;", "    std::string\
    \ result = string;\n    std::string::iterator it = result.begin();\n    std::string::iterator\
    \ rit = result.rbegin();\n    while (it < result.end() && rit < result.rend())\
    \ {\n        if (*it == *rit) {\n            ++it;\n            ++rit;\n     \
    \   } else {\n            it = result.begin();\n            ++rit;\n        }\n\
    \    }\n    std::string prefix(result.begin(), it);\n    result.append(prefix.rbegin(),\
    \ prefix.rend());\n    return result;", "  std::string reversed_string = string;\n\
    \  std::reverse(reversed_string.begin(), reversed_string.end());\n  std::string\
    \ concatenated_string = string + reversed_string;\n  std::vector<int> prefix_function(concatenated_string.size());\n\
    \  for (int i = 1; i < concatenated_string.size(); ++i) {\n    int j = prefix_function[i\
    \ - 1];\n    while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n      j = prefix_function[j - 1];\n    }\n    if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n      ++j;\n    }\n    prefix_function[i] = j;\n\
    \  }\n  return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int palindrome_length = string.size() - prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, palindrome_length);\n    std::string reversed_prefix\
    \ = prefix;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    return reversed_prefix + string;", "    std::string reversed_string = string;\n\
    \    std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function(concatenated_string.size());\n    for (int\
    \ i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reversed_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    int length = string.length();\n    int i = 0;\n    int j =\
    \ length - 1;\n    while (i < j) {\n        if (string[i] != string[j]) {\n  \
    \          break;\n        }\n        i++;\n        j--;\n    }\n    if (i >=\
    \ j) {\n        return string;\n    }\n    std::string prefix = string.substr(0,\
    \ i);\n    std::string suffix = string.substr(i, length - i);\n    std::string\
    \ reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n\
    \    return reversed_prefix + make_palindrome(suffix) + prefix;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function(concatenated_string.size());\n\
    \    prefix_function[0] = 0;\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    for (int i = 1; i < concatenated_string.size();\
    \ ++i) {\n        int j = prefix_function[i - 1];\n        while (j > 0 && concatenated_string[i]\
    \ != concatenated_string[j]) {\n            j = prefix_function[j - 1];\n    \
    \    }\n        if (concatenated_string[i] == concatenated_string[j]) {\n    \
    \        ++j;\n        }\n        prefix_function[i] = j;\n    }\n    return reversed_string.substr(0,\
    \ string.size() - prefix_function.back()) + string;", "    std::string reversed_string\
    \ = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string::iterator it = string.begin();\n\
    \    std::string::iterator rit = string.rbegin();\n    std::string::iterator end\
    \ = string.end();\n    std::string::iterator rend = string.rend();\n    std::string::iterator\
    \ palindrome_begin = string.begin();\n    std::string::iterator palindrome_end\
    \ = string.end();\n    while (it != end && rit != rend) {\n        if (*it ==\
    \ *rit) {\n            palindrome_begin = it;\n            palindrome_end = rit.base();\n\
    \        }\n        ++it;\n        ++rit;\n    }\n    std::string prefix(palindrome_begin,\
    \ palindrome_end);\n    std::string suffix(palindrome_end, end);\n    std::string\
    \ result = prefix + suffix;\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    result += prefix;\n    return result;", "    std::string reverse_string =\
    \ string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n \
    \   std::string concatenated_string = string + reverse_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_vector(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    return prefix + string;", "    std::string reverse_string = string;\n   \
    \ std::reverse(reverse_string.begin(), reverse_string.end());\n    std::string\
    \ concatenated_string = string + \"#\" + reverse_string;\n    std::vector<int>\
    \ prefix_function(concatenated_string.size());\n    prefix_function[0] = 0;\n\
    \    for (int i = 1; i < concatenated_string.size(); ++i) {\n        int j = prefix_function[i\
    \ - 1];\n        while (j > 0 && concatenated_string[i] != concatenated_string[j])\
    \ {\n            j = prefix_function[j - 1];\n        }\n        if (concatenated_string[i]\
    \ == concatenated_string[j]) {\n            ++j;\n        }\n        prefix_function[i]\
    \ = j;\n    }\n    return reverse_string.substr(0, string.size() - prefix_function.back())\
    \ + string;", "    std::string reversed_string = string;\n    std::reverse(reversed_string.begin(),\
    \ reversed_string.end());\n    std::string concatenated_string = string + reversed_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::string reversed_prefix = prefix;\n    std::reverse(reversed_prefix.begin(),\
    \ reversed_prefix.end());\n    return reversed_prefix + string;", "    std::string\
    \ reversed_string = string;\n    std::reverse(reversed_string.begin(), reversed_string.end());\n\
    \    std::string concatenated_string = string + reversed_string;\n    std::vector<int>\
    \ prefix_function = prefix_function_kmp(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reversed_string = string;\n   \
    \ std::reverse(reversed_string.begin(), reversed_string.end());\n    std::string\
    \ concatenated_string = string + reversed_string;\n    std::vector<int> prefix_function\
    \ = prefix_function_of(concatenated_string);\n    int longest_palindromic_suffix_length\
    \ = prefix_function.back();\n    std::string prefix = string.substr(0, string.size()\
    \ - longest_palindromic_suffix_length);\n    std::string reversed_prefix = prefix;\n\
    \    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return\
    \ reversed_prefix + string;", "    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    std::string concatenated_string = string + reverse_string;\n\
    \    std::vector<int> prefix_function = prefix_function_of(concatenated_string);\n\
    \    int longest_palindromic_suffix_length = prefix_function.back();\n    std::string\
    \ prefix = string.substr(0, string.size() - longest_palindromic_suffix_length);\n\
    \    std::reverse(prefix.begin(), prefix.end());\n    return prefix + string;"]
stop_tokens:
- "\n}"
