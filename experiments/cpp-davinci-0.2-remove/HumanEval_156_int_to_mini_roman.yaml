name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\nstd::string int_to_mini_roman(long\
  \ number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman;\n    std::vector<std::pair<int, std::string>>\
    \ numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"\
    }, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"\
    }, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for\
    \ (auto numeral : numerals) {\n        while (number >= numeral.first) {\n   \
    \         roman += numeral.second;\n            number -= numeral.first;\n   \
    \     }\n    }\n    return roman;", "  assert(number > 0 && number <= 1000);\n\
    \  std::string roman;\n  int num = number;\n  while (num >= 100) {\n    roman\
    \ += \"c\";\n    num -= 100;\n  }\n  if (num >= 90) {\n    roman += \"xc\";\n\
    \    num -= 90;\n  }\n  while (num >= 50) {\n    roman += \"l\";\n    num -= 50;\n\
    \  }\n  if (num >= 40) {\n    roman += \"xl\";\n    num -= 40;\n  }\n  while (num\
    \ >= 10) {\n    roman += \"x\";\n    num -= 10;\n  }\n  if (num >= 9) {\n    roman\
    \ += \"ix\";\n    num -= 9;\n  }\n  while (num >= 5) {\n    roman += \"v\";\n\
    \    num -= 5;\n  }\n  if (num >= 4) {\n    roman += \"iv\";\n    num -= 4;\n\
    \  }\n  while (num >= 1) {\n    roman += \"i\";\n    num -= 1;\n  }\n  return\
    \ roman;", "    std::string roman;\n    while (number >= 1000) {\n        roman\
    \ += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n      \
    \  roman += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n\
    \        roman += \"d\";\n        number -= 500;\n    }\n    if (number >= 400)\
    \ {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while (number\
    \ >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     result += roman_numerals[i];\n        }\n    }\n    return result;", " \
    \ std::string result;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int divisors[] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= divisors[i]) {\n            number -= divisors[i];\n            result\
    \ += roman_numerals[i];\n        }\n    }\n    return result;", "  assert(number\
    \ >= 1 && number <= 1000);\n  std::string result;\n  std::map<int, std::string>\
    \ roman_map = {\n    {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"}, {10, \"\
    x\"}, {40, \"xl\"}, {50, \"l\"},\n    {90, \"xc\"}, {100, \"c\"}, {400, \"cd\"\
    }, {500, \"d\"}, {900, \"cm\"}, {1000, \"m\"}\n  };\n  std::map<int, std::string>::reverse_iterator\
    \ it;\n  for (it = roman_map.rbegin(); it != roman_map.rend(); ++it) {\n    while\
    \ (number >= it->first) {\n      result += it->second;\n      number -= it->first;\n\
    \    }\n  }\n  return result;", "    std::string res;\n    while (number > 0)\
    \ {\n        if (number >= 1000) {\n            res += \"m\";\n            number\
    \ -= 1000;\n        } else if (number >= 900) {\n            res += \"cm\";\n\
    \            number -= 900;\n        } else if (number >= 500) {\n           \
    \ res += \"d\";\n            number -= 500;\n        } else if (number >= 400)\
    \ {\n            res += \"cd\";\n            number -= 400;\n        } else if\
    \ (number >= 100) {\n            res += \"c\";\n            number -= 100;\n \
    \       } else if (number >= 90) {\n            res += \"xc\";\n            number\
    \ -= 90;\n        } else if (number >= 50) {\n            res += \"l\";\n    \
    \        number -= 50;\n        } else if (number >= 40) {\n            res +=\
    \ \"xl\";\n            number -= 40;\n        } else if (number >= 10) {\n   \
    \         res += \"x\";\n            number -= 10;\n        } else if (number\
    \ >= 9) {\n            res += \"ix\";\n            number -= 9;\n        } else\
    \ if (number >= 5) {\n            res += \"v\";\n            number -= 5;\n  \
    \      } else if (number >= 4) {\n            res += \"iv\";\n            number\
    \ -= 4;\n        } else if (number >= 1) {\n            res += \"i\";\n      \
    \      number -= 1;\n        }\n    }\n    return res;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string result;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\",\
    \ \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \  int decimal_numbers[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n  for (int i = 0; i < 13; i++) {\n    while (number >= decimal_numbers[i])\
    \ {\n      number -= decimal_numbers[i];\n      result += roman_numerals[i];\n\
    \    }\n  }\n  return result;", "    std::string roman;\n    while (number >=\
    \ 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if (number\
    \ >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number\
    \ >= 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "  std::string roman;\n  std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int arabic_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++) {\n    while (number\
    \ >= arabic_numerals[i]) {\n      number -= arabic_numerals[i];\n      roman +=\
    \ roman_numerals[i];\n    }\n  }\n  return roman;", "    std::string roman;\n\
    \    while (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n\
    \        number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ roman += \"i\";\n        number -= 1;\n    }\n    return roman;", "    std::string\
    \ result;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n\
    \        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n     \
    \   {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto r : roman_numerals) {\n    while (number >= r.first) {\n\
    \      roman += r.second;\n      number -= r.first;\n    }\n  }\n  return roman;",
  "  std::string result;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto const &numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto p : roman_numerals) {\n        while\
    \ (number >= p.first) {\n            roman += p.second;\n            number -=\
    \ p.first;\n        }\n    }\n    return roman;", "    std::string result;\n \
    \   std::vector<std::pair<int, char>> roman_numerals = {\n        {1000, 'm'},\
    \ {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'},\n        {90, 'x'}, {50, 'l'},\
    \ {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'},\n        {4, 'i'}, {1, 'i'}\n    };\n\
    \    for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman = \"\";\n    while\
    \ (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n\
    \    if (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n\
    \    }\n    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n\
    \    }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -=\
    \ 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n        number\
    \ -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "  std::string roman;\n  while\
    \ (number > 0) {\n    if (number >= 1000) {\n      roman += \"m\";\n      number\
    \ -= 1000;\n    } else if (number >= 900) {\n      roman += \"cm\";\n      number\
    \ -= 900;\n    } else if (number >= 500) {\n      roman += \"d\";\n      number\
    \ -= 500;\n    } else if (number >= 400) {\n      roman += \"cd\";\n      number\
    \ -= 400;\n    } else if (number >= 100) {\n      roman += \"c\";\n      number\
    \ -= 100;\n    } else if (number >= 90) {\n      roman += \"xc\";\n      number\
    \ -= 90;\n    } else if (number >= 50) {\n      roman += \"l\";\n      number\
    \ -= 50;\n    } else if (number >= 40) {\n      roman += \"xl\";\n      number\
    \ -= 40;\n    } else if (number >= 10) {\n      roman += \"x\";\n      number\
    \ -= 10;\n    } else if (number >= 9) {\n      roman += \"ix\";\n      number\
    \ -= 9;\n    } else if (number >= 5) {\n      roman += \"v\";\n      number -=\
    \ 5;\n    } else if (number >= 4) {\n      roman += \"iv\";\n      number -= 4;\n\
    \    } else if (number >= 1) {\n      roman += \"i\";\n      number -= 1;\n  \
    \  }\n  }\n  return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result = \"\";\n    std::string roman_numerals[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= values[i])\
    \ {\n            number -= values[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    int num =\
    \ number;\n    int i = 0;\n    while (num > 0) {\n        if (num >= 1000) {\n\
    \            roman += \"m\";\n            num -= 1000;\n        } else if (num\
    \ >= 900) {\n            roman += \"cm\";\n            num -= 900;\n        }\
    \ else if (num >= 500) {\n            roman += \"d\";\n            num -= 500;\n\
    \        } else if (num >= 400) {\n            roman += \"cd\";\n            num\
    \ -= 400;\n        } else if (num >= 100) {\n            roman += \"c\";\n   \
    \         num -= 100;\n        } else if (num >= 90) {\n            roman += \"\
    xc\";\n            num -= 90;\n        } else if (num >= 50) {\n            roman\
    \ += \"l\";\n            num -= 50;\n        } else if (num >= 40) {\n       \
    \     roman += \"xl\";\n            num -= 40;\n        } else if (num >= 10)\
    \ {\n            roman += \"x\";\n            num -= 10;\n        } else if (num\
    \ >= 9) {\n            roman += \"ix\";\n            num -= 9;\n        } else\
    \ if (num >= 5) {\n            roman += \"v\";\n            num -= 5;\n      \
    \  } else if (num >= 4) {\n            roman += \"iv\";\n            num -= 4;\n\
    \        } else if (num >= 1) {\n            roman += \"i\";\n            num\
    \ -= 1;\n        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "  std::string roman;\n\
    \  std::vector<std::pair<int, std::string>> roman_numerals = {\n      {1000, \"\
    m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"\
    xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"\
    v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral : roman_numerals) {\n\
    \    while (number >= numeral.first) {\n      roman += numeral.second;\n     \
    \ number -= numeral.first;\n    }\n  }\n  return roman;", "    assert(number >\
    \ 0 && number <= 1000);\n    std::string roman_numeral;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral_pair : roman_numerals) {\n        while\
    \ (number >= roman_numeral_pair.first) {\n            roman_numeral += roman_numeral_pair.second;\n\
    \            number -= roman_numeral_pair.first;\n        }\n    }\n    return\
    \ roman_numeral;", "    std::string roman;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n       \
    \ {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"\
    xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n  \
    \      {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"\
    i\"}\n    };\n    for (auto const& roman_numeral : roman_numerals) {\n       \
    \ while (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "  std::string roman;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int\
    \ values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int\
    \ i = 0; i < 13; i++) {\n    while (number >= values[i]) {\n      number -= values[i];\n\
    \      roman += roman_numerals[i];\n    }\n  }\n  return roman;", "  std::string\
    \ result;\n  std::vector<std::pair<long, std::string>> roman_numerals = {\n  \
    \    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n\
    \      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto &pair : roman_numerals)\
    \ {\n    while (number >= pair.first) {\n      result += pair.second;\n      number\
    \ -= pair.first;\n    }\n  }\n  return result;", "  std::string roman;\n  std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n  std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n  std::string hundreds[] = {\"\", \"c\"\
    , \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n  std::string\
    \ thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n  roman += thousands[number /\
    \ 1000];\n  roman += hundreds[(number % 1000) / 100];\n  roman += tens[(number\
    \ % 100) / 10];\n  roman += ones[number % 10];\n  return roman;", "  std::string\
    \ roman;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ number > 0; i++) {\n    while (number >= decimal_numerals[i]) {\n      number\
    \ -= decimal_numerals[i];\n      roman += roman_numerals[i];\n    }\n  }\n  return\
    \ roman;", "  std::string roman;\n  while (number >= 1000) {\n    roman += \"\
    m\";\n    number -= 1000;\n  }\n  if (number >= 900) {\n    roman += \"cm\";\n\
    \    number -= 900;\n  }\n  if (number >= 500) {\n    roman += \"d\";\n    number\
    \ -= 500;\n  }\n  if (number >= 400) {\n    roman += \"cd\";\n    number -= 400;\n\
    \  }\n  while (number >= 100) {\n    roman += \"c\";\n    number -= 100;\n  }\n\
    \  if (number >= 90) {\n    roman += \"xc\";\n    number -= 90;\n  }\n  if (number\
    \ >= 50) {\n    roman += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n\
    \    roman += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    roman\
    \ += \"x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    roman += \"ix\"\
    ;\n    number -= 9;\n  }\n  if (number >= 5) {\n    roman += \"v\";\n    number\
    \ -= 5;\n  }\n  if (number >= 4) {\n    roman += \"iv\";\n    number -= 4;\n \
    \ }\n  while (number >= 1) {\n    roman += \"i\";\n    number -= 1;\n  }\n  return\
    \ roman;", "    std::string roman;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n       \
    \ {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"\
    xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n  \
    \      {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"\
    i\"}\n    };\n    for (auto p : roman_numerals) {\n        while (number >= p.first)\
    \ {\n            roman += p.second;\n            number -= p.first;\n        }\n\
    \    }\n    return roman;", "  std::string roman;\n  std::string ones[] = {\"\"\
    , \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\
    \  std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\",\
    \ \"lxx\", \"lxxx\", \"xc\"};\n  std::string hundreds[] = {\"\", \"c\", \"cc\"\
    , \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n  std::string thousands[]\
    \ = {\"\", \"m\", \"mm\", \"mmm\"};\n  roman += thousands[number / 1000];\n  roman\
    \ += hundreds[(number % 1000) / 100];\n  roman += tens[(number % 100) / 10];\n\
    \  roman += ones[number % 10];\n  return roman;", "    std::string roman = \"\"\
    ;\n    while (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n\
    \        number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ roman += \"i\";\n        number -= 1;\n    }\n    return roman;", "    std::string\
    \ roman_numeral;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  \
    \  int divisors[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= divisors[i]) {\n\
    \            number -= divisors[i];\n            roman_numeral += roman_numerals[i];\n\
    \        }\n    }\n    return roman_numeral;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> romans = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"\
    }, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"\
    }, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n\
    \    for (auto it = romans.begin(); it != romans.end(); ++it) {\n        while\
    \ (number >= it->first) {\n            roman += it->second;\n            number\
    \ -= it->first;\n        }\n    }\n    return roman;", "  std::string result;\n\
    \  std::vector<std::pair<long, std::string>> roman_numerals = {\n      {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90,\
    \ \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5,\
    \ \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral : roman_numerals)\
    \ {\n    while (number >= roman_numeral.first) {\n      result += roman_numeral.second;\n\
    \      number -= roman_numeral.first;\n    }\n  }\n  return result;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n  \
    \      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto numeral\
    \ : roman_numerals) {\n        while (number >= numeral.first) {\n           \
    \ roman += numeral.second;\n            number -= numeral.first;\n        }\n\
    \    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman_numeral = \"\";\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto roman_numeral_pair : roman_numerals) {\n        while (number\
    \ >= roman_numeral_pair.first) {\n            roman_numeral += roman_numeral_pair.second;\n\
    \            number -= roman_numeral_pair.first;\n        }\n    }\n    return\
    \ roman_numeral;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    assert(number > 0 && number <= 1000);\n\
    \    std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman_numeral;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto pair : roman_numerals) {\n    while (number >= pair.first)\
    \ {\n      roman_numeral += pair.second;\n      number -= pair.first;\n    }\n\
    \  }\n  return roman_numeral;", "    std::string roman;\n    std::string ones[]\
    \ = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n   \
    \ std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    int num = number;\n    int digit = num / 100;\n    num %= 100;\n\
    \    switch (digit) {\n        case 1: roman += \"c\"; break;\n        case 2:\
    \ roman += \"cc\"; break;\n        case 3: roman += \"ccc\"; break;\n        case\
    \ 4: roman += \"cd\"; break;\n        case 5: roman += \"d\"; break;\n       \
    \ case 6: roman += \"dc\"; break;\n        case 7: roman += \"dcc\"; break;\n\
    \        case 8: roman += \"dccc\"; break;\n        case 9: roman += \"cm\"; break;\n\
    \    }\n    digit = num / 10;\n    num %= 10;\n    switch (digit) {\n        case\
    \ 1: roman += \"x\"; break;\n        case 2: roman += \"xx\"; break;\n       \
    \ case 3: roman += \"xxx\"; break;\n        case 4: roman += \"xl\"; break;\n\
    \        case 5: roman += \"l\"; break;\n        case 6: roman += \"lx\"; break;\n\
    \        case 7: roman += \"lxx\"; break;\n        case 8: roman += \"lxxx\";\
    \ break;\n        case 9: roman += \"xc\"; break;\n    }\n    digit = num;\n \
    \   switch (digit) {\n        case 1: roman += \"i\"; break;\n        case 2:\
    \ roman += \"ii\"; break;\n        case 3: roman += \"iii\"; break;\n        case\
    \ 4: roman += \"iv\"; break;\n        case 5: roman += \"v\"; break;\n       \
    \ case 6: roman += \"vi\"; break;\n        case 7: roman += \"vii\"; break;\n\
    \        case 8: roman += \"viii\"; break;\n        case 9: roman += \"ix\"; break;\n\
    \    }\n    return roman;", "  std::string result;\n  std::vector<std::pair<long,\
    \ std::string>> numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"\
    }, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"\
    }, {10, \"x\"},  {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n\
    \  for (auto numeral : numerals) {\n    while (number >= numeral.first) {\n  \
    \    result += numeral.second;\n      number -= numeral.first;\n    }\n  }\n \
    \ return result;", "    std::string roman;\n    std::string roman_numerals[] =\
    \ {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            roman += roman_numerals[i];\n        }\n    }\n \
    \   return roman;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto numeral : roman_numerals) {\n    while (number >= numeral.first) {\n\
    \      roman += numeral.second;\n      number -= numeral.first;\n    }\n  }\n\
    \  return roman;", "    std::string roman = \"\";\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1, \"i\"},\n        {4, \"iv\"},\n\
    \        {5, \"v\"},\n        {9, \"ix\"},\n        {10, \"x\"},\n        {40,\
    \ \"xl\"},\n        {50, \"l\"},\n        {90, \"xc\"},\n        {100, \"c\"},\n\
    \        {400, \"cd\"},\n        {500, \"d\"},\n        {900, \"cm\"},\n     \
    \   {1000, \"m\"}\n    };\n    for (int i = roman_numerals.size() - 1; i >= 0;\
    \ i--) {\n        while (number >= roman_numerals[i].first) {\n            roman\
    \ += roman_numerals[i].second;\n            number -= roman_numerals[i].first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "  std::string roman;\n  while\
    \ (number >= 1000) {\n    roman += \"m\";\n    number -= 1000;\n  }\n  if (number\
    \ >= 900) {\n    roman += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500)\
    \ {\n    roman += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n  \
    \  roman += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    roman\
    \ += \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\"\
    ;\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number\
    \ -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n\
    \  }\n  while (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n\
    \  if (number >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number\
    \ >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n\
    \    roman += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman\
    \ += \"i\";\n    number -= 1;\n  }\n  return roman;", "  std::string result;\n\
    \  std::vector<std::pair<long, char>> roman_numerals = {\n      {1000, 'm'}, {900,\
    \ 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'},\n      {90, 'x'},  {50, 'l'},  {40,\
    \ 'x'},  {10, 'x'},  {9, 'i'},\n      {5, 'v'},   {4, 'i'},   {1, 'i'}};\n  for\
    \ (auto roman_numeral : roman_numerals) {\n    while (number >= roman_numeral.first)\
    \ {\n      result += roman_numeral.second;\n      number -= roman_numeral.first;\n\
    \    }\n  }\n  return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string roman_numeral;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_numeral_pair : roman_numerals)\
    \ {\n        while (number >= roman_numeral_pair.first) {\n            roman_numeral\
    \ += roman_numeral_pair.second;\n            number -= roman_numeral_pair.first;\n\
    \        }\n    }\n    return roman_numeral;", "    std::string roman;\n    std::string\
    \ roman_numerals[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int values[13] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    if (number < 1 || number > 1000) {\n        return\
    \ roman;\n    }\n    while (number >= 1000) {\n        roman += \"m\";\n     \
    \   number -= 1000;\n    }\n    while (number >= 900) {\n        roman += \"cm\"\
    ;\n        number -= 900;\n    }\n    while (number >= 500) {\n        roman +=\
    \ \"d\";\n        number -= 500;\n    }\n    while (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    while (number >=\
    \ 90) {\n        roman += \"xc\";\n        number -= 90;\n    }\n    while (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    while (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  while (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n   \
    \ }\n    while (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n\
    \    }\n    while (number >= 4) {\n        roman += \"iv\";\n        number -=\
    \ 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "  std::string roman;\n  while (number >=\
    \ 1000) {\n    roman += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900)\
    \ {\n    roman += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n \
    \   roman += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    roman\
    \ += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    roman +=\
    \ \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\"\
    ;\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number\
    \ -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n\
    \  }\n  while (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n\
    \  if (number >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number\
    \ >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n\
    \    roman += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman\
    \ += \"i\";\n    number -= 1;\n  }\n  return roman;", "    std::string result\
    \ = \"\";\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n\
    \        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n     \
    \   {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string roman_numeral;\n  std::string roman_numerals[] = {\"m\", \"cm\",\
    \ \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n  int divisors[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n  for (int i = 0; i < 13; i++) {\n    while (number >= divisors[i]) {\n\
    \      number -= divisors[i];\n      roman_numeral += roman_numerals[i];\n   \
    \ }\n  }\n  return roman_numeral;", "  std::string result;\n  std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++) {\n    while (number >=\
    \ values[i]) {\n      number -= values[i];\n      result += roman_numerals[i];\n\
    \    }\n  }\n  return result;", "    std::string roman;\n    std::string ones[]\
    \ = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n   \
    \ std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; number > 0; i++) {\n        while (number >= decimal_numerals[i]) {\n   \
    \         number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::map<int,\
    \ std::string> roman_numerals = {\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"\
    }, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"}, {50, \"l\"},\n        {90, \"xc\"},\
    \ {100, \"c\"}, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"}, {1000, \"m\"}\n  \
    \  };\n    std::map<int, std::string>::reverse_iterator it;\n    for (it = roman_numerals.rbegin();\
    \ it != roman_numerals.rend(); ++it) {\n        while (number >= it->first) {\n\
    \            roman += it->second;\n            number -= it->first;\n        }\n\
    \    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto& roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "  std::string roman;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral\
    \ : roman_numerals) {\n    while (number >= numeral.first) {\n      roman += numeral.second;\n\
    \      number -= numeral.first;\n    }\n  }\n  return roman;", "  std::string\
    \ result;\n  std::vector<std::pair<int, std::string>> roman_numerals = {\n   \
    \   {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"\
    },\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "    std::string result = \"\";\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     result += roman_numerals[i];\n        }\n    }\n    return result;", " \
    \ std::string roman;\n  while (number >= 1000) {\n    roman += \"m\";\n    number\
    \ -= 1000;\n  }\n  if (number >= 900) {\n    roman += \"cm\";\n    number -= 900;\n\
    \  }\n  if (number >= 500) {\n    roman += \"d\";\n    number -= 500;\n  }\n \
    \ if (number >= 400) {\n    roman += \"cd\";\n    number -= 400;\n  }\n  while\
    \ (number >= 100) {\n    roman += \"c\";\n    number -= 100;\n  }\n  if (number\
    \ >= 90) {\n    roman += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50)\
    \ {\n    roman += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    roman\
    \ += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    roman += \"\
    x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    roman += \"ix\";\n   \
    \ number -= 9;\n  }\n  if (number >= 5) {\n    roman += \"v\";\n    number -=\
    \ 5;\n  }\n  if (number >= 4) {\n    roman += \"iv\";\n    number -= 4;\n  }\n\
    \  while (number >= 1) {\n    roman += \"i\";\n    number -= 1;\n  }\n  return\
    \ roman;", "    std::string roman;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for\
    \ (auto const &[value, numeral] : roman_numerals) {\n        while (number >=\
    \ value) {\n            roman += numeral;\n            number -= value;\n    \
    \    }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto rn : roman_numerals) {\n        while\
    \ (number >= rn.first) {\n            roman += rn.second;\n            number\
    \ -= rn.first;\n        }\n    }\n    return roman;", "    std::string result;\n\
    \    std::vector<std::pair<long, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  while (number\
    \ > 0) {\n    if (number >= 1000) {\n      roman += \"m\";\n      number -= 1000;\n\
    \    } else if (number >= 900) {\n      roman += \"cm\";\n      number -= 900;\n\
    \    } else if (number >= 500) {\n      roman += \"d\";\n      number -= 500;\n\
    \    } else if (number >= 400) {\n      roman += \"cd\";\n      number -= 400;\n\
    \    } else if (number >= 100) {\n      roman += \"c\";\n      number -= 100;\n\
    \    } else if (number >= 90) {\n      roman += \"xc\";\n      number -= 90;\n\
    \    } else if (number >= 50) {\n      roman += \"l\";\n      number -= 50;\n\
    \    } else if (number >= 40) {\n      roman += \"xl\";\n      number -= 40;\n\
    \    } else if (number >= 10) {\n      roman += \"x\";\n      number -= 10;\n\
    \    } else if (number >= 9) {\n      roman += \"ix\";\n      number -= 9;\n \
    \   } else if (number >= 5) {\n      roman += \"v\";\n      number -= 5;\n   \
    \ } else if (number >= 4) {\n      roman += \"iv\";\n      number -= 4;\n    }\
    \ else if (number >= 1) {\n      roman += \"i\";\n      number -= 1;\n    }\n\
    \  }\n  return roman;", "  std::string result = \"\";\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      result += numeral.second;\n      number -= numeral.first;\n    }\n\
    \  }\n  return result;", "    std::string roman;\n    while (number >= 1000) {\n\
    \        roman += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900)\
    \ {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number >=\
    \ 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "  std::string result;\n  std::vector<std::pair<int,\
    \ char>> roman_numerals = {\n      {1000, 'm'}, {900, 'c'}, {500, 'd'}, {400,\
    \ 'c'}, {100, 'c'},\n      {90, 'x'},  {50, 'l'},  {40, 'x'},  {10, 'x'},  {9,\
    \ 'i'},\n      {5, 'v'},   {4, 'i'},   {1, 'i'}};\n  for (auto roman_numeral :\
    \ roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "    std::string result;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto p : roman_numerals) {\n        while (number >= p.first) {\n  \
    \          result += p.second;\n            number -= p.first;\n        }\n  \
    \  }\n    return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto p : roman_numerals) {\n        while (number >= p.first) {\n    \
    \        result += p.second;\n            number -= p.first;\n        }\n    }\n\
    \    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto p : roman_numerals) {\n        while (number >= p.first)\
    \ {\n            roman += p.second;\n            number -= p.first;\n        }\n\
    \    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n\
    \        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  while (number\
    \ >= 1000) {\n    roman += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900)\
    \ {\n    roman += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n \
    \   roman += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    roman\
    \ += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    roman +=\
    \ \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\"\
    ;\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number\
    \ -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n\
    \  }\n  while (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n\
    \  if (number >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number\
    \ >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n\
    \    roman += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman\
    \ += \"i\";\n    number -= 1;\n  }\n  return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; number > 0; i++) {\n        while (number >= decimal_numerals[i]) {\n   \
    \         number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "  std::string\
    \ roman;\n  while (number >= 1000) {\n    roman += \"m\";\n    number -= 1000;\n\
    \  }\n  if (number >= 900) {\n    roman += \"cm\";\n    number -= 900;\n  }\n\
    \  if (number >= 500) {\n    roman += \"d\";\n    number -= 500;\n  }\n  if (number\
    \ >= 400) {\n    roman += \"cd\";\n    number -= 400;\n  }\n  while (number >=\
    \ 100) {\n    roman += \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n\
    \    roman += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman\
    \ += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\"\
    ;\n    number -= 40;\n  }\n  while (number >= 10) {\n    roman += \"x\";\n   \
    \ number -= 10;\n  }\n  if (number >= 9) {\n    roman += \"ix\";\n    number -=\
    \ 9;\n  }\n  if (number >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n\
    \  if (number >= 4) {\n    roman += \"iv\";\n    number -= 4;\n  }\n  while (number\
    \ >= 1) {\n    roman += \"i\";\n    number -= 1;\n  }\n  return roman;", "   \
    \ std::string result;\n    std::vector<std::pair<long, char>> roman_numerals =\
    \ {\n        {1000, 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'},\n  \
    \      {90, 'x'}, {50, 'l'}, {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'},\n     \
    \   {4, 'i'}, {1, 'i'}\n    };\n    for (auto roman_numeral : roman_numerals)\
    \ {\n        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "  std::string result;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "    std::string roman;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto& roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     roman += roman_numerals[i];\n        }\n    }\n    return roman;", "   \
    \ std::string roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_values[i])\
    \ {\n            number -= decimal_values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "  std::string roman_numeral = \"\";\n\
    \  std::vector<std::string> roman_numerals = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  std::vector<int>\
    \ numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    while (number >= numbers[i]) {\n    \
    \  roman_numeral += roman_numerals[i];\n      number -= numbers[i];\n    }\n \
    \ }\n  return roman_numeral;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string result;\n  std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto roman_numeral : roman_numerals) {\n    while (number >=\
    \ roman_numeral.first) {\n      result += roman_numeral.second;\n      number\
    \ -= roman_numeral.first;\n    }\n  }\n  return result;", "    std::string roman_numeral;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_pair : roman_numerals)\
    \ {\n        while (number >= roman_pair.first) {\n            roman_numeral +=\
    \ roman_pair.second;\n            number -= roman_pair.first;\n        }\n   \
    \ }\n    return roman_numeral;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"},\n    };\n    for (auto const& roman_numeral : roman_numerals)\
    \ {\n        while (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "  std::string roman = \"\";\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral\
    \ : roman_numerals) {\n    while (number >= numeral.first) {\n      roman += numeral.second;\n\
    \      number -= numeral.first;\n    }\n  }\n  return roman;", "  std::string\
    \ roman;\n  std::vector<std::pair<long, std::string>> roman_numerals = {\n   \
    \   {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n\
    \      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto const &numeral\
    \ : roman_numerals) {\n    while (number >= numeral.first) {\n      roman += numeral.second;\n\
    \      number -= numeral.first;\n    }\n  }\n  return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n      \
    \  {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string roman_numeral;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto roman_numeral_pair : roman_numerals) {\n    while (number\
    \ >= roman_numeral_pair.first) {\n      roman_numeral += roman_numeral_pair.second;\n\
    \      number -= roman_numeral_pair.first;\n    }\n  }\n  return roman_numeral;",
  "    std::string result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int divisors[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= divisors[i]) {\n\
    \            number -= divisors[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            result += roman_numerals[i];\n \
    \       }\n    }\n    return result;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[4][10] = {\n        {\"\"\
    , \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n\
    \        {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\"\
    , \"xc\"},\n        {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"},\n        {\"\", \"m\", \"mm\", \"mmm\", \"\", \"\", \"\"\
    , \"\", \"\", \"\"}\n    };\n    int scale = 0;\n    while (number > 0) {\n  \
    \      int digit = number % 10;\n        roman = roman_numerals[scale][digit]\
    \ + roman;\n        number /= 10;\n        scale++;\n    }\n    return roman;",
  "    std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int divisors[] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= divisors[i]) {\n            number -= divisors[i];\n            result\
    \ += roman_numerals[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::map<int, std::string> roman_numerals = {\n        {1, \"i\"\
    },\n        {4, \"iv\"},\n        {5, \"v\"},\n        {9, \"ix\"},\n        {10,\
    \ \"x\"},\n        {40, \"xl\"},\n        {50, \"l\"},\n        {90, \"xc\"},\n\
    \        {100, \"c\"},\n        {400, \"cd\"},\n        {500, \"d\"},\n      \
    \  {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    std::map<int, std::string>::reverse_iterator\
    \ it;\n    for (it = roman_numerals.rbegin(); it != roman_numerals.rend(); ++it)\
    \ {\n        while (number >= it->first) {\n            roman += it->second;\n\
    \            number -= it->first;\n        }\n    }\n    return roman;", "   \
    \ std::string roman_numeral;\n    while (number >= 1000) {\n        roman_numeral\
    \ += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n      \
    \  roman_numeral += \"cm\";\n        number -= 900;\n    }\n    if (number >=\
    \ 500) {\n        roman_numeral += \"d\";\n        number -= 500;\n    }\n   \
    \ if (number >= 400) {\n        roman_numeral += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman_numeral += \"c\";\n       \
    \ number -= 100;\n    }\n    if (number >= 90) {\n        roman_numeral += \"\
    xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman_numeral\
    \ += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman_numeral\
    \ += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n     \
    \   roman_numeral += \"x\";\n        number -= 10;\n    }\n    if (number >= 9)\
    \ {\n        roman_numeral += \"ix\";\n        number -= 9;\n    }\n    if (number\
    \ >= 5) {\n        roman_numeral += \"v\";\n        number -= 5;\n    }\n    if\
    \ (number >= 4) {\n        roman_numeral += \"iv\";\n        number -= 4;\n  \
    \  }\n    while (number >= 1) {\n        roman_numeral += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman_numeral;", "  std::string roman;\n  while (number\
    \ > 0) {\n    if (number >= 1000) {\n      roman += \"m\";\n      number -= 1000;\n\
    \    } else if (number >= 900) {\n      roman += \"cm\";\n      number -= 900;\n\
    \    } else if (number >= 500) {\n      roman += \"d\";\n      number -= 500;\n\
    \    } else if (number >= 400) {\n      roman += \"cd\";\n      number -= 400;\n\
    \    } else if (number >= 100) {\n      roman += \"c\";\n      number -= 100;\n\
    \    } else if (number >= 90) {\n      roman += \"xc\";\n      number -= 90;\n\
    \    } else if (number >= 50) {\n      roman += \"l\";\n      number -= 50;\n\
    \    } else if (number >= 40) {\n      roman += \"xl\";\n      number -= 40;\n\
    \    } else if (number >= 10) {\n      roman += \"x\";\n      number -= 10;\n\
    \    } else if (number >= 9) {\n      roman += \"ix\";\n      number -= 9;\n \
    \   } else if (number >= 5) {\n      roman += \"v\";\n      number -= 5;\n   \
    \ } else if (number >= 4) {\n      roman += \"iv\";\n      number -= 4;\n    }\
    \ else if (number >= 1) {\n      roman += \"i\";\n      number -= 1;\n    }\n\
    \  }\n  return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {{1000, \"m\"},\n                           \
    \                                     {900, \"cm\"},\n                       \
    \                                         {500, \"d\"},\n                    \
    \                                            {400, \"cd\"},\n                \
    \                                                {100, \"c\"},\n             \
    \                                                   {90, \"xc\"},\n          \
    \                                                      {50, \"l\"},\n        \
    \                                                        {40, \"xl\"},\n     \
    \                                                           {10, \"x\"},\n   \
    \                                                             {9, \"ix\"},\n \
    \                                                               {5, \"v\"},\n\
    \                                                                {4, \"iv\"},\n\
    \                                                                {1, \"i\"}};\n\
    \    for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string result;\n  std::map<int,\
    \ std::string> roman_map = {\n    {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"\
    ix\"}, {10, \"x\"}, {40, \"xl\"}, {50, \"l\"},\n    {90, \"xc\"}, {100, \"c\"\
    }, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"}, {1000, \"m\"}\n  };\n  std::map<int,\
    \ std::string>::reverse_iterator it;\n  for (it = roman_map.rbegin(); it != roman_map.rend();\
    \ ++it) {\n    while (number >= it->first) {\n      result += it->second;\n  \
    \    number -= it->first;\n    }\n  }\n  return result;", "    std::string roman;\n\
    \    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_values[13]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_values[i]) {\n         \
    \   number -= decimal_values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto& roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "  std::string roman;\n  std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto it\
    \ = roman_numerals.begin(); it != roman_numerals.end(); ++it) {\n    while (number\
    \ >= it->first) {\n      roman += it->second;\n      number -= it->first;\n  \
    \  }\n  }\n  return roman;", "    std::string roman;\n    while (number >= 1000)\
    \ {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if (number >=\
    \ 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number\
    \ >= 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "    std::string roman;\n    std::string ones[]\
    \ = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n   \
    \ std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "  std::string\
    \ roman;\n  std::vector<std::pair<long, std::string>> roman_numerals = {\n   \
    \   {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n\
    \      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral : roman_numerals)\
    \ {\n    while (number >= numeral.first) {\n      roman += numeral.second;\n \
    \     number -= numeral.first;\n    }\n  }\n  return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto numeral : roman_numerals)\
    \ {\n        while (number >= numeral.first) {\n            roman += numeral.second;\n\
    \            number -= numeral.first;\n        }\n    }\n    return roman;", " \
    \   std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto numeral :\
    \ roman_numerals) {\n        while (number >= numeral.first) {\n            roman\
    \ += numeral.second;\n            number -= numeral.first;\n        }\n    }\n\
    \    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string result;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto const& roman_numeral : roman_numerals) {\n        while (number >=\
    \ roman_numeral.first) {\n            roman += roman_numeral.second;\n       \
    \     number -= roman_numeral.first;\n        }\n    }\n    return roman;", " \
    \   std::string result;\n    while (number >= 1000) {\n        result += \"m\"\
    ;\n        number -= 1000;\n    }\n    if (number >= 900) {\n        result +=\
    \ \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        result\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ result += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100)\
    \ {\n        result += \"c\";\n        number -= 100;\n    }\n    if (number >=\
    \ 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n \
    \   if (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n   \
    \ }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n\
    \    }\n    return result;", "  std::string roman;\n  std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n      {1, \"i\"}, {4, \"iv\"}, {5, \"v\"},\
    \ {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n      {50, \"l\"}, {90, \"xc\"}, {100,\
    \ \"c\"}, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"},\n      {1000, \"m\"}};\n\
    \  for (auto it = roman_numerals.rbegin(); it != roman_numerals.rend(); ++it)\
    \ {\n    while (number >= it->first) {\n      roman += it->second;\n      number\
    \ -= it->first;\n    }\n  }\n  return roman;", "    std::string roman_numeral;\n\
    \    std::string roman_digits[4][10] = {\n        {\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n        {\"\", \"x\", \"\
    xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n        {\"\
    \", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n\
    \        {\"\", \"m\", \"mm\", \"mmm\"}\n    };\n    int digit = 0;\n    while\
    \ (number > 0) {\n        int digit_value = number % 10;\n        roman_numeral\
    \ = roman_digits[digit][digit_value] + roman_numeral;\n        digit++;\n    \
    \    number /= 10;\n    }\n    return roman_numeral;", "    std::string roman;\n\
    \    while (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n\
    \        number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ roman += \"i\";\n        number -= 1;\n    }\n    return roman;", "  std::string\
    \ roman;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ i < 13; i++) {\n    while (number >= values[i]) {\n      number -= values[i];\n\
    \      roman += roman_numerals[i];\n    }\n  }\n  return roman;", "  std::string\
    \ roman;\n  std::vector<std::pair<int, std::string>> roman_numerals = {\n    \
    \  {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n\
    \      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral : roman_numerals)\
    \ {\n    while (number >= numeral.first) {\n      roman += numeral.second;\n \
    \     number -= numeral.first;\n    }\n  }\n  return roman;", "    std::string\
    \ result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_values[i]) {\n         \
    \   number -= decimal_values[i];\n            result += roman_numerals[i];\n \
    \       }\n    }\n    return result;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto pair : roman_numerals) {\n        while\
    \ (number >= pair.first) {\n            result += pair.second;\n            number\
    \ -= pair.first;\n        }\n    }\n    return result;", "  std::string roman_numeral;\n\
    \  std::vector<std::pair<long, std::string>> roman_numerals = {\n      {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90,\
    \ \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5,\
    \ \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral_pair : roman_numerals)\
    \ {\n    while (number >= roman_numeral_pair.first) {\n      roman_numeral +=\
    \ roman_numeral_pair.second;\n      number -= roman_numeral_pair.first;\n    }\n\
    \  }\n  return roman_numeral;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto pair : roman_numerals) {\n        while (number >= pair.first)\
    \ {\n            roman += pair.second;\n            number -= pair.first;\n  \
    \      }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto p :\
    \ roman_numerals) {\n        while (number >= p.first) {\n            roman +=\
    \ p.second;\n            number -= p.first;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto numeral :\
    \ roman_numerals) {\n        while (number >= numeral.first) {\n            roman\
    \ += numeral.second;\n            number -= numeral.first;\n        }\n    }\n\
    \    return roman;", "    std::string roman;\n    std::vector<std::pair<int, char>>\
    \ roman_numerals = {{1000, 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'},\
    \ {90, 'x'}, {50, 'l'}, {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'}, {4, 'i'}, {1,\
    \ 'i'}};\n    for (auto numeral : roman_numerals) {\n        while (number >=\
    \ numeral.first) {\n            roman += numeral.second;\n            number -=\
    \ numeral.first;\n        }\n    }\n    return roman;", "  std::string result;\n\
    \  std::vector<std::pair<long, std::string>> numerals = {\n      {1000, \"m\"\
    }, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"\
    },   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"\
    },     {4, \"iv\"},   {1, \"i\"}};\n  for (auto numeral : numerals) {\n    while\
    \ (number >= numeral.first) {\n      result += numeral.second;\n      number -=\
    \ numeral.first;\n    }\n  }\n  return result;", "    std::string roman;\n   \
    \ while (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n\
    \        number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ roman += \"i\";\n        number -= 1;\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n  \
    \      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto &pair : roman_numerals) {\n        while (number >= pair.first)\
    \ {\n            roman += pair.second;\n            number -= pair.first;\n  \
    \      }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ char>> roman_numerals = {\n        {1000, 'm'}, {900, 'c'}, {500, 'd'}, {400,\
    \ 'c'}, {100, 'c'},\n        {90, 'x'}, {50, 'l'}, {40, 'x'}, {10, 'x'}, {9, 'i'},\
    \ {5, 'v'},\n        {4, 'i'}, {1, 'i'}\n    };\n    for (auto roman_numeral :\
    \ roman_numerals) {\n        while (number >= roman_numeral.first) {\n       \
    \     result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}};\n    for (auto p : roman_numerals) {\n    \
    \    while (number >= p.first) {\n            roman += p.second;\n           \
    \ number -= p.first;\n        }\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[13]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            roman += roman_numerals[i];\n        }\n    }\n \
    \   return roman;", "  std::string roman;\n  std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n\
    \  for (auto numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman;\n    while (number > 0) {\n   \
    \     if (number >= 1000) {\n            roman += \"m\";\n            number -=\
    \ 1000;\n        } else if (number >= 900) {\n            roman += \"cm\";\n \
    \           number -= 900;\n        } else if (number >= 500) {\n            roman\
    \ += \"d\";\n            number -= 500;\n        } else if (number >= 400) {\n\
    \            roman += \"cd\";\n            number -= 400;\n        } else if (number\
    \ >= 100) {\n            roman += \"c\";\n            number -= 100;\n       \
    \ } else if (number >= 90) {\n            roman += \"xc\";\n            number\
    \ -= 90;\n        } else if (number >= 50) {\n            roman += \"l\";\n  \
    \          number -= 50;\n        } else if (number >= 40) {\n            roman\
    \ += \"xl\";\n            number -= 40;\n        } else if (number >= 10) {\n\
    \            roman += \"x\";\n            number -= 10;\n        } else if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        } else\
    \ if (number >= 5) {\n            roman += \"v\";\n            number -= 5;\n\
    \        } else if (number >= 4) {\n            roman += \"iv\";\n           \
    \ number -= 4;\n        } else if (number >= 1) {\n            roman += \"i\"\
    ;\n            number -= 1;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::vector<std::pair<long, std::string>> numerals = {\n      \
    \  {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto numeral\
    \ : numerals) {\n        while (number >= numeral.first) {\n            result\
    \ += numeral.second;\n            number -= numeral.first;\n        }\n    }\n\
    \    return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[13] = {\"M\", \"CM\", \"\
    D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\
    };\n    int values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto const &[arabic, roman_numeral] : roman_numerals) {\n \
    \   while (number >= arabic) {\n      roman += roman_numeral;\n      number -=\
    \ arabic;\n    }\n  }\n  return roman;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman += thousands[number / 1000];\n    roman += hundreds[(number % 1000)\
    \ / 100];\n    roman += tens[(number % 100) / 10];\n    roman += ones[number %\
    \ 10];\n    return roman;", "  std::string roman;\n  std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int arabic_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++) {\n    while (number\
    \ >= arabic_numerals[i]) {\n      number -= arabic_numerals[i];\n      roman +=\
    \ roman_numerals[i];\n    }\n  }\n  return roman;", "    assert(number > 0 &&\
    \ number <= 1000);\n    std::string result = \"\";\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "  std::string roman_numeral;\n  std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto p : roman_numerals) {\n    while (number >= p.first) {\n\
    \      roman_numeral += p.second;\n      number -= p.first;\n    }\n  }\n  return\
    \ roman_numeral;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n       \
    \ {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"\
    xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n  \
    \      {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman = \"\";\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<int,\
    \ std::string>> numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"\
    }, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"\
    }, {10, \"x\"},  {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n\
    \  for (auto numeral : numerals) {\n    while (number >= numeral.first) {\n  \
    \    roman += numeral.second;\n      number -= numeral.first;\n    }\n  }\n  return\
    \ roman;", "  std::string roman_numeral;\n  std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto roman_numeral_pair : roman_numerals) {\n    while (number >= roman_numeral_pair.first)\
    \ {\n      roman_numeral += roman_numeral_pair.second;\n      number -= roman_numeral_pair.first;\n\
    \    }\n  }\n  return roman_numeral;", "  // your code here\n  std::string roman;\n\
    \  int num = number;\n  int x = num/1000;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('m');\n\
    \  }\n  num = num%1000;\n  x = num/500;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('d');\n\
    \  }\n  num = num%500;\n  x = num/100;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('c');\n\
    \  }\n  num = num%100;\n  x = num/50;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('l');\n\
    \  }\n  num = num%50;\n  x = num/10;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('x');\n\
    \  }\n  num = num%10;\n  x = num/5;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('v');\n\
    \  }\n  num = num%5;\n  x = num/1;\n  for(int i=0;i<x;i++)\n  {\n    roman.push_back('i');\n\
    \  }\n  return roman;", "  std::string result;\n  std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto numeral : roman_numerals) {\n    while (number >= numeral.first) {\n\
    \      result += numeral.second;\n      number -= numeral.first;\n    }\n  }\n\
    \  return result;", "  std::string roman;\n  while (number > 0) {\n    if (number\
    \ >= 1000) {\n      roman += \"m\";\n      number -= 1000;\n    } else if (number\
    \ >= 900) {\n      roman += \"cm\";\n      number -= 900;\n    } else if (number\
    \ >= 500) {\n      roman += \"d\";\n      number -= 500;\n    } else if (number\
    \ >= 400) {\n      roman += \"cd\";\n      number -= 400;\n    } else if (number\
    \ >= 100) {\n      roman += \"c\";\n      number -= 100;\n    } else if (number\
    \ >= 90) {\n      roman += \"xc\";\n      number -= 90;\n    } else if (number\
    \ >= 50) {\n      roman += \"l\";\n      number -= 50;\n    } else if (number\
    \ >= 40) {\n      roman += \"xl\";\n      number -= 40;\n    } else if (number\
    \ >= 10) {\n      roman += \"x\";\n      number -= 10;\n    } else if (number\
    \ >= 9) {\n      roman += \"ix\";\n      number -= 9;\n    } else if (number >=\
    \ 5) {\n      roman += \"v\";\n      number -= 5;\n    } else if (number >= 4)\
    \ {\n      roman += \"iv\";\n      number -= 4;\n    } else if (number >= 1) {\n\
    \      roman += \"i\";\n      number -= 1;\n    }\n  }\n  return roman;", "  \
    \  std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto numeral :\
    \ roman_numerals) {\n        while (number >= numeral.first) {\n            roman\
    \ += numeral.second;\n            number -= numeral.first;\n        }\n    }\n\
    \    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "  std::string roman;\n  while (number >= 1000) {\n    roman += \"m\";\n    number\
    \ -= 1000;\n  }\n  if (number >= 900) {\n    roman += \"cm\";\n    number -= 900;\n\
    \  }\n  if (number >= 500) {\n    roman += \"d\";\n    number -= 500;\n  }\n \
    \ if (number >= 400) {\n    roman += \"cd\";\n    number -= 400;\n  }\n  while\
    \ (number >= 100) {\n    roman += \"c\";\n    number -= 100;\n  }\n  if (number\
    \ >= 90) {\n    roman += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50)\
    \ {\n    roman += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    roman\
    \ += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    roman += \"\
    x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    roman += \"ix\";\n   \
    \ number -= 9;\n  }\n  if (number >= 5) {\n    roman += \"v\";\n    number -=\
    \ 5;\n  }\n  if (number >= 4) {\n    roman += \"iv\";\n    number -= 4;\n  }\n\
    \  while (number >= 1) {\n    roman += \"i\";\n    number -= 1;\n  }\n  return\
    \ roman;", "    std::string roman;\n    std::vector<std::pair<long, std::string>>\
    \ numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500,\
    \ \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"\
    },\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n      \
    \  {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"\
    },\n    };\n    for (auto numeral : numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman;\n    while (number >= 1000) {\n\
    \        roman += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900)\
    \ {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number >=\
    \ 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::vector<std::pair<long, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto& rn : roman_numerals)\
    \ {\n        while (number >= rn.first) {\n            roman += rn.second;\n \
    \           number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  while (number\
    \ >= 1000) {\n    roman += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900)\
    \ {\n    roman += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n \
    \   roman += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    roman\
    \ += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    roman +=\
    \ \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\"\
    ;\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number\
    \ -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n\
    \  }\n  while (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n\
    \  if (number >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number\
    \ >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n\
    \    roman += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman\
    \ += \"i\";\n    number -= 1;\n  }\n  return roman;", "    std::string roman;\n\
    \    while (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n\
    \        number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ roman += \"i\";\n        number -= 1;\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman += thousands[number / 1000];\n    roman += hundreds[(number % 1000)\
    \ / 100];\n    roman += tens[(number % 100) / 10];\n    roman += ones[number %\
    \ 10];\n    return roman;", "    assert(number > 0 && number <= 1000);\n    std::string\
    \ roman;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n      \
    \  {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "  std::string roman;\n  std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int arabic_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++)\
    \ {\n    while (number >= arabic_numerals[i]) {\n      number -= arabic_numerals[i];\n\
    \      roman += roman_numerals[i];\n    }\n  }\n  return roman;", "    std::string\
    \ result = \"\";\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto pair : roman_numerals) {\n        while (number >= pair.first) {\n\
    \            result += pair.second;\n            number -= pair.first;\n     \
    \   }\n    }\n    return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "  assert(number > 0 && number\
    \ <= 1000);\n  std::string result;\n  std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n\
    \  for (auto roman_numeral : roman_numerals) {\n    while (number >= roman_numeral.first)\
    \ {\n      result += roman_numeral.second;\n      number -= roman_numeral.first;\n\
    \    }\n  }\n  return result;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n\
    \        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n      \
    \  {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"\
    x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n     \
    \   {1, \"i\"}\n    };\n    for (auto numeral : numerals) {\n        while (number\
    \ >= numeral.first) {\n            result += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::vector<std::pair<long, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto const&\
    \ roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string roman;\n  std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40,\
    \ \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1,\
    \ \"i\"}};\n  for (auto roman_numeral : roman_numerals) {\n    while (number >=\
    \ roman_numeral.first) {\n      roman += roman_numeral.second;\n      number -=\
    \ roman_numeral.first;\n    }\n  }\n  return roman;", "  std::string result;\n\
    \  std::vector<std::pair<long, std::string>> roman_numerals = {\n      {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n      {90,\
    \ \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9, \"ix\"},\n      {5,\
    \ \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral : roman_numerals)\
    \ {\n    while (number >= roman_numeral.first) {\n      result += roman_numeral.second;\n\
    \      number -= roman_numeral.first;\n    }\n  }\n  return result;", "  std::string\
    \ roman;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int decimal_values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ i < 13; i++) {\n    while (number >= decimal_values[i]) {\n      number -= decimal_values[i];\n\
    \      roman += roman_numerals[i];\n    }\n  }\n  return roman;"]
stop_tokens:
- "\n}"
