name: HumanEval_123_get_odd_collatz
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return a sorted list that has the odd numbers in collatz sequence.\n// The\
  \ Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\
  // as follows: start with any positive integer n. Then each term is obtained from\
  \ the \n// previous term as follows: if the previous term is even, the next term\
  \ is one half of \n// the previous term. If the previous term is odd, the next term\
  \ is 3 times the previous\n// term plus 1. The conjecture is that no matter what\
  \ value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is\
  \ [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5)\
  \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
  \ numbers are only 1, and 5.\nstd::vector<long> get_odd_collatz(long n) {\n"
tests: "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14))\
  \ == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n\
  \    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12))\
  \ == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1))\
  \ == (std::vector<long>({(long)1})));\n}\n"
completions: []
stop_tokens:
- "\n}"
