language: cpp
name: HumanEval_9_rolling_max
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!window.empty() && numbers[i] >= numbers[window.back()])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \            if (window.front() == i - 2) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp0u2gbqyp: /tmp/tmp0u2gbqyp.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::vector<long>::iterator it = numbers.begin();\n    std::vector<long>::iterator\
    \ max_it = it;\n    for (; it != numbers.end(); ++it) {\n        if (*it > *max_it)\
    \ {\n            max_it = it;\n        }\n        result.push_back(*max_it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && numbers[i] >= numbers[window.back()])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[window.front()]);\n\
    \            if (window.front() == i - 3) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp69lljtp0: /tmp/tmp69lljtp0.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[q.front()]);\n        }\n        if (q.front()\
    \ == i - 2) {\n            q.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpje6o7c1c: /tmp/tmpje6o7c1c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= numbers.size() - 1) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \        }\n        if (max_queue.front() == i - numbers.size() + 1) {\n     \
    \       max_queue.pop_front();\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf3d4vybe: /tmp/tmpf3d4vybe.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && numbers[i] >= numbers[window.back()])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \        }\n        if (window.front() == i - 2) {\n            window.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5mwjjgw3: /tmp/tmp5mwjjgw3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ == 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu2n2vq8r: /tmp/tmpu2n2vq8r.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> queue;\n    for (auto number : numbers) {\n  \
    \      while (!queue.empty() && queue.back() < number) {\n            queue.pop_back();\n\
    \        }\n        queue.push_back(number);\n        result.push_back(queue.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::deque<long> max_queue;\n  for (auto number : numbers) {\n  \
    \  while (!max_queue.empty() && max_queue.back() < number) {\n      max_queue.pop_back();\n\
    \    }\n    max_queue.push_back(number);\n    result.push_back(max_queue.front());\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmporugrlha: /tmp/tmporugrlha.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto it = numbers.begin(); it\
    \ != numbers.end(); ++it) {\n        while (!stack.empty() && stack.top() < *it)\
    \ {\n            stack.pop();\n        }\n        stack.push(*it);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzgknrwnw: /tmp/tmpzgknrwnw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n   \
    \ result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        result.push_back(std::max(result[i - 1], numbers[i]));\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[i] >= numbers[deque.back()])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \            if (deque.front() == i - 2) {\n                deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpploasudg: /tmp/tmpploasudg.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        if (i >= 2) {\n            result.push_back(window.front());\n\
    \            if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpxnp0mg__: /tmp/tmpxnp0mg__.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_queue.empty() && max_queue.back()\
    \ < *it) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(*it);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<int> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp6rqj4c00: /tmp/tmp6rqj4c00.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp7xid0ui2: /tmp/tmp7xid0ui2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::vector<long>::iterator it;\n  for (it = numbers.begin(); it\
    \ != numbers.end(); ++it) {\n    result.push_back(*std::max_element(numbers.begin(),\
    \ it+1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> s;\n    for (auto it = numbers.begin(); it !=\
    \ numbers.end(); ++it) {\n        while (!s.empty() && s.top() < *it) {\n    \
    \        s.pop();\n        }\n        s.push(*it);\n        result.push_back(s.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpe_urmbcx: /tmp/tmpe_urmbcx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < *it) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(*it);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i - max_elements.front() >= 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4y_7wu72: /tmp/tmp4y_7wu72.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::deque<long> max_queue;\n  for (auto number : numbers) {\n  \
    \  while (!max_queue.empty() && max_queue.back() < number) {\n      max_queue.pop_back();\n\
    \    }\n    max_queue.push_back(number);\n    result.push_back(max_queue.front());\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (auto i = 0; i < numbers.size(); ++i)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[q.front()]);\n        }\n        if (q.front()\
    \ == i - 2) {\n            q.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo365hyed: /tmp/tmpo365hyed.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzfw6vtn4: /tmp/tmpzfw6vtn4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && numbers[i] >= numbers[window.back()])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \        }\n        if (window.front() == i - 2) {\n            window.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5mwjjgw3: /tmp/tmp5mwjjgw3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto it = numbers.begin(); it\
    \ != numbers.end(); ++it) {\n        while (!stack.empty() && stack.top() < *it)\
    \ {\n            stack.pop();\n        }\n        stack.push(*it);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzgknrwnw: /tmp/tmpzgknrwnw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmporugrlha: /tmp/tmporugrlha.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpdmmia_ic: /tmp/tmpdmmia_ic.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpqdfg9dnm: /tmp/tmpqdfg9dnm.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 3) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 3]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpxkv37sck: /tmp/tmpxkv37sck.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (auto number : numbers) {\n  \
    \      while (!deque.empty() && deque.back() < number) {\n            deque.pop_back();\n\
    \        }\n        deque.push_back(number);\n        result.push_back(deque.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (max_deque.empty()) {\n            max_deque.push_back(i);\n\
    \        } else {\n            while (!max_deque.empty() && numbers[max_deque.back()]\
    \ < numbers[i]) {\n                max_deque.pop_back();\n            }\n    \
    \        max_deque.push_back(i);\n        }\n        result.push_back(numbers[max_deque.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_queue.empty() && max_queue.back()\
    \ < *it) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(*it);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (auto number : numbers) {\n  \
    \      while (!deque.empty() && deque.back() < number) {\n            deque.pop_back();\n\
    \        }\n        deque.push_back(number);\n        result.push_back(deque.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::deque<long> max_queue;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i\
    \ >= 2) {\n      result.push_back(numbers[max_queue.front()]);\n      if (max_queue.front()\
    \ == i - 2) {\n        max_queue.pop_front();\n      }\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfr7fxptx: /tmp/tmpfr7fxptx.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        result.push_back(window.front());\n        if (window.front() == numbers[i\
    \ - 4]) {\n            window.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2bk2addg: /tmp/tmp2bk2addg.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_queue.empty() && max_queue.back()\
    \ < *it) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(*it);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[i] >= numbers[deque.back()])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \        }\n        if (deque.front() == i - 2) {\n            deque.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn3xlkgd1: /tmp/tmpn3xlkgd1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        if (max_elements.empty()) {\n            max_elements.push_back(i);\n\
    \        } else {\n            while (!max_elements.empty() && numbers[max_elements.back()]\
    \ < numbers[i]) {\n                max_elements.pop_back();\n            }\n \
    \           max_elements.push_back(i);\n        }\n        result.push_back(numbers[max_elements.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpgdrailml: /tmp/tmpgdrailml.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmporugrlha: /tmp/tmporugrlha.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && max_elements.back() < numbers[i])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(numbers[i]);\n\
    \        result.push_back(max_elements.front());\n        if (max_elements.front()\
    \ == numbers[i - k + 1]) {\n            max_elements.pop_front();\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpahzt1dy9.cpp: In function \u2018std::vector<long int> rolling_max(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpahzt1dy9.cpp:14:49: error: \u2018k\u2019 was not declared\
    \ in this scope\n   14 |         if (max_elements.front() == numbers[i - k + 1])\
    \ {\n      |                                                 ^\n"
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp7xid0ui2: /tmp/tmp7xid0ui2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvp0uvhh: /tmp/tmpqvp0uvhh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_deque.front()]);\n\
    \            if (max_deque.front() == i - 2) {\n                max_deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp60n3736g: /tmp/tmp60n3736g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_queue.empty() && max_queue.back()\
    \ < *it) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(*it);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (max_queue.empty()) {\n            max_queue.push_back(i);\n\
    \        } else {\n            while (!max_queue.empty() && numbers[max_queue.back()]\
    \ < numbers[i]) {\n                max_queue.pop_back();\n            }\n    \
    \        max_queue.push_back(i);\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (size_t i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpm__opqb3: /tmp/tmpm__opqb3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[i] >= numbers[deque.back()])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \        }\n        if (deque.front() == i - 2) {\n            deque.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6dytzu7l: /tmp/tmp6dytzu7l.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ max_numbers;\n    long max_number = numbers[0];\n    max_numbers.push_back(max_number);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push_back(max_number);\n\
    \    }\n    return max_numbers;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1rstp0k1: /tmp/tmp1rstp0k1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> st;\n    for (auto it = numbers.begin(); it !=\
    \ numbers.end(); ++it) {\n        while (!st.empty() && st.top() < *it) {\n  \
    \          st.pop();\n        }\n        st.push(*it);\n        result.push_back(st.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfz3jkj5r: /tmp/tmpfz3jkj5r.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpmpx2uv90: /tmp/tmpmpx2uv90.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_deque.front()]);\n\
    \            if (max_deque.front() == i - 3) {\n                max_deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpwcmdrnpe: /tmp/tmpwcmdrnpe.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < *it) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(*it);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> max_stack;\n    for (auto number : numbers) {\n\
    \        while (!max_stack.empty() && max_stack.top() < number) {\n          \
    \  max_stack.pop();\n        }\n        max_stack.push(number);\n        result.push_back(max_stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqs3krgvd: /tmp/tmpqs3krgvd.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_values;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_values.empty() && numbers[i] >= numbers[max_values.back()])\
    \ {\n            max_values.pop_back();\n        }\n        max_values.push_back(i);\n\
    \        if (i - max_values.front() >= 3) {\n            max_values.pop_front();\n\
    \        }\n        result.push_back(numbers[max_values.front()]);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk_r25fxy: /tmp/tmpk_r25fxy.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 4) {\n            if (window.front() == numbers[i - 4]) {\n\
    \                window.pop_front();\n            }\n        }\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp3t9oc7z8: /tmp/tmp3t9oc7z8.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmps1616t04: /tmp/tmps1616t04.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp1moubc54: /tmp/tmp1moubc54.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[q.front()]);\n        }\n        if (q.front()\
    \ == i - 2) {\n            q.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7jjvhlah: /tmp/tmp7jjvhlah.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpndmc1nmh: /tmp/tmpndmc1nmh.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> queue;\n    for (auto it = numbers.begin(); it\
    \ != numbers.end(); ++it) {\n        while (!queue.empty() && queue.back() < *it)\
    \ {\n            queue.pop_back();\n        }\n        queue.push_back(*it);\n\
    \        result.push_back(queue.front());\n        if (queue.front() == *it) {\n\
    \            queue.pop_front();\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8r4p7vff: /tmp/tmp8r4p7vff.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpikmdjr3h: /tmp/tmpikmdjr3h.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            if (max_queue.front() == i - 3) {\n      \
    \          max_queue.pop_front();\n            }\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcayh6ez4: /tmp/tmpcayh6ez4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n\
    \            while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n      \
    \          dq.pop_back();\n            }\n            dq.push_back(i);\n     \
    \   }\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \            if (dq.front() == i - 2) {\n                dq.pop_front();\n   \
    \         }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpc0h20k_5: /tmp/tmpc0h20k_5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpgdrailml: /tmp/tmpgdrailml.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmpbes0evv7: /tmp/tmpbes0evv7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  status: Exception
  stderr: 'tmp01qc6vvs: /tmp/tmp01qc6vvs.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < *it) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(*it);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqj7taa14: /tmp/tmpqj7taa14.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmporugrlha: /tmp/tmporugrlha.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106513
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660106513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::deque<long> max_queue;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i\
    \ - max_queue.front() >= 3) {\n      max_queue.pop_front();\n    }\n    result.push_back(numbers[max_queue.front()]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr73z3ks8: /tmp/tmpr73z3ks8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660106514
